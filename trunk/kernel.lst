     1                                  [BITS 16]
     2                                      %include 'source/boot.asm'
     3                              <1>     ; MENU.ASM
     4                              <1> %include 'source/signature.asm'
     5                              <2> signature:
     6 00000000 536F6C6C65724F53    <2> db "SollerOS" ;Operating system name
     7 00000008 20416C706861204275- <2> db " Alpha Build ",0	;Soller OS development level
     8 00000011 696C642000          <2>
     9 00000016 CB000000            <2> dd 203	;version number
    10                              <2> signatureend:
    11                              <1> menustart:	
    12 0000001A 8CC8                <1> 	mov ax, cs
    13 0000001C 8ED8                <1> 	mov ds, ax
    14 0000001E 8EC0                <1> 	mov es, ax
    15 00000020 8ED0                <1> 	mov ss, ax
    16 00000022 880E[5401]          <1> 	mov [DriveNumber], cl
    17 00000026 668916[5501]        <1> 	mov [lbaad], edx
    18 0000002B E80501              <1> 	call guiload2	;make users switch using a command-this leads to very fast boots
    19 0000002E E8C901              <1> 	call getmemorysize ;get the memory map after the video is initialized
    20 00000031 6631DB              <1> 	xor ebx, ebx
    21 00000034 6631C9              <1> 	xor ecx, ecx
    22 00000037 6631D2              <1> 	xor edx, edx
    23 0000003A 6631F6              <1> 	xor esi, esi
    24 0000003D 6631FF              <1> 	xor edi, edi
    25 00000040 E94704              <1> 	jmp pmode
    26                              <1> guiswitch:
    27 00000043 B81200              <1> 	mov ax, 12h
    28 00000046 31DB                <1> 	xor bx, bx
    29 00000048 CD10                <1> 	int 10h
    30 0000004A E91600              <1> 	jmp guiloadagain
    31                              <1> guiload:
    32 0000004D BE[7204]            <1> 	mov si, bootmsg
    33 00000050 E81A01              <1> 	call printrm
    34 00000053 31C0                <1> 	xor ax, ax
    35 00000055 CD16                <1> 	int 16h
    36 00000057 3C79                <1> 	cmp al, "y"
    37 00000059 0F85D600            <1> 	jne near guiload2
    38 0000005D BE[6078]            <1> 	mov si, crlf
    39 00000060 E80A01              <1> 	call printrm
    40                              <1> guiloadagain:
    41 00000063 B8004F              <1> 	mov ax, 04F00h
    42 00000066 BF[9688]            <1> 	mov di, VBEMODEBLOCK
    43 00000069 CD10                <1> 	int 10h
    44 0000006B BE[B888]            <1> 	mov si, reserved
    45 0000006E 81EE0200            <1> 	sub si, 2
    46                              <1> findvideomodes:
    47 00000072 81C60200            <1> 	add si, 2
    48 00000076 8B0C                <1> 	mov cx, [si]
    49 00000078 81F9FFFF            <1> 	cmp cx, 0xFFFF
    50 0000007C 0F840A00            <1> 	je near nextvmode
    51 00000080 81FE[9689]          <1> 	cmp si, oemdata
    52 00000084 0F83AB00            <1> 	jae near guiload2	;;kill if no valid list is found
    53 00000088 EBE8                <1> 	jmp findvideomodes 	
    54                              <1> ;;debug,shows vmodes available
    55                              <1> nextvmode:
    56 0000008A 81EE0200            <1> 	sub si, 2
    57 0000008E 81FE[B888]          <1> 	cmp si, reserved
    58 00000092 0F82CDFF            <1> 	jb near guiloadagain
    59 00000096 8B0C                <1> 	mov cx, [si]
    60 00000098 81F9FFFF            <1> 	cmp cx, 0xFFFF
    61 0000009C 0F84EAFF            <1> 	je near nextvmode
    62 000000A0 81C10040            <1> 	add cx, 0x4000 		;;Linear Frame Buffer
    63 000000A4 B8014F              <1> 	mov ax, 04F01h
    64 000000A7 BF[968A]            <1> 	mov di, VBEMODEINFOBLOCK
    65 000000AA 890E[5901]          <1> 	mov [vesamode], cx
    66 000000AE CD10                <1> 	int 10h
    67 000000B0 A0[AF8A]            <1> 	mov al, [bitsperpixel]
    68 000000B3 3C10                <1> 	cmp al, 16
    69 000000B5 75D3                <1> 	jne nextvmode
    70 000000B7 8936[5B01]          <1> 	mov [videomodecache], si
    71 000000BB 84E4                <1> 	test ah, ah
    72 000000BD 0F842200            <1> 	jz near setvesamode
    73 000000C1 EBC7                <1> 	jmp nextvmode
    74 000000C3 0A0D49732074686973- <1> isthisvideook db 10,13,"Is this video mode OK?(y/n)",13,10,0
    75 000000CC 20766964656F206D6F- <1>
    76 000000D5 6465204F4B3F28792F- <1>
    77 000000DE 6E290D0A00          <1>
    78                              <1> setvesamode:
    79 000000E3 8B0E[A88A]          <1> 	mov cx, [resolutionx]
    80 000000E7 E89B00              <1> 	call decshow
    81 000000EA B078                <1> 	mov al, "x"
    82 000000EC E80301              <1> 	call char
    83 000000EF 8B0E[AA8A]          <1> 	mov cx, [resolutiony]
    84 000000F3 E88F00              <1> 	call decshow
    85 000000F6 B040                <1> 	mov al, "@"
    86 000000F8 E8F700              <1> 	call char
    87 000000FB 8A0E[AF8A]          <1> 	mov cl, [bitsperpixel]
    88 000000FF E88300              <1> 	call decshow
    89 00000102 BE[C300]            <1> 	mov si, isthisvideook
    90 00000105 E86500              <1> 	call printrm
    91 00000108 31C0                <1> 	xor ax, ax
    92 0000010A CD16                <1> 	int 16h
    93 0000010C 8B36[5B01]          <1> 	mov si, [videomodecache]
    94 00000110 3C79                <1> 	cmp al, "y"
    95 00000112 0F8574FF            <1> 	jne near nextvmode
    96 00000116 8B16[A88A]          <1> 	mov dx, [resolutionx]
    97 0000011A 01D2                <1> 	add dx, dx
    98 0000011C 8916[968B]          <1> 	mov [resolutionx2], dx
    99 00000120 31D2                <1> 	xor dx, dx
   100 00000122 31C9                <1> 	xor cx, cx
   101 00000124 B8024F              <1> 	mov ax, 04F02h
   102 00000127 8B1E[5901]          <1> 	mov bx, [vesamode]
   103 0000012B CD10                <1> 	int 10h		;;enter VESA mode
   104 0000012D C606[988B]01        <1> 	mov byte [guion], 1
   105 00000132 C3                  <1> 	ret
   106                              <1> guiload2:
   107 00000133 B9E001              <1> 	mov cx, 480
   108 00000136 BA8002              <1> 	mov dx, 640
   109 00000139 8916[A88A]          <1> 	mov [resolutionx], dx
   110 0000013D 01D2                <1> 	add dx, dx
   111 0000013F 8916[968B]          <1> 	mov [resolutionx2], dx
   112 00000143 890E[AA8A]          <1> 	mov [resolutiony], cx
   113 00000147 B81200              <1> 	mov ax, 12h
   114 0000014A 31DB                <1> 	xor bx, bx
   115 0000014C CD10                <1> 	int 10h
   116 0000014E C606[988B]00        <1> 	mov byte [guion], 0
   117 00000153 C3                  <1> 	ret
   118                              <1> 
   119 00000154 00                  <1> DriveNumber db 0
   120 00000155 00000000            <1> lbaad dd 0
   121                              <1> 	
   122 00000159 0000                <1> vesamode dw 0
   123 0000015B 0000                <1> videomodecache dw 0
   124                              <1> 
   125                              <1> tests:
   126 0000015D BB0700              <1> 	mov bx, 7
   127 00000160 B40E                <1> 	mov ah, 0Eh
   128 00000162 FEC0                <1> 	inc al
   129 00000164 3C02                <1> 	cmp al, 2
   130 00000166 7501                <1> 	jne cnttest
   131 00000168 C3                  <1> 	ret
   132                              <1> cnttest:
   133 00000169 CD10                <1> 	int 10h
   134 0000016B EBF0                <1> 	jmp tests
   135                              <1> 
   136                              <1>     printrm:			; 'si' comes in with string address
   137 0000016D BB0700              <1> 	    mov bx,07		; write to display
   138 00000170 B40E                <1> 	    mov ah,0Eh		; screen function
   139 00000172 8A04                <1>     prs2:    mov al,[si]         ; get next character
   140 00000174 3C00                <1> 	    cmp al,0		; look for terminator 
   141 00000176 7405                <1>             je finpr2		; zero byte at end of string
   142 00000178 CD10                <1> 	    int 10h		; write character to screen.    
   143 0000017A 46                  <1>      	    inc si	     	; move to next character
   144 0000017B EBF5                <1> 	    jmp prs2		; loop
   145 0000017D C3                  <1>     finpr2: ret
   146                              <1> 
   147 0000017E 0000000000          <1> dcnm db 0,0,0,0,0
   148 00000183 0000                <1> dcnmend db 0,0
   149                              <1> 
   150                              <1> 
   151                              <1> decshow:
   152 00000185 BE[7E01]            <1> 	mov si, dcnm
   153                              <1> decclear:
   154 00000188 B030                <1> 	mov al, "0"
   155 0000018A 8804                <1> 	mov [si], al
   156 0000018C 46                  <1> 	inc si
   157 0000018D 81FE[8301]          <1> 	cmp si, dcnmend
   158 00000191 76F5                <1> 	jbe decclear
   159 00000193 4E                  <1> 	dec si
   160 00000194 E81500              <1> 	call convertrm
   161 00000197 BE[7E01]            <1> 	mov si, dcnm
   162                              <1> dectst:
   163 0000019A 8A04                <1> 	mov al, [si]
   164 0000019C 46                  <1> 	inc si
   165 0000019D 81FE[8301]          <1> 	cmp si, dcnmend
   166 000001A1 7704                <1> 	ja dectstend
   167 000001A3 3C30                <1> 	cmp al, "0"
   168 000001A5 76F3                <1> 	jbe dectst
   169                              <1> dectstend:
   170 000001A7 4E                  <1> 	dec si
   171 000001A8 E8C2FF              <1> 	call printrm
   172 000001AB C3                  <1> 	ret
   173                              <1> 	
   174                              <1> 	
   175                              <1> convertrm:
   176 000001AC 4E                  <1> 	dec si
   177 000001AD 89F3                <1> 	mov bx, si		;place to convert into must be in si, number to convert must be in cx
   178                              <1> cnvrtrm:
   179 000001AF 89DE                <1> 	mov si, bx
   180 000001B1 81EE0300            <1> 	sub si, 3
   181 000001B5 46                  <1> ten3rm:	inc si
   182 000001B6 81F9E803            <1> 	cmp cx, 1000
   183 000001BA 7208                <1> 	jb ten2rm
   184 000001BC 81E9E803            <1> 	sub cx, 1000
   185 000001C0 FE04                <1> 	inc byte [si]
   186 000001C2 EBEB                <1> 	jmp cnvrtrm
   187 000001C4 46                  <1> ten2rm:	inc si
   188 000001C5 81F96400            <1> 	cmp cx, 100
   189 000001C9 7208                <1> 	jb ten1rm
   190 000001CB 81E96400            <1> 	sub cx, 100
   191 000001CF FE04                <1> 	inc byte [si]
   192 000001D1 EBDC                <1> 	jmp cnvrtrm
   193 000001D3 46                  <1> ten1rm:	inc si
   194 000001D4 81F90A00            <1> 	cmp cx, 10
   195 000001D8 7208                <1> 	jb ten0rm
   196 000001DA 81E90A00            <1> 	sub cx, 10
   197 000001DE FE04                <1> 	inc byte [si]
   198 000001E0 EBCD                <1> 	jmp cnvrtrm
   199 000001E2 46                  <1> ten0rm:	inc si
   200 000001E3 81F90100            <1> 	cmp cx, 1
   201 000001E7 7208                <1> 	jb tendnrm
   202 000001E9 81E90100            <1> 	sub cx, 1
   203 000001ED FE04                <1> 	inc byte [si]
   204 000001EF EBBE                <1> 	jmp cnvrtrm
   205                              <1> tendnrm:
   206 000001F1 C3                  <1> 	ret
   207                              <1> 
   208                              <1>     char: 		    ;char must be in al
   209 000001F2 BB0700              <1>        mov bx, 07
   210 000001F5 B40E                <1> 	   mov ah, 0Eh
   211 000001F7 CD10                <1> 	   int 10h
   212 000001F9 C3                  <1> 	   ret
   213                              <1> 
   214                              <1> 
   215                              <1> getmemorysize:
   216 000001FA BF[3002]            <1> 	mov di, memlistbuf
   217 000001FD 6631DB              <1> 	xor ebx, ebx
   218                              <1> getmemsizeloop:
   219 00000200 66B820E80000        <1> 	mov eax, 0xE820
   220 00000206 66BA50414D53        <1> 	mov edx, 0x0534D4150
   221 0000020C 66B918000000        <1> 	mov ecx, 24
   222 00000212 CD15                <1> 	int 0x15
   223 00000214 81C71800            <1> 	add di, 24
   224 00000218 81FF[7004]          <1> 	cmp di, memlistend
   225 0000021C 7309                <1> 	jae nomoregetmemsize
   226 0000021E 6681FB00000000      <1> 	cmp ebx, 0
   227 00000225 75D9                <1> 	jne getmemsizeloop
   228                              <1> nomoregetmemsize:
   229 00000227 81EF[3002]          <1> 	sub di, memlistbuf
   230 0000022B 893E[7004]          <1> 	mov [memlistend], di
   231 0000022F C3                  <1> 	ret
   232                              <1> 	
   233                              <1> 
   234                              <1> memlistbuf:
   235 00000230 00<rept>            <1> 	times 576 db 0
   236 00000470 0000                <1> memlistend: dw 0
   237                              <1> 	
   238 00000472 426F6F7420696E746F- <1> bootmsg:	db "Boot into the GUI?(y/n)",0
   239 0000047B 20746865204755493F- <1>
   240 00000484 28792F6E2900        <1>
   241                                      %include 'source/pmode.asm'
   242                              <1> [BITS 16]
   243                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   244                              <1> ;	16-bit real mode
   245                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   246                              <1> 
   247                              <1> pmode:
   248 0000048A BA9200              <1> 	mov dx, 0x92
   249 0000048D EC                  <1> 	in al, dx	;;A20
   250 0000048E 0C02                <1> 	or al, 2
   251 00000490 EE                  <1> 	out dx, al
   252 00000491 6631DB              <1> 	xor ebx, ebx
   253 00000494 8CCB                <1> 	mov bx,cs		; EBX=segment
   254 00000496 66C1E304            <1> 	shl ebx,4		;	<< 4
   255 0000049A 67668D03            <1> 	lea eax,[ebx]		; EAX=linear address of segment base
   256 0000049E A3[8507]            <1> 	mov [gdt2 + 2],ax
   257 000004A1 A3[8D07]            <1> 	mov [gdt3 + 2],ax
   258 000004A4 66C1E810            <1> 	shr eax,16
   259 000004A8 A2[8707]            <1> 	mov [gdt2 + 4],al
   260 000004AB A2[8F07]            <1> 	mov [gdt3 + 4],al
   261 000004AE 8826[8A07]          <1> 	mov [gdt2 + 7],ah
   262 000004B2 8826[9207]          <1> 	mov [gdt3 + 7],ah
   263                              <1> 	
   264 000004B6 66A1[2306]          <1> 	mov eax, [newcodecache]
   265 000004BA A3[9507]            <1> 	mov [gdt4 + 2],ax
   266 000004BD A3[9D07]            <1> 	mov [gdt5 + 2],ax
   267 000004C0 A3[A507]            <1> 	mov [gdtv8086 + 2], ax
   268 000004C3 A3[AD07]            <1> 	mov [gdtv80862 + 2], ax
   269 000004C6 66C1E810            <1> 	shr eax,16
   270 000004CA A2[9707]            <1> 	mov [gdt4 + 4],al
   271 000004CD A2[9F07]            <1> 	mov [gdt5 + 4],al
   272 000004D0 A2[A707]            <1> 	mov [gdtv8086 + 4],al
   273 000004D3 A2[AF07]            <1> 	mov [gdtv80862 + 4],al
   274 000004D6 8826[9A07]          <1> 	mov [gdt4 + 7],ah
   275 000004DA 8826[A207]          <1> 	mov [gdt5 + 7],ah
   276 000004DE 8826[AA07]          <1> 	mov [gdtv8086 + 7],ah
   277 000004E2 8826[B207]          <1> 	mov [gdtv80862 + 7],ah
   278                              <1> 	
   279 000004E6 66B800004000        <1> 	mov eax, dosprogloc
   280 000004EC 660306[2306]        <1> 	add eax, [newcodecache]
   281 000004F1 A3[B507]            <1> 	mov [gdtdos + 2],ax
   282 000004F4 A3[BD07]            <1> 	mov [gdtdos2 + 2],ax
   283 000004F7 66C1E810            <1> 	shr eax,16
   284 000004FB A2[B707]            <1> 	mov [gdtdos + 4],al
   285 000004FE A2[BF07]            <1> 	mov [gdtdos2 + 4],al
   286 00000501 8826[BA07]          <1> 	mov [gdtdos + 7],ah
   287 00000505 8826[C207]          <1> 	mov [gdtdos2 + 7],ah
   288                              <1> 	
   289                              <1> ; fix up gdt and idt
   290 00000509 67668D83[73070000]  <1> 	lea eax,[ebx + gdt]	; EAX=linear address of gdt
   291 00000511 66A3[6907]          <1> 	mov [gdtr + 2],eax
   292 00000515 67668D83[C3070000]  <1> 	lea eax,[ebx + idt]	; EAX=linear address of idt
   293 0000051D 66A3[6F07]          <1> 	mov [idtr + 2],eax
   294 00000521 FA                  <1> 	cli
   295 00000522 0F0116[6707]        <1> 	lgdt [gdtr]
   296 00000527 0F011E[6D07]        <1> 	lidt [idtr]
   297 0000052C 6631DB              <1> 	xor ebx, ebx
   298 0000052F 8CDB                <1> 	mov bx, ds
   299 00000531 66891E[1F06]        <1> 	mov [basecache], ebx
   300 00000536 0F20C0              <1> 	mov eax,cr0
   301 00000539 0C01                <1> 	or al,1
   302 0000053B 0F22C0              <1> 	mov cr0,eax
   303 0000053E EA[4305]1000        <1> 	jmp SYS_CODE_SEL:do_pm
   304                              <1> [BITS 32]
   305                              <1> do_pm:
   306 00000543 31C0                <1> 	xor eax, eax
   307 00000545 66B81800            <1> 	mov ax, SYS_DATA_SEL
   308 00000549 8ED8                <1> 	mov ds,ax
   309 0000054B 8ED0                <1> 	mov ss,ax	;;can switch back to STACK_SEL later
   310 0000054D BC[FF9C0000]        <1> 	mov esp, stackend	;;can switch back to 4096 later
   311 00000552 8EC0                <1> 	mov es, ax
   312 00000554 8EE0                <1> 	mov fs, ax
   313 00000556 66B82800            <1> 	mov ax, NEW_DATA_SEL
   314 0000055A 8EE8                <1> 	mov gs, ax
   315                              <1> 	
   316                              <1> copykernel:
   317 0000055C 648B06              <1> 	mov eax, [fs:esi]
   318 0000055F 658906              <1> 	mov [gs:esi], eax
   319 00000562 81C604000000        <1> 	add esi, 4
   320 00000568 81FE[FF8C0000]      <1> 	cmp esi, bssstart
   321 0000056E 72EC                <1> 	jb copykernel
   322 00000570 EA[77050000]2000    <1> 	jmp NEW_CODE_SEL:done_copy
   323                              <1> 	
   324                              <1> done_copy:
   325 00000577 66B82800            <1> 	mov ax, NEW_DATA_SEL	;;these MUST be setup AFTER the kernel switches places!!!
   326 0000057B 8ED8                <1> 	mov ds, ax
   327 0000057D 8ED0                <1> 	mov ss, ax
   328 0000057F BC[FF9C0000]        <1> 	mov esp, stackend
   329 00000584 8EC0                <1> 	mov es, ax
   330 00000586 8EE0                <1> 	mov fs, ax
   331 00000588 66B81800            <1> 	mov ax, SYS_DATA_SEL
   332 0000058C 8EE8                <1> 	mov gs, ax
   333                              <1> 	
   334 0000058E E86A500000          <1> 	call initialize	;initialize drivers
   335                              <1> 	
   336 00000593 A1[23060000]        <1> 	mov eax, [newcodecache]
   337 00000598 C1E804              <1> 	shr eax, 4
   338 0000059B A3[1F060000]        <1> 	mov [basecache], eax
   339                              <1> 	
   340 000005A0 89C3                <1> 	mov ebx, eax
   341 000005A2 C1E304              <1> 	shl ebx, 4
   342 000005A5 8B3D[BE8A0000]      <1> 	mov edi, [physbaseptr]
   343 000005AB 29DF                <1> 	sub edi, ebx
   344 000005AD 893D[BE8A0000]      <1> 	mov [physbaseptr], edi
   345                              <1> 	
   346 000005B3 BE[FF8C0000]        <1> 	mov esi, bssstart
   347 000005B8 31C0                <1> 	xor eax, eax
   348                              <1> clearkernelbuffers:
   349 000005BA 8906                <1> 	mov [esi], eax
   350 000005BC 81C604000000        <1> 	add esi, 4
   351 000005C2 81FE[35BF2100]      <1> 	cmp esi, bssend
   352 000005C8 72F0                <1> 	jb clearkernelbuffers
   353 000005CA FB                  <1> 	sti
   354                              <1> 
   355                              <1> getmemoryspace:
   356 000005CB BE[30020000]        <1> 	mov esi, memlistbuf
   357 000005D0 31FF                <1> 	xor edi, edi
   358 000005D2 668B3D[70040000]    <1> 	mov di, [memlistend]
   359 000005D9 01F7                <1> 	add edi, esi
   360 000005DB 31C0                <1> 	xor eax, eax
   361                              <1> memoryspaceaddition:
   362 000005DD 39FE                <1> 	cmp esi, edi
   363 000005DF 7322                <1> 	jae finishedmemspacecalc
   364 000005E1 81C608000000        <1> 	add esi, 8
   365 000005E7 8B0E                <1> 	mov ecx, [esi]
   366 000005E9 81C608000000        <1> 	add esi, 8
   367 000005EF 8B1E                <1> 	mov ebx, [esi]
   368 000005F1 81C608000000        <1> 	add esi, 8
   369 000005F7 81FB01000000        <1> 	cmp ebx, 1
   370 000005FD 75DE                <1> 	jne memoryspaceaddition
   371 000005FF 01C8                <1> 	add eax, ecx
   372 00000601 EBDA                <1> 	jmp memoryspaceaddition
   373                              <1> finishedmemspacecalc:
   374 00000603 A3[2C060000]        <1> 	mov [memoryspace], eax
   375                              <1> 	
   376 00000608 803D[988B0000]00    <1> 	cmp byte [guion], 0
   377 0000060F 0F8505000000        <1> 	jne near guistartup
   378 00000615 E93B260000          <1> 	jmp os
   379                              <1> guistartup:	;this prevents weird issues
   380 0000061A E9A0500000          <1> 	jmp gui
   381                              <1> 	
   382 0000061F 00000000            <1> basecache dd 0
   383 00000623 00001000            <1> newcodecache dd 0x100000
   384                              <1> 
   385 00000627 00                  <1> testingcpuspeed db 0
   386 00000628 00000000            <1> cpuspeedperint dd 0
   387 0000062C 00000000            <1> memoryspace dd 0
   388 00000630 7D0A                <1> pitdiv dw 2685
   389 00000632 00000000            <1> timeseconds dd 0
   390 00000636 00000000            <1> timenanoseconds dd 0
   391 0000063A 2E562200            <1> timeinterval dd 2250286;4500572
   392 0000063E 00                  <1> soundon db 0
   393 0000063F 0000                <1> soundrepititions dw 0
   394 00000641 00000000            <1> soundpos dd 0
   395 00000645 00000000            <1> soundendpos dd 0
   396 00000649 0000                <1> WAVSamplingRate dw 0
   397 0000064B 00000000            <1> WAVFileSize         dd 0
   398 0000064F 00                  <1> EnableDigitized     db 0
   399                              <1> 
   400                              <1> cpuspeedend:
   401 00000650 C605[27060000]00    <1> 	mov byte [testingcpuspeed], 0
   402 00000657 A3[28060000]        <1> 	mov [cpuspeedperint], eax
   403 0000065C B8[A2460000]        <1> 	mov eax, cpuspeedloopend
   404 00000661 890424              <1> 	mov [esp], eax
   405 00000664 E9F7000000          <1> 	jmp handled
   406                              <1> 
   407                              <1> ;if using the rtc, the default frequency yeilds a period of 976562.5ns
   408                              <1> ;if using the pit, div=451 is 377981.0004, div=5370 is 4500572.00007ns
   409                              <1> ;div=55483 is 46500044.000006ns, div=2685 is 2250286.00004ns, div=902 is 755962.0008
   410                              <1> 
   411                              <1> pitinterrupt: ;this controls threading
   412 00000669 FA                  <1> 	cli
   413 0000066A 803D[27060000]01    <1> 	cmp byte [testingcpuspeed], 1	;check to see if the cpu speed test is running
   414 00000671 74DD                <1> 	je cpuspeedend
   415                              <1> 	
   416 00000673 803D[4F060000]01    <1> 	cmp byte [EnableDigitized], 1
   417 0000067A 0F84F3440000        <1> 	je near PCSpeakerPWM
   418                              <1> 	
   419 00000680 E8B4000000          <1> 	call timekeeper ;this updates the internal time
   420                              <1> 	
   421 00000685 803D[3E060000]01    <1> 	cmp byte [soundon], 1
   422 0000068C 0F84FA440000        <1> 	je near PCSpeakerRAW
   423                              <1> timerinterrupt:	;put this into the interrupt handler that controls threading
   424 00000692 803D[29720000]01    <1> 	cmp byte [threadson], 1
   425 00000699 0F841F710000        <1> 	je near threadswitch
   426                              <1> keyinterrupt:		;checks for escape, if pressed, it quits the program currently running
   427 0000069F 803D[29720000]00    <1> 	cmp byte [threadson], 0
   428 000006A6 0F84B4000000        <1> 	je near handled
   429 000006AC FA                  <1> 	cli
   430 000006AD 60                  <1> 	pusha
   431 000006AE E460                <1> 	in al, 60h
   432 000006B0 3C01                <1> 	cmp al, 1		;escape
   433 000006B2 7405                <1> 	je userint
   434 000006B4 E9A5000000          <1> 	jmp handled2
   435                              <1> userint:
   436                              <1> 	;UNMASK ALL INTS
   437 000006B9 30C0                <1> 	xor al, al
   438 000006BB E621                <1> 	out 0x21, al
   439 000006BD 30C0                <1> 	xor al, al
   440 000006BF E6A1                <1> 	out 0xA1, al
   441 000006C1 B020                <1> 	mov al, 0x20
   442 000006C3 E6A0                <1> 	out 0xA0, al
   443 000006C5 E620                <1> 	out 0x20, al
   444                              <1> 	;RESET PIT DIVISOR
   445 000006C7 66A1[30060000]      <1> 	mov ax, [pitdiv]
   446 000006CD E640                <1> 	out 0x40, al
   447 000006CF 66C1C008            <1> 	rol ax, 8
   448 000006D3 E640                <1> 	out 0x40, al
   449                              <1> 	;RESET PIC
   450 000006D5 B020                <1> 	mov al, 0x20
   451 000006D7 E620                <1> 	out 0x20, al
   452 000006D9 61                  <1> 	popa
   453 000006DA FB                  <1> 	sti
   454 000006DB E9A9260000          <1> 	jmp nwcmd
   455                              <1> 
   456                              <1> rtl8139.irq:
   457 000006E0 FA                  <1> 	cli
   458 000006E1 60                  <1> 	pusha
   459 000006E2 8B15[B84F0000]      <1> 	mov edx, [basenicaddr]
   460 000006E8 81C23E000000        <1> 	add edx, rtl8139.ISR
   461 000006EE 31C0                <1> 	xor eax, eax
   462 000006F0 66ED                <1> 	in ax, dx
   463 000006F2 89C1                <1> 	mov ecx, eax
   464 000006F4 E8A02B0000          <1> 	call showhex
   465 000006F9 BE[08070000]        <1> 	mov esi, rtl8139.irq.msg
   466 000006FE E8E11B0000          <1> 	call print
   467 00000703 E956000000          <1> 	jmp handled2
   468 00000708 0A5A4F4D4720544548- <1> .msg db 10,"ZOMG TEH RTL8139 REZPONDED",10,0
   469 00000711 2052544C3831333920- <1>
   470 0000071A 52455A504F4E444544- <1>
   471 00000723 0A00                <1>
   472                              <1> sblaster.irq:
   473 00000725 FA                  <1> 	cli
   474 00000726 60                  <1> 	pusha
   475 00000727 803D[FF4D0000]01    <1> 	cmp byte [SoundBlaster], 1
   476 0000072E 0F844C450000        <1> 	je near sblastercont
   477 00000734 E925000000          <1> 	jmp handled2
   478                              <1> 	
   479                              <1> timekeeper:
   480 00000739 50                  <1> 	push eax
   481 0000073A A1[36060000]        <1> 	mov eax, [timenanoseconds]
   482 0000073F 0305[3A060000]      <1> 	add eax, [timeinterval]
   483 00000745 3D00CA9A3B          <1> 	cmp eax, 1000000000
   484 0000074A 720B                <1> 	jb nonanosecondrollover
   485 0000074C FF05[32060000]      <1> 	inc dword [timeseconds]
   486 00000752 2D00CA9A3B          <1> 	sub eax, 1000000000
   487                              <1> nonanosecondrollover:
   488 00000757 A3[36060000]        <1> 	mov [timenanoseconds], eax
   489 0000075C 58                  <1> 	pop eax
   490 0000075D C3                  <1> 	ret
   491                              <1> 	
   492                              <1> handled2:
   493 0000075E 61                  <1> 	popa
   494                              <1> handled3:
   495 0000075F FB                  <1> 	sti
   496                              <1> handled:
   497 00000760 50                  <1> 	push eax
   498 00000761 B020                <1> 	mov al, 0x20
   499 00000763 E620                <1> 	out 0x20, al
   500 00000765 58                  <1> 	pop eax
   501 00000766 CF                  <1> 	iret
   502                              <1> [BITS 16]
   503                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   504                              <1> ;	16-bit limit/32-bit linear base address of GDT and IDT
   505                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   506 00000767 4F00                <1> gdtr:	dw gdt_end - gdt - 1	; GDT limit
   507 00000769 00000000            <1> 	dd 0    		; filled with linear, physical address of GDT
   508                              <1> 
   509 0000076D FF07                <1> idtr:	dw idt_end - idt - 1	; IDT limit
   510 0000076F 00000000            <1> 	dd 0			; filled with linear, physical address of IDT
   511                              <1> 
   512                              <1> 
   513 00000773 0000                <1> gdt:	dw 0			; limit 15:0
   514 00000775 0000                <1> 	dw 0			; base 15:0
   515 00000777 00                  <1> 	db 0			; base 23:16
   516 00000778 00                  <1> 	db 0			; type
   517 00000779 00                  <1> 	db 0			; limit 19:16, flags
   518 0000077A 00                  <1> 	db 0			; base 31:24
   519                              <1> ; linear data segment descriptor
   520                              <1> LINEAR_SEL	equ	$-gdt
   521 0000077B FFFF                <1> 	dw 0xFFFF		; limit 0xFFFFF
   522 0000077D 0000                <1> 	dw 0			; base for this one is always 0
   523 0000077F 00                  <1> 	db 0
   524 00000780 92                  <1> 	db 0x92			; present, ring 0, data, expand-up, writable
   525 00000781 CF                  <1> 	db 0xCF			; page-granular, 32-bit
   526 00000782 00                  <1> 	db 0
   527                              <1> ; code segment descriptor
   528                              <1> SYS_CODE_SEL	equ	$-gdt
   529 00000783 FFFF                <1> gdt2:	dw 0xFFFF
   530 00000785 0000                <1> 	dw 0			; (base gets set above)
   531 00000787 00                  <1> 	db 0
   532 00000788 9A                  <1> 	db 0x9A			; present, ring 0, code, non-conforming, readable
   533 00000789 CF                  <1> 	db 0xCF
   534 0000078A 00                  <1> 	db 0
   535                              <1> ; data segment descriptor
   536                              <1> SYS_DATA_SEL	equ	$-gdt
   537 0000078B FFFF                <1> gdt3:	dw 0xFFFF
   538 0000078D 0000                <1> 	dw 0			; (base gets set above)
   539 0000078F 00                  <1> 	db 0
   540 00000790 92                  <1> 	db 0x92			; present, ring 0, data, expand-up, writable
   541 00000791 CF                  <1> 	db 0xCF
   542 00000792 00                  <1> 	db 0
   543                              <1> NEW_CODE_SEL	equ	$-gdt
   544 00000793 FFFF                <1> gdt4:	dw 0xFFFF
   545 00000795 0000                <1> 	dw 0			; (base gets set above)
   546 00000797 00                  <1> 	db 0
   547 00000798 9A                  <1> 	db 0x9A			; present, ring 0, code, non-conforming, readable
   548 00000799 CF                  <1> 	db 0xCF
   549 0000079A 00                  <1> 	db 0
   550                              <1> ; data segment descriptor
   551                              <1> NEW_DATA_SEL	equ	$-gdt
   552 0000079B FFFF                <1> gdt5:	dw 0xFFFF
   553 0000079D 0000                <1> 	dw 0			; (base gets set above)
   554 0000079F 00                  <1> 	db 0
   555 000007A0 92                  <1> 	db 0x92			; present, ring 0, data, expand-up, writable
   556 000007A1 CF                  <1> 	db 0xCF
   557 000007A2 00                  <1> 	db 0
   558                              <1> V8086_CODE_SEL	equ $-gdt
   559 000007A3 FFFF                <1> gdtv8086: dw 0xFFFF
   560 000007A5 0000                <1> 	dw 0
   561 000007A7 00                  <1> 	db 0
   562 000007A8 9A                  <1> 	db 0x9A
   563 000007A9 8F                  <1> 	db 0x8F
   564 000007AA 00                  <1> 	db 0
   565                              <1> V8086_DATA_SEL	equ $-gdt
   566 000007AB FFFF                <1> gdtv80862: dw 0xFFFF
   567 000007AD 0000                <1> 	dw 0
   568 000007AF 00                  <1> 	db 0
   569 000007B0 92                  <1> 	db 0x92
   570 000007B1 8F                  <1> 	db 0x8F
   571 000007B2 00                  <1> 	db 0
   572                              <1> DOS_CODE_SEL	equ $-gdt	;this gives dos programs complete access to one megabyte at the beginning of memory
   573 000007B3 0001                <1> gdtdos:	dw 256	;give it 1 MB
   574 000007B5 0000                <1> 	dw 0
   575 000007B7 00                  <1> 	db 0
   576 000007B8 9A                  <1> 	db 0x9A
   577 000007B9 8F                  <1> 	db 0x8F ;16 bit
   578 000007BA 00                  <1> 	db 0
   579                              <1> DOS_DATA_SEL 	equ $-gdt
   580 000007BB 0001                <1> gdtdos2:	dw 256
   581 000007BD 0000                <1> 	dw 0
   582 000007BF 00                  <1> 	db 0
   583 000007C0 92                  <1> 	db 0x92
   584 000007C1 8F                  <1> 	db 0x8F ;16 bit
   585 000007C2 00                  <1> 	db 0
   586                              <1> gdt_end:
   587                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   588                              <1> ;	interrupt descriptor table (IDT)
   589                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   590                              <1> ; 32 reserved interrupts:
   591                              <1> idt:	
   592                              <1> %assign i 0
   593                              <1> %rep    32
   594                              <1> 		dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   595                              <1> %assign i i+1
   596                              <1> %endrep
   597 000007C3 [CB10]2000008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   598                              <2> %assign i i+1
   599 000007CB [D810]2000008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   600                              <2> %assign i i+1
   601 000007D3 [E510]2000008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   602                              <2> %assign i i+1
   603 000007DB [F210]2000008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   604                              <2> %assign i i+1
   605 000007E3 [FF10]2000008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   606                              <2> %assign i i+1
   607 000007EB [0C11]2000008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   608                              <2> %assign i i+1
   609 000007F3 [1911]2000008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   610                              <2> %assign i i+1
   611 000007FB [2611]2000008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   612                              <2> %assign i i+1
   613 00000803 [3311]2000008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   614                              <2> %assign i i+1
   615 0000080B [4011]2000008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   616                              <2> %assign i i+1
   617 00000813 [4D11]2000008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   618                              <2> %assign i i+1
   619 0000081B [5A11]2000008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   620                              <2> %assign i i+1
   621 00000823 [6711]2000008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   622                              <2> %assign i i+1
   623 0000082B [7411]2000008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   624                              <2> %assign i i+1
   625 00000833 [8111]2000008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   626                              <2> %assign i i+1
   627 0000083B [8E11]2000008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   628                              <2> %assign i i+1
   629 00000843 [9B11]2000008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   630                              <2> %assign i i+1
   631 0000084B [A811]2000008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   632                              <2> %assign i i+1
   633 00000853 [B511]2000008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   634                              <2> %assign i i+1
   635 0000085B [C211]2000008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   636                              <2> %assign i i+1
   637 00000863 [CF11]2000008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   638                              <2> %assign i i+1
   639 0000086B [DC11]2000008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   640                              <2> %assign i i+1
   641 00000873 [E911]2000008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   642                              <2> %assign i i+1
   643 0000087B [F611]2000008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   644                              <2> %assign i i+1
   645 00000883 [0312]2000008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   646                              <2> %assign i i+1
   647 0000088B [1012]2000008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   648                              <2> %assign i i+1
   649 00000893 [1D12]2000008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   650                              <2> %assign i i+1
   651 0000089B [2A12]2000008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   652                              <2> %assign i i+1
   653 000008A3 [3712]2000008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   654                              <2> %assign i i+1
   655 000008AB [4412]2000008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   656                              <2> %assign i i+1
   657 000008B3 [5112]2000008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   658                              <2> %assign i i+1
   659 000008BB [5E12]2000008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   660                              <2> %assign i i+1
   661 000008C3 [2D2B]2000008E0000  <1> 		dw int20h,NEW_CODE_SEL,0x8E00,0
   662 000008CB [312B]2000008E0000  <1> 		dw int21h,NEW_CODE_SEL,0x8E00,0
   663                              <1> %assign i 0x22
   664                              <1> %rep 14
   665                              <1> 		dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   666                              <1> %assign i +1
   667                              <1> %endrep
   668 000008D3 [8512]2000008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   669                              <2> %assign i +1
   670 000008DB [D810]2000008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   671                              <2> %assign i +1
   672 000008E3 [D810]2000008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   673                              <2> %assign i +1
   674 000008EB [D810]2000008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   675                              <2> %assign i +1
   676 000008F3 [D810]2000008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   677                              <2> %assign i +1
   678 000008FB [D810]2000008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   679                              <2> %assign i +1
   680 00000903 [D810]2000008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   681                              <2> %assign i +1
   682 0000090B [D810]2000008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   683                              <2> %assign i +1
   684 00000913 [D810]2000008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   685                              <2> %assign i +1
   686 0000091B [D810]2000008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   687                              <2> %assign i +1
   688 00000923 [D810]2000008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   689                              <2> %assign i +1
   690 0000092B [D810]2000008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   691                              <2> %assign i +1
   692 00000933 [D810]2000008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   693                              <2> %assign i +1
   694 0000093B [D810]2000008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   695                              <2> %assign i +1
   696                              <1> ;INT 30h for os use and 3rd party use:
   697 00000943 [D321]2000008E0000  <1> 		dw newints,NEW_CODE_SEL,0x8E00,0
   698                              <1> %assign i 0x31
   699                              <1> %rep 15
   700                              <1> 		dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   701                              <1> %assign i +1
   702                              <1> %endrep
   703 0000094B [4813]2000008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   704                              <2> %assign i +1
   705 00000953 [D810]2000008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   706                              <2> %assign i +1
   707 0000095B [D810]2000008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   708                              <2> %assign i +1
   709 00000963 [D810]2000008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   710                              <2> %assign i +1
   711 0000096B [D810]2000008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   712                              <2> %assign i +1
   713 00000973 [D810]2000008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   714                              <2> %assign i +1
   715 0000097B [D810]2000008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   716                              <2> %assign i +1
   717 00000983 [D810]2000008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   718                              <2> %assign i +1
   719 0000098B [D810]2000008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   720                              <2> %assign i +1
   721 00000993 [D810]2000008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   722                              <2> %assign i +1
   723 0000099B [D810]2000008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   724                              <2> %assign i +1
   725 000009A3 [D810]2000008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   726                              <2> %assign i +1
   727 000009AB [D810]2000008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   728                              <2> %assign i +1
   729 000009B3 [D810]2000008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   730                              <2> %assign i +1
   731 000009BB [D810]2000008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   732                              <2> %assign i +1
   733                              <1> ;and here we are at 0x40
   734                              <1> ;here are all the irq's
   735 000009C3 [6906]2000008E0000  <1> 		dw pitinterrupt,NEW_CODE_SEL,0x8E00,0 ;IRQ 0 = PIT
   736 000009CB [6007]2000008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 1 = keyboard
   737 000009D3 [6007]2000008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 2
   738 000009DB [6007]2000008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 3
   739 000009E3 [6007]2000008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 4
   740 000009EB [2507]2000008E0000  <1> 		dw sblaster.irq,NEW_CODE_SEL,0x8E00,0 ;IRQ 5 = default SoundBlaster
   741 000009F3 [6007]2000008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 6
   742 000009FB [6007]2000008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 7
   743 00000A03 [6007]2000008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 8 = RTC
   744 00000A0B [6007]2000008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 9
   745 00000A13 [6007]2000008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 10
   746 00000A1B [E006]2000008E0000  <1> 		dw rtl8139.irq,NEW_CODE_SEL,0x8E00,0 ;IRQ 11 = default RTL8139
   747 00000A23 [6007]2000008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 12
   748 00000A2B [6007]2000008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 13
   749 00000A33 [6007]2000008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 14
   750 00000A3B [6007]2000008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 15
   751                              <1> ;This brings me up to 0x50
   752                              <1> %assign i 0x50
   753                              <1> %rep 176
   754                              <1> 		dw handled, NEW_CODE_SEL,0x8E00,0
   755                              <1> 		;dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   756                              <1> %assign i +1
   757                              <1> %endrep
   758 00000A43 [6007]2000008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   759                              <2> 
   760                              <2> %assign i +1
   761 00000A4B [6007]2000008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   762                              <2> 
   763                              <2> %assign i +1
   764 00000A53 [6007]2000008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   765                              <2> 
   766                              <2> %assign i +1
   767 00000A5B [6007]2000008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   768                              <2> 
   769                              <2> %assign i +1
   770 00000A63 [6007]2000008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   771                              <2> 
   772                              <2> %assign i +1
   773 00000A6B [6007]2000008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   774                              <2> 
   775                              <2> %assign i +1
   776 00000A73 [6007]2000008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   777                              <2> 
   778                              <2> %assign i +1
   779 00000A7B [6007]2000008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   780                              <2> 
   781                              <2> %assign i +1
   782 00000A83 [6007]2000008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   783                              <2> 
   784                              <2> %assign i +1
   785 00000A8B [6007]2000008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   786                              <2> 
   787                              <2> %assign i +1
   788 00000A93 [6007]2000008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   789                              <2> 
   790                              <2> %assign i +1
   791 00000A9B [6007]2000008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   792                              <2> 
   793                              <2> %assign i +1
   794 00000AA3 [6007]2000008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   795                              <2> 
   796                              <2> %assign i +1
   797 00000AAB [6007]2000008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   798                              <2> 
   799                              <2> %assign i +1
   800 00000AB3 [6007]2000008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   801                              <2> 
   802                              <2> %assign i +1
   803 00000ABB [6007]2000008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   804                              <2> 
   805                              <2> %assign i +1
   806 00000AC3 [6007]2000008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   807                              <2> 
   808                              <2> %assign i +1
   809 00000ACB [6007]2000008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   810                              <2> 
   811                              <2> %assign i +1
   812 00000AD3 [6007]2000008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   813                              <2> 
   814                              <2> %assign i +1
   815 00000ADB [6007]2000008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   816                              <2> 
   817                              <2> %assign i +1
   818 00000AE3 [6007]2000008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   819                              <2> 
   820                              <2> %assign i +1
   821 00000AEB [6007]2000008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   822                              <2> 
   823                              <2> %assign i +1
   824 00000AF3 [6007]2000008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   825                              <2> 
   826                              <2> %assign i +1
   827 00000AFB [6007]2000008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   828                              <2> 
   829                              <2> %assign i +1
   830 00000B03 [6007]2000008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   831                              <2> 
   832                              <2> %assign i +1
   833 00000B0B [6007]2000008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   834                              <2> 
   835                              <2> %assign i +1
   836 00000B13 [6007]2000008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   837                              <2> 
   838                              <2> %assign i +1
   839 00000B1B [6007]2000008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   840                              <2> 
   841                              <2> %assign i +1
   842 00000B23 [6007]2000008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   843                              <2> 
   844                              <2> %assign i +1
   845 00000B2B [6007]2000008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   846                              <2> 
   847                              <2> %assign i +1
   848 00000B33 [6007]2000008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   849                              <2> 
   850                              <2> %assign i +1
   851 00000B3B [6007]2000008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   852                              <2> 
   853                              <2> %assign i +1
   854 00000B43 [6007]2000008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   855                              <2> 
   856                              <2> %assign i +1
   857 00000B4B [6007]2000008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   858                              <2> 
   859                              <2> %assign i +1
   860 00000B53 [6007]2000008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   861                              <2> 
   862                              <2> %assign i +1
   863 00000B5B [6007]2000008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   864                              <2> 
   865                              <2> %assign i +1
   866 00000B63 [6007]2000008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   867                              <2> 
   868                              <2> %assign i +1
   869 00000B6B [6007]2000008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   870                              <2> 
   871                              <2> %assign i +1
   872 00000B73 [6007]2000008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   873                              <2> 
   874                              <2> %assign i +1
   875 00000B7B [6007]2000008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   876                              <2> 
   877                              <2> %assign i +1
   878 00000B83 [6007]2000008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   879                              <2> 
   880                              <2> %assign i +1
   881 00000B8B [6007]2000008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   882                              <2> 
   883                              <2> %assign i +1
   884 00000B93 [6007]2000008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   885                              <2> 
   886                              <2> %assign i +1
   887 00000B9B [6007]2000008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   888                              <2> 
   889                              <2> %assign i +1
   890 00000BA3 [6007]2000008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   891                              <2> 
   892                              <2> %assign i +1
   893 00000BAB [6007]2000008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   894                              <2> 
   895                              <2> %assign i +1
   896 00000BB3 [6007]2000008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   897                              <2> 
   898                              <2> %assign i +1
   899 00000BBB [6007]2000008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   900                              <2> 
   901                              <2> %assign i +1
   902 00000BC3 [6007]2000008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   903                              <2> 
   904                              <2> %assign i +1
   905 00000BCB [6007]2000008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   906                              <2> 
   907                              <2> %assign i +1
   908 00000BD3 [6007]2000008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   909                              <2> 
   910                              <2> %assign i +1
   911 00000BDB [6007]2000008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   912                              <2> 
   913                              <2> %assign i +1
   914 00000BE3 [6007]2000008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   915                              <2> 
   916                              <2> %assign i +1
   917 00000BEB [6007]2000008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   918                              <2> 
   919                              <2> %assign i +1
   920 00000BF3 [6007]2000008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   921                              <2> 
   922                              <2> %assign i +1
   923 00000BFB [6007]2000008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   924                              <2> 
   925                              <2> %assign i +1
   926 00000C03 [6007]2000008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   927                              <2> 
   928                              <2> %assign i +1
   929 00000C0B [6007]2000008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   930                              <2> 
   931                              <2> %assign i +1
   932 00000C13 [6007]2000008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   933                              <2> 
   934                              <2> %assign i +1
   935 00000C1B [6007]2000008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   936                              <2> 
   937                              <2> %assign i +1
   938 00000C23 [6007]2000008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   939                              <2> 
   940                              <2> %assign i +1
   941 00000C2B [6007]2000008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   942                              <2> 
   943                              <2> %assign i +1
   944 00000C33 [6007]2000008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   945                              <2> 
   946                              <2> %assign i +1
   947 00000C3B [6007]2000008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   948                              <2> 
   949                              <2> %assign i +1
   950 00000C43 [6007]2000008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   951                              <2> 
   952                              <2> %assign i +1
   953 00000C4B [6007]2000008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   954                              <2> 
   955                              <2> %assign i +1
   956 00000C53 [6007]2000008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   957                              <2> 
   958                              <2> %assign i +1
   959 00000C5B [6007]2000008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   960                              <2> 
   961                              <2> %assign i +1
   962 00000C63 [6007]2000008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   963                              <2> 
   964                              <2> %assign i +1
   965 00000C6B [6007]2000008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   966                              <2> 
   967                              <2> %assign i +1
   968 00000C73 [6007]2000008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   969                              <2> 
   970                              <2> %assign i +1
   971 00000C7B [6007]2000008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   972                              <2> 
   973                              <2> %assign i +1
   974 00000C83 [6007]2000008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   975                              <2> 
   976                              <2> %assign i +1
   977 00000C8B [6007]2000008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   978                              <2> 
   979                              <2> %assign i +1
   980 00000C93 [6007]2000008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   981                              <2> 
   982                              <2> %assign i +1
   983 00000C9B [6007]2000008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   984                              <2> 
   985                              <2> %assign i +1
   986 00000CA3 [6007]2000008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   987                              <2> 
   988                              <2> %assign i +1
   989 00000CAB [6007]2000008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   990                              <2> 
   991                              <2> %assign i +1
   992 00000CB3 [6007]2000008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   993                              <2> 
   994                              <2> %assign i +1
   995 00000CBB [6007]2000008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   996                              <2> 
   997                              <2> %assign i +1
   998 00000CC3 [6007]2000008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   999                              <2> 
  1000                              <2> %assign i +1
  1001 00000CCB [6007]2000008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1002                              <2> 
  1003                              <2> %assign i +1
  1004 00000CD3 [6007]2000008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1005                              <2> 
  1006                              <2> %assign i +1
  1007 00000CDB [6007]2000008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1008                              <2> 
  1009                              <2> %assign i +1
  1010 00000CE3 [6007]2000008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1011                              <2> 
  1012                              <2> %assign i +1
  1013 00000CEB [6007]2000008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1014                              <2> 
  1015                              <2> %assign i +1
  1016 00000CF3 [6007]2000008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1017                              <2> 
  1018                              <2> %assign i +1
  1019 00000CFB [6007]2000008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1020                              <2> 
  1021                              <2> %assign i +1
  1022 00000D03 [6007]2000008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1023                              <2> 
  1024                              <2> %assign i +1
  1025 00000D0B [6007]2000008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1026                              <2> 
  1027                              <2> %assign i +1
  1028 00000D13 [6007]2000008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1029                              <2> 
  1030                              <2> %assign i +1
  1031 00000D1B [6007]2000008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1032                              <2> 
  1033                              <2> %assign i +1
  1034 00000D23 [6007]2000008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1035                              <2> 
  1036                              <2> %assign i +1
  1037 00000D2B [6007]2000008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1038                              <2> 
  1039                              <2> %assign i +1
  1040 00000D33 [6007]2000008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1041                              <2> 
  1042                              <2> %assign i +1
  1043 00000D3B [6007]2000008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1044                              <2> 
  1045                              <2> %assign i +1
  1046 00000D43 [6007]2000008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1047                              <2> 
  1048                              <2> %assign i +1
  1049 00000D4B [6007]2000008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1050                              <2> 
  1051                              <2> %assign i +1
  1052 00000D53 [6007]2000008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1053                              <2> 
  1054                              <2> %assign i +1
  1055 00000D5B [6007]2000008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1056                              <2> 
  1057                              <2> %assign i +1
  1058 00000D63 [6007]2000008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1059                              <2> 
  1060                              <2> %assign i +1
  1061 00000D6B [6007]2000008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1062                              <2> 
  1063                              <2> %assign i +1
  1064 00000D73 [6007]2000008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1065                              <2> 
  1066                              <2> %assign i +1
  1067 00000D7B [6007]2000008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1068                              <2> 
  1069                              <2> %assign i +1
  1070 00000D83 [6007]2000008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1071                              <2> 
  1072                              <2> %assign i +1
  1073 00000D8B [6007]2000008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1074                              <2> 
  1075                              <2> %assign i +1
  1076 00000D93 [6007]2000008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1077                              <2> 
  1078                              <2> %assign i +1
  1079 00000D9B [6007]2000008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1080                              <2> 
  1081                              <2> %assign i +1
  1082 00000DA3 [6007]2000008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1083                              <2> 
  1084                              <2> %assign i +1
  1085 00000DAB [6007]2000008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1086                              <2> 
  1087                              <2> %assign i +1
  1088 00000DB3 [6007]2000008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1089                              <2> 
  1090                              <2> %assign i +1
  1091 00000DBB [6007]2000008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1092                              <2> 
  1093                              <2> %assign i +1
  1094 00000DC3 [6007]2000008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1095                              <2> 
  1096                              <2> %assign i +1
  1097 00000DCB [6007]2000008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1098                              <2> 
  1099                              <2> %assign i +1
  1100 00000DD3 [6007]2000008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1101                              <2> 
  1102                              <2> %assign i +1
  1103 00000DDB [6007]2000008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1104                              <2> 
  1105                              <2> %assign i +1
  1106 00000DE3 [6007]2000008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1107                              <2> 
  1108                              <2> %assign i +1
  1109 00000DEB [6007]2000008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1110                              <2> 
  1111                              <2> %assign i +1
  1112 00000DF3 [6007]2000008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1113                              <2> 
  1114                              <2> %assign i +1
  1115 00000DFB [6007]2000008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1116                              <2> 
  1117                              <2> %assign i +1
  1118 00000E03 [6007]2000008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1119                              <2> 
  1120                              <2> %assign i +1
  1121 00000E0B [6007]2000008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1122                              <2> 
  1123                              <2> %assign i +1
  1124 00000E13 [6007]2000008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1125                              <2> 
  1126                              <2> %assign i +1
  1127 00000E1B [6007]2000008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1128                              <2> 
  1129                              <2> %assign i +1
  1130 00000E23 [6007]2000008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1131                              <2> 
  1132                              <2> %assign i +1
  1133 00000E2B [6007]2000008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1134                              <2> 
  1135                              <2> %assign i +1
  1136 00000E33 [6007]2000008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1137                              <2> 
  1138                              <2> %assign i +1
  1139 00000E3B [6007]2000008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1140                              <2> 
  1141                              <2> %assign i +1
  1142 00000E43 [6007]2000008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1143                              <2> 
  1144                              <2> %assign i +1
  1145 00000E4B [6007]2000008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1146                              <2> 
  1147                              <2> %assign i +1
  1148 00000E53 [6007]2000008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1149                              <2> 
  1150                              <2> %assign i +1
  1151 00000E5B [6007]2000008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1152                              <2> 
  1153                              <2> %assign i +1
  1154 00000E63 [6007]2000008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1155                              <2> 
  1156                              <2> %assign i +1
  1157 00000E6B [6007]2000008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1158                              <2> 
  1159                              <2> %assign i +1
  1160 00000E73 [6007]2000008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1161                              <2> 
  1162                              <2> %assign i +1
  1163 00000E7B [6007]2000008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1164                              <2> 
  1165                              <2> %assign i +1
  1166 00000E83 [6007]2000008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1167                              <2> 
  1168                              <2> %assign i +1
  1169 00000E8B [6007]2000008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1170                              <2> 
  1171                              <2> %assign i +1
  1172 00000E93 [6007]2000008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1173                              <2> 
  1174                              <2> %assign i +1
  1175 00000E9B [6007]2000008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1176                              <2> 
  1177                              <2> %assign i +1
  1178 00000EA3 [6007]2000008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1179                              <2> 
  1180                              <2> %assign i +1
  1181 00000EAB [6007]2000008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1182                              <2> 
  1183                              <2> %assign i +1
  1184 00000EB3 [6007]2000008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1185                              <2> 
  1186                              <2> %assign i +1
  1187 00000EBB [6007]2000008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1188                              <2> 
  1189                              <2> %assign i +1
  1190 00000EC3 [6007]2000008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1191                              <2> 
  1192                              <2> %assign i +1
  1193 00000ECB [6007]2000008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1194                              <2> 
  1195                              <2> %assign i +1
  1196 00000ED3 [6007]2000008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1197                              <2> 
  1198                              <2> %assign i +1
  1199 00000EDB [6007]2000008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1200                              <2> 
  1201                              <2> %assign i +1
  1202 00000EE3 [6007]2000008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1203                              <2> 
  1204                              <2> %assign i +1
  1205 00000EEB [6007]2000008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1206                              <2> 
  1207                              <2> %assign i +1
  1208 00000EF3 [6007]2000008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1209                              <2> 
  1210                              <2> %assign i +1
  1211 00000EFB [6007]2000008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1212                              <2> 
  1213                              <2> %assign i +1
  1214 00000F03 [6007]2000008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1215                              <2> 
  1216                              <2> %assign i +1
  1217 00000F0B [6007]2000008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1218                              <2> 
  1219                              <2> %assign i +1
  1220 00000F13 [6007]2000008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1221                              <2> 
  1222                              <2> %assign i +1
  1223 00000F1B [6007]2000008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1224                              <2> 
  1225                              <2> %assign i +1
  1226 00000F23 [6007]2000008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1227                              <2> 
  1228                              <2> %assign i +1
  1229 00000F2B [6007]2000008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1230                              <2> 
  1231                              <2> %assign i +1
  1232 00000F33 [6007]2000008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1233                              <2> 
  1234                              <2> %assign i +1
  1235 00000F3B [6007]2000008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1236                              <2> 
  1237                              <2> %assign i +1
  1238 00000F43 [6007]2000008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1239                              <2> 
  1240                              <2> %assign i +1
  1241 00000F4B [6007]2000008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1242                              <2> 
  1243                              <2> %assign i +1
  1244 00000F53 [6007]2000008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1245                              <2> 
  1246                              <2> %assign i +1
  1247 00000F5B [6007]2000008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1248                              <2> 
  1249                              <2> %assign i +1
  1250 00000F63 [6007]2000008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1251                              <2> 
  1252                              <2> %assign i +1
  1253 00000F6B [6007]2000008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1254                              <2> 
  1255                              <2> %assign i +1
  1256 00000F73 [6007]2000008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1257                              <2> 
  1258                              <2> %assign i +1
  1259 00000F7B [6007]2000008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1260                              <2> 
  1261                              <2> %assign i +1
  1262 00000F83 [6007]2000008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1263                              <2> 
  1264                              <2> %assign i +1
  1265 00000F8B [6007]2000008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1266                              <2> 
  1267                              <2> %assign i +1
  1268 00000F93 [6007]2000008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1269                              <2> 
  1270                              <2> %assign i +1
  1271 00000F9B [6007]2000008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1272                              <2> 
  1273                              <2> %assign i +1
  1274 00000FA3 [6007]2000008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1275                              <2> 
  1276                              <2> %assign i +1
  1277 00000FAB [6007]2000008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1278                              <2> 
  1279                              <2> %assign i +1
  1280 00000FB3 [6007]2000008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1281                              <2> 
  1282                              <2> %assign i +1
  1283 00000FBB [6007]2000008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1284                              <2> 
  1285                              <2> %assign i +1
  1286                              <1> idt_end:
  1287                              <1> [BITS 32]
  1288                                  	%include 'source/realmode.asm'
  1289                              <1> realmode:	;make sure the real mode program's address is in realmodeptr 
  1290                              <1> 			;and the return address is in realmodereturn
  1291 00000FC3 FA                  <1> 	cli
  1292 00000FC4 A3[BD100000]        <1> 	mov [realmodeeax], eax
  1293 00000FC9 891D[B9100000]      <1> 	mov [realmodeebx], ebx
  1294                              <1> 
  1295 00000FCF BB[B5100000]        <1> 	mov ebx, cr0old
  1296                              <1> rmcopytofirstmbyte:
  1297 00000FD4 8B03                <1> 	mov eax, [ebx]
  1298 00000FD6 658903              <1> 	mov [gs:ebx], eax
  1299 00000FD9 81C304000000        <1> 	add ebx, 4
  1300 00000FDF 81FB[C5100000]      <1> 	cmp ebx, realmodeptr
  1301 00000FE5 76ED                <1> 	jbe rmcopytofirstmbyte
  1302                              <1> 
  1303 00000FE7 EA[EE0F0000]3000    <1> 	jmp V8086_CODE_SEL:protected16bit
  1304                              <1> 
  1305                              <1> [BITS 16]
  1306                              <1> protected16bit:
  1307 00000FEE B83800              <1> 	mov ax, V8086_DATA_SEL
  1308 00000FF1 8ED8                <1> 	mov ds, ax
  1309 00000FF3 8EC0                <1> 	mov es, ax
  1310 00000FF5 8EE0                <1> 	mov fs, ax
  1311 00000FF7 8EE8                <1> 	mov gs, ax
  1312 00000FF9 8ED0                <1> 	mov ss, ax
  1313 00000FFB 0F20C0              <1> 	mov eax, cr0
  1314 00000FFE 66A3[B510]          <1> 	mov [cr0old], eax
  1315 00001002 6625FEFFFF7F        <1> 	and eax, 0x7FFFFFFE
  1316 00001008 0F22C0              <1> 	mov cr0, eax	;now in real mode
  1317 0000100B EA[1010]0010        <1> 	jmp 0x1000:inrealmode
  1318                              <1> 
  1319                              <1> inrealmode:
  1320 00001010 8CC8                <1> 	mov ax, cs
  1321 00001012 8ED8                <1> 	mov ds, ax
  1322 00001014 8EC0                <1> 	mov es, ax
  1323 00001016 8EE0                <1> 	mov fs, ax
  1324 00001018 8EE8                <1> 	mov gs, ax
  1325 0000101A 8ED0                <1> 	mov ss, ax
  1326                              <1> 	
  1327 0000101C B011                <1> 	mov al, 0x11
  1328 0000101E E620                <1> 	out 0x20, al
  1329 00001020 E6A0                <1> 	out 0xA0, al
  1330 00001022 B008                <1> 	mov al, 0x8		;interrupt for master
  1331 00001024 E621                <1> 	out 0x21, al
  1332 00001026 B070                <1> 	mov al, 0x70	;interrupt for slave
  1333 00001028 E6A1                <1> 	out 0xA1, al
  1334 0000102A B004                <1> 	mov al, 4
  1335 0000102C E621                <1> 	out 0x21, al
  1336 0000102E B002                <1> 	mov al, 2
  1337 00001030 E6A1                <1> 	out 0xA1, al
  1338 00001032 B001                <1> 	mov al, 0x1
  1339 00001034 E621                <1> 	out 0x21, al
  1340 00001036 B001                <1> 	mov al, 0x1
  1341 00001038 E6A1                <1> 	out 0xA1, al
  1342                              <1> 	
  1343 0000103A 0F011E[AF10]        <1> 	lidt [idt_real]
  1344 0000103F FB                  <1> 	sti
  1345                              <1> 
  1346 00001040 66A1[BD10]          <1> 	mov eax, [realmodeeax]
  1347 00001044 668B1E[B910]        <1> 	mov ebx, [realmodeebx]
  1348                              <1> 
  1349 00001049 FF16[C510]          <1> 	call word [realmodeptr] ;call the real mode program here
  1350                              <1> 
  1351 0000104D 66A3[BD10]          <1> 	mov [realmodeeax], eax
  1352 00001051 66891E[B910]        <1> 	mov [realmodeebx], ebx
  1353                              <1> 
  1354 00001056 FA                  <1> 	cli
  1355 00001057 0F0116[6707]        <1> 	lgdt [gdtr]
  1356 0000105C 0F011E[6D07]        <1> 	lidt [idtr]
  1357 00001061 0F20C0              <1> 	mov eax, cr0
  1358 00001064 0C01                <1> 	or al, 1
  1359 00001066 0F22C0              <1> 	mov cr0,eax
  1360 00001069 EA[6E10]2000        <1> 	jmp NEW_CODE_SEL:returntopmode
  1361                              <1> 
  1362                              <1> [BITS 32]
  1363                              <1> returntopmode:
  1364 0000106E 66B82800            <1> 	mov ax, NEW_DATA_SEL
  1365 00001072 8ED8                <1> 	mov ds, ax
  1366 00001074 8EC0                <1> 	mov es, ax
  1367 00001076 8EE0                <1> 	mov fs, ax
  1368 00001078 8ED0                <1> 	mov ss, ax
  1369 0000107A 66B81800            <1> 	mov ax, SYS_DATA_SEL
  1370 0000107E 8EE8                <1> 	mov gs, ax
  1371                              <1> 
  1372 00001080 BB[B5100000]        <1> 	mov ebx, cr0old
  1373                              <1> rmcopyfromfirstmbyte:
  1374 00001085 658B03              <1> 	mov eax, [gs:ebx]
  1375 00001088 8903                <1> 	mov [ebx], eax
  1376 0000108A 81C304000000        <1> 	add ebx, 4
  1377 00001090 81FB[C5100000]      <1> 	cmp ebx, realmodeptr
  1378 00001096 76ED                <1> 	jbe rmcopyfromfirstmbyte
  1379                              <1> 
  1380 00001098 E879450000          <1> 	call initialize.pic ;reset irq's and masks
  1381 0000109D FB                  <1> 	sti
  1382 0000109E A1[BD100000]        <1> 	mov eax, [realmodeeax]
  1383 000010A3 8B1D[B9100000]      <1> 	mov ebx, [realmodeebx]
  1384 000010A9 FF25[C1100000]      <1> 	jmp dword [realmodereturn]
  1385                              <1> 
  1386                              <1> idt_real:
  1387 000010AF FF03                <1> 	dw 0x3FF
  1388 000010B1 00000000            <1> 	dd 0
  1389 000010B5 00000000            <1> cr0old dd 0
  1390 000010B9 00000000            <1> realmodeebx dd 0
  1391 000010BD 00000000            <1> realmodeeax dd 0
  1392 000010C1 00000000            <1> realmodereturn dd 0
  1393 000010C5 0000                <1> realmodeptr dw 0
  1394 000010C7 00000000            <1> dd 0 ;make sure the copy thing doesnt overflow
  1395                                  [BITS 32]
  1396                                      %include 'source/exception.asm'
  1397                              <1> unhand:	
  1398                              <1> 	%assign i 0
  1399                              <1> 	%rep 0x50
  1400                              <1> 	cli
  1401                              <1> 	mov byte [intprob], i
  1402                              <1> 	jmp unhand2
  1403                              <1> 	%assign i i+1
  1404                              <1> 	%endrep
  1405 000010CB FA                  <2>  cli
  1406 000010CC C605[D4170000]00    <2>  mov byte [intprob], i
  1407 000010D3 E903040000          <2>  jmp unhand2
  1408                              <2>  %assign i i+1
  1409 000010D8 FA                  <2>  cli
  1410 000010D9 C605[D4170000]01    <2>  mov byte [intprob], i
  1411 000010E0 E9F6030000          <2>  jmp unhand2
  1412                              <2>  %assign i i+1
  1413 000010E5 FA                  <2>  cli
  1414 000010E6 C605[D4170000]02    <2>  mov byte [intprob], i
  1415 000010ED E9E9030000          <2>  jmp unhand2
  1416                              <2>  %assign i i+1
  1417 000010F2 FA                  <2>  cli
  1418 000010F3 C605[D4170000]03    <2>  mov byte [intprob], i
  1419 000010FA E9DC030000          <2>  jmp unhand2
  1420                              <2>  %assign i i+1
  1421 000010FF FA                  <2>  cli
  1422 00001100 C605[D4170000]04    <2>  mov byte [intprob], i
  1423 00001107 E9CF030000          <2>  jmp unhand2
  1424                              <2>  %assign i i+1
  1425 0000110C FA                  <2>  cli
  1426 0000110D C605[D4170000]05    <2>  mov byte [intprob], i
  1427 00001114 E9C2030000          <2>  jmp unhand2
  1428                              <2>  %assign i i+1
  1429 00001119 FA                  <2>  cli
  1430 0000111A C605[D4170000]06    <2>  mov byte [intprob], i
  1431 00001121 E9B5030000          <2>  jmp unhand2
  1432                              <2>  %assign i i+1
  1433 00001126 FA                  <2>  cli
  1434 00001127 C605[D4170000]07    <2>  mov byte [intprob], i
  1435 0000112E E9A8030000          <2>  jmp unhand2
  1436                              <2>  %assign i i+1
  1437 00001133 FA                  <2>  cli
  1438 00001134 C605[D4170000]08    <2>  mov byte [intprob], i
  1439 0000113B E99B030000          <2>  jmp unhand2
  1440                              <2>  %assign i i+1
  1441 00001140 FA                  <2>  cli
  1442 00001141 C605[D4170000]09    <2>  mov byte [intprob], i
  1443 00001148 E98E030000          <2>  jmp unhand2
  1444                              <2>  %assign i i+1
  1445 0000114D FA                  <2>  cli
  1446 0000114E C605[D4170000]0A    <2>  mov byte [intprob], i
  1447 00001155 E981030000          <2>  jmp unhand2
  1448                              <2>  %assign i i+1
  1449 0000115A FA                  <2>  cli
  1450 0000115B C605[D4170000]0B    <2>  mov byte [intprob], i
  1451 00001162 E974030000          <2>  jmp unhand2
  1452                              <2>  %assign i i+1
  1453 00001167 FA                  <2>  cli
  1454 00001168 C605[D4170000]0C    <2>  mov byte [intprob], i
  1455 0000116F E967030000          <2>  jmp unhand2
  1456                              <2>  %assign i i+1
  1457 00001174 FA                  <2>  cli
  1458 00001175 C605[D4170000]0D    <2>  mov byte [intprob], i
  1459 0000117C E95A030000          <2>  jmp unhand2
  1460                              <2>  %assign i i+1
  1461 00001181 FA                  <2>  cli
  1462 00001182 C605[D4170000]0E    <2>  mov byte [intprob], i
  1463 00001189 E94D030000          <2>  jmp unhand2
  1464                              <2>  %assign i i+1
  1465 0000118E FA                  <2>  cli
  1466 0000118F C605[D4170000]0F    <2>  mov byte [intprob], i
  1467 00001196 E940030000          <2>  jmp unhand2
  1468                              <2>  %assign i i+1
  1469 0000119B FA                  <2>  cli
  1470 0000119C C605[D4170000]10    <2>  mov byte [intprob], i
  1471 000011A3 E933030000          <2>  jmp unhand2
  1472                              <2>  %assign i i+1
  1473 000011A8 FA                  <2>  cli
  1474 000011A9 C605[D4170000]11    <2>  mov byte [intprob], i
  1475 000011B0 E926030000          <2>  jmp unhand2
  1476                              <2>  %assign i i+1
  1477 000011B5 FA                  <2>  cli
  1478 000011B6 C605[D4170000]12    <2>  mov byte [intprob], i
  1479 000011BD E919030000          <2>  jmp unhand2
  1480                              <2>  %assign i i+1
  1481 000011C2 FA                  <2>  cli
  1482 000011C3 C605[D4170000]13    <2>  mov byte [intprob], i
  1483 000011CA E90C030000          <2>  jmp unhand2
  1484                              <2>  %assign i i+1
  1485 000011CF FA                  <2>  cli
  1486 000011D0 C605[D4170000]14    <2>  mov byte [intprob], i
  1487 000011D7 E9FF020000          <2>  jmp unhand2
  1488                              <2>  %assign i i+1
  1489 000011DC FA                  <2>  cli
  1490 000011DD C605[D4170000]15    <2>  mov byte [intprob], i
  1491 000011E4 E9F2020000          <2>  jmp unhand2
  1492                              <2>  %assign i i+1
  1493 000011E9 FA                  <2>  cli
  1494 000011EA C605[D4170000]16    <2>  mov byte [intprob], i
  1495 000011F1 E9E5020000          <2>  jmp unhand2
  1496                              <2>  %assign i i+1
  1497 000011F6 FA                  <2>  cli
  1498 000011F7 C605[D4170000]17    <2>  mov byte [intprob], i
  1499 000011FE E9D8020000          <2>  jmp unhand2
  1500                              <2>  %assign i i+1
  1501 00001203 FA                  <2>  cli
  1502 00001204 C605[D4170000]18    <2>  mov byte [intprob], i
  1503 0000120B E9CB020000          <2>  jmp unhand2
  1504                              <2>  %assign i i+1
  1505 00001210 FA                  <2>  cli
  1506 00001211 C605[D4170000]19    <2>  mov byte [intprob], i
  1507 00001218 E9BE020000          <2>  jmp unhand2
  1508                              <2>  %assign i i+1
  1509 0000121D FA                  <2>  cli
  1510 0000121E C605[D4170000]1A    <2>  mov byte [intprob], i
  1511 00001225 E9B1020000          <2>  jmp unhand2
  1512                              <2>  %assign i i+1
  1513 0000122A FA                  <2>  cli
  1514 0000122B C605[D4170000]1B    <2>  mov byte [intprob], i
  1515 00001232 E9A4020000          <2>  jmp unhand2
  1516                              <2>  %assign i i+1
  1517 00001237 FA                  <2>  cli
  1518 00001238 C605[D4170000]1C    <2>  mov byte [intprob], i
  1519 0000123F E997020000          <2>  jmp unhand2
  1520                              <2>  %assign i i+1
  1521 00001244 FA                  <2>  cli
  1522 00001245 C605[D4170000]1D    <2>  mov byte [intprob], i
  1523 0000124C E98A020000          <2>  jmp unhand2
  1524                              <2>  %assign i i+1
  1525 00001251 FA                  <2>  cli
  1526 00001252 C605[D4170000]1E    <2>  mov byte [intprob], i
  1527 00001259 E97D020000          <2>  jmp unhand2
  1528                              <2>  %assign i i+1
  1529 0000125E FA                  <2>  cli
  1530 0000125F C605[D4170000]1F    <2>  mov byte [intprob], i
  1531 00001266 E970020000          <2>  jmp unhand2
  1532                              <2>  %assign i i+1
  1533 0000126B FA                  <2>  cli
  1534 0000126C C605[D4170000]20    <2>  mov byte [intprob], i
  1535 00001273 E963020000          <2>  jmp unhand2
  1536                              <2>  %assign i i+1
  1537 00001278 FA                  <2>  cli
  1538 00001279 C605[D4170000]21    <2>  mov byte [intprob], i
  1539 00001280 E956020000          <2>  jmp unhand2
  1540                              <2>  %assign i i+1
  1541 00001285 FA                  <2>  cli
  1542 00001286 C605[D4170000]22    <2>  mov byte [intprob], i
  1543 0000128D E949020000          <2>  jmp unhand2
  1544                              <2>  %assign i i+1
  1545 00001292 FA                  <2>  cli
  1546 00001293 C605[D4170000]23    <2>  mov byte [intprob], i
  1547 0000129A E93C020000          <2>  jmp unhand2
  1548                              <2>  %assign i i+1
  1549 0000129F FA                  <2>  cli
  1550 000012A0 C605[D4170000]24    <2>  mov byte [intprob], i
  1551 000012A7 E92F020000          <2>  jmp unhand2
  1552                              <2>  %assign i i+1
  1553 000012AC FA                  <2>  cli
  1554 000012AD C605[D4170000]25    <2>  mov byte [intprob], i
  1555 000012B4 E922020000          <2>  jmp unhand2
  1556                              <2>  %assign i i+1
  1557 000012B9 FA                  <2>  cli
  1558 000012BA C605[D4170000]26    <2>  mov byte [intprob], i
  1559 000012C1 E915020000          <2>  jmp unhand2
  1560                              <2>  %assign i i+1
  1561 000012C6 FA                  <2>  cli
  1562 000012C7 C605[D4170000]27    <2>  mov byte [intprob], i
  1563 000012CE E908020000          <2>  jmp unhand2
  1564                              <2>  %assign i i+1
  1565 000012D3 FA                  <2>  cli
  1566 000012D4 C605[D4170000]28    <2>  mov byte [intprob], i
  1567 000012DB E9FB010000          <2>  jmp unhand2
  1568                              <2>  %assign i i+1
  1569 000012E0 FA                  <2>  cli
  1570 000012E1 C605[D4170000]29    <2>  mov byte [intprob], i
  1571 000012E8 E9EE010000          <2>  jmp unhand2
  1572                              <2>  %assign i i+1
  1573 000012ED FA                  <2>  cli
  1574 000012EE C605[D4170000]2A    <2>  mov byte [intprob], i
  1575 000012F5 E9E1010000          <2>  jmp unhand2
  1576                              <2>  %assign i i+1
  1577 000012FA FA                  <2>  cli
  1578 000012FB C605[D4170000]2B    <2>  mov byte [intprob], i
  1579 00001302 E9D4010000          <2>  jmp unhand2
  1580                              <2>  %assign i i+1
  1581 00001307 FA                  <2>  cli
  1582 00001308 C605[D4170000]2C    <2>  mov byte [intprob], i
  1583 0000130F E9C7010000          <2>  jmp unhand2
  1584                              <2>  %assign i i+1
  1585 00001314 FA                  <2>  cli
  1586 00001315 C605[D4170000]2D    <2>  mov byte [intprob], i
  1587 0000131C E9BA010000          <2>  jmp unhand2
  1588                              <2>  %assign i i+1
  1589 00001321 FA                  <2>  cli
  1590 00001322 C605[D4170000]2E    <2>  mov byte [intprob], i
  1591 00001329 E9AD010000          <2>  jmp unhand2
  1592                              <2>  %assign i i+1
  1593 0000132E FA                  <2>  cli
  1594 0000132F C605[D4170000]2F    <2>  mov byte [intprob], i
  1595 00001336 E9A0010000          <2>  jmp unhand2
  1596                              <2>  %assign i i+1
  1597 0000133B FA                  <2>  cli
  1598 0000133C C605[D4170000]30    <2>  mov byte [intprob], i
  1599 00001343 E993010000          <2>  jmp unhand2
  1600                              <2>  %assign i i+1
  1601 00001348 FA                  <2>  cli
  1602 00001349 C605[D4170000]31    <2>  mov byte [intprob], i
  1603 00001350 E986010000          <2>  jmp unhand2
  1604                              <2>  %assign i i+1
  1605 00001355 FA                  <2>  cli
  1606 00001356 C605[D4170000]32    <2>  mov byte [intprob], i
  1607 0000135D E979010000          <2>  jmp unhand2
  1608                              <2>  %assign i i+1
  1609 00001362 FA                  <2>  cli
  1610 00001363 C605[D4170000]33    <2>  mov byte [intprob], i
  1611 0000136A E96C010000          <2>  jmp unhand2
  1612                              <2>  %assign i i+1
  1613 0000136F FA                  <2>  cli
  1614 00001370 C605[D4170000]34    <2>  mov byte [intprob], i
  1615 00001377 E95F010000          <2>  jmp unhand2
  1616                              <2>  %assign i i+1
  1617 0000137C FA                  <2>  cli
  1618 0000137D C605[D4170000]35    <2>  mov byte [intprob], i
  1619 00001384 E952010000          <2>  jmp unhand2
  1620                              <2>  %assign i i+1
  1621 00001389 FA                  <2>  cli
  1622 0000138A C605[D4170000]36    <2>  mov byte [intprob], i
  1623 00001391 E945010000          <2>  jmp unhand2
  1624                              <2>  %assign i i+1
  1625 00001396 FA                  <2>  cli
  1626 00001397 C605[D4170000]37    <2>  mov byte [intprob], i
  1627 0000139E E938010000          <2>  jmp unhand2
  1628                              <2>  %assign i i+1
  1629 000013A3 FA                  <2>  cli
  1630 000013A4 C605[D4170000]38    <2>  mov byte [intprob], i
  1631 000013AB E92B010000          <2>  jmp unhand2
  1632                              <2>  %assign i i+1
  1633 000013B0 FA                  <2>  cli
  1634 000013B1 C605[D4170000]39    <2>  mov byte [intprob], i
  1635 000013B8 E91E010000          <2>  jmp unhand2
  1636                              <2>  %assign i i+1
  1637 000013BD FA                  <2>  cli
  1638 000013BE C605[D4170000]3A    <2>  mov byte [intprob], i
  1639 000013C5 E911010000          <2>  jmp unhand2
  1640                              <2>  %assign i i+1
  1641 000013CA FA                  <2>  cli
  1642 000013CB C605[D4170000]3B    <2>  mov byte [intprob], i
  1643 000013D2 E904010000          <2>  jmp unhand2
  1644                              <2>  %assign i i+1
  1645 000013D7 FA                  <2>  cli
  1646 000013D8 C605[D4170000]3C    <2>  mov byte [intprob], i
  1647 000013DF E9F7000000          <2>  jmp unhand2
  1648                              <2>  %assign i i+1
  1649 000013E4 FA                  <2>  cli
  1650 000013E5 C605[D4170000]3D    <2>  mov byte [intprob], i
  1651 000013EC E9EA000000          <2>  jmp unhand2
  1652                              <2>  %assign i i+1
  1653 000013F1 FA                  <2>  cli
  1654 000013F2 C605[D4170000]3E    <2>  mov byte [intprob], i
  1655 000013F9 E9DD000000          <2>  jmp unhand2
  1656                              <2>  %assign i i+1
  1657 000013FE FA                  <2>  cli
  1658 000013FF C605[D4170000]3F    <2>  mov byte [intprob], i
  1659 00001406 E9D0000000          <2>  jmp unhand2
  1660                              <2>  %assign i i+1
  1661 0000140B FA                  <2>  cli
  1662 0000140C C605[D4170000]40    <2>  mov byte [intprob], i
  1663 00001413 E9C3000000          <2>  jmp unhand2
  1664                              <2>  %assign i i+1
  1665 00001418 FA                  <2>  cli
  1666 00001419 C605[D4170000]41    <2>  mov byte [intprob], i
  1667 00001420 E9B6000000          <2>  jmp unhand2
  1668                              <2>  %assign i i+1
  1669 00001425 FA                  <2>  cli
  1670 00001426 C605[D4170000]42    <2>  mov byte [intprob], i
  1671 0000142D E9A9000000          <2>  jmp unhand2
  1672                              <2>  %assign i i+1
  1673 00001432 FA                  <2>  cli
  1674 00001433 C605[D4170000]43    <2>  mov byte [intprob], i
  1675 0000143A E99C000000          <2>  jmp unhand2
  1676                              <2>  %assign i i+1
  1677 0000143F FA                  <2>  cli
  1678 00001440 C605[D4170000]44    <2>  mov byte [intprob], i
  1679 00001447 E98F000000          <2>  jmp unhand2
  1680                              <2>  %assign i i+1
  1681 0000144C FA                  <2>  cli
  1682 0000144D C605[D4170000]45    <2>  mov byte [intprob], i
  1683 00001454 E982000000          <2>  jmp unhand2
  1684                              <2>  %assign i i+1
  1685 00001459 FA                  <2>  cli
  1686 0000145A C605[D4170000]46    <2>  mov byte [intprob], i
  1687 00001461 E975000000          <2>  jmp unhand2
  1688                              <2>  %assign i i+1
  1689 00001466 FA                  <2>  cli
  1690 00001467 C605[D4170000]47    <2>  mov byte [intprob], i
  1691 0000146E E968000000          <2>  jmp unhand2
  1692                              <2>  %assign i i+1
  1693 00001473 FA                  <2>  cli
  1694 00001474 C605[D4170000]48    <2>  mov byte [intprob], i
  1695 0000147B E95B000000          <2>  jmp unhand2
  1696                              <2>  %assign i i+1
  1697 00001480 FA                  <2>  cli
  1698 00001481 C605[D4170000]49    <2>  mov byte [intprob], i
  1699 00001488 E94E000000          <2>  jmp unhand2
  1700                              <2>  %assign i i+1
  1701 0000148D FA                  <2>  cli
  1702 0000148E C605[D4170000]4A    <2>  mov byte [intprob], i
  1703 00001495 E941000000          <2>  jmp unhand2
  1704                              <2>  %assign i i+1
  1705 0000149A FA                  <2>  cli
  1706 0000149B C605[D4170000]4B    <2>  mov byte [intprob], i
  1707 000014A2 E934000000          <2>  jmp unhand2
  1708                              <2>  %assign i i+1
  1709 000014A7 FA                  <2>  cli
  1710 000014A8 C605[D4170000]4C    <2>  mov byte [intprob], i
  1711 000014AF E927000000          <2>  jmp unhand2
  1712                              <2>  %assign i i+1
  1713 000014B4 FA                  <2>  cli
  1714 000014B5 C605[D4170000]4D    <2>  mov byte [intprob], i
  1715 000014BC E91A000000          <2>  jmp unhand2
  1716                              <2>  %assign i i+1
  1717 000014C1 FA                  <2>  cli
  1718 000014C2 C605[D4170000]4E    <2>  mov byte [intprob], i
  1719 000014C9 E90D000000          <2>  jmp unhand2
  1720                              <2>  %assign i i+1
  1721 000014CE FA                  <2>  cli
  1722 000014CF C605[D4170000]4F    <2>  mov byte [intprob], i
  1723 000014D6 E900000000          <2>  jmp unhand2
  1724                              <2>  %assign i i+1
  1725                              <1> unhand2:
  1726 000014DB FA                  <1> 	cli
  1727 000014DC 1E                  <1> 	push ds
  1728 000014DD 06                  <1> 	push es
  1729 000014DE 0FA0                <1> 	push fs
  1730 000014E0 0FA8                <1> 	push gs
  1731 000014E2 16                  <1> 	push ss
  1732 000014E3 60                  <1> 	pushad
  1733 000014E4 803D[988B0000]00    <1> 	cmp byte [guion], 0
  1734 000014EB 0F8432000000        <1> 	je near noguiunhandstuff
  1735 000014F1 66C705[CE170000]08- <1> 	mov word [locunhandy], 8
  1736 000014F9 00                  <1>
  1737 000014FA 66C705[D0170000]08- <1> 	mov word [locunhandx], 8
  1738 00001502 00                  <1>
  1739 00001503 668B1D[BD560000]    <1> 	mov bx, [background]
  1740 0000150A 66891D[D2170000]    <1> 	mov [backgroundcache], bx
  1741 00001511 C605[C64F0000]01    <1> 	mov byte [mousedisabled],1
  1742 00001518 66BB00F8            <1> 	mov bx, 1111100000000000b
  1743 0000151C 66891D[BD560000]    <1> 	mov [background], bx
  1744                              <1> noguiunhandstuff:
  1745 00001523 89E6                <1> 	mov esi, esp
  1746 00001525 8935[C2170000]      <1> 	mov [espfirst], esi
  1747 0000152B 81C6BC000000        <1> 	add esi, ((unhndrgend - unhndrg)/15)*4
  1748 00001531 8935[BE170000]      <1> 	mov [esploc], esi
  1749 00001537 BE[DD170000]        <1> 	mov esi, unhandmsg
  1750 0000153C 8935[C6170000]      <1> 	mov [esiloc], esi
  1751 00001542 31C9                <1> 	xor ecx, ecx
  1752 00001544 8A0D[D4170000]      <1> 	mov cl, [intprob]
  1753 0000154A BB[701B0000]        <1> 	mov ebx, errortypes
  1754 0000154F C1E102              <1> 	shl ecx, 2
  1755 00001552 01CB                <1> 	add ebx, ecx
  1756 00001554 81FB[B01B0000]      <1> 	cmp ebx, errortypesend
  1757 0000155A 7205                <1> 	jb gooderrortype
  1758 0000155C BB[B01B0000]        <1> 	mov ebx, errortypesend
  1759                              <1> gooderrortype:
  1760 00001561 8B33                <1> 	mov esi, [ebx]
  1761 00001563 803D[988B0000]00    <1> 	cmp byte [guion], 0
  1762 0000156A 0F842D000000        <1> 	je near errortext
  1763 00001570 668B0D[CE170000]    <1> 	mov cx, [locunhandy]
  1764 00001577 668B15[D0170000]    <1> 	mov dx, [locunhandx]
  1765 0000157E 66B80100            <1> 	mov ax, 1
  1766 00001582 6631DB              <1> 	xor bx, bx
  1767 00001585 E8264C0000          <1> 	call showstring2
  1768 0000158A 66890D[CE170000]    <1> 	mov [locunhandy], cx
  1769 00001591 668915[D0170000]    <1> 	mov [locunhandx], dx
  1770 00001598 E905000000          <1> 	jmp errortextdone
  1771                              <1> errortext:
  1772 0000159D E8420D0000          <1> 	call print		;;get the error message and print it
  1773                              <1> errortextdone:
  1774 000015A2 31C9                <1> 	xor ecx, ecx
  1775 000015A4 8A0D[D4170000]      <1> 	mov cl, [intprob]
  1776 000015AA E8A8010000          <1> 	call expdump
  1777                              <1> dumpstack:
  1778 000015AF 8B35[BE170000]      <1> 	mov esi, [esploc]
  1779 000015B5 39E6                <1> 	cmp esi, esp
  1780 000015B7 7216                <1> 	jb donedump
  1781 000015B9 368B0E              <1> 	mov ecx, [ss:esi]
  1782 000015BC 81EE04000000        <1> 	sub esi, 4
  1783 000015C2 8935[BE170000]      <1> 	mov [esploc], esi
  1784 000015C8 E88A010000          <1> 	call expdump
  1785 000015CD EBE0                <1> 	jmp dumpstack
  1786                              <1> donedump:
  1787 000015CF 0F20C1              <1> 	mov ecx, cr0
  1788 000015D2 E880010000          <1> 	call expdump
  1789 000015D7 0F20D1              <1> 	mov ecx, cr2
  1790 000015DA E878010000          <1> 	call expdump
  1791 000015DF 0F20D9              <1> 	mov ecx, cr3
  1792 000015E2 E870010000          <1> 	call expdump
  1793 000015E7 0F20E1              <1> 	mov ecx, cr4
  1794 000015EA E868010000          <1> 	call expdump
  1795 000015EF 8B35[BE170000]      <1> 	mov esi, [esploc]
  1796 000015F5 368B7C2434          <1> 	mov edi, [ss:esp + 52]
  1797 000015FA 81C710000000        <1> 	add edi, 16
  1798 00001600 893D[D9170000]      <1> 	mov [codelocend], edi
  1799 00001606 81EF20000000        <1> 	sub edi, 32
  1800                              <1> dumpcodeloop:
  1801 0000160C 893D[D5170000]      <1> 	mov [codeloc], edi
  1802 00001612 8B0F                <1> 	mov ecx, [edi]
  1803 00001614 E83E010000          <1> 	call expdump
  1804 00001619 8B3D[D5170000]      <1> 	mov edi, [codeloc]
  1805 0000161F 81C704000000        <1> 	add edi, 4
  1806 00001625 3B3D[D9170000]      <1> 	cmp edi, [codelocend]
  1807 0000162B 72DF                <1> 	jb dumpcodeloop
  1808 0000162D BE[E8160000]        <1> 	mov esi, backtoosmsg
  1809 00001632 803D[988B0000]00    <1> 	cmp byte [guion], 0
  1810 00001639 750A                <1> 	jne guibacktomsg
  1811 0000163B E8A40C0000          <1> 	call print
  1812 00001640 E91A000000          <1> 	jmp backtomsgdone
  1813                              <1> guibacktomsg:
  1814 00001645 668B15[D0170000]    <1> 	mov dx, [locunhandx]
  1815 0000164C 668B0D[CE170000]    <1> 	mov cx, [locunhandy]
  1816 00001653 66B80100            <1> 	mov ax, 1
  1817 00001657 6631DB              <1> 	xor bx, bx
  1818 0000165A E8514B0000          <1> 	call showstring2
  1819                              <1> backtomsgdone:
  1820 0000165F 30C0                <1> 	xor al, al
  1821 00001661 E800110000          <1> 	call rdcharint
  1822 00001666 803D[D4170000]03    <1> 	cmp byte [intprob], 3
  1823 0000166D 753C                <1> 	jne nodebugint
  1824 0000166F 803D[988B0000]00    <1> 	cmp byte [guion], 0
  1825 00001676 7422                <1> 	je nodebuggui
  1826 00001678 668B1D[D2170000]    <1> 	mov bx, [backgroundcache]
  1827 0000167F 66891D[BD560000]    <1> 	mov [background], bx
  1828 00001686 6631DB              <1> 	xor bx, bx
  1829 00001689 C605[C64F0000]00    <1> 	mov byte [mousedisabled], 0
  1830 00001690 E8EB3F0000          <1> 	call guiclear
  1831 00001695 E8BD470000          <1> 	call reloadallgraphics
  1832                              <1> nodebuggui:
  1833 0000169A 8B35[C2170000]      <1> 	mov esi, [espfirst]
  1834 000016A0 89F4                <1> 	mov esp, esi
  1835 000016A2 61                  <1> 	popad
  1836 000016A3 17                  <1> 	pop ss
  1837 000016A4 0FA9                <1> 	pop gs
  1838 000016A6 0FA1                <1> 	pop fs
  1839 000016A8 07                  <1> 	pop es
  1840 000016A9 1F                  <1> 	pop ds
  1841 000016AA CF                  <1> 	iret
  1842                              <1> nodebugint:
  1843 000016AB 61                  <1> 	popad
  1844 000016AC 17                  <1> 	pop ss
  1845 000016AD 0FA9                <1> 	pop gs
  1846 000016AF 0FA1                <1> 	pop fs
  1847 000016B1 07                  <1> 	pop es
  1848 000016B2 1F                  <1> 	pop ds
  1849 000016B3 803D[988B0000]00    <1> 	cmp byte [guion], 0
  1850 000016BA 7427                <1> 	je returnunhandgui
  1851 000016BC 668B1D[D2170000]    <1> 	mov bx, [backgroundcache]
  1852 000016C3 66891D[BD560000]    <1> 	mov [background], bx
  1853 000016CA 6631DB              <1> 	xor bx, bx
  1854 000016CD C605[C64F0000]00    <1> 	mov byte [mousedisabled], 0
  1855 000016D4 E8A73F0000          <1> 	call guiclear
  1856 000016D9 E879470000          <1> 	call reloadallgraphics
  1857 000016DE E9DC3F0000          <1> 	jmp gui
  1858                              <1> returnunhandgui:
  1859 000016E3 E9A1160000          <1> 	jmp nwcmd
  1860 000016E8 506C6561736520706F- <1> backtoosmsg db "Please post any problems in the Issues section at solleros.googlecode.com",10
  1861 000016F1 737420616E79207072- <1>
  1862 000016FA 6F626C656D7320696E- <1>
  1863 00001703 207468652049737375- <1>
  1864 0000170C 65732073656374696F- <1>
  1865 00001715 6E20617420736F6C6C- <1>
  1866 0000171E 65726F732E676F6F67- <1>
  1867 00001727 6C65636F64652E636F- <1>
  1868 00001730 6D0A                <1>
  1869 00001732 507265737320616E79- <1> 			db "Press any key to return to SollerOS",10,0
  1870 0000173B 206B657920746F2072- <1>
  1871 00001744 657475726E20746F20- <1>
  1872 0000174D 536F6C6C65724F530A- <1>
  1873 00001756 00                  <1>
  1874                              <1> expdump:
  1875 00001757 8B35[C6170000]      <1> 	mov esi, [esiloc]
  1876 0000175D 89F7                <1> 	mov edi, esi
  1877 0000175F 81C70F000000        <1> 	add edi, 15
  1878 00001765 81C604000000        <1> 	add esi, 4
  1879 0000176B 893D[C6170000]      <1> 	mov [esiloc], edi
  1880 00001771 81EF03000000        <1> 	sub edi, 3
  1881 00001777 E8731A0000          <1> 	call converthex
  1882 0000177C 81EE04000000        <1> 	sub esi, 4
  1883 00001782 803D[988B0000]00    <1> 	cmp byte [guion], 0
  1884 00001789 0F8429000000        <1> 	je near expdumptext
  1885 0000178F 668B0D[CE170000]    <1> 	mov cx, [locunhandy]
  1886 00001796 668B15[D0170000]    <1> 	mov dx, [locunhandx]
  1887 0000179D 66B80100            <1> 	mov ax, 1
  1888 000017A1 6631DB              <1> 	xor bx, bx
  1889 000017A4 E8074A0000          <1> 	call showstring2
  1890 000017A9 66890D[CE170000]    <1> 	mov [locunhandy], cx
  1891 000017B0 668915[D0170000]    <1> 	mov [locunhandx], dx
  1892 000017B7 C3                  <1> 	ret
  1893                              <1> expdumptext:
  1894 000017B8 E8270B0000          <1> 	call print
  1895 000017BD C3                  <1> 	ret
  1896 000017BE 00000000            <1> esploc dd 0
  1897 000017C2 00000000            <1> espfirst dd 0
  1898 000017C6 00000000            <1> esiloc dd 0
  1899 000017CA 00000000            <1> esiregbuf dd 0
  1900 000017CE 0100                <1> locunhandy dw 1
  1901 000017D0 0100                <1> locunhandx dw 1
  1902 000017D2 0000                <1> backgroundcache dw 0
  1903 000017D4 00                  <1> intprob db 0
  1904 000017D5 00000000            <1> codeloc dd 0
  1905 000017D9 00000000            <1> codelocend dd 0
  1906                              <1> 	unhandmsg:	
  1907 000017DD 494E543D3030303030- <1> 			db "INT=00000000 ",10,0
  1908 000017E6 303030200A00        <1>
  1909                              <1> unhndrg:
  1910 000017EC FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0	;;this dumps the stack before the stack frame in question
  1911 000017F5 303030202000<rept>  <1>
  1912 00001855 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000 ",10,0
  1913 0000185E 303030200A00        <1>
  1914 00001864 FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0	;;this dumps the stack before the stack frame in question
  1915 0000186D 303030202000<rept>  <1>
  1916 000018CD FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000 ",10,0
  1917 000018D6 303030200A00        <1>
  1918 000018DC FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0	;;this dumps the stack before the stack frame in question
  1919 000018E5 303030202000<rept>  <1>
  1920 00001945 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000 ",10,0
  1921 0000194E 303030200A00        <1>
  1922 00001954 FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0	;;this dumps the stack before the stack frame in question
  1923 0000195D 303030202000<rept>  <1>
  1924 000019BD FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000 ",10,0
  1925 000019C6 303030200A00        <1>
  1926                              <1> unhandregs:
  1927 000019CC 45464C3D3030303030- <1> 			db "EFL=00000000  ",0
  1928 000019D5 303030202000        <1>
  1929 000019DB 43533A3D3030303030- <1> 			db "CS:=00000000  ",0
  1930 000019E4 303030202000        <1>
  1931 000019EA 4549503D3030303030- <1> 			db "EIP=00000000 ",10,0
  1932 000019F3 303030200A00        <1>
  1933 000019F9 44533A3D3030303030- <1> 			db "DS:=00000000  ",0
  1934 00001A02 303030202000        <1>
  1935 00001A08 45533A3D3030303030- <1> 			db "ES:=00000000  ",0
  1936 00001A11 303030202000        <1>
  1937 00001A17 46533A3D3030303030- <1> 			db "FS:=00000000  ",0
  1938 00001A20 303030202000        <1>
  1939 00001A26 47533A3D3030303030- <1> 			db "GS:=00000000  ",0
  1940 00001A2F 303030202000        <1>
  1941 00001A35 53533A3D3030303030- <1> 			db "SS:=00000000 ",10,0
  1942 00001A3E 303030200A00        <1>
  1943 00001A44 4541583D3030303030- <1> 			db "EAX=00000000  ",0
  1944 00001A4D 303030202000        <1>
  1945 00001A53 4543583D3030303030- <1> 			db "ECX=00000000  ",0
  1946 00001A5C 303030202000        <1>
  1947 00001A62 4544583D3030303030- <1> 			db "EDX=00000000  ",0
  1948 00001A6B 303030202000        <1>
  1949 00001A71 4542583D3030303030- <1> 			db "EBX=00000000 ",10,0
  1950 00001A7A 303030200A00        <1>
  1951 00001A80 4553503D3030303030- <1> 			db "ESP=00000000  ",0
  1952 00001A89 303030202000        <1>
  1953 00001A8F 4542503D3030303030- <1> 			db "EBP=00000000  ",0
  1954 00001A98 303030202000        <1>
  1955 00001A9E 4553493D3030303030- <1> 			db "ESI=00000000  ",0
  1956 00001AA7 303030202000        <1>
  1957 00001AAD 4544493D3030303030- <1> unhndrgend:	db "EDI=00000000 ",10,0
  1958 00001AB6 303030200A00        <1>
  1959 00001ABC 4352303D3030303030- <1> 			db "CR0=00000000  ",0
  1960 00001AC5 303030202000        <1>
  1961 00001ACB 4352323D3030303030- <1> 			db "CR2=00000000  ",0
  1962 00001AD4 303030202000        <1>
  1963 00001ADA 4352333D3030303030- <1> 			db "CR3=00000000  ",0
  1964 00001AE3 303030202000        <1>
  1965 00001AE9 4352343D3030303030- <1> 			db "CR4=00000000 ",10,0
  1966 00001AF2 303030200A00        <1>
  1967 00001AF8 FFFFFFFF3030303030- <1> unhandcode: times 2 db 255,255,255,255,"00000000  ",0	;;this dumps the code before and after the interrupt in question
  1968 00001B01 303030202000<rept>  <1>
  1969 00001B16 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000 ",255,0
  1970 00001B1F 30303020FF00        <1>
  1971 00001B25 FFFFFF5B3030303030- <1> 			db 255,255,255,"[00000000] ",0
  1972 00001B2E 3030305D2000        <1>
  1973 00001B34 FFFFFFFF3030303030- <1> 			times 3 db 255,255,255,255,"00000000  ",0
  1974 00001B3D 303030202000<rept>  <1>
  1975 00001B61 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  1976 00001B6A 303030FF0A00        <1>
  1977                              <1> unhandmsgend:
  1978                              <1> 
  1979                              <1> errortypes:
  1980 00001B70 [B41B0000]          <1> 			dd err0
  1981 00001B74 [181C0000]          <1> 			dd err1
  1982 00001B78 [791C0000]          <1> 			dd err2
  1983 00001B7C [CE1C0000]          <1> 			dd err3
  1984 00001B80 [321D0000]          <1> 			dd err4
  1985 00001B84 [841D0000]          <1> 			dd err5
  1986 00001B88 [EE1D0000]          <1> 			dd err6
  1987 00001B8C [561E0000]          <1> 			dd err7
  1988 00001B90 [A01E0000]          <1> 			dd err8
  1989 00001B94 [FD1E0000]          <1> 			dd err9
  1990 00001B98 [561F0000]          <1> 			dd err10
  1991 00001B9C [A11F0000]          <1> 			dd err11
  1992 00001BA0 [F11F0000]          <1> 			dd err12
  1993 00001BA4 [4A200000]          <1> 			dd err13
  1994 00001BA8 [AD200000]          <1> 			dd err14
  1995 00001BAC [E9200000]          <1> 			dd err15
  1996                              <1> errortypesend:
  1997 00001BB0 [74210000]          <1> 			dd unknownerror
  1998                              <1> 			
  1999 00001BB4 4469766973696F6E20- <1> err0	db "Division by zero:",10
  2000 00001BBD 6279207A65726F3A0A  <1>
  2001 00001BC6 546563686E6963616C- <1> 		db "Technically lim a",246,"x = ",236," when a is any real number. Happy Easter!",10
  2002 00001BCF 6C79206C696D2061F6- <1>
  2003 00001BD8 78203D20EC20776865- <1>
  2004 00001BE1 6E206120697320616E- <1>
  2005 00001BEA 79207265616C206E75- <1>
  2006 00001BF3 6D6265722E20486170- <1>
  2007 00001BFC 707920456173746572- <1>
  2008 00001C05 210A                <1>
  2009 00001C07 202020202020202020- <1> 		db "            x",26,"0",10,0
  2010 00001C10 202020781A300A00    <1>
  2011                              <1> 		
  2012 00001C18 53696E676C652D7374- <1> err1	db "Single-step/Breakpoint:",10
  2013 00001C21 65702F427265616B70- <1>
  2014 00001C2A 6F696E743A0A        <1>
  2015 00001C30 4120627265616B706F- <1> 		db "A breakpoint fault, breakpoint trap, or single-step trap was triggered.",10,0
  2016 00001C39 696E74206661756C74- <1>
  2017 00001C42 2C20627265616B706F- <1>
  2018 00001C4B 696E7420747261702C- <1>
  2019 00001C54 206F722073696E676C- <1>
  2020 00001C5D 652D73746570207472- <1>
  2021 00001C66 617020776173207472- <1>
  2022 00001C6F 696767657265642E0A- <1>
  2023 00001C78 00                  <1>
  2024                              <1> 		
  2025 00001C79 4E6F6E6D61736B6162- <1> err2	db "Nonmaskable interrupt:",10
  2026 00001C82 6C6520696E74657272- <1>
  2027 00001C8B 7570743A0A          <1>
  2028 00001C90 412068617264776172- <1> 		db "A hardware interrupt was triggered that could not be masked.",10,0
  2029 00001C99 6520696E7465727275- <1>
  2030 00001CA2 707420776173207472- <1>
  2031 00001CAB 696767657265642074- <1>
  2032 00001CB4 68617420636F756C64- <1>
  2033 00001CBD 206E6F74206265206D- <1>
  2034 00001CC6 61736B65642E0A00    <1>
  2035                              <1> 		
  2036 00001CCE 427265616B706F696E- <1> err3	db "Breakpoint:",10
  2037 00001CD7 743A0A              <1>
  2038 00001CDA 5468697320696E7465- <1> 		db "This interrupt is used in programs to show the stack and registers and can be",10
  2039 00001CE3 727275707420697320- <1>
  2040 00001CEC 7573656420696E2070- <1>
  2041 00001CF5 726F6772616D732074- <1>
  2042 00001CFE 6F2073686F77207468- <1>
  2043 00001D07 6520737461636B2061- <1>
  2044 00001D10 6E6420726567697374- <1>
  2045 00001D19 65727320616E642063- <1>
  2046 00001D22 616E2062650A        <1>
  2047 00001D28 69676E6F7265642E0A- <1> 		db "ignored.",10,0
  2048 00001D31 00                  <1>
  2049                              <1> 		
  2050 00001D32 4F766572666C6F773A- <1> err4	db "Overflow:",10
  2051 00001D3B 0A                  <1>
  2052 00001D3C 5468652070726F6365- <1> 		db "The processor ran into an INTO instruction with the overflow flag set.",10,0
  2053 00001D45 73736F722072616E20- <1>
  2054 00001D4E 696E746F20616E2049- <1>
  2055 00001D57 4E544F20696E737472- <1>
  2056 00001D60 756374696F6E207769- <1>
  2057 00001D69 746820746865206F76- <1>
  2058 00001D72 6572666C6F7720666C- <1>
  2059 00001D7B 6167207365742E0A00  <1>
  2060                              <1> 		
  2061 00001D84 426F756E6473206368- <1> err5	db "Bounds check:",10
  2062 00001D8D 65636B3A0A          <1>
  2063 00001D92 5468652070726F6365- <1> 		db "The processor rebounded from a BOUND instruction run on an operand that was out",10
  2064 00001D9B 73736F72207265626F- <1>
  2065 00001DA4 756E6465642066726F- <1>
  2066 00001DAD 6D206120424F554E44- <1>
  2067 00001DB6 20696E737472756374- <1>
  2068 00001DBF 696F6E2072756E206F- <1>
  2069 00001DC8 6E20616E206F706572- <1>
  2070 00001DD1 616E64207468617420- <1>
  2071 00001DDA 776173206F75740A    <1>
  2072 00001DE2 6F6620626F756E6473- <1> 		db "of bounds.",10,0
  2073 00001DEB 2E0A00              <1>
  2074                              <1> 		
  2075 00001DEE 496E76616C6964206F- <1> err6	db "Invalid opcode:",10
  2076 00001DF7 70636F64653A0A      <1>
  2077 00001DFE 5468652070726F6365- <1> 		db "The processor has no idea what it was trying to execute. Don't run SSE4 code",10
  2078 00001E07 73736F722068617320- <1>
  2079 00001E10 6E6F20696465612077- <1>
  2080 00001E19 686174206974207761- <1>
  2081 00001E22 7320747279696E6720- <1>
  2082 00001E2B 746F20657865637574- <1>
  2083 00001E34 652E20446F6E277420- <1>
  2084 00001E3D 72756E205353453420- <1>
  2085 00001E46 636F64650A          <1>
  2086 00001E4B 6F6E20343836277321- <1> 		db "on 486's!",10,0
  2087 00001E54 0A00                <1>
  2088                              <1> 		
  2089 00001E56 436F70726F63657373- <1> err7	db "Coprocessor not available:",10
  2090 00001E5F 6F72206E6F74206176- <1>
  2091 00001E68 61696C61626C653A0A  <1>
  2092 00001E71 446F6E277420796F75- <1> 		db "Don't you know they don't make those anymore!",10,0
  2093 00001E7A 206B6E6F7720746865- <1>
  2094 00001E83 7920646F6E2774206D- <1>
  2095 00001E8C 616B652074686F7365- <1>
  2096 00001E95 20616E796D6F726521- <1>
  2097 00001E9E 0A00                <1>
  2098                              <1> 		
  2099 00001EA0 446F75626C65206661- <1> err8	db "Double fault:",10
  2100 00001EA9 756C743A0A          <1>
  2101 00001EAE 546865206578636570- <1> 		db "The exception handler could not handle that it could not handle an exception.",10,0
  2102 00001EB7 74696F6E2068616E64- <1>
  2103 00001EC0 6C657220636F756C64- <1>
  2104 00001EC9 206E6F742068616E64- <1>
  2105 00001ED2 6C6520746861742069- <1>
  2106 00001EDB 7420636F756C64206E- <1>
  2107 00001EE4 6F742068616E646C65- <1>
  2108 00001EED 20616E206578636570- <1>
  2109 00001EF6 74696F6E2E0A00      <1>
  2110                              <1> 		
  2111 00001EFD 436F70726F63657373- <1> err9	db "Coprocessor segment overrun:",10,0
  2112 00001F06 6F72207365676D656E- <1>
  2113 00001F0F 74206F76657272756E- <1>
  2114 00001F18 3A0A00              <1>
  2115 00001F1B 54686973206E657665- <1> 		db "This never happens in modern computers, and never should.",10,0
  2116 00001F24 722068617070656E73- <1>
  2117 00001F2D 20696E206D6F646572- <1>
  2118 00001F36 6E20636F6D70757465- <1>
  2119 00001F3F 72732C20616E64206E- <1>
  2120 00001F48 657665722073686F75- <1>
  2121 00001F51 6C642E0A00          <1>
  2122                              <1> 
  2123 00001F56 496E76616C69642054- <1> err10	db "Invalid TSS:",10
  2124 00001F5F 53533A0A            <1>
  2125 00001F63 546865205453532074- <1> 		db "The TSS that was switched to is invalid. Nothing funny here.",10,0
  2126 00001F6C 686174207761732073- <1>
  2127 00001F75 776974636865642074- <1>
  2128 00001F7E 6F20697320696E7661- <1>
  2129 00001F87 6C69642E204E6F7468- <1>
  2130 00001F90 696E672066756E6E79- <1>
  2131 00001F99 20686572652E0A00    <1>
  2132                              <1> 		
  2133 00001FA1 5365676D656E74206E- <1> err11	db "Segment not present:",10
  2134 00001FAA 6F742070726573656E- <1>
  2135 00001FB3 743A0A              <1>
  2136 00001FB6 546865207072657365- <1> 		db "The present bit of the segment descriptor is set to zero.",10,0
  2137 00001FBF 6E7420626974206F66- <1>
  2138 00001FC8 20746865207365676D- <1>
  2139 00001FD1 656E74206465736372- <1>
  2140 00001FDA 6970746F7220697320- <1>
  2141 00001FE3 73657420746F207A65- <1>
  2142 00001FEC 726F2E0A00          <1>
  2143                              <1> 		
  2144 00001FF1 537461636B20657863- <1> err12	db "Stack exception:",10
  2145 00001FFA 657074696F6E3A0A    <1>
  2146 00002002 546865205353206465- <1> 		db "The SS descriptor is invalid or not present or its limit is too small.",10,0
  2147 0000200B 7363726970746F7220- <1>
  2148 00002014 697320696E76616C69- <1>
  2149 0000201D 64206F72206E6F7420- <1>
  2150 00002026 70726573656E74206F- <1>
  2151 0000202F 7220697473206C696D- <1>
  2152 00002038 697420697320746F6F- <1>
  2153 00002041 20736D616C6C2E0A00  <1>
  2154                              <1> 		
  2155 0000204A 47656E6572616C2070- <1> err13	db "General protection violation:",10
  2156 00002053 726F74656374696F6E- <1>
  2157 0000205C 2076696F6C6174696F- <1>
  2158 00002065 6E3A0A              <1>
  2159 00002068 596F752076696F6C61- <1> 		db "You violated the computer. Step away slowly. The FBI is on its way.",10,0
  2160 00002071 746564207468652063- <1>
  2161 0000207A 6F6D70757465722E20- <1>
  2162 00002083 537465702061776179- <1>
  2163 0000208C 20736C6F776C792E20- <1>
  2164 00002095 546865204642492069- <1>
  2165 0000209E 73206F6E2069747320- <1>
  2166 000020A7 7761792E0A00        <1>
  2167                              <1> 		
  2168 000020AD 50616765206661756C- <1> err14	db "Page fault:",10
  2169 000020B6 743A0A              <1>
  2170 000020B9 546865207061676520- <1> 		db "The page that was requested was not available.",10,0
  2171 000020C2 746861742077617320- <1>
  2172 000020CB 726571756573746564- <1>
  2173 000020D4 20776173206E6F7420- <1>
  2174 000020DD 617661696C61626C65- <1>
  2175 000020E6 2E0A00              <1>
  2176                              <1> 		
  2177 000020E9 526573657276656420- <1> err15	db "Reserved for Plan R:",10
  2178 000020F2 666F7220506C616E20- <1>
  2179 000020FB 523A0A              <1>
  2180 000020FE 5468697320696E7465- <1> 		db "This interrupt is reserved for usage only by the military when it is necessary",10
  2181 00002107 727275707420697320- <1>
  2182 00002110 726573657276656420- <1>
  2183 00002119 666F72207573616765- <1>
  2184 00002122 206F6E6C7920627920- <1>
  2185 0000212B 746865206D696C6974- <1>
  2186 00002134 617279207768656E20- <1>
  2187 0000213D 6974206973206E6563- <1>
  2188 00002146 6573736172790A      <1>
  2189 0000214D 746F20696E69746961- <1> 		db "to initiate a full-scale coup d'",130,"tat.",10,0
  2190 00002156 746520612066756C6C- <1>
  2191 0000215F 2D7363616C6520636F- <1>
  2192 00002168 757020642782746174- <1>
  2193 00002171 2E0A00              <1>
  2194                              <1> 		
  2195 00002174 576861742074686520- <1> unknownerror db "What the hell just happened? Is everyone okay? Hard drive? Video card?",10
  2196 0000217D 68656C6C206A757374- <1>
  2197 00002186 2068617070656E6564- <1>
  2198 0000218F 3F2049732065766572- <1>
  2199 00002198 796F6E65206F6B6179- <1>
  2200 000021A1 3F2048617264206472- <1>
  2201 000021AA 6976653F2056696465- <1>
  2202 000021B3 6F20636172643F0A    <1>
  2203 000021BB 4D656D6F72793F2041- <1> 			db	"Memory? Are you there?",10,0
  2204 000021C4 726520796F75207468- <1>
  2205 000021CD 6572653F0A00        <1>
  2206                                      %include 'source/ints.asm'
  2207                              <1> newints:	;;for great justice
  2208 000021D3 80FC00              <1> 	cmp ah, 0		;;originally 0
  2209 000021D6 0F847F000000        <1> 	je near intx0   ;;0=kills app
  2210 000021DC 80FC01              <1> 	cmp ah, 1		;;originally 1
  2211 000021DF 0F84E3000000        <1> 	je near intx1   ;;3=print string
  2212 000021E5 80FC02              <1> 	cmp ah, 2		;;originally 2
  2213 000021E8 0F8435010000        <1> 	je near intx2	;;4=read string
  2214 000021EE 80FC03              <1> 	cmp ah, 3		;;originally 3
  2215 000021F1 0F8467010000        <1> 	je near intx3	;;6=clear screen
  2216 000021F7 80FC04              <1> 	cmp ah, 4		;;originally 4
  2217 000021FA 0F84DE010000        <1> 	je near intx4	;;5=read and print string
  2218 00002200 80FC05              <1> 	cmp ah, 5		;;originally 5		
  2219 00002203 0F8451050000        <1> 	je near intx5	;;2=get char
  2220 00002209 80FC06              <1> 	cmp ah, 6		;;originally 6
  2221 0000220C 0F849B050000        <1> 	je near intx6	;;1=print char
  2222 00002212 80FC07              <1> 	cmp ah, 7
  2223 00002215 0F8473070000        <1> 	je near intx7	;;read file
  2224                              <1> ;	cmp ah, 8		;;write file
  2225                              <1> ;	je near intx8
  2226 0000221B 80FC09              <1> 	cmp ah, 9
  2227 0000221E 0F8474070000        <1> 	je near intx9	;;convert number to string
  2228 00002224 80FC0A              <1> 	cmp ah, 10
  2229 00002227 0F8483070000        <1> 	je near intx10	;;convert string to number
  2230 0000222D 80FC0B              <1> 	cmp ah, 11
  2231 00002230 0F8480070000        <1> 	je near intx11	;;create thread
  2232 00002236 80FC0C              <1> 	cmp ah, 12		;;get time
  2233 00002239 0F847D070000        <1> 	je near intx12
  2234 0000223F 80FC0D              <1> 	cmp ah, 13		;;set time
  2235 00002242 0F8485070000        <1> 	je near intx13
  2236 00002248 80FC0E              <1> 	cmp ah, 14		;;run program
  2237 0000224B 0F8488070000        <1> 	je near intx14
  2238 00002251 80FC0F              <1> 	cmp ah, 15		;;get program info-location of name/options/number of options/environmental vars
  2239 00002254 0F8491070000        <1> 	je near intx15
  2240 0000225A C3                  <1> 	ret
  2241                              <1> 	
  2242                              <1> ;;the jmp timerinterrupt's ensure that task switches occur
  2243                              <1> intx0:
  2244                              <1> 	%include 'source/interrupts/0-exit.asm'
  2245                              <2> exitprog:
  2246 0000225B 66BB2800            <2> 	mov bx, NEW_DATA_SEL
  2247 0000225F 8EDB                <2> 	mov ds, bx
  2248 00002261 8EC3                <2> 	mov es, bx
  2249 00002263 8EE3                <2> 	mov fs, bx
  2250 00002265 66BB1800            <2> 	mov bx, SYS_DATA_SEL
  2251 00002269 8EEB                <2> 	mov gs, bx
  2252 0000226B 3C00                <2> 	cmp al, 0
  2253 0000226D 0F8505000000        <2> 	jne near warnexitstatus
  2254 00002273 E9110B0000          <2> 	jmp nwcmd
  2255                              <2> 	
  2256                              <2> warnexitstatus:
  2257 00002278 88C1                <2> 	mov cl, al
  2258 0000227A B000                <2> 	mov al, 0
  2259 0000227C A2[84320000]        <2> 	mov [firsthexshown], al
  2260 00002281 6651                <2> 	push cx
  2261 00002283 BE[A3220000]        <2> 	mov esi, exitstatus1msg
  2262 00002288 E857000000          <2> 	call print
  2263 0000228D 6659                <2> 	pop cx
  2264 0000228F E8F10F0000          <2> 	call showhexsmall
  2265 00002294 BE[B8220000]        <2> 	mov esi, exitstatus2msg
  2266 00002299 E846000000          <2> 	call print
  2267 0000229E E9E60A0000          <2> 	jmp nwcmd
  2268                              <2> 	
  2269 000022A3 416E20657869742073- <2> exitstatus1msg db "An exit status of 0x",0
  2270 000022AC 7461747573206F6620- <2>
  2271 000022B5 307800              <2>
  2272 000022B8 087761732072657475- <2> exitstatus2msg db 8,"was returned.",10,0
  2273 000022C1 726E65642E0A00      <2>
  2274                              <1> intx1:
  2275                              <1> 	%include 'source/interrupts/1-prntstr.asm'
  2276 000022C8 E81E000000          <2> call printint
  2277 000022CD E9C0E3FFFF          <2> jmp timerinterrupt
  2278                              <2> 
  2279                              <2> 	printquiet:
  2280 000022D2 6631C0              <2> 		xor ax, ax
  2281 000022D5 A2[1E230000]        <2> 		mov [endkeyprint], al
  2282 000022DA 66BB0700            <2> 		mov bx, 7
  2283 000022DE E828000000          <2> 		call printintb
  2284 000022E3 C3                  <2> 		ret
  2285                              <2>     print:
  2286 000022E4 6631C0              <2> 		xor ax, ax
  2287 000022E7 66BB0700            <2> 		mov bx, 7
  2288                              <2> 	printint:	;;print line, al=last key,bl=modifier, esi=buffer
  2289 000022EB 8935[1F230000]      <2> 		mov [startesiprint], esi
  2290 000022F1 A2[1E230000]        <2> 		mov [endkeyprint], al
  2291 000022F6 E810000000          <2> 		call printintb
  2292 000022FB 89F1                <2> 		mov ecx, esi
  2293 000022FD 2B0D[1F230000]      <2> 		sub ecx, [startesiprint]
  2294 00002303 51                  <2> 		push ecx
  2295 00002304 E818070000          <2> 		call termcopy
  2296 00002309 59                  <2> 		pop ecx
  2297 0000230A C3                  <2> 		ret
  2298                              <2> 	printintb:
  2299 0000230B 8A06                <2> 		mov al, [esi]
  2300 0000230D 3A05[1E230000]      <2> 		cmp al, [endkeyprint]
  2301 00002313 7408                <2> 		je doneprintint
  2302 00002315 E8AE040000          <2> 		call prcharq
  2303 0000231A 46                  <2> 		inc esi
  2304 0000231B EBEE                <2> 		jmp printintb
  2305                              <2> 	doneprintint:
  2306 0000231D C3                  <2> 		ret
  2307                              <2> 
  2308 0000231E 00                  <2> endkeyprint db 0
  2309 0000231F 00000000            <2> startesiprint dd 0
  2310                              <1> intx2:
  2311                              <1> 	%include 'source/interrupts/2-readstr.asm'
  2312 00002323 E805000000          <2> call readint
  2313 00002328 E965E3FFFF          <2> jmp timerinterrupt
  2314                              <2> 
  2315                              <2> 	readint:	;;get line, al=last key, esi = buffer, edi = endbuffer
  2316 0000232D A2[59230000]        <2> 		mov [endkeyread], al
  2317 00002332 893D[5A230000]      <2> 		mov [endbufferread], edi
  2318                              <2> 	readintb:
  2319 00002338 56                  <2> 		push esi
  2320 00002339 30C0                <2> 		xor al, al
  2321 0000233B E826040000          <2> 		call rdcharint
  2322 00002340 5E                  <2> 		pop esi
  2323 00002341 8806                <2> 		mov [esi], al
  2324 00002343 46                  <2> 		inc esi
  2325 00002344 3B35[5A230000]      <2> 		cmp esi, [endbufferread]
  2326 0000234A 7308                <2> 		jae readdone
  2327 0000234C 3A05[59230000]      <2> 		cmp al, [endkeyread]
  2328 00002352 75E4                <2> 		jne readintb
  2329                              <2> 	readdone:
  2330 00002354 4E                  <2> 		dec esi
  2331 00002355 C60600              <2> 		mov byte [esi], 0
  2332 00002358 C3                  <2> 	ret
  2333 00002359 00                  <2> endkeyread db 0
  2334 0000235A 00000000            <2> endbufferread dd 0
  2335                              <1> intx3:
  2336                              <1> 	%include 'source/interrupts/3-clearscrn.asm'
  2337 0000235E E805000000          <2> call clear
  2338 00002363 E92AE3FFFF          <2> jmp timerinterrupt
  2339                              <2> clear:		
  2340 00002368 668B0D[8A290000]    <2> 		mov cx, [charxy]
  2341 0000236F BF[91BC0000]        <2> 		mov edi, videobuf
  2342 00002374 6631C0              <2> 		xor ax, ax
  2343 00002377 66A3[84290000]      <2> 		mov [linebeginpos], ax
  2344 0000237D 66A3[86290000]      <2> 		mov [videobufpos], ax
  2345 00002383 6631D2              <2> 		xor dx, dx
  2346 00002386 66A3[88290000]      <2> 		mov [charpos], ax
  2347 0000238C B407                <2> 		mov ah, 7
  2348                              <2> 	clearb:
  2349 0000238E 8807                <2> 		mov [edi], al
  2350 00002390 886701              <2> 		mov [edi + 1], ah
  2351 00002393 81C702000000        <2> 		add edi, 2
  2352 00002399 FEC9                <2> 		dec cl
  2353 0000239B 80F900              <2> 		cmp cl, 0
  2354 0000239E 75EE                <2> 		jne clearb
  2355 000023A0 8A0D[8A290000]      <2> 		mov cl, [charxy]
  2356 000023A6 FECD                <2> 		dec ch
  2357 000023A8 80FD00              <2> 		cmp ch, 0
  2358 000023AB 75E1                <2> 		jne clearb
  2359                              <2> 	cleardouble:
  2360 000023AD BF[D10D0100]        <2> 		mov edi, videobuf2
  2361 000023B2 668B0D[8A290000]    <2> 		mov cx, [charxy]
  2362 000023B9 31C0                <2> 		xor eax, eax
  2363                              <2> 	clearc:
  2364 000023BB 668907              <2> 		mov [edi], ax
  2365 000023BE 81C702000000        <2> 		add edi, 2
  2366 000023C4 FEC9                <2> 		dec cl
  2367 000023C6 80F900              <2> 		cmp cl, 0
  2368 000023C9 75F0                <2> 		jne clearc
  2369 000023CB 8A0D[8A290000]      <2> 		mov cl, [charxy]
  2370 000023D1 FECD                <2> 		dec ch
  2371 000023D3 80FD00              <2> 		cmp ch, 0
  2372 000023D6 75E3                <2> 		jne clearc
  2373 000023D8 E844060000          <2> 		call termcopy
  2374 000023DD C3                  <2> 		ret
  2375                              <2> 		
  2376                              <1> intx4:
  2377                              <1> 	%include 'source/interrupts/4-prntreadstr.asm'
  2378 000023DE E809000000          <2> call rdprint
  2379 000023E3 E9AAE2FFFF          <2> jmp timerinterrupt
  2380                              <2> 
  2381                              <2> readline:
  2382 000023E8 B00A                <2>   mov al, 10
  2383 000023EA B307                <2>   mov bl, 7
  2384                              <2> 	rdprint:	;;print and get line, al=last key, bl=modifier, esi=buffer, edi=bufferend
  2385 000023EC 8935[4F270000]      <2> 		mov [buftxtloc], esi
  2386 000023F2 A2[47270000]        <2> 		mov [endkeyrdpr], al
  2387 000023F7 881D[48270000]      <2> 		mov [modkeyrdpr], bl
  2388 000023FD 8935[49270000]      <2> 		mov [firstesirdpr], esi
  2389 00002403 893D[53270000]      <2> 		mov [endbufferrdpr], edi
  2390                              <2> 	rdprintb:
  2391 00002409 56                  <2> 		push esi
  2392 0000240A B001                <2> 		mov al, 1
  2393 0000240C E855030000          <2> 		call rdcharint
  2394 00002411 5E                  <2> 		pop esi
  2395 00002412 803D[BF520000]E0    <2> 		cmp byte [specialkey], 0xE0
  2396 00002419 751B                <2> 		jne notspecialrdprnt
  2397 0000241B 80FC53              <2> 		cmp ah, 0x53
  2398 0000241E 0F84E8020000        <2> 		je near rdprdel
  2399 00002424 80FC47              <2> 		cmp ah, 0x47
  2400 00002427 0F8407010000        <2> 		je near rdprhome
  2401 0000242D 80FC4F              <2> 		cmp ah, 0x4F
  2402 00002430 0F841D010000        <2> 		je near rdprend
  2403                              <2> 	notspecialrdprnt:
  2404 00002436 80FC48              <2> 		cmp ah, 0x48
  2405 00002439 0F84D5010000        <2> 		je near rdprup
  2406 0000243F 80FC50              <2> 		cmp ah, 0x50
  2407 00002442 0F84AF010000        <2> 		je near rdprdown
  2408 00002448 80FC4D              <2> 		cmp ah, 0x4D
  2409 0000244B 0F845E010000        <2> 		je near rdprright
  2410 00002451 80FC4B              <2> 		cmp ah, 0x4B
  2411 00002454 0F8416010000        <2> 		je near rdprleft
  2412 0000245A 3C08                <2> 		cmp al, 8
  2413 0000245C 0F84C5020000        <2> 		je near rdprbscheck
  2414 00002462 3C00                <2> 		cmp al, 0
  2415 00002464 74A3                <2> 		je rdprintb
  2416 00002466 80FC00              <2> 		cmp ah, 0
  2417 00002469 749E                <2> 		je rdprintb
  2418 0000246B 8806                <2> 		mov [esi], al
  2419 0000246D 46                  <2> 		inc esi
  2420                              <2> 	bscheckequal:
  2421 0000246E 8A1D[48270000]      <2> 		mov bl, [modkeyrdpr]
  2422 00002474 8A3D[4E270000]      <2> 		mov bh, [txtmask]
  2423 0000247A 80FF00              <2> 		cmp bh, 0
  2424 0000247D 7404                <2> 		je nomasktxt
  2425 0000247F 88F8                <2> 		mov al, bh
  2426 00002481 30FF                <2> 		xor bh, bh
  2427                              <2> 	nomasktxt:
  2428 00002483 E82F030000          <2> 		call prcharint
  2429 00002488 56                  <2> 		push esi
  2430 00002489 66A3[45270000]      <2> 		mov [axcache], ax
  2431 0000248F 8A25[47270000]      <2> 		mov ah, [endkeyrdpr]
  2432 00002495 38E0                <2> 		cmp al, ah
  2433 00002497 7429                <2> 		je nobackprintbuftxt2
  2434 00002499 BE[72B40000]        <2> 		mov esi, buftxt2
  2435 0000249E E82FFEFFFF          <2> 		call printquiet
  2436 000024A3 B020                <2> 		mov al, " "
  2437 000024A5 E81E030000          <2> 		call prcharq
  2438 000024AA B008                <2> 		mov al, 8
  2439 000024AC 81FE[72B40000]      <2> 		cmp esi, buftxt2
  2440 000024B2 740E                <2> 		je nobackprintbuftxt2
  2441                              <2> 	backprintbuftxt2:
  2442 000024B4 E80F030000          <2> 		call prcharq
  2443 000024B9 4E                  <2> 		dec esi
  2444 000024BA 81FE[72B40000]      <2> 		cmp esi, buftxt2
  2445 000024C0 77F2                <2> 		ja backprintbuftxt2
  2446                              <2> 	nobackprintbuftxt2:
  2447 000024C2 3C0A                <2> 		cmp al, 10
  2448 000024C4 7405                <2> 		je nonobackprint
  2449 000024C6 E8EC020000          <2> 		call prcharint
  2450                              <2> 	nonobackprint:
  2451 000024CB 5E                  <2> 		pop esi
  2452 000024CC 3B35[53270000]      <2> 		cmp esi, [endbufferrdpr]
  2453 000024D2 0F8319000000        <2> 		jae near donerdprinc
  2454 000024D8 66A1[45270000]      <2> 		mov ax, [axcache]
  2455 000024DE 8A25[47270000]      <2> 		mov ah, [endkeyrdpr]
  2456 000024E4 38E0                <2> 		cmp al, ah
  2457 000024E6 0F851DFFFFFF        <2> 		jne rdprintb
  2458 000024EC E901000000          <2> 		jmp donerdprint
  2459                              <2> 	donerdprinc:
  2460 000024F1 46                  <2> 		inc esi
  2461                              <2> 	donerdprint:
  2462 000024F2 4E                  <2> 		dec esi
  2463 000024F3 BF[72B40000]        <2> 		mov edi, buftxt2
  2464                              <2> 	copylaterstuff:
  2465 000024F8 8A07                <2> 		mov al, [edi]
  2466 000024FA 3C00                <2> 		cmp al, 0
  2467 000024FC 7406                <2> 		je nocopylaterstuff
  2468 000024FE 8806                <2> 		mov [esi], al
  2469 00002500 47                  <2> 		inc edi
  2470 00002501 46                  <2> 		inc esi
  2471 00002502 EBF4                <2> 		jmp copylaterstuff
  2472                              <2> 	nocopylaterstuff:
  2473 00002504 C60600              <2> 		mov byte [esi], 0
  2474 00002507 E80B000000          <2> 		call clearbuftxt2
  2475 0000250C 89F1                <2> 		mov ecx, esi
  2476 0000250E 8B3D[49270000]      <2> 		mov edi, [firstesirdpr]
  2477 00002514 29F9                <2> 		sub ecx, edi
  2478 00002516 C3                  <2> 		ret
  2479                              <2> 	
  2480                              <2> 	clearbuftxt2:
  2481 00002517 30C0                <2> 		xor al, al
  2482 00002519 BF[72B40000]        <2> 		mov edi, buftxt2
  2483                              <2> 	clearbuftxt2lp:
  2484 0000251E 8807                <2> 		mov [edi], al
  2485 00002520 47                  <2> 		inc edi
  2486 00002521 81FF[7CB80000]      <2> 		cmp edi, buftxt
  2487 00002527 75F5                <2> 		jne clearbuftxt2lp
  2488 00002529 C3                  <2> 		ret
  2489                              <2> 	
  2490                              <2> 	rdprintb2:
  2491 0000252A E8F2040000          <2> 		call termcopy
  2492 0000252F E9D5FEFFFF          <2> 		jmp rdprintb
  2493                              <2> 		
  2494                              <2> 	rdprhome:
  2495 00002534 3B35[4F270000]      <2> 		cmp esi, [buftxtloc]
  2496 0000253A 0F84EAFFFFFF        <2> 		je near rdprintb2
  2497 00002540 BF[72B40000]        <2> 		mov edi, buftxt2
  2498 00002545 8A07                <2> 		mov al, [edi]
  2499 00002547 E846000000          <2> 		call shiftbuftxt2
  2500 0000254C E877020000          <2> 		call prcharq
  2501 00002551 EBE1                <2> 		jmp rdprhome
  2502                              <2> 		
  2503                              <2> 	rdprend:
  2504 00002553 BF[72B40000]        <2> 		mov edi, buftxt2
  2505 00002558 8A07                <2> 		mov al, [edi]
  2506 0000255A 3C00                <2> 		cmp al, 0
  2507 0000255C 0F84C8FFFFFF        <2> 		je near rdprintb2
  2508 00002562 8806                <2> 		mov [esi], al
  2509 00002564 E866000000          <2> 		call shiftbuftxt2lft
  2510 00002569 E85A020000          <2> 		call prcharq
  2511 0000256E EBE3                <2> 		jmp rdprend
  2512                              <2> 	
  2513                              <2> 	rdprleft:
  2514 00002570 3B35[4F270000]      <2> 		cmp esi, [buftxtloc]
  2515 00002576 0F848DFEFFFF        <2> 		je near rdprintb
  2516 0000257C BF[72B40000]        <2> 		mov edi, buftxt2
  2517 00002581 8A07                <2> 		mov al, [edi]
  2518 00002583 E80A000000          <2> 		call shiftbuftxt2
  2519 00002588 E82A020000          <2> 		call prcharint
  2520 0000258D E977FEFFFF          <2> 		jmp rdprintb
  2521                              <2> 	shiftbuftxt2:
  2522 00002592 3C00                <2> 		cmp al, 0
  2523 00002594 7409                <2> 		je noshiftbuftxt2
  2524 00002596 47                  <2> 		inc edi
  2525 00002597 8A27                <2> 		mov ah, [edi]
  2526 00002599 8807                <2> 		mov [edi], al
  2527 0000259B 88E0                <2> 		mov al, ah
  2528 0000259D EBF3                <2> 		jmp shiftbuftxt2
  2529                              <2> 	noshiftbuftxt2:
  2530 0000259F BF[72B40000]        <2> 		mov edi, buftxt2
  2531 000025A4 4E                  <2> 		dec esi
  2532 000025A5 8A06                <2> 		mov al, [esi]
  2533 000025A7 8807                <2> 		mov [edi], al
  2534 000025A9 C60600              <2> 		mov byte [esi], 0
  2535 000025AC B008                <2> 		mov al, 8
  2536 000025AE C3                  <2> 		ret
  2537                              <2> 		
  2538                              <2> 	rdprright:
  2539 000025AF BF[72B40000]        <2> 		mov edi, buftxt2
  2540 000025B4 8A07                <2> 		mov al, [edi]
  2541 000025B6 3C00                <2> 		cmp al, 0
  2542 000025B8 0F844BFEFFFF        <2> 		je near rdprintb
  2543 000025BE 8806                <2> 		mov [esi], al
  2544 000025C0 E80A000000          <2> 		call shiftbuftxt2lft
  2545 000025C5 E8ED010000          <2> 		call prcharint
  2546 000025CA E93AFEFFFF          <2> 		jmp rdprintb
  2547                              <2> 	shiftbuftxt2lft:
  2548 000025CF 3C00                <2> 		cmp al, 0
  2549 000025D1 7408                <2> 		je noshiftbuftxt2lft
  2550 000025D3 47                  <2> 		inc edi
  2551 000025D4 8A07                <2> 		mov al, [edi]
  2552 000025D6 8847FF              <2> 		mov [edi - 1], al
  2553 000025D9 EBF4                <2> 		jmp shiftbuftxt2lft
  2554                              <2> 	noshiftbuftxt2lft:
  2555 000025DB 8A06                <2> 		mov al, [esi]
  2556 000025DD 46                  <2> 		inc esi
  2557 000025DE 8A1D[48270000]      <2> 		mov bl, [modkeyrdpr]
  2558 000025E4 C3                  <2> 		ret
  2559                              <2> 		
  2560                              <2> 	rdprdownbck:
  2561 000025E5 FECC                <2> 		dec ah
  2562 000025E7 8825[4D270000]      <2> 		mov [commandedit], ah
  2563 000025ED E83A000000          <2> 		call rdprbckspc
  2564 000025F2 E912FEFFFF          <2> 		jmp rdprintb
  2565                              <2> 	
  2566                              <2> 	rdprdown:
  2567 000025F7 8A25[4D270000]      <2> 		mov ah, [commandedit]
  2568 000025FD 80FC01              <2> 		cmp ah, 1
  2569 00002600 0F8603FEFFFF        <2> 		jbe near rdprintb
  2570 00002606 80FC02              <2> 		cmp ah, 2
  2571 00002609 74DA                <2> 		je rdprdownbck
  2572 0000260B 80EC02              <2> 		sub ah, 2
  2573 0000260E 8825[4D270000]      <2> 		mov [commandedit], ah
  2574                              <2> 		
  2575                              <2> 	rdprup:
  2576 00002614 30C0                <2> 		xor al, al
  2577 00002616 3805[4D270000]      <2> 		cmp [commandedit], al
  2578 0000261C 0F84E7FDFFFF        <2> 		je near rdprintb
  2579 00002622 E805000000          <2> 		call rdprbckspc
  2580 00002627 E941000000          <2> 		jmp getcurrentcommandstr
  2581                              <2> 	rdprbckspc:
  2582 0000262C 3B35[4F270000]      <2> 		cmp esi, [buftxtloc]
  2583 00002632 742B                <2> 		je nordprupbck
  2584                              <2> 	rdprupbckspclp:
  2585 00002634 B008                <2> 		mov al, 8
  2586 00002636 8A1D[48270000]      <2> 		mov bl, [modkeyrdpr]
  2587 0000263C E887010000          <2> 		call prcharq
  2588 00002641 B020                <2> 		mov al, " "
  2589 00002643 E880010000          <2> 		call prcharq
  2590 00002648 B008                <2> 		mov al, 8
  2591 0000264A E879010000          <2> 		call prcharq
  2592 0000264F 4E                  <2> 		dec esi
  2593 00002650 3B35[4F270000]      <2> 		cmp esi, [buftxtloc]
  2594 00002656 7402                <2> 		je nordprupbck2
  2595 00002658 EBDA                <2> 		jmp rdprupbckspclp
  2596                              <2> 	nordprupbck2:
  2597 0000265A E8C2030000          <2> 		call termcopy
  2598                              <2> 	nordprupbck:
  2599 0000265F 8B3D[155F0100]      <2> 		mov edi, [currentcommandpos]
  2600 00002665 81C7[195F0100]      <2> 		add edi, commandbuf
  2601 0000266B 4F                  <2> 		dec edi
  2602 0000266C C3                  <2> 		ret
  2603                              <2> 	getcurrentcommandstr:
  2604 0000266D 8A25[4D270000]      <2> 		mov ah, [commandedit]
  2605 00002673 FE05[4D270000]      <2> 		inc byte [commandedit]
  2606                              <2> 	getccmdlp:
  2607 00002679 4F                  <2> 		dec edi
  2608 0000267A 8A07                <2> 		mov al, [edi]
  2609 0000267C 81FF[195F0100]      <2> 		cmp edi, commandbuf
  2610 00002682 7231                <2> 		jb getcmdresetcommandbuf
  2611 00002684 81EF[195F0100]      <2> 		sub edi, commandbuf
  2612 0000268A 3B3D[155F0100]      <2> 		cmp edi, [currentcommandpos]
  2613 00002690 0F8473FDFFFF        <2> 		je near rdprintb
  2614 00002696 81C7[195F0100]      <2> 		add edi, commandbuf
  2615 0000269C 3C00                <2> 		cmp al, 0
  2616 0000269E 75D9                <2> 		jne getccmdlp
  2617 000026A0 FECC                <2> 		dec ah
  2618 000026A2 80FC00              <2> 		cmp ah, 0
  2619 000026A5 77D2                <2> 		ja getccmdlp
  2620 000026A7 47                  <2> 		inc edi
  2621 000026A8 81FF[196F0100]      <2> 		cmp edi, commandbufend
  2622 000026AE 770D                <2> 		ja fixcmdbufb4morerdpr
  2623 000026B0 E915000000          <2> 		jmp morerdprup
  2624                              <2> 	getcmdresetcommandbuf:
  2625 000026B5 BF[196F0100]        <2> 		mov edi, commandbufend
  2626 000026BA 47                  <2> 		inc edi
  2627 000026BB EBBC                <2> 		jmp getccmdlp
  2628                              <2> 	fixcmdbufb4morerdpr:
  2629 000026BD 4F                  <2> 		dec edi
  2630 000026BE 81EF[196F0100]      <2> 		sub edi, commandbufend
  2631 000026C4 81C7[195F0100]      <2> 		add edi, commandbuf
  2632                              <2> 	morerdprup:
  2633 000026CA 8A07                <2> 		mov al, [edi]
  2634 000026CC 47                  <2> 		inc edi
  2635 000026CD 81EF[195F0100]      <2> 		sub edi, commandbuf
  2636 000026D3 3C00                <2> 		cmp al, 0
  2637 000026D5 0F844FFEFFFF        <2> 		je near rdprintb2
  2638 000026DB 3B3D[155F0100]      <2> 		cmp edi, [currentcommandpos]
  2639 000026E1 0F8343FEFFFF        <2> 		jae near rdprintb2
  2640 000026E7 81C7[195F0100]      <2> 		add edi, commandbuf
  2641 000026ED 8806                <2> 		mov [esi], al
  2642 000026EF 46                  <2> 		inc esi
  2643 000026F0 57                  <2> 		push edi
  2644 000026F1 8A1D[48270000]      <2> 		mov bl, [modkeyrdpr]
  2645 000026F7 E8CC000000          <2> 		call prcharq
  2646 000026FC 5F                  <2> 		pop edi
  2647 000026FD 81FF[196F0100]      <2> 		cmp edi, commandbufend
  2648 00002703 76C5                <2> 		jbe morerdprup
  2649 00002705 BF[195F0100]        <2> 		mov edi, commandbuf
  2650 0000270A EBBE                <2> 		jmp morerdprup
  2651                              <2> 		
  2652                              <2> 	rdprdel:
  2653 0000270C BF[72B40000]        <2> 		mov edi, buftxt2
  2654 00002711 8A07                <2> 		mov al, [edi]
  2655 00002713 3C00                <2> 		cmp al, 0
  2656 00002715 0F84EEFCFFFF        <2> 		je near rdprintb
  2657 0000271B 8806                <2> 		mov [esi], al
  2658 0000271D E8ADFEFFFF          <2> 		call shiftbuftxt2lft
  2659 00002722 E8A1000000          <2> 		call prcharq
  2660                              <2> 	rdprbscheck:
  2661 00002727 3B35[49270000]      <2> 		cmp esi, [firstesirdpr]
  2662 0000272D 7705                <2> 		ja goodbscheck
  2663 0000272F E9D5FCFFFF          <2> 		jmp rdprintb
  2664                              <2> 	goodbscheck:
  2665 00002734 4E                  <2> 		dec esi
  2666 00002735 C60600              <2> 		mov byte [esi], 0
  2667 00002738 8A1D[48270000]      <2> 		mov bl, [modkeyrdpr]
  2668 0000273E B008                <2> 		mov al, 8
  2669 00002740 E929FDFFFF          <2> 		jmp bscheckequal
  2670                              <2> 		
  2671 00002745 0000                <2> axcache dw 0
  2672 00002747 00                  <2> endkeyrdpr db 0
  2673 00002748 00                  <2> modkeyrdpr db 0
  2674 00002749 00000000            <2> firstesirdpr dd 0
  2675 0000274D 00                  <2> commandedit db 0
  2676 0000274E 00                  <2> txtmask db 0
  2677 0000274F 00000000            <2> buftxtloc dd 0
  2678 00002753 00000000            <2> endbufferrdpr dd 0
  2679 00002757 082000              <2> backcursor db 8," ",0
  2680                              <1> intx5:
  2681                              <1> 	%include 'source/interrupts/5-readchar.asm'
  2682 0000275A E807000000          <2> 	call rdcharint
  2683 0000275F E92EDFFFFF          <2> 	jmp timerinterrupt
  2684                              <2> 	
  2685                              <2> getchar:
  2686 00002764 30C0                <2> 	xor al, al
  2687                              <2> 	rdcharint:		;;get char, if al is 0, wait for key
  2688 00002766 C605[AC270000]01    <2> 		mov byte [trans], 1
  2689 0000276D 3C00                <2> 		cmp al, 0
  2690 0000276F 7507                <2> 		jne transcheck
  2691 00002771 C605[AC270000]00    <2> 		mov byte [trans], 0
  2692                              <2> 	transcheck:
  2693 00002778 E8622B0000          <2> 		call getkey
  2694 0000277D 8A3D[AC270000]      <2> 		mov bh, [trans]
  2695 00002783 66A1[AA270000]      <2> 		mov ax, [lastkey]
  2696 00002789 80FC1C              <2> 		cmp ah, 1Ch
  2697 0000278C 7419                <2> 		je rdenter
  2698 0000278E 803D[BF520000]E0    <2> 		cmp byte [specialkey], 0xE0
  2699 00002795 7504                <2> 		jne nospecialtrans
  2700 00002797 88C3                <2> 		mov bl, al
  2701 00002799 30C0                <2> 		xor al, al
  2702                              <2> 	nospecialtrans:
  2703 0000279B 08C7                <2> 		or bh, al
  2704 0000279D 80FF00              <2> 		cmp bh, 0
  2705 000027A0 74D6                <2> 		je transcheck
  2706 000027A2 E902000000          <2> 		jmp rdend
  2707                              <2> 	rdenter:
  2708 000027A7 B00A                <2> 		mov al, 10
  2709                              <2> 	rdend:
  2710 000027A9 C3                  <2> 		ret
  2711                              <2> 		
  2712 000027AA 0000                <2> lastkey db 0,0
  2713 000027AC 00                  <2> trans db 0
  2714                              <1> intx6:
  2715                              <1> 	%include 'source/interrupts/6-prntchar.asm'
  2716 000027AD E805000000          <2> call prcharint
  2717 000027B2 E9DBDEFFFF          <2> jmp timerinterrupt
  2718                              <2> 	
  2719                              <2> prcharint:	;;print char, char in al, modifier in bl, if bh = bl then termcopy will not happen, will run videobufcopy if called as is
  2720 000027B7 38FB                <2> 	cmp bl, bh
  2721 000027B9 740D                <2> 	je prcharq
  2722 000027BB E808000000          <2> 	call prcharq
  2723 000027C0 E85C020000          <2> 	call termcopy
  2724 000027C5 C3                  <2> 	ret
  2725 000027C6 00                  <2> termguion db 0
  2726 000027C7 00                  <2> termcopyon db 0
  2727                              <2> prcharq:
  2728 000027C8 88DC                <2> 	mov ah, bl
  2729 000027CA 66A3[8C290000]      <2> 	mov [charbuf], ax
  2730 000027D0 31DB                <2> 	xor ebx, ebx
  2731 000027D2 668B1D[86290000]    <2> 	mov bx, [videobufpos]
  2732 000027D9 BF[91BC0000]        <2> 	mov edi, videobuf
  2733 000027DE 01DF                <2> 	add edi, ebx
  2734 000027E0 66A1[1F2A0000]      <2> 	mov ax, [removedvideo]
  2735 000027E6 668907              <2> 	mov [edi], ax
  2736 000027E9 66A1[8C290000]      <2> 	mov ax, [charbuf]
  2737 000027EF 31D2                <2> 	xor edx, edx
  2738 000027F1 668B15[88290000]    <2> 	mov dx, [charpos]
  2739 000027F8 31C9                <2> 	xor ecx, ecx
  2740 000027FA 668B0D[8A290000]    <2> 	mov cx, [charxy]
  2741 00002801 3C09                <2> 	cmp al, 9
  2742 00002803 0F8463000000        <2> 	je near prtab
  2743 00002809 3C0D                <2> 	cmp al, 13		;I am phasing this out-it is used by windows but not unix based systems
  2744 0000280B 0F848B000000        <2> 	je near prcr
  2745 00002811 3C0A                <2> 	cmp al, 10
  2746 00002813 0F84B7000000        <2> 	je near prnlcr
  2747 00002819 3C08                <2> 	cmp al, 8
  2748 0000281B 0F848F000000        <2> 	je near prbs
  2749 00002821 3CFF                <2> 	cmp al, 255		;;null character
  2750 00002823 0F841B000000        <2> 	je near donescr
  2751 00002829 668907              <2> 	mov [edi], ax
  2752 0000282C 81C702000000        <2> 	add edi, 2
  2753 00002832 FEC2                <2> 	inc dl
  2754                              <2> donecrnl:
  2755 00002834 38CA                <2> 	cmp dl, cl
  2756 00002836 0F83B9000000        <2> 	jae near preol
  2757                              <2> doneeol:
  2758 0000283C 38EE                <2> 	cmp dh, ch
  2759 0000283E 0F83CF000000        <2> 	jae near prscr	
  2760                              <2> donescr:
  2761 00002844 89FB                <2> 	mov ebx, edi
  2762 00002846 668B07              <2> 	mov ax, [edi]
  2763 00002849 66A3[1F2A0000]      <2> 	mov [removedvideo], ax
  2764 0000284F 81EB[91BC0000]      <2> 	sub ebx, videobuf
  2765 00002855 66891D[86290000]    <2> 	mov [videobufpos], bx
  2766 0000285C 668915[88290000]    <2> 	mov [charpos], dx
  2767 00002863 66A1[8C290000]      <2> 	mov ax, [charbuf]
  2768 00002869 88E3                <2> 	mov bl, ah
  2769 0000286B C3                  <2> 	ret
  2770                              <2> 	
  2771                              <2> 	prtab:
  2772 0000286C 31DB                <2> 		xor ebx, ebx
  2773 0000286E 668B1D[84290000]    <2> 		mov bx, [linebeginpos]
  2774 00002875 81EF[91BC0000]      <2> 		sub edi, videobuf
  2775 0000287B 29DF                <2> 		sub edi, ebx
  2776 0000287D C1EF04              <2> 		shr edi, 4
  2777 00002880 C1E704              <2> 		shl edi, 4
  2778 00002883 81C710000000        <2> 		add edi, 16
  2779 00002889 C0EA03              <2> 		shr dl, 3
  2780 0000288C C0E203              <2> 		shl dl, 3
  2781 0000288F 80C208              <2> 		add dl, 8
  2782 00002892 81C7[91BC0000]      <2> 		add edi, videobuf
  2783 00002898 01DF                <2> 		add edi, ebx
  2784 0000289A EB98                <2> 		jmp donecrnl
  2785                              <2> 	
  2786                              <2> 	prcr:
  2787 0000289C 30D2                <2> 		xor dl, dl
  2788 0000289E 31DB                <2> 		xor ebx, ebx
  2789 000028A0 BF[91BC0000]        <2> 		mov edi, videobuf
  2790 000028A5 668B1D[84290000]    <2> 		mov bx, [linebeginpos]
  2791 000028AC 01DF                <2> 		add edi, ebx
  2792 000028AE EB84                <2> 		jmp donecrnl
  2793                              <2> 			
  2794                              <2> 	prbs:
  2795 000028B0 80FA00              <2> 		cmp dl, 0
  2796 000028B3 7410                <2> 		je prbackline
  2797                              <2> 	prnobmr:
  2798 000028B5 FECA                <2> 		dec dl
  2799 000028B7 6631C0              <2> 		xor ax, ax
  2800 000028BA 81EF02000000        <2> 		sub edi, 2
  2801 000028C0 E96FFFFFFF          <2> 		jmp donecrnl
  2802                              <2> 	prbackline:
  2803 000028C5 88CA                <2> 		mov dl, cl
  2804 000028C7 80FE00              <2> 		cmp dh, 0
  2805 000028CA 74E9                <2> 		je prnobmr
  2806 000028CC FECE                <2> 		dec dh
  2807 000028CE EBE5                <2> 		jmp prnobmr
  2808                              <2> 		
  2809                              <2> 	prnlcr:
  2810 000028D0 FEC6                <2> 		inc dh
  2811 000028D2 31DB                <2> 		xor ebx, ebx
  2812 000028D4 30D2                <2> 		xor dl, dl
  2813 000028D6 88CB                <2> 		mov bl, cl
  2814 000028D8 66D1E3              <2> 		shl bx, 1
  2815 000028DB BF[91BC0000]        <2> 		mov edi, videobuf
  2816 000028E0 66031D[84290000]    <2> 		add bx, [linebeginpos]
  2817 000028E7 66891D[84290000]    <2> 		mov [linebeginpos], bx
  2818 000028EE 01DF                <2> 		add edi, ebx
  2819 000028F0 E93FFFFFFF          <2> 		jmp donecrnl
  2820                              <2> 		
  2821                              <2> 	preol:
  2822 000028F5 30D2                <2> 		xor dl, dl
  2823 000028F7 FEC6                <2> 		inc dh
  2824 000028F9 31DB                <2> 		xor ebx, ebx
  2825 000028FB 88CB                <2> 		mov bl, cl
  2826 000028FD 66D1E3              <2> 		shl bx, 1
  2827 00002900 66031D[84290000]    <2> 		add bx, [linebeginpos]
  2828 00002907 66891D[84290000]    <2> 		mov [linebeginpos], bx
  2829 0000290E E929FFFFFF          <2> 		jmp doneeol
  2830                              <2> 	prscr:
  2831 00002913 FECE                <2> 		dec dh
  2832 00002915 BF[91BC0000]        <2> 		mov edi, videobuf
  2833 0000291A 31DB                <2> 		xor ebx, ebx
  2834 0000291C 88CB                <2> 		mov bl, cl
  2835 0000291E 66D1E3              <2> 		shl bx, 1
  2836 00002921 01FB                <2> 		add ebx, edi
  2837                              <2> 	intscrollloop:
  2838 00002923 668B03              <2> 		mov ax, [ebx]
  2839 00002926 668907              <2> 		mov [edi], ax
  2840 00002929 81C702000000        <2> 		add edi, 2
  2841 0000292F 81C302000000        <2> 		add ebx, 2
  2842 00002935 FEC9                <2> 		dec cl
  2843 00002937 80F900              <2> 		cmp cl, 0
  2844 0000293A 75E7                <2> 		jne intscrollloop
  2845 0000293C 8A0D[8A290000]      <2> 		mov cl, [charxy]
  2846 00002942 FECD                <2> 		dec ch
  2847 00002944 80FD01              <2> 		cmp ch, 1
  2848 00002947 77DA                <2> 		ja intscrollloop
  2849 00002949 6631C0              <2> 		xor ax, ax
  2850 0000294C 81EF[91BC0000]      <2> 		sub edi, videobuf
  2851 00002952 66893D[84290000]    <2> 		mov [linebeginpos], di
  2852 00002959 81C7[91BC0000]      <2> 		add edi, videobuf
  2853 0000295F 89FB                <2> 		mov ebx, edi
  2854                              <2> 	intloopclear:
  2855 00002961 668903              <2> 		mov [ebx], ax
  2856 00002964 81C302000000        <2> 		add ebx, 2
  2857 0000296A FEC9                <2> 		dec cl
  2858 0000296C 80F900              <2> 		cmp cl, 0
  2859 0000296F 75F0                <2> 		jne intloopclear
  2860 00002971 FECD                <2> 		dec ch
  2861 00002973 80FD00              <2> 		cmp ch, 0
  2862 00002976 75E9                <2> 		jne intloopclear
  2863 00002978 668B0D[8A290000]    <2> 		mov cx, [charxy]
  2864 0000297F E9C0FEFFFF          <2> 		jmp donescr
  2865                              <2> 		
  2866 00002984 0000                <2> linebeginpos dw 0
  2867 00002986 0000                <2> videobufpos: dw 0
  2868 00002988 0000                <2> charpos db 0,0
  2869 0000298A 501E                <2> charxy db 80,30
  2870 0000298C 0000                <2> charbuf dw 0
  2871                              <1> intx7:
  2872                              <1> 	%include 'source/interrupts/7-openfile.asm'
  2873 0000298E E894470000          <2> 	call loadfile
  2874 00002993 E9FADCFFFF          <2> 	jmp timerinterrupt
  2875                              <1> intx9:
  2876                              <1> 	%include 'source/interrupts/9-num2str.asm'
  2877 00002998 3C00                <2> 	cmp al, 0
  2878 0000299A 750A                <2> 	jne num2strb
  2879 0000299C E8AF090000          <2> 	call showdec
  2880 000029A1 E9ECDCFFFF          <2> 	jmp timerinterrupt
  2881                              <2> num2strb:
  2882 000029A6 E8EE080000          <2> 	call showhex
  2883 000029AB E9E2DCFFFF          <2> 	jmp timerinterrupt
  2884                              <1> intx10:
  2885                              <1> 	%include 'source/interrupts/10-str2num.asm'
  2886 000029B0 E86F0A0000          <2> 	call cnvrttxt	;the string goes into esi, number into ecx
  2887 000029B5 CF                  <2> 	iret
  2888                              <2> 	
  2889                              <1> intx11:
  2890                              <1> 	%include 'source/interrupts/11-forkthread.asm'
  2891 000029B6 E8774C0000          <2> 	call threadfork
  2892 000029BB CF                  <2> 	iret
  2893                              <1> intx12:
  2894                              <1> 	%include 'source/interrupts/12-gettime.asm'
  2895 000029BC A1[32060000]        <2> 	mov eax, [timeseconds]
  2896 000029C1 8B1D[36060000]      <2> 	mov ebx, [timenanoseconds]
  2897 000029C7 89D9                <2> 	mov ecx, ebx
  2898 000029C9 C1E90A              <2> 	shr ecx, 10	;this is in microseconds
  2899 000029CC CF                  <2> 	iret
  2900                              <2> 	
  2901                              <1> intx13:
  2902                              <1> 	%include 'source/interrupts/13-settime.asm'
  2903 000029CD A3[32060000]        <2> 	mov [timeseconds], eax
  2904 000029D2 891D[36060000]      <2> 	mov [timenanoseconds], ebx
  2905 000029D8 CF                  <2> 	iret
  2906                              <2> 	
  2907                              <1> intx14:
  2908                              <1> 	%include 'source/interrupts/14-runcmd.asm'
  2909 000029D9 BF[7CB80000]        <2> 	mov edi, buftxt
  2910                              <2> cpccmd:
  2911 000029DE 8A06                <2> 	mov al, [esi]
  2912 000029E0 8807                <2> 	mov [edi], al
  2913 000029E2 46                  <2> 	inc esi
  2914 000029E3 47                  <2> 	inc edi
  2915 000029E4 E2F8                <2> 	loop cpccmd
  2916 000029E6 E96A050000          <2> 	jmp run
  2917                              <1> intx15:
  2918                              <1> 	%include 'source/interrupts/15-proginfo.asm'
  2919 000029EB BB[72A40000]        <2> 	mov ebx, variables
  2920 000029F0 8B35[33300000]      <2> 	mov esi, [currentcommandloc]
  2921 000029F6 89F7                <2> 	mov edi, esi
  2922 000029F8 31C9                <2> 	xor ecx, ecx
  2923                              <2> getcommandzeroes:
  2924 000029FA 8A07                <2> 	mov al, [edi]
  2925 000029FC 47                  <2> 	inc edi
  2926 000029FD 3C3B                <2> 	cmp al, ';'
  2927 000029FF 740B                <2> 	je nomorezeroes
  2928 00002A01 3C00                <2> 	cmp al, 0
  2929 00002A03 7407                <2> 	je nomorezeroes
  2930 00002A05 3C20                <2> 	cmp al, ' '
  2931 00002A07 75F1                <2> 	jne getcommandzeroes
  2932 00002A09 41                  <2> 	inc ecx
  2933 00002A0A EBEE                <2> 	jmp getcommandzeroes
  2934                              <2> nomorezeroes:
  2935 00002A0C 41                  <2> 	inc ecx
  2936 00002A0D 4F                  <2> 	dec edi
  2937 00002A0E 8B1D[FFA30000]      <2> 	mov ebx, [uid]
  2938 00002A14 8B15[1A780000]      <2> 	mov edx, [currentthread]
  2939 00002A1A CF                  <2> 	iret
  2940                              <2> 	
  2941                              <1> 		
  2942 00002A1B 00000000            <1> 	termcursorpos dd 0
  2943 00002A1F 0000                <1> 	removedvideo dw 0
  2944                              <1> termcopy:	
  2945 00002A21 60                  <1> 	pusha
  2946 00002A22 BF[91BC0000]        <1> 	mov edi, videobuf
  2947 00002A27 31DB                <1> 	xor ebx, ebx
  2948 00002A29 668B1D[86290000]    <1> 	mov bx, [videobufpos]
  2949 00002A30 01DF                <1> 	add edi, ebx
  2950 00002A32 893D[1B2A0000]      <1> 	mov [termcursorpos], edi
  2951 00002A38 E8CB000000          <1> 	call switchtermcursor
  2952 00002A3D C605[F1570000]00    <1> 	mov byte [mouseselecton], 0
  2953 00002A44 C605[C7270000]01    <1> 	mov byte [termcopyon], 1
  2954 00002A4B 803D[988B0000]00    <1> 	cmp byte [guion], 0
  2955 00002A52 0F8412000000        <1> 	je near nowincopy
  2956 00002A58 803D[C6270000]01    <1> 	cmp byte [termguion], 1
  2957 00002A5F 0F84A5390000        <1> 	je near windowvideocopy
  2958 00002A65 E997000000          <1> 	jmp nocopytermatall
  2959                              <1> nowincopy:
  2960 00002A6A BE00000A00          <1> 	mov esi, 0xA0000
  2961 00002A6F A1[1F060000]        <1> 	mov eax, [basecache]
  2962 00002A74 C1E004              <1> 	shl eax, 4
  2963 00002A77 29C6                <1> 	sub esi, eax
  2964 00002A79 BF[91BC0000]        <1> 	mov edi, videobuf
  2965 00002A7E 31C9                <1> 	xor ecx, ecx
  2966 00002A80 668B0D[8A290000]    <1> 	mov cx, [charxy]
  2967                              <1> nowincopy2:
  2968 00002A87 668B07              <1> 	mov ax, [edi]
  2969 00002A8A 81C740510000        <1> 	add edi, (videobuf2 - videobuf)
  2970 00002A90 668B1F              <1> 	mov bx, [edi]
  2971 00002A93 668907              <1> 	mov [edi], ax
  2972 00002A96 81EF40510000        <1> 	sub edi, (videobuf2 - videobuf)
  2973 00002A9C 47                  <1> 	inc edi
  2974 00002A9D 6639D8              <1> 	cmp ax, bx
  2975 00002AA0 743E                <1> 	je nopresentwinfont
  2976 00002AA2 4F                  <1> 	dec edi
  2977 00002AA3 BB[86780000]        <1> 	mov ebx, fonts
  2978 00002AA8 31C0                <1> 	xor eax, eax
  2979 00002AAA 8A07                <1> 	mov al, [edi]
  2980 00002AAC C1E004              <1> 	shl eax, 4
  2981 00002AAF 01C3                <1> 	add ebx, eax
  2982 00002AB1 47                  <1> 	inc edi
  2983 00002AB2 8A27                <1> 	mov ah, [edi]
  2984 00002AB4 31D2                <1> 	xor edx, edx
  2985 00002AB6 8A15[8A290000]      <1> 	mov dl, [charxy]
  2986 00002ABC C1C110              <1> 	rol ecx, 16
  2987 00002ABF B110                <1> 	mov cl, 16
  2988                              <1> nowinfont:
  2989 00002AC1 8A03                <1> 	mov al, [ebx]
  2990 00002AC3 D0C8                <1> 	ror al, 1
  2991 00002AC5 80FC07              <1> 	cmp ah, 7
  2992 00002AC8 7602                <1> 	jbe notnotfont
  2993 00002ACA F6D0                <1> 	not al
  2994                              <1> notnotfont:
  2995 00002ACC 8806                <1> 	mov [esi], al
  2996 00002ACE 01D6                <1> 	add esi, edx
  2997 00002AD0 43                  <1> 	inc ebx
  2998 00002AD1 FEC9                <1> 	dec cl
  2999 00002AD3 80F900              <1> 	cmp cl, 0
  3000 00002AD6 75E9                <1> 	jne nowinfont
  3001 00002AD8 C1E204              <1> 	shl edx, 4
  3002 00002ADB 29D6                <1> 	sub esi, edx
  3003 00002ADD C1C110              <1> 	rol ecx, 16
  3004                              <1> nopresentwinfont:
  3005 00002AE0 47                  <1> 	inc edi
  3006 00002AE1 46                  <1> 	inc esi
  3007 00002AE2 FEC9                <1> 	dec cl
  3008 00002AE4 80F900              <1> 	cmp cl, 0
  3009 00002AE7 759E                <1> 	jne nowincopy2
  3010 00002AE9 8A0D[8A290000]      <1> 	mov cl, [charxy]
  3011 00002AEF 31D2                <1> 	xor edx, edx
  3012 00002AF1 88CA                <1> 	mov dl, cl
  3013 00002AF3 29D6                <1> 	sub esi, edx
  3014 00002AF5 C1E204              <1> 	shl edx, 4
  3015 00002AF8 01D6                <1> 	add esi, edx
  3016 00002AFA FECD                <1> 	dec ch
  3017 00002AFC 80FD00              <1> 	cmp ch, 0
  3018 00002AFF 7586                <1> 	jne nowincopy2
  3019                              <1> nocopytermatall:
  3020 00002B01 E802000000          <1> 	call switchtermcursor
  3021 00002B06 61                  <1> 	popa
  3022 00002B07 C3                  <1> 	ret
  3023                              <1> 	
  3024                              <1> switchtermcursor:
  3025 00002B08 8B3D[1B2A0000]      <1> 	mov edi, [termcursorpos]
  3026 00002B0E 8A4701              <1> 	mov al, [edi + 1]
  3027 00002B11 8A27                <1> 	mov ah, [edi]
  3028 00002B13 3C07                <1> 	cmp al, 7
  3029 00002B15 7607                <1> 	jbe movlargecursorterm
  3030 00002B17 B007                <1> 	mov al, 7
  3031 00002B19 E902000000          <1> 	jmp movedcursorterm
  3032                              <1> movlargecursorterm:
  3033 00002B1E B0F0                <1> 	mov al, 0xF0
  3034                              <1> movedcursorterm:
  3035 00002B20 884701              <1> 	mov [edi + 1], al
  3036 00002B23 80FC00              <1> 	cmp ah, 0
  3037 00002B26 7504                <1> 	jne fixednocursorterm
  3038 00002B28 B420                <1> 	mov ah, " "
  3039 00002B2A 8827                <1> 	mov [edi], ah
  3040                              <1> fixednocursorterm:
  3041 00002B2C C3                  <1> 	ret
  3042                                      %include 'source/dosints.asm'
  3043                              <1> int20h:
  3044 00002B2D 66B8004C            <1> mov ax, 0x4C00
  3045                              <1> int21h:
  3046                              <1> dostosolleros:
  3047 00002B31 6650                <1> 	push ax
  3048 00002B33 66B82800            <1> 	mov ax, NEW_DATA_SEL
  3049 00002B37 8ED8                <1> 	mov ds, ax
  3050 00002B39 8EC0                <1> 	mov es, ax
  3051 00002B3B 8EE0                <1> 	mov fs, ax
  3052 00002B3D 66B81800            <1> 	mov ax, SYS_DATA_SEL
  3053 00002B41 8EE8                <1> 	mov gs, ax
  3054 00002B43 6658                <1> 	pop ax
  3055 00002B45 9C                  <1> 	pushf
  3056 00002B46 60                  <1> 	pusha
  3057 00002B47 80FC01              <1> 	cmp ah, 1
  3058 00002B4A 0F8449000000        <1> 	je near dosgchar
  3059 00002B50 80FC02              <1> 	cmp ah, 2
  3060 00002B53 0F8447000000        <1> 	je near doswchar
  3061 00002B59 80FC09              <1> 	cmp ah, 9
  3062 00002B5C 0F8449000000        <1> 	je near dosprintstr
  3063 00002B62 80FC0A              <1> 	cmp ah, 0xA
  3064 00002B65 0F8456000000        <1> 	je near dosgetstr
  3065 00002B6B 80FC2B              <1> 	cmp ah, 0x2B
  3066 00002B6E 0F8492000000        <1> 	je near dosgetdate
  3067 00002B74 80FC2C              <1> 	cmp ah, 0x2C
  3068 00002B77 0F84AC000000        <1> 	je near dosgettime
  3069 00002B7D 80FC4C              <1> 	cmp ah, 0x4C
  3070 00002B80 0F84C1000000        <1> 	je near dosexit
  3071                              <1> backtodos:
  3072 00002B86 61                  <1> 	popa
  3073 00002B87 9D                  <1> 	popf
  3074 00002B88 6650                <1> 	push ax
  3075 00002B8A 66B84800            <1> 	mov ax, DOS_DATA_SEL
  3076 00002B8E 8ED8                <1> 	mov ds, ax
  3077 00002B90 8EC0                <1> 	mov es, ax
  3078 00002B92 8EE0                <1> 	mov fs, ax
  3079 00002B94 8EE8                <1> 	mov gs, ax
  3080 00002B96 6658                <1> 	pop ax
  3081 00002B98 CF                  <1> 	iret
  3082                              <1> 
  3083                              <1> dosgchar:
  3084 00002B99 E8C6FBFFFF          <1> 	call getchar
  3085 00002B9E EBE6                <1> 	jmp backtodos
  3086                              <1> 	
  3087                              <1> doswchar:
  3088 00002BA0 88D0                <1> 	mov al, dl
  3089 00002BA2 B307                <1> 	mov bl, 7
  3090 00002BA4 E80EFCFFFF          <1> 	call prcharint
  3091 00002BA9 EBDB                <1> 	jmp backtodos
  3092                              <1> 	
  3093                              <1> dosprintstr:
  3094 00002BAB 31F6                <1> 	xor esi, esi
  3095 00002BAD 6689D6              <1> 	mov si, dx
  3096 00002BB0 81C600004000        <1> 	add esi, dosprogloc
  3097 00002BB6 B024                <1> 	mov al, "$"
  3098 00002BB8 B307                <1> 	mov bl, 7
  3099 00002BBA E82CF7FFFF          <1> 	call printint
  3100 00002BBF EBC5                <1> 	jmp backtodos
  3101                              <1> 	
  3102                              <1> dosgetstr:
  3103 00002BC1 31F6                <1> 	xor esi, esi
  3104 00002BC3 6689D6              <1> 	mov si, dx
  3105 00002BC6 81C600004000        <1> 	add esi, dosprogloc
  3106 00002BCC B900000000          <1> 	mov ecx, 0
  3107 00002BD1 8A0E                <1> 	mov cl, [esi]
  3108 00002BD3 81C603000000        <1> 	add esi, 3
  3109 00002BD9 89F7                <1> 	mov edi, esi
  3110 00002BDB 8935[022C0000]      <1> 	mov [stringstart], esi
  3111 00002BE1 01CF                <1> 	add edi, ecx
  3112 00002BE3 B00A                <1> 	mov al, 10
  3113 00002BE5 B307                <1> 	mov bl, 7
  3114 00002BE7 E800F8FFFF          <1> 	call rdprint
  3115 00002BEC 89F1                <1> 	mov ecx, esi
  3116 00002BEE 2B0D[022C0000]      <1> 	sub ecx, [stringstart]
  3117 00002BF4 8B35[022C0000]      <1> 	mov esi, [stringstart]
  3118 00002BFA 884EFF              <1> 	mov [esi - 1], cl
  3119 00002BFD 884EFE              <1> 	mov [esi - 2], cl
  3120 00002C00 EB84                <1> 	jmp backtodos
  3121 00002C02 00000000            <1> stringstart dd 0
  3122                              <1> 
  3123                              <1> dosgetdate:
  3124 00002C06 E85E1C0000          <1> 	call time
  3125 00002C0B 8A0D[314A0000]      <1> 	mov cl, [RTCtimeYear]
  3126 00002C11 B500                <1> 	mov ch, 0
  3127 00002C13 6681C1D007          <1> 	add cx, 2000
  3128 00002C18 8A35[304A0000]      <1> 	mov dh, [RTCtimeMonth]
  3129 00002C1E 8A15[2F4A0000]      <1> 	mov dl, [RTCtimeDay]
  3130 00002C24 E95DFFFFFF          <1> 	jmp backtodos
  3131                              <1> 
  3132                              <1> dosgettime:
  3133 00002C29 E83B1C0000          <1> 	call time
  3134 00002C2E 8A2D[2E4A0000]      <1> 	mov ch, [RTCtimeHour]
  3135 00002C34 8A0D[2D4A0000]      <1> 	mov cl, [RTCtimeMinute]
  3136 00002C3A 8A35[2C4A0000]      <1> 	mov dh, [RTCtimeSecond]
  3137 00002C40 B200                <1> 	mov dl, 0
  3138 00002C42 E93FFFFFFF          <1> 	jmp backtodos
  3139                              <1> 	
  3140                              <1> dosexit:
  3141 00002C47 61                  <1> 	popa
  3142 00002C48 3C00                <1> 	cmp al, 0
  3143 00002C4A 0F8528F6FFFF        <1> 	jne near warnexitstatus
  3144 00002C50 E934010000          <1> 	jmp nwcmd
  3145                                      %include 'source/solleros.asm'
  3146                              <1> 	;SOLLEROS.ASM
  3147                              <1> os:
  3148                              <1> setdefenv:
  3149 00002C55 E80EF7FFFF          <1> 	call clear
  3150 00002C5A BE[00000000]        <1> 	mov esi, signature
  3151 00002C5F E880F6FFFF          <1> 	call print
  3152 00002C64 8B0D[16000000]      <1> 	mov ecx, [signatureend - 4]
  3153 00002C6A E8E1060000          <1> 	call showdec
  3154 00002C6F BE[61780000]        <1> 	mov esi, line
  3155 00002C74 E86BF6FFFF          <1> 	call print
  3156 00002C79 BE[3B780000]        <1> 	mov esi, userask
  3157 00002C7E E861F6FFFF          <1> 	call print
  3158                              <1> usercheck:
  3159 00002C83 BE[7CB80000]        <1> 	mov esi, buftxt
  3160 00002C88 BF[7CBC0000]        <1> 	mov edi, buftxtend
  3161 00002C8D B00A                <1> 	mov al, 10
  3162 00002C8F E858F7FFFF          <1> 	call rdprint
  3163 00002C94 56                  <1> 	push esi
  3164 00002C95 BE[45780000]        <1> 	mov esi, pwdask
  3165 00002C9A E845F6FFFF          <1> 	call print
  3166 00002C9F 5E                  <1> 	pop esi
  3167 00002CA0 46                  <1> 	inc esi
  3168 00002CA1 8935[5E2D0000]      <1> 	mov [esipass], esi
  3169                              <1> passcheck:
  3170 00002CA7 E8B8FAFFFF          <1> 	call getchar
  3171 00002CAC 3C0A                <1> 	cmp al, 10
  3172 00002CAE 0F8436000000        <1> 	je near gotpass
  3173 00002CB4 3C08                <1> 	cmp al, 8
  3174 00002CB6 0F8410000000        <1> 	je near backpass
  3175 00002CBC 8806                <1> 	mov [esi], al
  3176 00002CBE 46                  <1> 	inc esi
  3177 00002CBF B02A                <1> 	mov al, '*'
  3178 00002CC1 E8F1FAFFFF          <1> 	call prcharint
  3179 00002CC6 EBDF                <1> 	jmp passcheck
  3180 00002CC8 08200800            <1> backcursor2 db 8," ",8,0
  3181                              <1> backpass:
  3182 00002CCC 3B35[5E2D0000]      <1> 	cmp esi, [esipass]
  3183 00002CD2 0F84CFFFFFFF        <1> 	je near passcheck
  3184 00002CD8 4E                  <1> 	dec esi
  3185 00002CD9 C60600              <1> 	mov byte [esi], 0
  3186 00002CDC 56                  <1> 	push esi
  3187 00002CDD BE[C82C0000]        <1> 	mov esi, backcursor2
  3188 00002CE2 E8FDF5FFFF          <1> 	call print
  3189 00002CE7 5E                  <1> 	pop esi
  3190 00002CE8 EBBD                <1> 	jmp passcheck
  3191                              <1> gotpass:
  3192 00002CEA 30C0                <1> 	xor al, al
  3193 00002CEC 31C9                <1> 	xor ecx, ecx
  3194 00002CEE 8806                <1> 	mov [esi], al
  3195 00002CF0 BB[63780000]        <1> 	mov ebx, userlst
  3196                              <1> userfind:
  3197 00002CF5 BE[7CB80000]        <1> 	mov esi, buftxt
  3198 00002CFA 8A06                <1> 	mov al, [esi]
  3199 00002CFC 3C00                <1> 	cmp al, 0
  3200 00002CFE 0F8451FFFFFF        <1> 	je near os
  3201 00002D04 891D[622D0000]      <1> 	mov [usercache], ebx
  3202 00002D0A E828030000          <1> 	call tester
  3203 00002D0F 3C01                <1> 	cmp al, 1
  3204 00002D11 7416                <1> 	je pwdtest
  3205 00002D13 41                  <1> 	inc ecx
  3206                              <1> nxtuser:
  3207 00002D14 8A03                <1> 	mov al, [ebx]
  3208 00002D16 43                  <1> 	inc ebx
  3209 00002D17 3C00                <1> 	cmp al, 0
  3210 00002D19 75F9                <1> 	jne nxtuser
  3211 00002D1B 81FB[86780000]      <1> 	cmp ebx, userlstend
  3212 00002D21 0F832EFFFFFF        <1> 	jae near os
  3213 00002D27 EBCC                <1> 	jmp userfind
  3214                              <1> pwdtest:
  3215 00002D29 46                  <1> 	inc esi
  3216 00002D2A 43                  <1> 	inc ebx
  3217 00002D2B E807030000          <1> 	call tester
  3218 00002D30 3C01                <1> 	cmp al, 1
  3219 00002D32 7402                <1> 	je pwdrgt
  3220 00002D34 EBDE                <1> 	jmp nxtuser
  3221                              <1> pwdrgt:
  3222 00002D36 D1E9                <1> 	shr ecx, 1
  3223 00002D38 890D[FFA30000]      <1> 	mov [uid], ecx
  3224 00002D3E E825F6FFFF          <1> 	call clear
  3225 00002D43 66B90002            <1> 	mov cx, 200h
  3226 00002D47 BE[7CB80000]        <1> 	mov esi, buftxt
  3227 00002D4C 8935[33300000]      <1> 	mov [currentcommandloc], esi
  3228 00002D52 30C0                <1> 	xor al, al
  3229 00002D54 8806                <1> bufclr:	mov [esi], al
  3230 00002D56 46                  <1> 	inc esi
  3231 00002D57 E2FB                <1> 	loop bufclr
  3232 00002D59 E92B000000          <1> 	jmp nwcmd
  3233                              <1> 
  3234 00002D5E 00000000            <1> esipass dd 0
  3235 00002D62 [63780000]          <1> usercache dd userlst
  3236                              <1> 	
  3237                              <1> buftxtclear:
  3238 00002D66 30C0                <1> 	xor al, al
  3239 00002D68 BE[7CB80000]        <1> 	mov esi, buftxt
  3240 00002D6D 81FE[7CBC0000]      <1> clearbuftxt: cmp esi, buf2
  3241 00002D73 730E                <1> 	jae retbufclr
  3242 00002D75 8806                <1> 	mov [esi], al
  3243 00002D77 46                  <1> 	inc esi
  3244 00002D78 EBF3                <1> 	jmp clearbuftxt
  3245                              <1> 
  3246 00002D7A 39DE                <1> clearitbuf: cmp esi, ebx
  3247 00002D7C 7305                <1> 	jae retbufclr
  3248 00002D7E 8806                <1> 	mov [esi], al
  3249 00002D80 46                  <1> 	inc esi
  3250 00002D81 EBF7                <1> 	jmp clearitbuf
  3251 00002D83 C3                  <1> retbufclr: ret
  3252                              <1> 
  3253 00002D84 E900000000          <1> full:	jmp nwcmd
  3254                              <1> 
  3255                              <1> shush:	;SollerOS Hardly Unix-compatible Shell
  3256                              <1> nwcmd:
  3257 00002D89 FB                  <1> 	sti
  3258 00002D8A 31C0                <1> 	xor eax, eax
  3259 00002D8C 3905[4D2F0000]      <1> 	cmp [nextcommandloc], eax
  3260 00002D92 7411                <1> 	je nomultiplecommand
  3261 00002D94 8B35[4D2F0000]      <1> 	mov esi, [nextcommandloc]
  3262 00002D9A 8935[512F0000]      <1> 	mov [thiscommandloc], esi
  3263 00002DA0 E9B5010000          <1> 	jmp fixvariables
  3264                              <1> nomultiplecommand:
  3265 00002DA5 A3[512F0000]        <1> 	mov [thiscommandloc], eax
  3266 00002DAA 3805[29720000]      <1> 	cmp [threadson], al
  3267 00002DB0 7405                <1> 	je noclinwcmd
  3268 00002DB2 A2[29720000]        <1> 	mov [threadson], al
  3269                              <1> noclinwcmd:
  3270 00002DB7 B001                <1> 	mov al, 1
  3271 00002DB9 3805[6CA40000]      <1> 	cmp [BATCHISON], al
  3272 00002DBF 7501                <1> 	jne cancel
  3273 00002DC1 C3                  <1> 	ret
  3274 00002DC2 30C0                <1> cancel:	xor al, al
  3275 00002DC4 A2[03A40000]        <1> 	mov [IFON], al
  3276 00002DC9 A2[6CA40000]        <1> 	mov [BATCHISON], al
  3277 00002DCE B05B                <1> 	mov al, '['
  3278 00002DD0 B406                <1> 	mov ah, 6
  3279 00002DD2 66BB0700            <1> 	mov bx, 7
  3280 00002DD6 E8EDF9FFFF          <1> 	call prcharq
  3281 00002DDB 8B35[622D0000]      <1> 	mov esi, [usercache]
  3282 00002DE1 E8ECF4FFFF          <1> 	call printquiet
  3283 00002DE6 BE[4F780000]        <1> 	mov esi, computer
  3284 00002DEB E8E2F4FFFF          <1> 	call printquiet
  3285 00002DF0 BE[59780000]        <1> 	mov esi, location
  3286 00002DF5 E8D8F4FFFF          <1> 	call printquiet
  3287 00002DFA BE[5C780000]        <1> 	mov esi, endprompt
  3288 00002DFF E8E0F4FFFF          <1> 	call print
  3289 00002E04 E85DFFFFFF          <1> 	call buftxtclear
  3290 00002E09 BE[7CB80000]        <1> 	mov esi, buftxt
  3291 00002E0E C605[4D270000]01    <1> 	mov byte [commandedit], 1
  3292 00002E15 B00A                <1> 	mov al, 10
  3293 00002E17 66BB0700            <1> 	mov bx, 7
  3294 00002E1B BF[7CBC0000]        <1> 	mov edi, buftxtend
  3295 00002E20 E8C7F5FFFF          <1> 	call rdprint
  3296 00002E25 C605[4D270000]00    <1> 	mov byte [commandedit], 0
  3297 00002E2C 803D[7CB80000]00    <1> 	cmp byte [buftxt], 0
  3298 00002E33 0F8450FFFFFF        <1> 	je near nwcmd
  3299 00002E39 8B35[155F0100]      <1> gotcmd:	mov esi, [currentcommandpos]
  3300 00002E3F 8935[115F0100]      <1> 	mov [lastcommandpos], esi
  3301 00002E45 BF[7CB80000]        <1> 	mov edi, buftxt
  3302 00002E4A 81C6[195F0100]      <1> 	add esi, commandbuf
  3303 00002E50 81FE[196F0100]      <1> 	cmp esi, commandbufend
  3304 00002E56 7605                <1> 	jbe copycommand
  3305 00002E58 BE[195F0100]        <1> 	mov esi, commandbuf
  3306                              <1> copycommand:
  3307 00002E5D 8A07                <1> 	mov al, [edi]
  3308 00002E5F 8806                <1> 	mov [esi], al
  3309 00002E61 47                  <1> 	inc edi
  3310 00002E62 46                  <1> 	inc esi
  3311 00002E63 3C00                <1> 	cmp al, 0
  3312 00002E65 740F                <1> 	je donecopy
  3313 00002E67 81FE[196F0100]      <1> 	cmp esi, commandbufend
  3314 00002E6D 76EE                <1> 	jbe copycommand
  3315 00002E6F BE[195F0100]        <1> 	mov esi, commandbuf
  3316 00002E74 EBE7                <1> 	jmp copycommand
  3317                              <1> donecopy:
  3318 00002E76 81EE[195F0100]      <1> 	sub esi, commandbuf
  3319 00002E7C 8935[155F0100]      <1> 	mov [currentcommandpos], esi
  3320 00002E82 E9CE000000          <1> 	jmp run
  3321                              <1> 
  3322 00002E87 E8DAFEFFFF          <1> input:	call buftxtclear
  3323 00002E8C BE[7CB80000]        <1> 	mov esi, buftxt		;puts input into buftxt AND onto screen
  3324 00002E91 BF[7CBC0000]        <1> 	mov edi, buftxtend
  3325 00002E96 B00A                <1> stdin:	mov al, 10
  3326 00002E98 B307                <1> 	mov bl, 7
  3327 00002E9A E84DF5FFFF          <1> 	call rdprint
  3328 00002E9F C3                  <1> 	ret
  3329                              <1> 
  3330                              <1> replacevariable:
  3331 00002EA0 8A4601              <1> 	mov al, [esi + 1]
  3332 00002EA3 C64601FF            <1> 	mov byte [esi + 1], 255
  3333 00002EA7 3C24                <1> 	cmp al, "$"
  3334 00002EA9 0F84AB000000        <1> 	je near fixvariables
  3335 00002EAF 884601              <1> 	mov [esi + 1], al
  3336 00002EB2 56                  <1> 	push esi
  3337 00002EB3 81EE[7CB80000]      <1> 	sub esi, buftxt
  3338 00002EB9 89F7                <1> 	mov edi, esi
  3339 00002EBB 81C6[7CB80000]      <1> 	add esi, buftxt
  3340 00002EC1 47                  <1> 	inc edi
  3341 00002EC2 BB[72A40000]        <1> 	mov ebx, variables
  3342 00002EC7 E86A100000          <1> 	call nxtvrech
  3343 00002ECC 89F7                <1> 	mov edi, esi
  3344 00002ECE 31DB                <1> 	xor ebx, ebx
  3345 00002ED0 4E                  <1> 	dec esi
  3346                              <1> findvarname:
  3347 00002ED1 4E                  <1> 	dec esi
  3348 00002ED2 8A06                <1> 	mov al, [esi]
  3349 00002ED4 43                  <1> 	inc ebx
  3350 00002ED5 3C04                <1> 	cmp al, 4
  3351 00002ED7 75F8                <1> 	jne findvarname
  3352 00002ED9 5E                  <1> 	pop esi
  3353                              <1> replacevarloop:
  3354 00002EDA 8A07                <1> 	mov al, [edi]
  3355 00002EDC 81FB00000000        <1> 	cmp ebx, 0
  3356 00002EE2 0F841E000000        <1> 	je near expandbuftxt
  3357 00002EE8 3C00                <1> 	cmp al, 0
  3358 00002EEA 0F8407000000        <1> 	je near compressbuftxt
  3359 00002EF0 8806                <1> 	mov [esi], al
  3360 00002EF2 4B                  <1> 	dec ebx
  3361 00002EF3 46                  <1> 	inc esi
  3362 00002EF4 47                  <1> 	inc edi
  3363 00002EF5 EBE3                <1> 	jmp replacevarloop
  3364                              <1> compressbuftxt:	
  3365 00002EF7 8A041E              <1> 	mov al, [esi + ebx]
  3366 00002EFA 8806                <1> 	mov [esi], al
  3367 00002EFC 46                  <1> 	inc esi
  3368 00002EFD 3C00                <1> 	cmp al, 0
  3369 00002EFF 75F6                <1> 	jne compressbuftxt
  3370 00002F01 E954000000          <1> 	jmp fixvariables
  3371                              <1> expandbuftxt:
  3372 00002F06 89F1                <1> 	mov ecx, esi
  3373 00002F08 8A26                <1> 	mov ah, [esi]
  3374                              <1> expandbuftxtlp:
  3375 00002F0A 8A1E                <1> 	mov bl, [esi]
  3376 00002F0C 46                  <1> 	inc esi
  3377 00002F0D 8A3E                <1> 	mov bh, [esi]
  3378 00002F0F 8826                <1> 	mov [esi], ah
  3379 00002F11 88FC                <1> 	mov ah, bh
  3380 00002F13 80FB00              <1> 	cmp bl, 0
  3381 00002F16 75F2                <1> 	jne expandbuftxtlp
  3382 00002F18 89CE                <1> 	mov esi, ecx
  3383 00002F1A 8806                <1> 	mov [esi], al
  3384 00002F1C 47                  <1> 	inc edi
  3385 00002F1D 8A07                <1> 	mov al, [edi]
  3386 00002F1F 3C00                <1> 	cmp al, 0
  3387 00002F21 0F8433000000        <1> 	je near fixvariables
  3388 00002F27 46                  <1> 	inc esi
  3389 00002F28 EBDC                <1> 	jmp expandbuftxt
  3390                              <1> multipleprogline:
  3391 00002F2A 30E4                <1> 	xor ah, ah
  3392 00002F2C 8826                <1> 	mov [esi], ah
  3393 00002F2E 46                  <1> 	inc esi
  3394 00002F2F 8935[4D2F0000]      <1> 	mov [nextcommandloc], esi
  3395 00002F35 E93E000000          <1> 	jmp donefixvariables
  3396                              <1> inlinecomment:	;if the following char is #, include a #, otherwise end the line
  3397 00002F3A 46                  <1> 	inc esi
  3398 00002F3B 8A06                <1> 	mov al, [esi]
  3399 00002F3D C606FF              <1> 	mov byte [esi], 255
  3400 00002F40 3C23                <1> 	cmp al, '#'
  3401 00002F42 7416                <1> 	je fixvariables
  3402 00002F44 4E                  <1> 	dec esi
  3403 00002F45 C60600              <1> 	mov byte [esi], 0
  3404 00002F48 E90D000000          <1> 	jmp fixvariables
  3405                              <1> 	
  3406 00002F4D 00000000            <1> nextcommandloc dd 0
  3407 00002F51 00000000            <1> thiscommandloc dd 0	
  3408                              <1> run:
  3409 00002F55 BE[7CB80000]        <1> 	mov esi, buftxt
  3410                              <1> fixvariables:
  3411 00002F5A 46                  <1> 	inc esi
  3412 00002F5B 8A06                <1> 	mov al, [esi]
  3413 00002F5D 3C23                <1> 	cmp al, '#'	;inline comment
  3414 00002F5F 74D9                <1> 	je inlinecomment
  3415 00002F61 3C24                <1> 	cmp al, '$' ;variable
  3416 00002F63 0F8437FFFFFF        <1> 	je near replacevariable
  3417 00002F69 3C3B                <1> 	cmp al, ';' ;program list
  3418 00002F6B 74BD                <1> 	je multipleprogline
  3419 00002F6D 3C00                <1> 	cmp al, 0
  3420 00002F6F 75E9                <1> 	jne fixvariables
  3421 00002F71 31C0                <1> 	xor eax, eax
  3422 00002F73 A3[4D2F0000]        <1> 	mov [nextcommandloc], eax
  3423                              <1> donefixvariables:
  3424 00002F78 803D[3C350000]00    <1> 	cmp byte [indexdone], 0
  3425 00002F7F 7505                <1> 	jne progtest
  3426 00002F81 E821050000          <1> 	call indexfiles
  3427                              <1> progtest:
  3428 00002F86 31C0                <1> 	xor eax, eax
  3429 00002F88 BB[FF9F0000]        <1> 	mov ebx, fileindex
  3430 00002F8D 668B03              <1> prgnxt:	mov ax, [ebx]
  3431 00002F90 B1FF                <1> 	mov cl, 255
  3432 00002F92 B52C                <1> 	mov ch, 44
  3433 00002F94 6639C8              <1> 	cmp ax, cx
  3434 00002F97 740B                <1> 	je fndprg
  3435 00002F99 43                  <1> 	inc ebx
  3436 00002F9A 81FB[FFA30000]      <1> 	cmp ebx, fileindexend
  3437 00002FA0 7361                <1> 	jae prgnf
  3438 00002FA2 EBE9                <1> 	jmp prgnxt
  3439 00002FA4 81C302000000        <1> fndprg: add ebx, 2
  3440 00002FAA 31C9                <1> 	xor ecx, ecx
  3441 00002FAC BE[7CB80000]        <1> 	mov esi, buftxt
  3442 00002FB1 390D[512F0000]      <1> 	cmp [thiscommandloc], ecx
  3443 00002FB7 7406                <1> 	je noprgtstmultiple
  3444 00002FB9 8B35[512F0000]      <1> 	mov esi, [thiscommandloc]
  3445                              <1> noprgtstmultiple:
  3446 00002FBF E8AE000000          <1> 	call cndtest
  3447 00002FC4 3C01                <1> 	cmp al, 1
  3448 00002FC6 7302                <1> 	jae prggood
  3449 00002FC8 EBC3                <1> 	jmp prgnxt
  3450 00002FCA 81FB[FFA30000]      <1> prggood: cmp ebx, fileindexend
  3451 00002FD0 735C                <1> 	jae prgdn
  3452 00002FD2 31C0                <1> 	xor eax, eax
  3453 00002FD4 BE[7CB80000]        <1> 	mov esi, buftxt
  3454 00002FD9 3905[512F0000]      <1> 	cmp [thiscommandloc], eax
  3455 00002FDF 7406                <1> 	je noprggoodmul
  3456 00002FE1 8B35[512F0000]      <1> 	mov esi, [thiscommandloc]
  3457                              <1> noprggoodmul:
  3458 00002FE7 8935[33300000]      <1> 	mov [currentcommandloc], esi
  3459 00002FED 81C303000000        <1> 	add ebx, 3
  3460 00002FF3 8B3B                <1> 	mov edi, [ebx]
  3461 00002FF5 C605[29720000]02    <1> 	mov byte [threadson], 2
  3462 00002FFC FFD7                <1> 	call edi
  3463 00002FFE E986FDFFFF          <1> 	jmp nwcmd
  3464                              <1> prgnf:	
  3465 00003003 8B35[33300000]      <1> 	mov esi, [currentcommandloc]
  3466 00003009 8A06                <1> 	mov al, [esi]
  3467 0000300B 3C00                <1> 	cmp al, 0
  3468 0000300D 741F                <1> 	je prgdn
  3469 0000300F BE[23780000]        <1> 	mov esi, notfound1
  3470 00003014 E8CBF2FFFF          <1> 	call print
  3471 00003019 8B35[33300000]      <1> 	mov esi, [currentcommandloc]
  3472 0000301F E8C0F2FFFF          <1> 	call print
  3473 00003024 BE[2D780000]        <1> 	mov esi, notfound2
  3474 00003029 E8B6F2FFFF          <1> 	call print
  3475 0000302E E956FDFFFF          <1> prgdn:	jmp nwcmd
  3476                              <1> 
  3477 00003033 00000000            <1> currentcommandloc dd 0
  3478                              <1> 
  3479                              <1> tester:			;si=user bx=prog returns 1 in al if true
  3480 00003037 6631C0              <1> 	xor ax, ax
  3481 0000303A 8A06                <1> retest:	mov al, [esi]
  3482 0000303C 8A23                <1> 	mov ah, [ebx]
  3483 0000303E 3C00                <1> 	cmp al, 0
  3484 00003040 7408                <1> 	je testtrue
  3485 00003042 38E0                <1> 	cmp al, ah
  3486 00003044 750C                <1> 	jne testfalse
  3487 00003046 43                  <1> 	inc ebx
  3488 00003047 46                  <1> 	inc esi
  3489 00003048 EBF0                <1> 	jmp retest
  3490                              <1> testtrue:
  3491 0000304A 80FC00              <1> 	cmp ah, 0
  3492 0000304D 7503                <1> 	jne testfalse
  3493 0000304F B001                <1> 	mov al, 1
  3494 00003051 C3                  <1> 	ret
  3495                              <1> testfalse:
  3496 00003052 30C0                <1> 	xor al, al
  3497 00003054 C3                  <1> 	ret
  3498                              <1> 
  3499                              <1> optest:			;si=user bx=prog returns 1 in al if true
  3500 00003055 30C0                <1> 	xor al, al
  3501                              <1> opretest:
  3502 00003057 8A06                <1> 	mov al, [esi]
  3503 00003059 8A23                <1> 	mov ah, [ebx]
  3504 0000305B 38E0                <1> 	cmp al, ah
  3505 0000305D 7510                <1> 	jne optestfalse
  3506 0000305F 80FC00              <1> 	cmp ah, 0
  3507 00003062 7404                <1> 	je optesttrue
  3508 00003064 43                  <1> 	inc ebx
  3509 00003065 46                  <1> 	inc esi
  3510 00003066 EBEF                <1> 	jmp opretest
  3511                              <1> optesttrue:
  3512 00003068 3C00                <1> 	cmp al, 0
  3513 0000306A 7503                <1> 	jne optestfalse
  3514 0000306C B001                <1> 	mov al, 1
  3515 0000306E C3                  <1> 	ret
  3516                              <1> optestfalse:
  3517 0000306F 30C0                <1> 	xor al, al
  3518 00003071 C3                  <1> 	ret
  3519                              <1> 
  3520                              <1> cndtest:			;si=user bx=prog cl=endchar returns 1 in al if true
  3521 00003072 30C0                <1> 	xor al, al
  3522 00003074 8A06                <1> cndretest:	mov al, [esi]
  3523 00003076 8A23                <1> 	mov ah, [ebx]
  3524 00003078 38CC                <1> 	cmp ah, cl
  3525 0000307A 7408                <1> 	je cndtesttrue
  3526 0000307C 38E0                <1> 	cmp al, ah
  3527 0000307E 750B                <1> 	jne cndtestfalse
  3528 00003080 43                  <1> 	inc ebx
  3529 00003081 46                  <1> 	inc esi
  3530 00003082 EBF0                <1> 	jmp cndretest
  3531                              <1> cndtesttrue:
  3532 00003084 38C8                <1> 	cmp al, cl
  3533 00003086 7506                <1> 	jne cndtestalmost
  3534 00003088 B001                <1> 	mov al, 1
  3535 0000308A C3                  <1> 	ret
  3536                              <1> cndtestfalse:
  3537 0000308B 30C0                <1> 	xor al, al
  3538 0000308D C3                  <1> 	ret
  3539                              <1> cndtestalmost:
  3540 0000308E B002                <1> 	mov al, 2
  3541 00003090 C3                  <1> 	ret
  3542                              <1> 	
  3543                              <1> array:				;arraystart in si, arrayend in bx, arrayseperator in cx
  3544                              <1> 		                ;ends if array seperator is found backwards after 0
  3545                              <1> 	arnxt:	      
  3546 00003091 88E8                <1> 		mov al, ch
  3547 00003093 88CC                <1> 		mov ah, cl        
  3548 00003095 663906              <1> 		cmp [esi], ax
  3549 00003098 744D                <1> 		je ardn
  3550 0000309A 66390E              <1> 		cmp [esi], cx
  3551 0000309D 7407                <1> 		je arfnd
  3552 0000309F 46                  <1> 		inc esi
  3553 000030A0 39DE                <1> 		cmp esi, ebx
  3554 000030A2 7343                <1> 		jae ardn
  3555 000030A4 EBEB                <1> 		jmp arnxt
  3556 000030A6 81C602000000        <1> 	arfnd: add esi, 2
  3557 000030AC 891D[E8300000]      <1> 		mov [arbx], ebx
  3558 000030B2 890D[EC300000]      <1> 		mov [arcx], ecx
  3559 000030B8 E827F2FFFF          <1> 		call print
  3560 000030BD 8935[EE300000]      <1> 		mov [arsi], esi
  3561 000030C3 BE[61780000]        <1> 		mov esi, line
  3562 000030C8 E817F2FFFF          <1> 		call print
  3563 000030CD 8B1D[E8300000]      <1> 		mov ebx, [arbx]
  3564 000030D3 668B0D[EC300000]    <1> 		mov cx, [arcx]
  3565 000030DA 8B35[EE300000]      <1> 		mov esi, [arsi]
  3566 000030E0 46                  <1> 		inc esi
  3567 000030E1 39DE                <1> 		cmp esi, ebx
  3568 000030E3 7302                <1> 		jae ardn
  3569 000030E5 EBAA                <1> 		jmp arnxt
  3570 000030E7 C3                  <1> 	ardn:	ret
  3571 000030E8 00000000            <1> arbx:	dw 0,0
  3572 000030EC 0000                <1> arcx:	db 0,0
  3573 000030EE 00000000            <1> arsi:	dw 0,0
  3574                              <1> 
  3575                              <1> clearbuffer:
  3576 000030F2 BE[7CBC0000]        <1> 	mov esi, buf2
  3577 000030F7 B030                <1> 	mov al, '0'
  3578 000030F9 81FE[90BC0000]      <1> clearbuf: cmp esi, numbuf
  3579 000030FF 7305                <1> 	jae doneclearbuff
  3580 00003101 8806                <1> 	mov [esi], al
  3581 00003103 46                  <1> 	inc esi
  3582 00003104 EBF3                <1> 	jmp clearbuf
  3583                              <1> doneclearbuff: 
  3584 00003106 C3                  <1> 		ret
  3585                              <1> 
  3586                              <1> convert:
  3587 00003107 4E                  <1> 	dec esi
  3588 00003108 89F3                <1> 	mov ebx, esi		;place to convert into must be in esi, number to convert must be in ecx
  3589                              <1> cnvrt:
  3590 0000310A 89DE                <1> 	mov esi, ebx
  3591 0000310C 81EE09000000        <1> 	sub esi, 9
  3592 00003112 81F900CA9A3B        <1> 	cmp ecx, 1000000000
  3593 00003118 720A                <1> 	jb ten8
  3594 0000311A 81E900CA9A3B        <1> 	sub ecx, 1000000000
  3595 00003120 FE06                <1> 	inc byte [esi]
  3596 00003122 EBE6                <1> 	jmp cnvrt
  3597 00003124 46                  <1> ten8:	inc esi
  3598 00003125 81F900E1F505        <1> 	cmp ecx, 100000000
  3599 0000312B 720A                <1> 	jb ten7
  3600 0000312D 81E900E1F505        <1> 	sub ecx, 100000000
  3601 00003133 FE06                <1> 	inc byte [esi]
  3602 00003135 EBD3                <1> 	jmp cnvrt
  3603 00003137 46                  <1> ten7:	inc esi
  3604 00003138 81F980969800        <1> 	cmp ecx, 10000000
  3605 0000313E 720A                <1> 	jb ten6
  3606 00003140 81E980969800        <1> 	sub ecx, 10000000
  3607 00003146 FE06                <1> 	inc byte [esi]
  3608 00003148 EBC0                <1> 	jmp cnvrt
  3609 0000314A 46                  <1> ten6:	inc esi
  3610 0000314B 81F940420F00        <1> 	cmp ecx, 1000000
  3611 00003151 720A                <1> 	jb ten5
  3612 00003153 81E940420F00        <1> 	sub ecx, 1000000
  3613 00003159 FE06                <1> 	inc byte [esi]
  3614 0000315B EBAD                <1> 	jmp cnvrt
  3615 0000315D 46                  <1> ten5:	inc esi
  3616 0000315E 81F9A0860100        <1> 	cmp ecx, 100000
  3617 00003164 720A                <1> 	jb ten4
  3618 00003166 81E9A0860100        <1> 	sub ecx, 100000
  3619 0000316C FE06                <1> 	inc byte [esi]
  3620 0000316E EB9A                <1> 	jmp cnvrt
  3621 00003170 46                  <1> ten4:	inc esi
  3622 00003171 81F910270000        <1> 	cmp ecx, 10000
  3623 00003177 720A                <1> 	jb ten3
  3624 00003179 81E910270000        <1> 	sub ecx, 10000
  3625 0000317F FE06                <1> 	inc byte [esi]
  3626 00003181 EB87                <1> 	jmp cnvrt
  3627 00003183 46                  <1> ten3:	inc esi
  3628 00003184 81F9E8030000        <1> 	cmp ecx, 1000
  3629 0000318A 720D                <1> 	jb ten2
  3630 0000318C 81E9E8030000        <1> 	sub ecx, 1000
  3631 00003192 FE06                <1> 	inc byte [esi]
  3632 00003194 E971FFFFFF          <1> 	jmp cnvrt
  3633 00003199 46                  <1> ten2:	inc esi
  3634 0000319A 81F964000000        <1> 	cmp ecx, 100
  3635 000031A0 720D                <1> 	jb ten1
  3636 000031A2 81E964000000        <1> 	sub ecx, 100
  3637 000031A8 FE06                <1> 	inc byte [esi]
  3638 000031AA E95BFFFFFF          <1> 	jmp cnvrt
  3639 000031AF 46                  <1> ten1:	inc esi
  3640 000031B0 81F90A000000        <1> 	cmp ecx, 10
  3641 000031B6 720D                <1> 	jb ten0
  3642 000031B8 81E90A000000        <1> 	sub ecx, 10
  3643 000031BE FE06                <1> 	inc byte [esi]
  3644 000031C0 E945FFFFFF          <1> 	jmp cnvrt
  3645 000031C5 46                  <1> ten0:	inc esi
  3646 000031C6 81F901000000        <1> 	cmp ecx, 1
  3647 000031CC 720D                <1> 	jb tendn
  3648 000031CE 81E901000000        <1> 	sub ecx, 1
  3649 000031D4 FE06                <1> 	inc byte [esi]
  3650 000031D6 E92FFFFFFF          <1> 	jmp cnvrt
  3651                              <1> tendn:
  3652 000031DB C3                  <1> 	ret
  3653                              <1> 
  3654                              <1> 	
  3655                              <1> 
  3656 000031DC 00<rept>            <1> hexnumber times 8 db 0
  3657 000031E4 202000              <1> hexnumberend db "  ",0
  3658                              <1> 
  3659                              <1> 
  3660 000031E7 00000000            <1> sibuf dw 0,0
  3661 000031EB 00000000            <1> dibuf dw 0,0
  3662                              <1> 
  3663                              <1> converthex:
  3664                              <1> clearbufferhex:
  3665 000031EF B030                <1> 	mov al, '0'
  3666 000031F1 8935[E7310000]      <1> 	mov [sibuf], esi
  3667 000031F7 893D[EB310000]      <1> 	mov [dibuf], edi
  3668 000031FD 39FE                <1> clearbufhex: cmp esi, edi
  3669 000031FF 7305                <1> 	jae doneclearbuffhex
  3670 00003201 8806                <1> 	mov [esi], al
  3671 00003203 46                  <1> 	inc esi
  3672 00003204 EBF7                <1> 	jmp clearbufhex
  3673                              <1> doneclearbuffhex:
  3674 00003206 8B35[EB310000]      <1> 	mov esi, [dibuf]
  3675 0000320C 89CA                <1> 	mov edx, ecx
  3676 0000320E 81FA00000000        <1> 	cmp edx, 0
  3677 00003214 741F                <1> 	je donenxtephx
  3678                              <1> nxtexphx:	;0x10^x
  3679 00003216 4E                  <1> 	dec esi
  3680 00003217 89F7                <1> 	mov edi, esi		;;location of 0x10^x
  3681 00003219 89D1                <1> 	mov ecx, edx
  3682 0000321B 81E10F000000        <1> 	and ecx, 0xF		;;just this digit
  3683 00003221 E81C000000          <1> 	call cnvrtexphx		;;get this digit
  3684 00003226 89FE                <1> 	mov esi, edi
  3685 00003228 C1EA04              <1> 	shr edx, 4		;;next digit
  3686 0000322B 81FA00000000        <1> 	cmp edx, 0
  3687 00003231 7402                <1> 	je donenxtephx
  3688 00003233 EBE1                <1> 	jmp nxtexphx
  3689                              <1> donenxtephx:
  3690 00003235 8B35[E7310000]      <1> 	mov esi, [sibuf]
  3691 0000323B 8B3D[EB310000]      <1> 	mov edi, [dibuf]
  3692 00003241 C3                  <1> 	ret
  3693                              <1> cnvrtexphx:			;;convert this number
  3694 00003242 89F3                <1> 	mov ebx, esi		;place to convert to must be in si, number to convert must be in cx
  3695 00003244 81F900000000        <1> 	cmp ecx, 0
  3696 0000324A 7429                <1> 	je zerohx
  3697 0000324C 8A06                <1> cnvrthx:  mov al, [esi]
  3698 0000324E 3C39                <1> 	cmp al, '9'
  3699 00003250 741B                <1> 	je lettershx
  3700 00003252 3C46                <1> lttrhxdn: cmp al, 'F'
  3701 00003254 741F                <1> 	je zerohx
  3702 00003256 8A06                <1> 	mov al, [esi]
  3703 00003258 FEC0                <1> 	inc al
  3704 0000325A 8806                <1> 	mov [esi], al
  3705 0000325C 89DE                <1> 	mov esi, ebx
  3706 0000325E 81E901000000        <1> cnvrtlphx: sub ecx, 1
  3707 00003264 81F900000000        <1> 	cmp ecx, 0
  3708 0000326A 75E0                <1> 	jne cnvrthx
  3709 0000326C C3                  <1> 	ret
  3710                              <1> lettershx:
  3711 0000326D B041                <1> 	mov al, 'A'
  3712 0000326F 2C01                <1> 	sub al, 1
  3713 00003271 8806                <1> 	mov [esi], al
  3714 00003273 EBDD                <1> 	jmp lttrhxdn
  3715 00003275 B030                <1> zerohx:	mov al, '0'
  3716 00003277 8806                <1> 	mov [esi], al
  3717 00003279 4E                  <1> 	dec esi
  3718 0000327A 8A06                <1> 	mov al, [esi]
  3719 0000327C 3C46                <1> 	cmp al, 'F'
  3720 0000327E 74F5                <1> 	je zerohx
  3721 00003280 41                  <1> 	inc ecx
  3722 00003281 EBDB                <1> 	jmp cnvrtlphx
  3723 00003283 00                  <1> smallhex db 0
  3724 00003284 01                  <1> firsthexshown db 1
  3725                              <1> showhexsmall:
  3726 00003285 C605[83320000]01    <1> 	mov byte [smallhex], 1
  3727 0000328C E808000000          <1> 	call showhex
  3728 00003291 C605[83320000]00    <1> 	mov byte [smallhex], 0
  3729 00003298 C3                  <1> 	ret
  3730                              <1> showhex:
  3731 00003299 60                  <1> 	pusha
  3732 0000329A BE[DC310000]        <1> 	mov esi, hexnumber
  3733 0000329F BF[E4310000]        <1> 	mov edi, hexnumberend
  3734 000032A4 E846FFFFFF          <1> 	call converthex
  3735 000032A9 803D[84320000]01    <1> 	cmp byte [firsthexshown], 1
  3736 000032B0 7503                <1> 	jne showthathex
  3737 000032B2 6631D2              <1> 	xor dx, dx
  3738                              <1> showthathex:
  3739 000032B5 803D[84320000]03    <1> 	cmp byte [firsthexshown], 3
  3740 000032BC 750A                <1> 	jne nonewhexline
  3741 000032BE BE[61780000]        <1> 	mov esi, line
  3742 000032C3 E81CF0FFFF          <1> 	call print
  3743                              <1> nonewhexline:
  3744 000032C8 803D[84320000]04    <1> 	cmp byte [firsthexshown], 4
  3745 000032CF 7527                <1> 	jne notabfixhex
  3746 000032D1 B1A0                <1> 	mov cl, 160
  3747 000032D3 28D1                <1> 	sub cl, dl
  3748 000032D5 C0E905              <1> 	shr cl, 5
  3749 000032D8 C0E105              <1> 	shl cl, 5
  3750 000032DB 80F900              <1> 	cmp cl, 0
  3751 000032DE 750F                <1> 	jne nonewlinetabfixhex
  3752 000032E0 BE[61780000]        <1> 	mov esi, line
  3753 000032E5 E8FAEFFFFF          <1> 	call print
  3754 000032EA E909000000          <1> 	jmp notabfixhex
  3755                              <1> nonewlinetabfixhex:
  3756 000032EF 80C20F              <1> 	add dl, 15
  3757 000032F2 C0EA04              <1> 	shr dl, 4
  3758 000032F5 C0E204              <1> 	shl dl, 4
  3759                              <1> notabfixhex:
  3760 000032F8 BE[DC310000]        <1> 	mov esi, hexnumber
  3761 000032FD 803D[83320000]01    <1> 	cmp byte [smallhex],1
  3762 00003304 7506                <1> 	jne printnosmallhex
  3763 00003306 81C606000000        <1> 	add esi, 6
  3764                              <1> printnosmallhex:
  3765 0000330C 803D[84320000]05    <1> 	cmp byte [firsthexshown], 5
  3766 00003313 750A                <1> 	jne noquietprinthex
  3767 00003315 E8B8EFFFFF          <1> 	call printquiet
  3768 0000331A E905000000          <1> 	jmp donequiethex
  3769                              <1> noquietprinthex:
  3770 0000331F E8C0EFFFFF          <1> 	call print
  3771                              <1> donequiethex:
  3772 00003324 803D[84320000]02    <1> 	cmp byte [firsthexshown], 2
  3773 0000332B 750A                <1> 	jne hexshown
  3774 0000332D BE[61780000]        <1> 	mov esi, line
  3775 00003332 E8ADEFFFFF          <1> 	call print
  3776                              <1> hexshown:
  3777 00003337 C605[84320000]00    <1> 	mov byte [firsthexshown], 0
  3778 0000333E 61                  <1> 	popa
  3779 0000333F C3                  <1> 	ret
  3780                              <1> 
  3781                              <1> 
  3782 00003340 303030303030303030- <1> decnumber db "00000000000000"
  3783 00003349 3030303030          <1>
  3784 0000334E 2000                <1> decnumberend: db " ",0
  3785                              <1> 
  3786                              <1> showdec: ;;same as showhex, just uses decimal conversion
  3787 00003350 60                  <1> 	pusha
  3788 00003351 BF[40330000]        <1> 	mov edi, decnumber
  3789 00003356 BE[4E330000]        <1> 	mov esi, decnumberend
  3790                              <1> cleardecbuf:
  3791 0000335B C60730              <1> 	mov byte [edi], '0'
  3792 0000335E 47                  <1> 	inc edi
  3793 0000335F 39F7                <1> 	cmp edi, esi
  3794 00003361 72F8                <1> 	jb cleardecbuf
  3795 00003363 BF[40330000]        <1> 	mov edi, decnumber
  3796 00003368 E89AFDFFFF          <1> 	call convert
  3797 0000336D 803D[84320000]01    <1> 	cmp byte [firsthexshown], 1
  3798 00003374 7503                <1> 	jne showthatdec
  3799 00003376 6631D2              <1> 	xor dx, dx
  3800                              <1> showthatdec:
  3801 00003379 803D[84320000]03    <1> 	cmp byte [firsthexshown], 3
  3802 00003380 750A                <1> 	jne nonewdecline
  3803 00003382 BE[61780000]        <1> 	mov esi, line
  3804 00003387 E858EFFFFF          <1> 	call print
  3805                              <1> nonewdecline:
  3806 0000338C 803D[84320000]04    <1> 	cmp byte [firsthexshown], 4
  3807 00003393 7527                <1> 	jne notabfixdec
  3808 00003395 B1A0                <1> 	mov cl, 160
  3809 00003397 28D1                <1> 	sub cl, dl
  3810 00003399 C0E905              <1> 	shr cl, 5
  3811 0000339C C0E105              <1> 	shl cl, 5
  3812 0000339F 80F900              <1> 	cmp cl, 0
  3813 000033A2 750F                <1> 	jne nonewlinetabfixdec
  3814 000033A4 BE[61780000]        <1> 	mov esi, line
  3815 000033A9 E836EFFFFF          <1> 	call print
  3816 000033AE E909000000          <1> 	jmp notabfixdec
  3817                              <1> nonewlinetabfixdec:
  3818 000033B3 80C20F              <1> 	add dl, 15
  3819 000033B6 C0EA04              <1> 	shr dl, 4
  3820 000033B9 C0E204              <1> 	shl dl, 4
  3821                              <1> notabfixdec:
  3822 000033BC BE[40330000]        <1> 	mov esi, decnumber
  3823 000033C1 4E                  <1> 	dec esi
  3824                              <1> sifind:
  3825 000033C2 46                  <1> 	inc esi
  3826 000033C3 803E30              <1> 	cmp byte [esi], '0'
  3827 000033C6 74FA                <1> 	je sifind
  3828 000033C8 E817EFFFFF          <1> 	call print
  3829 000033CD 803D[84320000]02    <1> 	cmp byte [firsthexshown], 2
  3830 000033D4 750A                <1> 	jne decshown
  3831 000033D6 BE[61780000]        <1> 	mov esi, line
  3832 000033DB E804EFFFFF          <1> 	call print
  3833                              <1> decshown:
  3834 000033E0 C605[84320000]00    <1> 	mov byte [firsthexshown], 0
  3835 000033E7 61                  <1> 	popa
  3836 000033E8 C3                  <1> 	ret
  3837                              <1> 	
  3838                              <1> cnvrthextxt:
  3839 000033E9 31C9                <1> 	xor ecx, ecx
  3840 000033EB 31C0                <1> 	xor eax, eax
  3841 000033ED 31D2                <1> 	xor edx, edx
  3842 000033EF 31DB                <1> 	xor ebx, ebx
  3843 000033F1 4E                  <1> 	dec esi
  3844                              <1> cnvrthexendtxt:
  3845 000033F2 46                  <1> 	inc esi
  3846 000033F3 8A06                <1> 	mov al, [esi]
  3847 000033F5 3C00                <1> 	cmp al, 0
  3848 000033F7 75F9                <1> 	jne cnvrthexendtxt
  3849                              <1> cnvrthextxtlp:
  3850 000033F9 4E                  <1> 	dec esi
  3851 000033FA 8A06                <1> 	mov al, [esi]
  3852 000033FC 2C30                <1> 	sub al, 48
  3853 000033FE 3C10                <1> 	cmp al, 16
  3854 00003400 7721                <1> 	ja donecnvrthx
  3855 00003402 81FA00000000        <1> 	cmp edx, 0
  3856 00003408 740E                <1> 	je noshlhextxt
  3857 0000340A 89D3                <1> 	mov ebx, edx
  3858                              <1> shlhextxt:
  3859 0000340C C1E004              <1> 	shl eax, 4
  3860 0000340F 4B                  <1> 	dec ebx
  3861 00003410 81FB00000000        <1> 	cmp ebx, 0
  3862 00003416 75F4                <1> 	jne shlhextxt
  3863                              <1> noshlhextxt:
  3864 00003418 42                  <1> 	inc edx
  3865 00003419 01C1                <1> 	add ecx, eax
  3866 0000341B 81FA08000000        <1> 	cmp edx, 8
  3867 00003421 72D6                <1> 	jb cnvrthextxtlp
  3868                              <1> donecnvrthx:
  3869 00003423 C3                  <1> 	ret
  3870                              <1> 	
  3871                              <1> 	
  3872                              <1> cnvrttxt: 
  3873 00003424 31C9                <1> 	xor ecx, ecx
  3874 00003426 31C0                <1> 	xor eax, eax
  3875 00003428 31D2                <1> 	xor edx, edx
  3876 0000342A 31DB                <1> 	xor ebx, ebx
  3877 0000342C 4E                  <1> 	dec esi
  3878                              <1> cnvrtlptxt:
  3879 0000342D 46                  <1> 	inc esi
  3880 0000342E 8A06                <1> 	mov al, [esi]
  3881 00003430 3C00                <1> 	cmp al, 0
  3882 00003432 75F9                <1> 	jne cnvrtlptxt
  3883 00003434 4E                  <1> 	dec esi
  3884 00003435 8A06                <1> 	mov al, [esi]
  3885 00003437 3C2E                <1> 	cmp al, '.'
  3886 00003439 7503                <1> 	jne nocnvrtdot
  3887 0000343B 46                  <1> 	inc esi
  3888 0000343C EBEF                <1> 	jmp cnvrtlptxt
  3889                              <1> nocnvrtdot:
  3890 0000343E 3C20                <1> 	cmp al, ' '
  3891 00003440 7404                <1> 	je zerotest
  3892 00003442 3C30                <1> 	cmp al, '0'
  3893 00003444 7504                <1> 	jne txtlp
  3894                              <1> zerotest: 
  3895 00003446 39FE                <1> 		cmp esi, edi
  3896 00003448 7458                <1> 		je donecnvrt
  3897                              <1> txtlp:	
  3898 0000344A 31C0                <1> 	xor eax, eax
  3899 0000344C 8A06                <1> 	mov al, [esi]
  3900 0000344E 3C3D                <1> 	cmp al, '='
  3901 00003450 7450                <1> 	je donecnvrt
  3902 00003452 3C30                <1> 	cmp al, 48
  3903 00003454 724C                <1> 	jb donecnvrt
  3904 00003456 3C23                <1> 	cmp al, '#'
  3905 00003458 7448                <1> 	je donecnvrt
  3906 0000345A 39FE                <1> 	cmp esi, edi
  3907 0000345C 7244                <1> 	jb donecnvrt
  3908 0000345E 81F900000000        <1> 	cmp ecx, 0
  3909 00003464 7708                <1> 	ja exp
  3910 00003466 2C30                <1> noexp:	sub al, 48
  3911 00003468 01C2                <1> 	add edx, eax
  3912 0000346A 4E                  <1> 	dec esi
  3913 0000346B 41                  <1> 	inc ecx
  3914 0000346C EBDC                <1> 	jmp txtlp
  3915 0000346E 81F900000000        <1> exp:	cmp ecx, 0
  3916 00003474 74F0                <1> 	je noexp
  3917 00003476 2C30                <1> 	sub al, 48
  3918 00003478 51                  <1> 	push ecx
  3919 00003479 89C3                <1> expmul:	mov ebx, eax
  3920 0000347B 01D8                <1> 	add eax, ebx
  3921 0000347D 01D8                <1> 	add eax, ebx
  3922 0000347F 01D8                <1> 	add eax, ebx
  3923 00003481 01D8                <1> 	add eax, ebx
  3924 00003483 01D8                <1> 	add eax, ebx
  3925 00003485 01D8                <1> 	add eax, ebx
  3926 00003487 01D8                <1> 	add eax, ebx
  3927 00003489 01D8                <1> 	add eax, ebx
  3928 0000348B 01D8                <1> 	add eax, ebx
  3929 0000348D 81E901000000        <1> 	sub ecx, 1
  3930 00003493 81F900000000        <1> 	cmp ecx, 0
  3931 00003499 77DE                <1> 	ja expmul
  3932 0000349B 01C2                <1> 	add edx, eax
  3933 0000349D 59                  <1> 	pop ecx
  3934 0000349E 4E                  <1> 	dec esi
  3935 0000349F 41                  <1> 	inc ecx
  3936 000034A0 EBA8                <1> 	jmp txtlp
  3937 000034A2 89D1                <1> donecnvrt: mov ecx, edx
  3938 000034A4 C3                  <1> 	ret
  3939                                      %include 'source/programs.asm'
  3940 000034A5 FF2C                <1> filetypes db 255,44
  3941                              <1> progstart:		;programs start here
  3942                              <1> indexfiles:
  3943 000034A7 BE[A7340000]        <1> 	mov esi, progstart
  3944 000034AC BB[FF9F0000]        <1> 	mov ebx, fileindex
  3945 000034B1 BF[A7340000]        <1> 	mov edi, progstart
  3946 000034B6 81EF02000000        <1> 	sub edi, 2
  3947                              <1> indexloop:
  3948 000034BC 668B0E              <1> 	mov cx, [esi]
  3949                              <1> 	indexloop2:
  3950 000034BF 663B0F              <1> 		cmp cx, [edi]
  3951 000034C2 7424                <1> 		je indexloop2done
  3952 000034C4 81EF02000000        <1> 		sub edi, 2
  3953 000034CA 81FF[A5340000]      <1> 		cmp edi, filetypes
  3954 000034D0 73ED                <1> 		jae indexloop2
  3955 000034D2 BF[A7340000]        <1> 	mov edi, progstart
  3956 000034D7 81EF02000000        <1> 	sub edi, 2
  3957 000034DD 46                  <1> 	inc esi
  3958 000034DE 81FE[734B0000]      <1> 	cmp esi, batchprogend
  3959 000034E4 734E                <1> 	jae indexloopdone
  3960 000034E6 EBD4                <1> 	jmp indexloop
  3961                              <1> indexloop2done:
  3962 000034E8 66890B              <1> 	mov [ebx], cx
  3963 000034EB 81C302000000        <1> 	add ebx, 2
  3964 000034F1 81C602000000        <1> 	add esi, 2
  3965                              <1> 	nameindex:
  3966 000034F7 8A0E                <1> 		mov cl, [esi]
  3967 000034F9 80F900              <1> 		cmp cl, 0
  3968 000034FC 7406                <1> 		je nameindexdone
  3969 000034FE 880B                <1> 		mov [ebx], cl
  3970 00003500 46                  <1> 		inc esi
  3971 00003501 43                  <1> 		inc ebx
  3972 00003502 EBF3                <1> 		jmp nameindex
  3973                              <1> 	nameindexdone:
  3974 00003504 43                  <1> 		inc ebx
  3975 00003505 66C7030000          <1> 		mov word [ebx], 0
  3976 0000350A 81C302000000        <1> 		add ebx, 2
  3977 00003510 46                  <1> 		inc esi
  3978 00003511 8933                <1> 		mov [ebx], esi
  3979 00003513 81C304000000        <1> 		add ebx, 4
  3980 00003519 66C7030000          <1> 		mov word [ebx], 0
  3981 0000351E 81C302000000        <1> 		add ebx, 2
  3982 00003524 81FB[FFA30000]      <1> 		cmp ebx, fileindexend
  3983 0000352A 7308                <1> 		jae indexloopdone
  3984 0000352C 81C601000000        <1> 		add esi, 1
  3985 00003532 EB88                <1> 		jmp indexloop
  3986 00003534 C605[3C350000]01    <1> indexloopdone: 	mov byte [indexdone], 1
  3987 0000353B C3                  <1> 		ret
  3988                              <1> 
  3989 0000353C 00                  <1> indexdone db 0
  3990                              <1> %include 'source/programs/_comment.asm' ;#
  3991 0000353D FF2C2300            <2> 	db 255,44,"#",0	;this lets you rem stuff
  3992 00003541 C3                  <2> 	ret 
  3993                              <1> %include 'source/programs/_math.asm' ;!
  3994 00003542 FF2C2100            <2> db 255,44,"!",0
  3995                              <2> 	num:	
  3996 00003546 E8A7FBFFFF          <2> 		call clearbuffer
  3997 0000354B C605[CC370000]00    <2> 		mov byte [decimal], 0
  3998 00003552 C605[CD370000]00    <2> 		mov byte [decimal2], 0
  3999 00003559 8B35[33300000]      <2> 		mov esi, [currentcommandloc]
  4000 0000355F 31C0                <2> 		xor eax, eax
  4001 00003561 31C9                <2> 		xor ecx, ecx
  4002 00003563 31DB                <2> 		xor ebx, ebx
  4003 00003565 8A06                <2> 	num2:	mov al, [esi]
  4004 00003567 3C2B                <2> 		cmp al, '+'
  4005 00003569 741B                <2> 		je operatorfound
  4006 0000356B 3C2D                <2> 		cmp al, '-'
  4007 0000356D 7417                <2> 		je operatorfound
  4008 0000356F 3C2A                <2> 		cmp al, '*'
  4009 00003571 7413                <2> 		je operatorfound
  4010 00003573 3C2F                <2> 		cmp al, '/'
  4011 00003575 740F                <2> 		je operatorfound
  4012 00003577 3C5E                <2> 		cmp al, '^'
  4013 00003579 740B                <2> 		je operatorfound
  4014 0000357B 46                  <2> 		inc esi
  4015 0000357C 3C00                <2> 		cmp al, 0
  4016 0000357E 0F8405F8FFFF        <2> 		je near nwcmd
  4017 00003584 EBDF                <2> 		jmp num2
  4018 00003586 50                  <2> 	operatorfound: push eax
  4019 00003587 30E4                <2> 		xor ah, ah
  4020 00003589 8826                <2> 		mov [esi], ah
  4021 0000358B 89F7                <2> 		mov edi, esi
  4022 0000358D 46                  <2> 		inc esi
  4023 0000358E 8A06                <2> 		mov al, [esi]
  4024 00003590 3C25                <2> 		cmp al, '%'
  4025 00003592 0F8462000000        <2> 		je near resultnum1
  4026                              <2> 	varnum2: 
  4027 00003598 57                  <2> 		push edi
  4028 00003599 E8A4000000          <2> 		call checkdecimal
  4029 0000359E 5F                  <2> 		pop edi
  4030 0000359F E880FEFFFF          <2> 		call cnvrttxt
  4031                              <2> 	vrnm2:
  4032 000035A4 89CB                <2> 		mov ebx, ecx
  4033 000035A6 53                  <2> 		push ebx
  4034 000035A7 E846FBFFFF          <2> 		call clearbuffer
  4035 000035AC 8B35[33300000]      <2> 		mov esi, [currentcommandloc]
  4036 000035B2 89F7                <2> 		mov edi, esi
  4037 000035B4 46                  <2> 		inc esi
  4038 000035B5 8A06                <2> 		mov al, [esi]
  4039 000035B7 3C25                <2> 		cmp al, '%'
  4040 000035B9 0F844F000000        <2> 		je near resultnum2
  4041                              <2> 	varnum4: 
  4042 000035BF 57                  <2> 		push edi
  4043 000035C0 E869000000          <2> 		call checkdecimal2
  4044 000035C5 5F                  <2> 		pop edi
  4045 000035C6 E859FEFFFF          <2> 		call cnvrttxt
  4046                              <2> 	vrnm4:
  4047 000035CB 5B                  <2> 		pop ebx
  4048 000035CC 58                  <2> 		pop eax
  4049 000035CD 3C2B                <2> 		cmp al, '+'
  4050 000035CF 0F849B000000        <2> 		je near plusnum
  4051 000035D5 3C2D                <2> 		cmp al, '-'
  4052 000035D7 0F849F000000        <2> 		je near subnum
  4053 000035DD 3C2A                <2> 		cmp al, '*'
  4054 000035DF 0F84A3000000        <2> 		je near mulnum
  4055 000035E5 3C2F                <2> 		cmp al, '/'
  4056 000035E7 0F84B1000000        <2> 		je near divnum
  4057 000035ED 3C5E                <2> 		cmp al, '^'
  4058 000035EF 0F84CE000000        <2> 		je near expnum
  4059 000035F5 E98FF7FFFF          <2> 		jmp nwcmd
  4060                              <2> 	resultnum1:
  4061 000035FA 8A0D[CE370000]      <2> 		mov cl, [decimalresult]
  4062 00003600 880D[CC370000]      <2> 		mov [decimal], cl
  4063 00003606 8B0D[CF370000]      <2> 		mov ecx, [result]
  4064 0000360C EB96                <2> 		jmp vrnm2
  4065                              <2> 	resultnum2:
  4066 0000360E 8A0D[CC370000]      <2> 		mov cl, [decimal]
  4067 00003614 880D[CD370000]      <2> 		mov [decimal2], cl
  4068 0000361A 8A0D[CE370000]      <2> 		mov cl, [decimalresult]
  4069 00003620 880D[CC370000]      <2> 		mov [decimal], cl
  4070 00003626 8B0D[CF370000]      <2> 		mov ecx, [result]
  4071 0000362C EB9D                <2> 		jmp vrnm4
  4072                              <2> 	checkdecimal2:
  4073 0000362E 8A25[CC370000]      <2> 		mov ah, [decimal]
  4074 00003634 8825[CD370000]      <2> 		mov [decimal2], ah
  4075 0000363A 30E4                <2> 		xor ah, ah
  4076 0000363C 8825[CC370000]      <2> 		mov [decimal], ah
  4077                              <2> 	checkdecimal:
  4078 00003642 89F7                <2> 		mov edi, esi
  4079                              <2> 	chkdec1:
  4080 00003644 8A07                <2> 		mov al, [edi]
  4081 00003646 3C2E                <2> 		cmp al, '.'
  4082 00003648 0F840B000000        <2> 		je near fnddec
  4083 0000364E 3C00                <2> 		cmp al, 0
  4084 00003650 0F8419000000        <2> 		je near nodecimal
  4085 00003656 47                  <2> 		inc edi
  4086 00003657 EBEB                <2> 		jmp chkdec1
  4087                              <2> 	fnddec:
  4088 00003659 8A4701              <2> 		mov al, [edi + 1]
  4089 0000365C 8807                <2> 		mov [edi], al
  4090 0000365E 3C00                <2> 		cmp al, 0
  4091 00003660 0F8409000000        <2> 		je near nodecimal
  4092 00003666 FE05[CC370000]      <2> 		inc byte [decimal]
  4093 0000366C 47                  <2> 		inc edi
  4094 0000366D EBEA                <2> 		jmp fnddec
  4095                              <2> 	nodecimal:
  4096 0000366F C3                  <2> 		ret
  4097                              <2> 	plusnum:
  4098 00003670 E815010000          <2> 		call decaddfix
  4099 00003675 01D9                <2> 		add ecx, ebx
  4100 00003677 E98A000000          <2> 		jmp retnum
  4101                              <2> 	subnum:
  4102 0000367C E809010000          <2> 		call decaddfix
  4103 00003681 29D9                <2> 		sub ecx, ebx
  4104 00003683 E97E000000          <2> 		jmp retnum
  4105                              <2> 	mulnum:
  4106 00003688 A0[CD370000]        <2> 		mov al, [decimal2]
  4107 0000368D 0005[CC370000]      <2> 		add [decimal], al
  4108 00003693 89C8                <2> 		mov eax, ecx
  4109 00003695 F7E3                <2> 		mul ebx
  4110 00003697 89C1                <2> 		mov ecx, eax
  4111 00003699 E968000000          <2> 		jmp retnum
  4112                              <2> 	divnum:
  4113 0000369E E8E7000000          <2> 		call decaddfix
  4114 000036A3 30C0                <2> 		xor al, al
  4115 000036A5 A2[CC370000]        <2> 		mov [decimal], al
  4116 000036AA 31D2                <2> 		xor edx, edx
  4117 000036AC 89C8                <2> 		mov eax, ecx
  4118 000036AE 81FB00000000        <2> 		cmp ebx, 0
  4119 000036B4 0F844C000000        <2> 		je near retnum
  4120 000036BA F7F3                <2> 		div ebx
  4121 000036BC 89C1                <2> 		mov ecx, eax
  4122 000036BE E943000000          <2> 		jmp retnum
  4123                              <2> 	expnum:
  4124 000036C3 8A15[CC370000]      <2> 		mov dl, [decimal]
  4125 000036C9 8815[CD370000]      <2> 		mov [decimal2], dl
  4126 000036CF 31D2                <2> 		xor edx, edx
  4127 000036D1 89C8                <2> 		mov eax, ecx
  4128 000036D3 89D9                <2> 		mov ecx, ebx
  4129 000036D5 89C3                <2> 		mov ebx, eax
  4130 000036D7 81F900000000        <2> 		cmp ecx, 0
  4131 000036DD 7422                <2> 		je noexpnum
  4132 000036DF 49                  <2> 		dec ecx
  4133 000036E0 81F900000000        <2> 		cmp ecx, 0
  4134 000036E6 7412                <2> 		je noexpnumlp
  4135 000036E8 F7E3                <2> 	expnumlp: mul ebx
  4136 000036EA 8A15[CD370000]      <2> 		mov dl, [decimal2]
  4137 000036F0 0015[CC370000]      <2> 		add [decimal], dl
  4138 000036F6 31D2                <2> 		xor edx, edx
  4139 000036F8 E2EE                <2> 		loop expnumlp
  4140                              <2> 	noexpnumlp:
  4141 000036FA 89C1                <2> 		mov ecx, eax
  4142 000036FC E905000000          <2> 		jmp retnum
  4143                              <2> 	noexpnum:
  4144 00003701 B901000000          <2> 		mov ecx, 1
  4145                              <2> 	retnum: 
  4146 00003706 BE[90BC0000]        <2> 		mov esi, numbuf
  4147 0000370B 890D[CF370000]      <2> 		mov [result], ecx
  4148 00003711 E8F1F9FFFF          <2> 		call convert
  4149 00003716 BE[90BC0000]        <2> 		mov esi, numbuf
  4150 0000371B 8A25[CC370000]      <2> 		mov ah, [decimal]
  4151 00003721 8825[CE370000]      <2> 		mov [decimalresult], ah
  4152 00003727 80FC00              <2> 		cmp ah, 0
  4153 0000372A 0F8425000000        <2> 		je near noputdecimal
  4154                              <2> 	putdecimal:
  4155 00003730 4E                  <2> 		dec esi
  4156 00003731 FECC                <2> 		dec ah
  4157 00003733 80FC00              <2> 		cmp ah, 0
  4158 00003736 0F87F4FFFFFF        <2> 		ja near putdecimal
  4159 0000373C 4E                  <2> 		dec esi
  4160 0000373D 8A06                <2> 		mov al, [esi]
  4161 0000373F C6062E              <2> 		mov byte [esi], '.'
  4162                              <2> 	decputloop:
  4163 00003742 4E                  <2> 		dec esi
  4164 00003743 8A26                <2> 		mov ah, [esi]
  4165 00003745 8806                <2> 		mov [esi], al
  4166 00003747 88E0                <2> 		mov al, ah
  4167 00003749 81FE[7CBC0000]      <2> 		cmp esi, buf2
  4168 0000374F 0F87EDFFFFFF        <2> 		ja near decputloop
  4169                              <2> 	noputdecimal:
  4170 00003755 BE[7CBC0000]        <2> 		mov esi, buf2
  4171 0000375A E809000000          <2> 		call chkadd
  4172 0000375F E925F6FFFF          <2> 		jmp nwcmd
  4173 00003764 00000000            <2> edxnumbuf dw 0,0
  4174 00003768 8A06                <2> 	chkadd: mov al, [esi]
  4175 0000376A 3C30                <2> 		cmp al, '0'
  4176 0000376C 750C                <2> 		jne dnadd
  4177 0000376E 46                  <2> 		inc esi
  4178 0000376F 81FE[90BC0000]      <2> 		cmp esi, numbuf
  4179 00003775 7402                <2> 		je dnaddm1
  4180 00003777 EBEF                <2> 		jmp chkadd
  4181 00003779 4E                  <2> 	dnaddm1: dec esi
  4182 0000377A E865EBFFFF          <2> 	dnadd:	call print
  4183 0000377F BE[61780000]        <2> 		mov esi, line
  4184 00003784 E85BEBFFFF          <2> 		call print
  4185 00003789 C3                  <2> 		ret
  4186                              <2> 		
  4187                              <2> 	decaddfix:
  4188 0000378A A0[CD370000]        <2> 		mov al, [decimal2]
  4189 0000378F 8A25[CC370000]      <2> 		mov ah, [decimal]
  4190 00003795 38E0                <2> 		cmp al, ah
  4191 00003797 7432                <2> 		je gooddecadd
  4192 00003799 38E0                <2> 		cmp al, ah
  4193 0000379B 721A                <2> 		jb lowdecadd
  4194                              <2> 	highdecadd:
  4195 0000379D FEC4                <2> 		inc ah
  4196 0000379F 89CA                <2> 		mov edx, ecx
  4197 000037A1 C1E103              <2> 		shl ecx, 3
  4198 000037A4 01D1                <2> 		add ecx, edx
  4199 000037A6 01D1                <2> 		add ecx, edx
  4200 000037A8 38E0                <2> 		cmp al, ah
  4201 000037AA 77F1                <2> 		ja highdecadd
  4202 000037AC 8825[CC370000]      <2> 		mov [decimal], ah
  4203 000037B2 E914000000          <2> 		jmp gooddecadd
  4204                              <2> 	lowdecadd:
  4205 000037B7 FEC0                <2> 		inc al
  4206 000037B9 89DA                <2> 		mov edx, ebx
  4207 000037BB C1E303              <2> 		shl ebx, 3
  4208 000037BE 01D3                <2> 		add ebx, edx
  4209 000037C0 01D3                <2> 		add ebx, edx
  4210 000037C2 38E0                <2> 		cmp al, ah
  4211 000037C4 72F1                <2> 		jb lowdecadd
  4212 000037C6 A2[CC370000]        <2> 		mov [decimal], al
  4213                              <2> 	gooddecadd:
  4214 000037CB C3                  <2> 		ret
  4215                              <2> 		
  4216 000037CC 00                  <2> decimal db 0
  4217 000037CD 00                  <2> decimal2 db 0
  4218 000037CE 00                  <2> decimalresult db 0
  4219 000037CF 00000000            <2> result dd 0
  4220                              <1> %include 'source/programs/_variables.asm' ;% and $
  4221 000037D3 FF2C2500            <2> db 255,44,"%",0
  4222                              <2> 	ans:
  4223 000037D7 BE[7CBC0000]        <2> 		mov esi, buf2
  4224 000037DC E887FFFFFF          <2> 		call chkadd
  4225 000037E1 C3                  <2> 		ret
  4226                              <2> 		
  4227 000037E2 FF2C2400            <2> db 255,44,"$",0
  4228 000037E6 8B35[33300000]      <2> var: mov esi, [currentcommandloc]
  4229 000037EC BB[72A40000]        <2> 	mov ebx, variables
  4230 000037F1 8A06                <2> lkeq:	mov al, [esi]
  4231 000037F3 3C3D                <2> 	cmp al, '='
  4232 000037F5 741B                <2> 	je eqfnd	;is there an '=' sign?
  4233 000037F7 3C00                <2> 	cmp al, 0
  4234 000037F9 7403                <2> 	je echovars
  4235 000037FB 46                  <2> 	inc esi
  4236 000037FC EBF3                <2> 	jmp lkeq
  4237 000037FE BE[72A40000]        <2> echovars: mov esi, variables
  4238 00003803 BB[72B40000]        <2> 	mov ebx, varend
  4239 00003808 B105                <2> 	mov cl, 5
  4240 0000380A B504                <2> 	mov ch, 4
  4241 0000380C E880F8FFFF          <2> 	call array
  4242 00003811 C3                  <2> 	ret
  4243 00003812 46                  <2> eqfnd:	inc esi
  4244 00003813 8A06                <2> 	mov al, [esi]
  4245 00003815 3C00                <2> 	cmp al, 0
  4246 00003817 7410                <2> 	je readvar
  4247 00003819 8B35[33300000]      <2> 	mov esi, [currentcommandloc]
  4248 0000381F BB[72A40000]        <2> 	mov ebx, variables
  4249 00003824 E919000000          <2> 	jmp seek
  4250                              <2> readvar:
  4251 00003829 B00A                <2> 	mov al, 10
  4252 0000382B 66BB0700            <2> 	mov bx, 7
  4253 0000382F C605[4D270000]00    <2> 	mov byte [commandedit], 0
  4254 00003836 BF[7CBC0000]        <2> 	mov edi, buftxtend
  4255 0000383B E8ACEBFFFF          <2> 	call rdprint
  4256 00003840 EBA4                <2> 	jmp var
  4257 00003842 668B03              <2> seek:	mov ax, [ebx]
  4258 00003845 B105                <2> 	mov cl, 5
  4259 00003847 B504                <2> 	mov ch, 4
  4260 00003849 663D0000            <2> 	cmp ax, 0
  4261 0000384D 0F845B000000        <2> 	je near save
  4262 00003853 6639C8              <2> 	cmp ax, cx
  4263 00003856 7403                <2> 	je skfnd
  4264 00003858 43                  <2> 	inc ebx
  4265 00003859 EBE7                <2> 	jmp seek
  4266 0000385B 8B35[33300000]      <2> skfnd:	mov esi, [currentcommandloc]
  4267 00003861 46                  <2> 	inc esi
  4268 00003862 81C302000000        <2> 	add ebx, 2
  4269 00003868 89DF                <2> 	mov edi, ebx
  4270 0000386A B13D                <2> 	mov cl, '='
  4271 0000386C E801F8FFFF          <2> 	call cndtest
  4272 00003871 3C01                <2> 	cmp al, 1	
  4273 00003873 7418                <2> 	je varfnd
  4274 00003875 89FB                <2> 	mov ebx, edi
  4275 00003877 8B35[33300000]      <2> 	mov esi, [currentcommandloc]
  4276 0000387D 668B03              <2> 	mov ax, [ebx]
  4277 00003880 663D0000            <2> 	cmp ax, 0
  4278 00003884 0F8424000000        <2> 	je near save
  4279 0000388A 43                  <2> 	inc ebx
  4280 0000388B EBB5                <2> 	jmp seek
  4281 0000388D 8A03                <2> varfnd:	mov al, [ebx]
  4282 0000388F 3C04                <2> 	cmp al, 4
  4283 00003891 7404                <2> 	je save2
  4284 00003893 4B                  <2> 	dec ebx
  4285 00003894 4E                  <2> 	dec esi
  4286 00003895 EBF6                <2> 	jmp varfnd
  4287 00003897 4B                  <2> save2:	dec ebx
  4288 00003898 4E                  <2> 	dec esi
  4289 00003899 8A03                <2> 	mov al, [ebx]
  4290 0000389B 3C05                <2> 	cmp al, 5
  4291 0000389D 7402                <2> 	je remove
  4292 0000389F EBEC                <2> 	jmp varfnd
  4293 000038A1 8A03                <2> remove: mov al, [ebx]
  4294 000038A3 3C00                <2> 	cmp al, 0
  4295 000038A5 749B                <2> 	je seek
  4296 000038A7 30C0                <2> 	xor al, al
  4297 000038A9 8803                <2> 	mov [ebx], al
  4298 000038AB 43                  <2> 	inc ebx
  4299 000038AC EBF3                <2> 	jmp remove	;do not need for now-need defragmentation
  4300 000038AE 8B35[33300000]      <2> save:	mov esi, [currentcommandloc]
  4301 000038B4 43                  <2> 	inc ebx
  4302 000038B5 B005                <2> 	mov al, 5
  4303 000038B7 B404                <2> 	mov ah, 4
  4304 000038B9 668903              <2> 	mov [ebx], ax
  4305 000038BC 43                  <2> 	inc ebx
  4306 000038BD 43                  <2> svhere:	inc ebx
  4307 000038BE 46                  <2> 	inc esi
  4308 000038BF 8A06                <2> 	mov al, [esi]
  4309 000038C1 3C00                <2> 	cmp al, 0
  4310 000038C3 0F844A000000        <2> 	je near svdone
  4311 000038C9 3C25                <2> 	cmp al, '%'
  4312 000038CB 7404                <2> 	je ans2
  4313 000038CD 8803                <2> 	mov [ebx], al	
  4314 000038CF EBEC                <2> 	jmp svhere
  4315 000038D1 56                  <2> ans2:	push esi
  4316 000038D2 BE[7CBC0000]        <2> 	mov esi, buf2
  4317 000038D7 E823000000          <2> 	call ansfnd
  4318 000038DC E803000000          <2> 	call anscp
  4319 000038E1 5E                  <2> 	pop esi
  4320 000038E2 EBD9                <2> 	jmp svhere
  4321 000038E4 8A06                <2> anscp:	mov al, [esi]
  4322 000038E6 8803                <2> 	mov [ebx], al
  4323 000038E8 81FE[90BC0000]      <2> 	cmp esi, numbuf
  4324 000038EE 74CD                <2> 	je svhere
  4325 000038F0 3C00                <2> 	cmp al, 0
  4326 000038F2 74C9                <2> 	je svhere
  4327 000038F4 43                  <2> 	inc ebx
  4328 000038F5 46                  <2> 	inc esi
  4329 000038F6 EBEC                <2> 	jmp anscp
  4330 000038F8 5E                  <2> ansnf:	pop esi
  4331 000038F9 8A06                <2> 	mov al, [esi]
  4332 000038FB 8803                <2> 	mov [ebx], al
  4333 000038FD EBBE                <2> 	jmp svhere
  4334 000038FF 46                  <2> ansfnd:	inc esi
  4335 00003900 81FE[8FBC0000]      <2> 	cmp esi, numbuf - 1
  4336 00003906 740A                <2> 	je fndans
  4337 00003908 8A06                <2> 	mov al, [esi]
  4338 0000390A 3C00                <2> 	cmp al, 0
  4339 0000390C 74EA                <2> 	je ansnf
  4340 0000390E 3C30                <2> 	cmp al, '0'
  4341 00003910 74ED                <2> 	je ansfnd
  4342                              <2> fndans:
  4343 00003912 C3                  <2> 	ret
  4344 00003913 30C0                <2> svdone:	xor al, al
  4345 00003915 8803                <2> 	mov [ebx], al
  4346 00003917 C3                  <2> 	ret
  4347                              <1> %include 'source/programs/_run.asm' ;./
  4348                              <2> 
  4349 00003918 7F454C46            <2> 	elfstart db 0x7F,"ELF"
  4350 0000391C FF2C2E2F00          <2> 	db 255,44,"./",0
  4351                              <2> rundiskprog:
  4352 00003921 8B3D[33300000]      <2> 	mov edi, [currentcommandloc]
  4353 00003927 81C702000000        <2> 	add edi, 2
  4354 0000392D BE00004000          <2> 	mov esi, 0x400000
  4355 00003932 E8F0370000          <2> 	call loadfile
  4356 00003937 81FA94010000        <2> 	cmp edx, 404
  4357 0000393D 7452                <2> 	je noprogfound
  4358 0000393F BB00004000          <2> 	mov ebx, 0x400000
  4359 00003944 A1[18390000]        <2> 	mov eax, [elfstart]
  4360 00003949 3903                <2> 	cmp [ebx], eax
  4361 0000394B 0F842B000000        <2> 	je near runelf
  4362 00003951 66813B4558          <2> 	cmp word [ebx], "EX"
  4363 00003956 755F                <2> 	jne progbatchfound
  4364 00003958 81C302000000        <2> 	add ebx, 2
  4365 0000395E 8B3D[33300000]      <2> 	mov edi, [currentcommandloc]
  4366 00003964 81C702000000        <2> 	add edi, 2
  4367                              <2> findspaceprog:
  4368 0000396A 8A07                <2> 	mov al, [edi]
  4369 0000396C 47                  <2> 	inc edi
  4370 0000396D 3C20                <2> 	cmp al, " "
  4371 0000396F 75F9                <2> 	jne findspaceprog
  4372                              <2> findnonspaceprog:
  4373 00003971 8A07                <2> 	mov al, [edi]
  4374 00003973 47                  <2> 	inc edi
  4375 00003974 3C20                <2> 	cmp al, " "
  4376 00003976 74F9                <2> 	je findnonspaceprog
  4377 00003978 4F                  <2> 	dec edi
  4378 00003979 FFD3                <2> 	call ebx
  4379 0000397B C3                  <2> 	ret
  4380                              <2> runelf:
  4381 0000397C 8B3D[33300000]      <2> 	mov edi, [currentcommandloc]
  4382 00003982 81C702000000        <2> 	add edi, 2
  4383 00003988 81C380000000        <2> 	add ebx, 0x80
  4384 0000398E FFD3                <2> 	call ebx
  4385 00003990 C3                  <2> 	ret
  4386                              <2> noprogfound:
  4387 00003991 BE[23780000]        <2> 	mov esi, notfound1
  4388 00003996 E849E9FFFF          <2> 	call print
  4389 0000399B 8B35[33300000]      <2> 	mov esi, [currentcommandloc]
  4390 000039A1 81C602000000        <2> 	add esi, 2
  4391 000039A7 E838E9FFFF          <2> 	call print
  4392 000039AC BE[2D780000]        <2> 	mov esi, notfound2
  4393 000039B1 E82EE9FFFF          <2> 	call print
  4394 000039B6 C3                  <2> 	ret
  4395                              <2> progbatchfound:
  4396 000039B7 BF00004000          <2> 		mov edi, 0x400000
  4397 000039BC C605[6CA40000]01    <2> 		mov byte [BATCHISON], 1
  4398                              <2> 	batchrunloop:
  4399 000039C3 E89EF3FFFF          <2> 		call buftxtclear
  4400 000039C8 BE[7CB80000]        <2> 		mov esi, buftxt
  4401 000039CD 8935[33300000]      <2> 		mov [currentcommandloc], esi
  4402                              <2> 	batchrunloop2:
  4403 000039D3 B10A                <2> 		mov cl, 10
  4404 000039D5 B50D                <2> 		mov ch, 13
  4405 000039D7 380F                <2> 		cmp [edi], cl
  4406 000039D9 0F8419000000        <2> 		je near nxtbatchrunline
  4407 000039DF 382F                <2> 		cmp [edi], ch
  4408 000039E1 0F8411000000        <2> 		je near nxtbatchrunline
  4409 000039E7 803F00              <2> 		cmp byte [edi], 0
  4410 000039EA 0F8408000000        <2> 		je near nxtbatchrunline
  4411 000039F0 8A07                <2> 		mov al, [edi]
  4412 000039F2 8806                <2> 		mov [esi], al
  4413 000039F4 46                  <2> 		inc esi
  4414 000039F5 47                  <2> 		inc edi
  4415 000039F6 EBDB                <2> 		jmp batchrunloop2
  4416                              <2> 	nxtbatchrunline:
  4417 000039F8 47                  <2> 		inc edi
  4418 000039F9 380F                <2> 		cmp [edi], cl
  4419 000039FB 74FB                <2> 		je nxtbatchrunline
  4420 000039FD 382F                <2> 		cmp [edi], ch
  4421 000039FF 74F7                <2> 		je nxtbatchrunline
  4422 00003A01 893D[5F3A0000]      <2> 		mov [batchedi], edi
  4423 00003A07 893D[68A40000]      <2> 		mov [BATCHPOS], edi
  4424 00003A0D C60600              <2> 		mov byte [esi], 0
  4425 00003A10 BE[7CB80000]        <2> 		mov esi, buftxt
  4426 00003A15 803E00              <2> 		cmp byte [esi], 0
  4427 00003A18 0F8439000000        <2> 		je near nobatchfoundrun
  4428 00003A1E 31DB                <2> 		xor ebx, ebx
  4429 00003A20 8A1D[03A40000]      <2> 		mov bl, [IFON]
  4430 00003A26 80FB00              <2> 		cmp bl, 0
  4431 00003A29 0F8534000000        <2> 		jne near iftestbatch
  4432                              <2> 	doneiftest:
  4433 00003A2F 803D[353B0000]00    <2> 		cmp byte [runnextline], 0
  4434 00003A36 0F8405000000        <2> 		je near noruniftest
  4435 00003A3C E814F5FFFF          <2> 		call run
  4436                              <2> 	noruniftest:
  4437 00003A41 C605[353B0000]01    <2> 		mov byte [runnextline], 1
  4438 00003A48 8B3D[5F3A0000]      <2> 		mov edi, [batchedi]
  4439 00003A4E 803F00              <2> 		cmp byte [edi], 0
  4440 00003A51 0F856CFFFFFF        <2> 		jne near batchrunloop
  4441                              <2> 	nobatchfoundrun:
  4442 00003A57 C605[6CA40000]00    <2> 		mov byte [BATCHISON], 0
  4443 00003A5E C3                  <2> 		ret
  4444                              <2> 	
  4445 00003A5F 00000000            <2> batchedi dd 0	
  4446                              <2> 	
  4447                              <2> 	iftestbatch:
  4448 00003A63 BE[04A40000]        <2> 		mov esi, IFTRUE
  4449 00003A68 01DE                <2> 		add esi, ebx
  4450 00003A6A 803E00              <2> 		cmp byte [esi], 0
  4451 00003A6D 0F85BCFFFFFF        <2> 		jne near doneiftest
  4452 00003A73 881D[363B0000]      <2> 		mov [iffalsebuf], bl
  4453 00003A79 803D[6DA40000]01    <2> 		cmp byte [LOOPON], 1
  4454 00003A80 0F8513000000        <2> 		jne near fifindbatch
  4455 00003A86 E938FFFFFF          <2> 		jmp batchrunloop
  4456                              <2> 	elsetestbatch:
  4457 00003A8B C60601              <2> 		mov byte [esi], 1
  4458 00003A8E 81C705000000        <2> 		add edi, 5
  4459 00003A94 E92AFFFFFF          <2> 		jmp batchrunloop
  4460                              <2> 	fifindbatch:
  4461 00003A99 66B96966            <2> 		mov cx, "if"
  4462 00003A9D 66B86669            <2> 		mov ax, "fi"
  4463 00003AA1 663907              <2> 		cmp [edi], ax
  4464 00003AA4 0F8424000000        <2> 		je near fifoundbatch
  4465 00003AAA 66390F              <2> 		cmp [edi], cx
  4466 00003AAD 0F8465000000        <2> 		je near iffoundbatch
  4467 00003AB3 803F00              <2> 		cmp byte [edi], 0
  4468 00003AB6 0F8412000000        <2> 		je near fifoundbatch
  4469 00003ABC B8656C7365          <2> 		mov eax, "else"
  4470 00003AC1 3907                <2> 		cmp [edi], eax
  4471 00003AC3 0F84C2FFFFFF        <2> 		je near elsetestbatch
  4472 00003AC9 E973FFFFFF          <2> 		jmp noruniftest
  4473                              <2> 	fifoundbatch:
  4474 00003ACE 81C702000000        <2> 		add edi, 2
  4475 00003AD4 B00A                <2> 		mov al, 10
  4476 00003AD6 3807                <2> 		cmp [edi], al
  4477 00003AD8 0F840B000000        <2> 		je near goodfibatch
  4478 00003ADE 803F00              <2> 		cmp byte [edi], 0
  4479 00003AE1 0F8470FFFFFF        <2> 		je near nobatchfoundrun
  4480 00003AE7 EBB0                <2> 		jmp fifindbatch
  4481                              <2> 	goodfibatch:
  4482 00003AE9 B001                <2> 		mov al, 1
  4483 00003AEB 2805[03A40000]      <2> 		sub [IFON], al 
  4484 00003AF1 A0[03A40000]        <2> 		mov al, [IFON]
  4485 00003AF6 8A1D[363B0000]      <2> 		mov bl, [iffalsebuf]
  4486 00003AFC 38D8                <2> 		cmp al, bl
  4487 00003AFE 7799                <2> 		ja fifindbatch
  4488 00003B00 8B35[33300000]      <2> 		mov esi, [currentcommandloc]
  4489 00003B06 81EF02000000        <2> 		sub edi, 2
  4490 00003B0C C605[353B0000]00    <2> 		mov byte [runnextline], 0
  4491 00003B13 E9ABFEFFFF          <2> 		jmp batchrunloop
  4492                              <2> 	iffoundbatch:
  4493 00003B18 B020                <2> 		mov al, ' '
  4494 00003B1A 81C702000000        <2> 		add edi, 2
  4495 00003B20 3807                <2> 		cmp [edi], al
  4496 00003B22 0F8571FFFFFF        <2> 		jne near fifindbatch
  4497 00003B28 B001                <2> 		mov al, 1
  4498 00003B2A 0005[03A40000]      <2> 		add [IFON], al
  4499 00003B30 E964FFFFFF          <2> 		jmp fifindbatch
  4500                              <2> 		
  4501                              <2> 		
  4502 00003B35 01                  <2> runnextline db 1
  4503 00003B36 00                  <2> iffalsebuf db 0
  4504                              <2> 
  4505 00003B37 C3                  <2> notbatch: ret 
  4506                              <1> 
  4507                              <1> %include 'source/programs/arp.asm'
  4508 00003B38 FF2C61727000        <2> db 255,44,"arp",0	;if only this worked
  4509 00003B3E E872320000          <2> 	call arptest
  4510 00003B43 C3                  <2> 	ret
  4511                              <2> 	
  4512                              <1> %include 'source/programs/batch.asm'
  4513 00003B44 FF2C626174636800    <2> db 255,44,"batch",0
  4514                              <2> 	batchst: 
  4515 00003B4C 8B3D[33300000]      <2> 		mov edi, [currentcommandloc]
  4516 00003B52 81C706000000        <2> 		add edi, 6
  4517 00003B58 803F00              <2> 		cmp byte [edi], 0
  4518 00003B5B 0F846D000000        <2> 		je near nonamefound
  4519 00003B61 BE00004000          <2> 		mov esi, 0x400000
  4520 00003B66 E8BC350000          <2> 		call loadfile
  4521 00003B6B 89D0                <2> 		mov eax, edx
  4522 00003B6D 3D94010000          <2> 		cmp eax, 404
  4523 00003B72 7465                <2> 		je goodbatchname
  4524 00003B74 BE[7F3B0000]        <2> 		mov esi, badbatchname
  4525 00003B79 E866E7FFFF          <2> 		call print
  4526 00003B7E C3                  <2> 		ret
  4527 00003B7F 546869732066696C65- <2> 		badbatchname db "This file already exists!",10,0
  4528 00003B88 20616C726561647920- <2>
  4529 00003B91 657869737473210A00  <2>
  4530 00003B9A 596F75206861766520- <2> 		namenotfoundbatch db "You have to type a name after the command.",10,0
  4531 00003BA3 746F20747970652061- <2>
  4532 00003BAC 206E616D6520616674- <2>
  4533 00003BB5 65722074686520636F- <2>
  4534 00003BBE 6D6D616E642E0A00    <2>
  4535 00003BC6 00000000            <2> 		esicache3 dd 0
  4536 00003BCA 00000000            <2> 		esicache2 dd 0
  4537                              <2> 	nonamefound:
  4538 00003BCE BE[9A3B0000]        <2> 		mov esi, namenotfoundbatch
  4539 00003BD3 E80CE7FFFF          <2> 		call print
  4540 00003BD8 C3                  <2> 		ret
  4541                              <2> 	goodbatchname:
  4542 00003BD9 BE00004000          <2> 		mov esi, 0x400000
  4543                              <2> 	batchcreate:
  4544 00003BDE 8935[C63B0000]      <2> 		mov [esicache3], esi
  4545 00003BE4 BF00008000          <2> 		mov edi, 0x800000
  4546 00003BE9 B00A                <2> 		mov al, 10
  4547 00003BEB B307                <2> 		mov bl, 7
  4548 00003BED B404                <2> 		mov ah, 4
  4549 00003BEF CD30                <2> 		int 30h
  4550 00003BF1 8935[CA3B0000]      <2> 		mov [esicache2], esi
  4551 00003BF7 8A0E                <2> 		mov cl, [esi]
  4552 00003BF9 8B35[C63B0000]      <2> 		mov esi, [esicache3]
  4553 00003BFF BB[333C0000]        <2> 		mov ebx, exitword
  4554 00003C04 E869F4FFFF          <2> 		call cndtest
  4555 00003C09 3C01                <2> 		cmp al, 1
  4556 00003C0B 7411                <2> 		je endbatchcreate
  4557 00003C0D 3C02                <2> 		cmp al, 2
  4558 00003C0F 740D                <2> 		je endbatchcreate
  4559 00003C11 8B35[CA3B0000]      <2> 		mov esi, [esicache2]
  4560 00003C17 B00A                <2> 		mov al, 10
  4561 00003C19 8806                <2> 		mov [esi], al
  4562 00003C1B 46                  <2> 		inc esi
  4563 00003C1C EBC0                <2> 		jmp batchcreate
  4564                              <2> 	endbatchcreate:
  4565 00003C1E 8B35[C63B0000]      <2> 		mov esi, [esicache3]
  4566 00003C24 31C0                <2> 		xor eax, eax
  4567 00003C26 8806                <2> 		mov [esi], al
  4568 00003C28 BE00004000          <2> 		mov esi, 0x400000
  4569 00003C2D E8B2E6FFFF          <2> 		call print
  4570 00003C32 C3                  <2> 		ret
  4571                              <2> 	
  4572 00003C33 5C7800              <2> 	exitword db "\x",0
  4573 00003C36 54797065205C782074- <2> 	wordmsg db "Type \x to exit.",10,0
  4574 00003C3F 6F20657869742E0A00  <2>
  4575                              <1> %include 'source/programs/beep.asm'
  4576 00003C48 FF2C6265657000      <2> 	db 255,44,"beep",0
  4577 00003C4F B8[743C0000]        <2> 	mov eax, beepstart
  4578 00003C54 A3[41060000]        <2> 	mov [soundpos], eax
  4579 00003C59 B8[783C0000]        <2> 	mov eax, beepend
  4580 00003C5E A3[45060000]        <2> 	mov [soundendpos], eax
  4581 00003C63 C605[3E060000]01    <2> 	mov byte [soundon], 1
  4582                              <2> waitforsoundendbeep:
  4583 00003C6A A0[3E060000]        <2> 	mov al, [soundon]
  4584 00003C6F 3C00                <2> 	cmp al, 0
  4585 00003C71 75F7                <2> 	jne waitforsoundendbeep
  4586 00003C73 C3                  <2> 	ret
  4587                              <2> 	
  4588                              <2> beepstart:
  4589 00003C74 3200D111            <2> 	dw 50, 4561
  4590                              <2> beepend:
  4591                              <1> %include 'source/programs/charmap.asm'
  4592 00003C78 FF2C636861727300    <2> db 255,44,"chars",0
  4593 00003C80 66BB0700            <2> 	mov bx, 7
  4594 00003C84 B020                <2> 	mov al, " "
  4595 00003C86 E83DEBFFFF          <2> 	call prcharq
  4596 00003C8B E838EBFFFF          <2> 	call prcharq
  4597 00003C90 E833EBFFFF          <2> 	call prcharq
  4598 00003C95 E82EEBFFFF          <2> 	call prcharq
  4599 00003C9A B030                <2> 	mov al, "0"
  4600                              <2> charmapnumprnt:
  4601 00003C9C E827EBFFFF          <2> 	call prcharq
  4602 00003CA1 FEC0                <2> 	inc al
  4603 00003CA3 6650                <2> 	push ax
  4604 00003CA5 B020                <2> 	mov al, " "
  4605 00003CA7 E81CEBFFFF          <2> 	call prcharq
  4606 00003CAC 6658                <2> 	pop ax
  4607 00003CAE 3C39                <2> 	cmp al, "9"
  4608 00003CB0 76EA                <2> 	jbe charmapnumprnt
  4609 00003CB2 B041                <2> 	mov al, "A"
  4610                              <2> charmapnumprnt2:
  4611 00003CB4 E80FEBFFFF          <2> 	call prcharq
  4612 00003CB9 FEC0                <2> 	inc al
  4613 00003CBB 6650                <2> 	push ax
  4614 00003CBD B020                <2> 	mov al, " "
  4615 00003CBF E804EBFFFF          <2> 	call prcharq
  4616 00003CC4 6658                <2> 	pop ax
  4617 00003CC6 3C47                <2> 	cmp al, "G"
  4618 00003CC8 72EA                <2> 	jb charmapnumprnt2
  4619                              <2> 	
  4620 00003CCA BE[61780000]        <2> 	mov esi, line
  4621 00003CCF E8FEE5FFFF          <2> 	call printquiet
  4622 00003CD4 6631C0              <2> 	xor ax, ax
  4623 00003CD7 88C1                <2> 	mov cl, al
  4624 00003CD9 E8A7F5FFFF          <2> 	call showhexsmall
  4625 00003CDE E951000000          <2> 	jmp charmapnocopy ;the first char is 0 which is unprintable
  4626                              <2> charmapcopy:
  4627 00003CE3 FEC0                <2> 	inc al
  4628 00003CE5 6650                <2> 	push ax
  4629 00003CE7 3C08                <2> 	cmp al, 8
  4630 00003CE9 7449                <2> 	je charmapnocopy
  4631 00003CEB 3C09                <2> 	cmp al, 9
  4632 00003CED 7445                <2> 	je charmapnocopy
  4633 00003CEF 3C0A                <2> 	cmp al, 10
  4634 00003CF1 7441                <2> 	je charmapnocopy
  4635 00003CF3 3C0D                <2> 	cmp al, 13
  4636 00003CF5 743D                <2> 	je charmapnocopy
  4637 00003CF7 3CFF                <2> 	cmp al, 255
  4638 00003CF9 7439                <2> 	je charmapnocopy
  4639 00003CFB 3C00                <2> 	cmp al, 0
  4640 00003CFD 7434                <2> 	je nomorecharmap
  4641 00003CFF E8C4EAFFFF          <2> 	call prcharq
  4642 00003D04 B020                <2> 	mov al, " "
  4643 00003D06 E8BDEAFFFF          <2> 	call prcharq
  4644 00003D0B 6658                <2> 	pop ax
  4645                              <2> charmapcopycheck:
  4646 00003D0D FEC4                <2> 	inc ah
  4647 00003D0F 80FC10              <2> 	cmp ah, 16
  4648 00003D12 72CF                <2> 	jb charmapcopy
  4649 00003D14 6650                <2> 	push ax
  4650 00003D16 BE[61780000]        <2> 	mov esi, line
  4651 00003D1B E8B2E5FFFF          <2> 	call printquiet
  4652 00003D20 6658                <2> 	pop ax
  4653 00003D22 3CFF                <2> 	cmp al, 255
  4654 00003D24 740D                <2> 	je nomorecharmap
  4655 00003D26 88C1                <2> 	mov cl, al
  4656 00003D28 FEC1                <2> 	inc cl
  4657 00003D2A E856F5FFFF          <2> 	call showhexsmall
  4658 00003D2F 30E4                <2> 	xor ah, ah
  4659 00003D31 EBB0                <2> 	jmp charmapcopy
  4660                              <2> nomorecharmap:
  4661 00003D33 C3                  <2> 	ret
  4662                              <2> charmapnocopy:
  4663 00003D34 6650                <2> 	push ax
  4664 00003D36 B020                <2> 	mov al, " "
  4665 00003D38 E88BEAFFFF          <2> 	call prcharq
  4666 00003D3D E886EAFFFF          <2> 	call prcharq
  4667 00003D42 6658                <2> 	pop ax
  4668 00003D44 EBC7                <2> 	jmp charmapcopycheck
  4669                              <1> %include 'source/programs/clear.asm'
  4670 00003D46 FF2C636C65617200    <2> db 255,44,"clear",0
  4671 00003D4E E815E6FFFF          <2> 		call clear
  4672 00003D53 C3                  <2> 		ret 
  4673                              <1> %include 'source/programs/cpuid.asm'
  4674 00003D54 FF2C637075696400    <2> db 255,44,"cpuid",0
  4675 00003D5C 31C0                <2> 	xor eax, eax
  4676 00003D5E 0FA2                <2> 	cpuid
  4677 00003D60 891D[B13D0000]      <2> 	mov [cpuidbuf], ebx
  4678 00003D66 8915[B53D0000]      <2> 	mov [cpuidbuf + 4], edx
  4679 00003D6C 890D[B93D0000]      <2> 	mov [cpuidbuf + 8], ecx
  4680 00003D72 BE[B13D0000]        <2> 	mov esi, cpuidbuf
  4681 00003D77 E868E5FFFF          <2> 	call print
  4682 00003D7C BE[61780000]        <2> 	mov esi, line
  4683 00003D81 E85EE5FFFF          <2> 	call print
  4684 00003D86 B801000000          <2> 	mov eax, 1
  4685 00003D8B 0FA2                <2> 	cpuid
  4686 00003D8D 89C1                <2> 	mov ecx, eax
  4687 00003D8F C605[84320000]02    <2> 	mov byte [firsthexshown], 2
  4688 00003D96 E8FEF4FFFF          <2> 	call showhex
  4689 00003D9B B808000080          <2> 	mov eax, 0x80000008
  4690 00003DA0 0FA2                <2> 	cpuid
  4691 00003DA2 89C1                <2> 	mov ecx, eax
  4692 00003DA4 C605[84320000]02    <2> 	mov byte [firsthexshown], 2
  4693 00003DAB E8E9F4FFFF          <2> 	call showhex
  4694 00003DB0 C3                  <2> 	ret
  4695                              <2> 	
  4696 00003DB1 00<rept>            <2> cpuidbuf times 13 db 0
  4697                              <2> cpuidvendorend:
  4698                              <1> %include 'source/programs/dos.asm'
  4699 00003DBE FF2C646F7300        <2> db 255,44,"dos",0
  4700                              <2> rundosprog:
  4701 00003DC4 8B3D[33300000]      <2> 	mov edi, [currentcommandloc]
  4702 00003DCA 81C704000000        <2> 	add edi, 4
  4703 00003DD0 BE00014000          <2> 	mov esi,  0x100 + dosprogloc	;this should be the beginning of memory
  4704 00003DD5 E84D330000          <2> 	call loadfile
  4705 00003DDA BF[7CB80000]        <2> 	mov edi, buftxt
  4706 00003DDF 81C704000000        <2> 	add edi, 4
  4707 00003DE5 81FA94010000        <2> 	cmp edx, 404
  4708 00003DEB 0F844B000000        <2> 	je near dosnoprogfound
  4709 00003DF1 BB81004000          <2> 	mov ebx, 0x81 + dosprogloc
  4710 00003DF6 31C9                <2> 	xor ecx, ecx
  4711                              <2> finddosparams:
  4712 00003DF8 47                  <2> 	inc edi
  4713 00003DF9 8A07                <2> 	mov al, [edi]
  4714 00003DFB 3C20                <2> 	cmp al, " "
  4715 00003DFD 75F9                <2> 	jne finddosparams
  4716                              <2> copydosparams:
  4717 00003DFF 8A07                <2> 	mov al, [edi]
  4718 00003E01 8803                <2> 	mov [ebx], al
  4719 00003E03 43                  <2> 	inc ebx
  4720 00003E04 47                  <2> 	inc edi
  4721 00003E05 41                  <2> 	inc ecx
  4722 00003E06 81FB00014000        <2> 	cmp ebx, 0x100 + dosprogloc
  4723 00003E0C 7304                <2> 	jae nomoredosparams
  4724 00003E0E 3C00                <2> 	cmp al, 0
  4725 00003E10 75ED                <2> 	jne copydosparams
  4726                              <2> nomoredosparams:
  4727 00003E12 880D80004000        <2> 	mov [0x80 + dosprogloc], cl
  4728 00003E18 66B84800            <2> 	mov ax, DOS_DATA_SEL
  4729 00003E1C 8ED8                <2> 	mov ds, ax
  4730 00003E1E 8EC0                <2> 	mov es, ax
  4731 00003E20 8EE0                <2> 	mov fs, ax
  4732 00003E22 8EE8                <2> 	mov gs, ax
  4733 00003E24 31C0                <2> 	xor eax, eax
  4734 00003E26 31DB                <2> 	xor ebx, ebx
  4735 00003E28 31C9                <2> 	xor ecx, ecx
  4736 00003E2A 31D2                <2> 	xor edx, edx
  4737 00003E2C 31FF                <2> 	xor edi, edi
  4738 00003E2E 31F6                <2> 	xor esi, esi
  4739 00003E30 9A000100004000      <2> 	call DOS_CODE_SEL:0x100
  4740 00003E37 E94DEFFFFF          <2> 	jmp nwcmd
  4741                              <2> dosnoprogfound:
  4742 00003E3C BE[23780000]        <2> 	mov esi, notfound1
  4743 00003E41 E89EE4FFFF          <2> 	call print
  4744 00003E46 8B35[33300000]      <2> 	mov esi, [currentcommandloc]
  4745 00003E4C 81C604000000        <2> 	add esi, 4
  4746 00003E52 E88DE4FFFF          <2> 	call print
  4747 00003E57 BE[2D780000]        <2> 	mov esi, notfound2
  4748 00003E5C E883E4FFFF          <2> 	call print
  4749 00003E61 E923EFFFFF          <2> 	jmp nwcmd
  4750                              <1> %include 'source/programs/dump.asm'
  4751 00003E66 FF2C64756D7000      <2> db 255,44,"dump",0
  4752 00003E6D 8B35[33300000]      <2> 	mov esi, [currentcommandloc]
  4753 00003E73 81C605000000        <2> 	add esi, 5
  4754 00003E79 31C9                <2> 	xor ecx, ecx
  4755 00003E7B 66B83078            <2> 	mov ax, "0x"
  4756 00003E7F 663906              <2> 	cmp [esi], ax
  4757 00003E82 740A                <2> 	je dumphexin
  4758 00003E84 E89BF5FFFF          <2> 	call cnvrttxt
  4759 00003E89 E910000000          <2> 	jmp dumphexnow
  4760                              <2> dumphexin:
  4761 00003E8E 81C602000000        <2> 	add esi, 2
  4762 00003E94 E850F5FFFF          <2> 	call cnvrthextxt
  4763 00003E99 E900000000          <2> 	jmp dumphexnow
  4764                              <2> dumphexnow:
  4765 00003E9E 89CF                <2> 	mov edi, ecx
  4766 00003EA0 89FE                <2> 	mov esi, edi
  4767 00003EA2 81C680030000        <2> 	add esi, 896
  4768                              <2> dumphexloop:
  4769 00003EA8 8B0F                <2> 	mov ecx, [edi]
  4770 00003EAA C605[84320000]05    <2> 	mov byte [firsthexshown],5
  4771 00003EB1 E8E3F3FFFF          <2> 	call showhex
  4772 00003EB6 81C704000000        <2> 	add edi, 4
  4773 00003EBC 39F7                <2> 	cmp edi, esi
  4774 00003EBE 72E8                <2> 	jb dumphexloop
  4775 00003EC0 E85CEBFFFF          <2> 	call termcopy
  4776 00003EC5 C3                  <2> 	ret 
  4777                              <1> %include 'source/programs/echo.asm'
  4778                              <2> 
  4779 00003EC6 FF2C6563686F00      <2> db 255,44,"echo",0
  4780                              <2> 	echoprog:
  4781 00003ECD 8B35[33300000]      <2> 		mov esi, [currentcommandloc]
  4782 00003ED3 81C605000000        <2> 		add esi, 5
  4783 00003ED9 8A06                <2> 		mov al, [esi]
  4784 00003EDB E804E4FFFF          <2> 		call print
  4785 00003EE0 BE[61780000]        <2> 		mov esi, line
  4786 00003EE5 E8FAE3FFFF          <2> 		call print
  4787 00003EEA C3                  <2> 		ret
  4788 00003EEB BB[72A40000]        <2> 	echovr:	mov ebx, variables
  4789 00003EF0 BF06000000          <2> 		mov edi, 6
  4790 00003EF5 E83C000000          <2> 		call nxtvrech
  4791 00003EFA E954000000          <2> 		jmp prntvr2
  4792 00003EFF B13D                <2> 	echvar:	mov cl, '='
  4793 00003F01 43                  <2> 		inc ebx
  4794 00003F02 8A03                <2> 		mov al, [ebx]
  4795 00003F04 3C00                <2> 		cmp al, 0
  4796 00003F06 742E                <2> 		je nxtvrech
  4797 00003F08 3C3D                <2> 		cmp al, '='
  4798 00003F0A 7422                <2> 		je nxtvrechb1
  4799 00003F0C 8B35[33300000]      <2> 		mov esi, [currentcommandloc]
  4800 00003F12 01FE                <2> 		add esi, edi
  4801 00003F14 E859F1FFFF          <2> 		call cndtest
  4802 00003F19 3C02                <2> 		cmp al, 2
  4803 00003F1B 7432                <2> 		je prntvr
  4804 00003F1D 3C01                <2> 		cmp al, 1
  4805 00003F1F 742E                <2> 		je prntvr
  4806 00003F21 8B35[33300000]      <2> 		mov esi, [currentcommandloc]
  4807 00003F27 01FE                <2> 		add esi, edi
  4808 00003F29 E908000000          <2> 		jmp nxtvrech
  4809                              <2> 	nxtvrechb1:
  4810 00003F2E 81EB02000000        <2> 		sub ebx, 2
  4811 00003F34 EBC9                <2> 		jmp echvar
  4812 00003F36 8A03                <2> 	nxtvrech: mov al, [ebx]
  4813 00003F38 3C05                <2> 		cmp al, 5
  4814 00003F3A 740A                <2> 		je nxtvrec2
  4815 00003F3C 43                  <2> 		inc ebx
  4816 00003F3D 81FB[72B40000]      <2> 		cmp ebx, varend
  4817 00003F43 72F1                <2> 		jb nxtvrech
  4818 00003F45 C3                  <2> 		ret
  4819 00003F46 43                  <2> 	nxtvrec2: inc ebx
  4820 00003F47 8A03                <2> 		mov al, [ebx]
  4821 00003F49 3C04                <2> 		cmp al, 4
  4822 00003F4B 74B2                <2> 		je echvar
  4823 00003F4D EBE7                <2> 		jmp nxtvrech
  4824 00003F4F 43                  <2> 	prntvr: inc ebx
  4825 00003F50 89DE                <2> 		mov esi, ebx
  4826 00003F52 C3                  <2> 		ret
  4827 00003F53 E88CE3FFFF          <2> 	prntvr2: call print
  4828 00003F58 BE[61780000]        <2> 		mov esi, line
  4829 00003F5D E882E3FFFF          <2> 		call print
  4830 00003F62 C3                  <2> 		ret 
  4831                              <1> %include 'source/programs/else.asm'
  4832 00003F63 FF2C656C736500      <2> 	db 255,44,"else",0
  4833 00003F6A 31C0                <2> elsecmd:	xor eax, eax
  4834 00003F6C 3805[6CA40000]      <2> 	cmp [BATCHISON], al
  4835 00003F72 0F84BFFBFFFF        <2> 	je near notbatch
  4836 00003F78 A0[03A40000]        <2> 	mov al, [IFON]
  4837 00003F7D BE[04A40000]        <2> 	mov esi, IFTRUE
  4838 00003F82 01C6                <2> 	add esi, eax
  4839 00003F84 8A06                <2> 	mov al, [esi]
  4840 00003F86 3401                <2> 	xor al, 1
  4841 00003F88 8806                <2> 	mov [esi], al
  4842 00003F8A C3                  <2> 	ret 
  4843                              <1> %include 'source/programs/fi.asm'
  4844 00003F8B FF2C666900          <2> 	db 255,44,"fi",0
  4845 00003F90 30C0                <2> 	xor al, al
  4846 00003F92 3805[6CA40000]      <2> 	cmp [BATCHISON], al
  4847 00003F98 0F8499FBFFFF        <2> 	je near notbatch
  4848 00003F9E B001                <2> fi:	mov al, 1
  4849 00003FA0 2805[03A40000]      <2> 	sub [IFON],al
  4850 00003FA6 C3                  <2> 	ret 
  4851                              <1> %include 'source/programs/gui.asm'
  4852 00003FA7 FF2C67756900        <2> db 255,44,"gui",0
  4853                              <2> guiswitcher:
  4854 00003FAD E8B6E3FFFF          <2> 	call clear
  4855 00003FB2 66BB[4300]          <2> 	mov bx, guiswitch
  4856 00003FB6 66891D[C5100000]    <2> 	mov [realmodeptr], bx
  4857 00003FBD BB[CD3F0000]        <2> 	mov ebx, guiswitchret
  4858 00003FC2 891D[C1100000]      <2> 	mov [realmodereturn], ebx
  4859 00003FC8 E9F6CFFFFF          <2> 	jmp realmode
  4860                              <2> guiswitchret:
  4861 00003FCD BF[96880000]        <2> 	mov edi, VBEMODEBLOCK
  4862                              <2> .loop
  4863 00003FD2 658B07              <2> 	mov eax, [gs:edi]
  4864 00003FD5 8907                <2> 	mov [edi], eax
  4865 00003FD7 47                  <2> 	inc edi
  4866 00003FD8 81FF[998B0000]      <2> 	cmp edi, VBEEND
  4867 00003FDE 72F2                <2> 	jb .loop
  4868 00003FE0 A1[BE8A0000]        <2> 	mov eax, [physbaseptr]
  4869 00003FE5 2D00001000          <2> 	sub eax, 0x100000
  4870 00003FEA A3[BE8A0000]        <2> 	mov [physbaseptr], eax
  4871 00003FEF C605[C6270000]00    <2> 	mov byte [termguion], 0
  4872 00003FF6 BE[FF9C0000]        <2> 	mov esi, graphicstable
  4873 00003FFB 30C0                <2> 	xor al, al
  4874                              <2> .clear
  4875 00003FFD 8806                <2> 	mov [esi], al
  4876 00003FFF 46                  <2> 	inc esi
  4877 00004000 81FE[FF9E0000]      <2> 	cmp esi, graphicstableend
  4878 00004006 72F5                <2> 	jb .clear
  4879 00004008 E9B2160000          <2> 	jmp gui
  4880                              <1> %include 'source/programs/help.asm'
  4881 0000400D FF2C68656C7000      <2> db 255,44,"help",0
  4882                              <2> lscmd:	
  4883 00004014 B00D                <2> 		mov al, 13
  4884 00004016 E8ADE7FFFF          <2> 		call prcharq
  4885 0000401B BE[A7340000]        <2> 		mov esi, progstart
  4886 00004020 BB[734B0000]        <2> 		mov ebx, progend
  4887 00004025 BE[FF9F0000]        <2> dir:	mov esi, fileindex
  4888 0000402A 8A06                <2> 	dirnxt:	mov al, [esi]
  4889 0000402C 30E4                <2> 		xor ah, ah
  4890 0000402E 3CFF                <2> 		cmp al, 255
  4891 00004030 7415                <2> 		je dirfnd
  4892 00004032 46                  <2> 		inc esi
  4893 00004033 81FE[FFA30000]      <2> 		cmp esi,  fileindexend
  4894 00004039 7339                <2> 		jae dirdn
  4895 0000403B EBED                <2> 		jmp dirnxt
  4896                              <2> 	dirfnd3:
  4897 0000403D 46                  <2> 		inc esi
  4898 0000403E 81FE[FFA30000]      <2> 		cmp esi, fileindexend
  4899 00004044 76E4                <2> 		jbe dirnxt
  4900 00004046 4E                  <2> 		dec esi
  4901 00004047 46                  <2> 	dirfnd:	inc esi
  4902 00004048 8A06                <2> 		mov al, [esi]
  4903 0000404A 30E4                <2> 		xor ah, ah
  4904 0000404C 3C2C                <2> 		cmp al, 44
  4905 0000404E 740B                <2> 		je dirfnd2
  4906 00004050 46                  <2> 		inc esi
  4907 00004051 81FE[FFA30000]      <2> 		cmp esi,  fileindexend
  4908 00004057 731B                <2> 		jae dirdn
  4909 00004059 EBCF                <2> 		jmp dirnxt
  4910 0000405B 46                  <2> 	dirfnd2: inc esi
  4911 0000405C E871E2FFFF          <2> 		call printquiet
  4912 00004061 56                  <2> 		push esi
  4913 00004062 B009                <2> 		mov al, 9
  4914 00004064 E85FE7FFFF          <2> 		call prcharq
  4915 00004069 5E                  <2> 		pop esi
  4916 0000406A 81FE[FFA30000]      <2> 		cmp esi,  fileindexend
  4917 00004070 7302                <2> 		jae dirdn
  4918 00004072 EBB6                <2> 		jmp dirnxt
  4919 00004074 BE[61780000]        <2> 	dirdn:	mov esi, line
  4920 00004079 E866E2FFFF          <2> 			call print
  4921 0000407E C3                  <2> 			ret
  4922 0000407F 00                  <2> currentdir db 0
  4923                              <1> %include 'source/programs/if.asm'
  4924 00004080 FF2C696600          <2> 	db 255,44,"if",0
  4925 00004085 30C0                <2> ifcmd:	xor al, al
  4926 00004087 3805[6CA40000]      <2> 	cmp [BATCHISON], al
  4927 0000408D 0F84A4FAFFFF        <2> 	je near notbatch
  4928 00004093 8B1D[33300000]      <2> 	mov ebx, [currentcommandloc]
  4929 00004099 81C303000000        <2> 	add ebx, 3
  4930 0000409F 89DE                <2> 	mov esi, ebx
  4931 000040A1 8A06                <2> chkeqsn: mov al, [esi]
  4932 000040A3 3C00                <2> 	cmp al, 0
  4933 000040A5 0F848CFAFFFF        <2> 	je near notbatch
  4934 000040AB 3C3D                <2> 	cmp al, '='
  4935 000040AD 0F8403000000        <2> 	je near chkeqdn
  4936 000040B3 46                  <2> 	inc esi
  4937 000040B4 EBEB                <2> 	jmp chkeqsn
  4938 000040B6 B000                <2> chkeqdn: mov al, 0 
  4939 000040B8 8806                <2> 	mov [esi], al
  4940 000040BA 46                  <2> 	inc esi
  4941 000040BB E877EFFFFF          <2> 	call tester
  4942 000040C0 3C01                <2> 	cmp al, 1
  4943 000040C2 0F8405000000        <2> 	je near trueif
  4944 000040C8 E91C000000          <2> 	jmp falseif
  4945 000040CD 31C0                <2> trueif:	xor eax, eax
  4946 000040CF A0[03A40000]        <2> 	mov al, [IFON]
  4947 000040D4 FEC0                <2> 	inc al
  4948 000040D6 A2[03A40000]        <2> 	mov [IFON], al
  4949 000040DB 30E4                <2> 	xor ah, ah
  4950 000040DD BE[04A40000]        <2> 	mov esi, IFTRUE
  4951 000040E2 01C6                <2> 	add esi, eax
  4952 000040E4 B401                <2> 	mov ah, 1
  4953 000040E6 8826                <2> 	mov [esi], ah
  4954 000040E8 C3                  <2> 	ret 
  4955 000040E9 31C0                <2> falseif: xor eax, eax
  4956 000040EB A0[03A40000]        <2> 	mov al, [IFON]
  4957 000040F0 FEC0                <2> 	inc al
  4958 000040F2 A2[03A40000]        <2> 	mov [IFON], al
  4959 000040F7 30E4                <2> 	xor ah, ah
  4960 000040F9 BE[04A40000]        <2> 	mov esi, IFTRUE
  4961 000040FE 01C6                <2> 	add esi, eax
  4962 00004100 30E4                <2> 	xor ah, ah
  4963 00004102 8826                <2> 	mov [esi], ah
  4964 00004104 C3                  <2> 	ret 
  4965                              <1> %include 'source/programs/keycode.asm'
  4966 00004105 FF2C6B65797300      <2> db 255,44,"keys",0
  4967                              <2> keycode:
  4968 0000410C C605[AC270000]00    <2> 	mov byte [trans], 0
  4969 00004113 C605[29720000]00    <2> 	mov byte [threadson], 0
  4970 0000411A E8C0110000          <2> 	call getkey
  4971 0000411F 31C0                <2> 	xor eax, eax
  4972 00004121 31C9                <2> 	xor ecx, ecx
  4973 00004123 8A0D[BF520000]      <2> 	mov cl, [specialkey]
  4974 00004129 80F900              <2> 	cmp cl, 0
  4975 0000412C 0F8405000000        <2> 	je near nospecialkeycode
  4976 00004132 E84EF1FFFF          <2> 	call showhexsmall
  4977                              <2> nospecialkeycode:
  4978 00004137 66A1[AA270000]      <2> 	mov ax, [lastkey]
  4979 0000413D 88E1                <2> 	mov cl, ah
  4980 0000413F E841F1FFFF          <2> 	call showhexsmall
  4981 00004144 80FC01              <2> 	cmp ah, 1
  4982 00004147 75C3                <2> 	jne keycode
  4983 00004149 C3                  <2> 	ret 
  4984                              <1> %include 'source/programs/logout.asm'
  4985 0000414A FF2C6C6F676F757400  <2> 	db 255,44,"logout",0
  4986 00004153 E9FDEAFFFF          <2> 	jmp os
  4987                              <1> %include 'source/programs/loop.asm'
  4988 00004158 FF2C6C6F6F7000      <2> 	db 255,44,"loop",0
  4989 0000415F 803D[6DA40000]00    <2> 	cmp byte [LOOPON], 0
  4990 00004166 0F8501000000        <2> 	jne near filoop
  4991 0000416C C3                  <2> 	ret
  4992 0000416D 8B35[6EA40000]      <2> filoop: mov esi, [LOOPPOS]
  4993 00004173 FE0D[03A40000]      <2> 	dec byte [IFON]
  4994 00004179 C605[6DA40000]00    <2> 	mov byte [LOOPON], 0
  4995 00004180 8935[68A40000]      <2> 	mov [BATCHPOS], esi
  4996 00004186 8935[5F3A0000]      <2> 	mov [batchedi], esi
  4997 0000418C C3                  <2> 	ret 
  4998                              <1> %include 'source/programs/ls.asm'
  4999 0000418D FF2C6C7300          <2> db 255,44,"ls",0
  5000 00004192 BE[998B0000]        <2> 		mov esi, diskfileindex
  5001                              <2> 	diskindexdir:
  5002 00004197 803E5F              <2> 		cmp byte [esi], '_'
  5003 0000419A 7440                <2> 		je nextdiskindexdir
  5004 0000419C E831E1FFFF          <2> 		call printquiet
  5005 000041A1 56                  <2> 		push esi
  5006 000041A2 BE[FC410000]        <2> 		mov esi, disktab
  5007 000041A7 E826E1FFFF          <2> 		call printquiet
  5008 000041AC 5E                  <2> 		pop esi
  5009 000041AD 8B4E05              <2> 		mov ecx, [esi + 5]
  5010 000041B0 C605[84320000]05    <2> 		mov byte [firsthexshown], 5
  5011 000041B7 E894F1FFFF          <2> 		call showdec
  5012 000041BC 56                  <2> 		push esi
  5013 000041BD BE[61780000]        <2> 		mov esi, line
  5014 000041C2 E80BE1FFFF          <2> 		call printquiet
  5015 000041C7 5E                  <2> 		pop esi
  5016 000041C8 81C609000000        <2> 		add esi, 9
  5017 000041CE 81FE[FF8C0000]      <2> 		cmp esi, enddiskfileindex
  5018 000041D4 72C1                <2> 		jb diskindexdir
  5019 000041D6 E846E8FFFF          <2> 		call termcopy
  5020 000041DB C3                  <2> 		ret
  5021                              <2> 	nextdiskindexdir:
  5022 000041DC 46                  <2> 		inc esi
  5023 000041DD 803E00              <2> 		cmp byte [esi], 0
  5024 000041E0 75FA                <2> 		jne nextdiskindexdir
  5025 000041E2 81C609000000        <2> 		add esi, 9
  5026 000041E8 81FE[FF8C0000]      <2> 		cmp esi, enddiskfileindex
  5027 000041EE 72A7                <2> 		jb diskindexdir
  5028 000041F0 E82CE8FFFF          <2> 		call termcopy
  5029 000041F5 C3                  <2> 		ret
  5030                              <2> 		
  5031 000041F6 4469736B2000        <2> 		diskmsg db "Disk ",0
  5032 000041FC 0D09090900          <2> 		disktab db 13,9,9,9,0
  5033                              <1> %include 'source/programs/memory.asm'
  5034 00004201 FF2C6D656D6F727900  <2> db 255,44,"memory",0
  5035 0000420A BE[30020000]        <2> 	mov esi, memlistbuf
  5036 0000420F 31FF                <2> 	xor edi, edi
  5037 00004211 668B3D[70040000]    <2> 	mov di, [memlistend]
  5038 00004218 01F7                <2> 	add edi, esi
  5039                              <2> printmemmap:
  5040 0000421A 8B0E                <2> 	mov ecx, [esi]
  5041 0000421C E878F0FFFF          <2> 	call showhex
  5042 00004221 81C608000000        <2> 	add esi, 8
  5043 00004227 8B0E                <2> 	mov ecx, [esi]
  5044 00004229 E86BF0FFFF          <2> 	call showhex
  5045 0000422E 81C608000000        <2> 	add esi, 8
  5046 00004234 8B0E                <2> 	mov ecx, [esi]
  5047 00004236 E85EF0FFFF          <2> 	call showhex
  5048 0000423B 81C608000000        <2> 	add esi, 8
  5049 00004241 57                  <2> 	push edi
  5050 00004242 56                  <2> 	push esi
  5051 00004243 BE[61780000]        <2> 	mov esi, line
  5052 00004248 E897E0FFFF          <2> 	call print
  5053 0000424D 5E                  <2> 	pop esi
  5054 0000424E 5F                  <2> 	pop edi
  5055 0000424F 39FE                <2> 	cmp esi, edi
  5056 00004251 72C7                <2> 	jb printmemmap
  5057 00004253 C3                  <2> 	ret
  5058                              <2> 	
  5059                              <1> %include 'source/programs/pci.asm'
  5060 00004254 FF2C70636900        <2> db 255,44,"pci",0
  5061 0000425A E85B2C0000          <2> 	call pcidump
  5062 0000425F C3                  <2> 	ret 
  5063                              <1> %include 'source/programs/play.asm'
  5064 00004260 FF2C706C617900      <2> db 255,44,"play",0
  5065 00004267 E801000000          <2> 	call playsync
  5066 0000426C C3                  <2> 	ret
  5067                              <2> playsync:
  5068 0000426D 8B3D[33300000]      <2> 	mov edi, [currentcommandloc]
  5069 00004273 81C705000000        <2> 	add edi, 5
  5070 00004279 BE00004000          <2> 	mov esi, 0x400000
  5071 0000427E E8A42E0000          <2> 	call loadfile
  5072 00004283 81FA94010000        <2> 	cmp edx, 404
  5073 00004289 7448                <2> 	je nosoundfound
  5074 0000428B BB00004000          <2> 	mov ebx, 0x400000
  5075 00004290 817B0857415645      <2> 	cmp dword [ebx + 8], "WAVE"
  5076 00004297 0F84B8000000        <2> 	je near wave_player
  5077 0000429D 66813B534E          <2> 	cmp word [ebx], "SN"
  5078 000042A2 752F                <2> 	jne nosoundfound
  5079 000042A4 81C306000000        <2> 	add ebx, 6
  5080 000042AA 891D[41060000]      <2> 	mov [soundpos], ebx
  5081 000042B0 035BFC              <2> 	add ebx, [ebx - 4]
  5082 000042B3 891D[45060000]      <2> 	mov [soundendpos], ebx
  5083 000042B9 66C705[3F060000]00- <2> 	mov word [soundrepititions], 0
  5084 000042C1 00                  <2>
  5085 000042C2 C605[3E060000]01    <2> 	mov byte [soundon], 1
  5086                              <2> waitforsoundendplay:
  5087 000042C9 A0[3E060000]        <2> 	mov al, [soundon]
  5088 000042CE 3C00                <2> 	cmp al, 0
  5089 000042D0 75F7                <2> 	jne waitforsoundendplay
  5090 000042D2 C3                  <2> 	ret
  5091                              <2> nosoundfound:
  5092 000042D3 BE[F9420000]        <2> 	mov esi, notfoundsound
  5093 000042D8 E807E0FFFF          <2> 	call print
  5094 000042DD 8B35[33300000]      <2> 	mov esi, [currentcommandloc]
  5095 000042E3 81C605000000        <2> 	add esi, 5
  5096 000042E9 E8F6DFFFFF          <2> 	call print
  5097 000042EE BE[2D780000]        <2> 	mov esi, notfound2
  5098 000042F3 E8ECDFFFFF          <2> 	call print
  5099 000042F8 C3                  <2> 	ret
  5100 000042F9 536F756E64202200    <2> notfoundsound db "Sound ",34,0
  5101                              <2> 
  5102                              <2> sbplay:
  5103 00004301 BE00004000          <2> 		mov esi, 0x400000
  5104 00004306 89F3                <2> 		mov ebx, esi
  5105 00004308 81C62C000000        <2> 		add esi, 44
  5106 0000430E 29F7                <2> 		sub edi, esi
  5107 00004310 66893D[EF4D0000]    <2> 		mov [Length1], di
  5108 00004317 C1EF10              <2> 		shr edi, 16
  5109 0000431A 66893D[ED4D0000]    <2> 		mov [Length0], di
  5110 00004321 8B4B18              <2> 		mov ecx, [ebx + 24]
  5111 00004324 890D[FA4D0000]      <2> 		mov [Freq], ecx
  5112 0000432A 31C0                <2> 		xor eax, eax
  5113 0000432C BA00004000          <2> 		mov	edx, 0x400000 ;location of sound
  5114 00004331 81C200080000        <2> 		add edx, 2048
  5115 00004337 01D0                <2> 		add	eax,edx
  5116 00004339 31DB                <2> 		xor ebx, ebx
  5117 0000433B 668B1D[EF4D0000]    <2> 		mov bx, [Length1]
  5118 00004342 01C3                <2> 		add ebx, eax
  5119 00004344 891D[F14D0000]      <2> 		mov [NextMemLoc], ebx
  5120 0000434A A3[F54D0000]        <2> 		mov	[MemLoc],eax
  5121 0000434F E873090000          <2> 		call DMAPlay
  5122 00004354 C3                  <2> 		ret
  5123                              <2> 
  5124                              <2> wave_player:
  5125 00004355 803D[FF4D0000]01    <2> 	cmp byte [SoundBlaster], 1
  5126 0000435C 0F849FFFFFFF        <2> 	je near sbplay
  5127 00004362 BE00004000          <2> 	mov esi, 0x400000
  5128 00004367 8B4E18              <2> 	mov ecx, [esi + 24]
  5129 0000436A 66890D[49060000]    <2> 	mov [WAVSamplingRate], cx
  5130 00004371 29F7                <2> 	sub edi, esi
  5131 00004373 81EF2C000000        <2> 	sub edi, 44
  5132 00004379 893D[4B060000]      <2> 	mov [WAVFileSize], edi
  5133                              <2> 	;MASK ALL INTS EXCEPT IRQ 0
  5134 0000437F B0FE                <2> 	mov al, 0xFE
  5135 00004381 E621                <2> 	out 0x21, al
  5136 00004383 FEC0                <2> 	inc al
  5137 00004385 E6A1                <2> 	out 0xA1, al
  5138 00004387 B020                <2> 	mov al, 0x20
  5139 00004389 E6A0                <2> 	out 0xA0, al
  5140 0000438B E620                <2> 	out 0x20, al
  5141                              <2> 	;SET PIT DIVISOR
  5142 0000438D 31D2                <2> 	xor edx, edx
  5143 0000438F 8B4E18              <2> 	mov ecx, [esi + 24]
  5144 00004392 B8DE341200          <2> 	mov eax, 1193182
  5145 00004397 F7F1                <2> 	div ecx ;al should be the proper sample divisor
  5146 00004399 E640                <2> 	out 0x40, al
  5147 0000439B 66C1C008            <2> 	rol ax, 8
  5148 0000439F E640                <2> 	out 0x40, al
  5149                              <2> 	;GET WAVEDIV
  5150 000043A1 668B1D[49060000]    <2> 	mov bx, [WAVSamplingRate]
  5151 000043A8 66B8DD34            <2> 	mov ax,0x34dd	; The sound lasts until NoSound is called
  5152 000043AC 66BA1200            <2> 	mov dx,0x0012             
  5153 000043B0 66F7F3              <2> 	div bx               
  5154 000043B3 66A3[3C4C0000]      <2> 	mov [WAVEDIV],ax
  5155                              <2> 	;PLAY WAVE
  5156 000043B9 81C62C000000        <2> 	add esi, 44
  5157 000043BF 0335[23060000]      <2> 	add esi, [newcodecache]
  5158 000043C5 E81D000000          <2> 	call PlayWAV
  5159                              <2> 	;UNMASK ALL INTS
  5160 000043CA 30C0                <2> 	xor al, al
  5161 000043CC E621                <2> 	out 0x21, al
  5162 000043CE 30C0                <2> 	xor al, al
  5163 000043D0 E6A1                <2> 	out 0xA1, al
  5164 000043D2 B020                <2> 	mov al, 0x20
  5165 000043D4 E6A0                <2> 	out 0xA0, al
  5166 000043D6 E620                <2> 	out 0x20, al
  5167                              <2> 	;RESET PIT DIVISOR
  5168 000043D8 66A1[30060000]      <2> 	mov ax, [pitdiv]
  5169 000043DE E640                <2> 	out 0x40, al
  5170 000043E0 66C1C008            <2> 	rol ax, 8
  5171 000043E4 E640                <2> 	out 0x40, al
  5172 000043E6 C3                  <2> 	ret
  5173                              <2> 	
  5174                              <2> PlayWAV:
  5175 000043E7 8B0D[4B060000]      <2>    mov ecx,[WAVFileSize]                         ;Sets the loop point
  5176 000043ED C605[4F060000]01    <2>    mov byte [EnableDigitized],1	;Tells the irq0 handler to process the routines
  5177                              <2> Play_Repeat:
  5178 000043F4 8A06                <2>    mov al, [esi]	;Loads a byte from ESI to AL
  5179 000043F6 F4                  <2>    hlt	;Wait for IRQ to fire
  5180 000043F7 E2FB                <2>    loop Play_Repeat	;and the whole procedure is looped ECX times
  5181 000043F9 C605[4F060000]00    <2>    mov byte [EnableDigitized],0	;Tells the irq0 handler to disable the digitized functions
  5182 00004400 E857080000          <2>    call Sound_Off	;Turn the speaker off just in case
  5183 00004405 C3                  <2>    ret
  5184                              <2>    
  5185                              <1> %include 'source/programs/reboot.asm'
  5186 00004406 FF2C7265626F6F7400  <2> 	db 255,44,"reboot",0
  5187 0000440F 0F011D[19440000]    <2> 		lidt [idtreboot]
  5188 00004416 CD00                <2> 		int 0
  5189 00004418 F4                  <2> 		hlt
  5190                              <2> 	
  5191 00004419 0000                <2> 	idtreboot dw 0
  5192 0000441B 00000000            <2> 			  dd 0
  5193                              <2> 
  5194                              <2> 	coldboot:
  5195 0000441F 66B84000            <2> 		MOV AX, 0040h
  5196 00004423 8EC0                <2> 		MOV ES, AX
  5197 00004425 2666C7057200000000- <2> 		MOV WORD [ES:00072h], 0h
  5198 0000442E 00                  <2>
  5199 0000442F EA00000000FFFF      <2> 		JMP 0FFFFh:0000h
  5200 00004436 CF                  <2> 		IRET
  5201                              <2> 
  5202                              <2> 	warmboot:
  5203 00004437 66B84000            <2> 		MOV AX, 0040h
  5204 0000443B 8EC0                <2> 		MOV ES, AX
  5205 0000443D 2666C7057200000034- <2> 		MOV WORD [ES:00072h], 01234h
  5206 00004446 12                  <2>
  5207 00004447 EA00000000FFFF      <2> 		JMP 0FFFFh:0000h
  5208 0000444E CF                  <2> 		IRET
  5209                              <2> 		
  5210                              <1> %include 'source/programs/reg.asm'
  5211 0000444F FF2C72656700        <2> db 255,44,"reg",0
  5212 00004455 CD03                <2> 	int 3
  5213 00004457 C3                  <2> 	ret 
  5214                              <1> %include 'source/programs/rmode.asm'
  5215 00004458 FF2C726D6F646500    <2> db 255,44,"rmode",0
  5216 00004460 66BB[7B44]          <2> 	mov bx, rmodetest
  5217 00004464 66891D[C5100000]    <2> 	mov [realmodeptr], bx
  5218 0000446B BB[134B0000]        <2> 	mov ebx, waitkey
  5219 00004470 891D[C1100000]      <2> 	mov [realmodereturn], ebx
  5220 00004476 E948CBFFFF          <2> 	jmp realmode
  5221                              <2> [BITS 16]
  5222                              <2> rmodetest:
  5223 0000447B BE[8D44]            <2> 	mov si, rmodestr
  5224 0000447E 31DB                <2> 	xor bx, bx
  5225                              <2> rmodeprnt:
  5226 00004480 AC                  <2> 	lodsb
  5227 00004481 08C0                <2> 	or al, al
  5228 00004483 7407                <2> 	jz .done
  5229 00004485 B40E                <2> 	mov ah, 0xE
  5230 00004487 43                  <2> 	inc bx
  5231 00004488 CD10                <2> 	int 0x10
  5232 0000448A EBF4                <2> 	jmp rmodeprnt
  5233 0000448C C3                  <2> .done: ret
  5234                              <2> 
  5235 0000448D 48656C6C6F2066726F- <2> rmodestr db "Hello from real mode!",10,13,"Goodbye!",10,13,0
  5236 00004496 6D207265616C206D6F- <2>
  5237 0000449F 6465210A0D476F6F64- <2>
  5238 000044A8 627965210A0D00      <2>
  5239                              <2> [BITS 32]
  5240                              <1> %include 'source/programs/show.asm'
  5241 000044AF FF2C73686F7700      <2> db 255,44,"show",0
  5242 000044B6 8B3D[33300000]      <2> 		mov edi, [currentcommandloc]
  5243 000044BC 81C705000000        <2> 		add edi, 5
  5244 000044C2 BE00004000          <2> 		mov esi, 0x400000
  5245 000044C7 E85B2C0000          <2> 		call loadfile
  5246 000044CC 81FA94010000        <2> 		cmp edx, 404
  5247 000044D2 0F849E000000        <2> 		je near filenotfound
  5248 000044D8 BE00004000          <2> 		mov esi, 0x400000
  5249 000044DD 66813E424D          <2> 		cmp word [esi], "BM"
  5250 000044E2 7410                <2> 		je bmpfound
  5251 000044E4 E8FBDDFFFF          <2> 		call print
  5252 000044E9 BE[61780000]        <2> 		mov esi, line
  5253 000044EE E8F1DDFFFF          <2> 		call print
  5254 000044F3 C3                  <2> 		ret
  5255                              <2> bmpfound:
  5256 000044F4 803D[988B0000]00    <2> 		cmp byte [guion], 0
  5257 000044FB 0F8443000000        <2> 		je near noguibmp
  5258 00004501 BE00004000          <2> 		mov esi, 0x400000
  5259 00004506 31C9                <2> 		xor ecx, ecx
  5260 00004508 31D2                <2> 		xor edx, edx
  5261 0000450A 31C0                <2> 		xor eax, eax
  5262 0000450C 31DB                <2> 		xor ebx, ebx
  5263 0000450E E804240000          <2> 		call showbmp
  5264 00004513 30C0                <2> 		xor al, al
  5265 00004515 B405                <2> 		mov ah, 5
  5266 00004517 CD30                <2> 		int 30h
  5267 00004519 E862110000          <2> 		call guiclear
  5268 0000451E E8CF120000          <2> 		call clearmousecursor
  5269 00004523 E82F190000          <2> 		call reloadallgraphics
  5270 00004528 8B35[33300000]      <2> 		mov esi, [currentcommandloc]
  5271 0000452E 81C605000000        <2> 		add esi, 5
  5272 00004534 E8ABDDFFFF          <2> 		call print
  5273 00004539 BE[CB450000]        <2> 		mov esi, loadedbmpmsg
  5274 0000453E E8A1DDFFFF          <2> 		call print
  5275 00004543 C3                  <2> 		ret
  5276                              <2> noguibmp:
  5277 00004544 BE[4F450000]        <2> 		mov esi, warnguibmp
  5278 00004549 E896DDFFFF          <2> 		call print
  5279 0000454E C3                  <2> 		ret
  5280 0000454F 546869732063616E20- <2> warnguibmp db "This can not be done without the gui.",10,0
  5281 00004558 6E6F7420626520646F- <2>
  5282 00004561 6E6520776974686F75- <2>
  5283 0000456A 742074686520677569- <2>
  5284 00004573 2E0A00              <2>
  5285                              <2> 
  5286                              <2> filenotfound:
  5287 00004576 BE[A9450000]        <2> 		mov esi, filenf
  5288 0000457B E864DDFFFF          <2> 		call print
  5289 00004580 8B35[33300000]      <2> 		mov esi, [currentcommandloc]
  5290                              <2> findfilenotfoundzero:
  5291 00004586 8A06                <2> 		mov al, [esi]
  5292 00004588 46                  <2> 		inc esi
  5293 00004589 3C00                <2> 		cmp al, 0
  5294 0000458B 7411                <2> 		je nofilenamenotfound
  5295 0000458D 81FE[7CBC0000]      <2> 		cmp esi, buftxtend
  5296 00004593 7309                <2> 		jae nofilenamenotfound
  5297 00004595 3C20                <2> 		cmp al, " "
  5298 00004597 75ED                <2> 		jne findfilenotfoundzero
  5299 00004599 E846DDFFFF          <2> 		call print
  5300                              <2> nofilenamenotfound:
  5301 0000459E BE[B4450000]        <2> 		mov esi, filenf2
  5302 000045A3 E83CDDFFFF          <2> 		call print
  5303 000045A8 C3                  <2> 		ret
  5304 000045A9 5468652066696C6520- <2> filenf db "The file ",34,0
  5305 000045B2 2200                <2>
  5306 000045B4 2220636F756C64206E- <2> filenf2 db 34," could not be found.",10,0
  5307 000045BD 6F7420626520666F75- <2>
  5308 000045C6 6E642E0A00          <2>
  5309                              <2> 		
  5310 000045CB 206C6F616465642E0A- <2> loadedbmpmsg db " loaded.",10,0
  5311 000045D4 00                  <2>
  5312                              <1> %include 'source/programs/shush.asm'
  5313 000045D5 FF2C736875736800    <2> db 255,44,"shush",0
  5314 000045DD BE[E8450000]        <2> 	mov esi, shushmsg
  5315 000045E2 E8FDDCFFFF          <2> 	call print
  5316 000045E7 C3                  <2> 	ret
  5317 000045E8 57656C636F6D652074- <2> 	shushmsg db "Welcome to the SollerOS Hardly Unix-Compatible Shell!",10,0
  5318 000045F1 6F2074686520536F6C- <2>
  5319 000045FA 6C65724F5320486172- <2>
  5320 00004603 646C7920556E69782D- <2>
  5321 0000460C 436F6D70617469626C- <2>
  5322 00004615 65205368656C6C210A- <2>
  5323 0000461E 00                  <2>
  5324                              <1> %include 'source/programs/stop.asm'
  5325 0000461F FF2C73746F7000      <2> 	db 255,44,"stop",0
  5326 00004626 30C0                <2> stop:	xor al, al
  5327 00004628 A2[6CA40000]        <2> 	mov [BATCHISON], al
  5328 0000462D A2[03A40000]        <2> 	mov [IFON], al
  5329 00004632 A2[04A40000]        <2> 	mov [IFTRUE], al
  5330 00004637 A2[6DA40000]        <2> 	mov [LOOPON], al
  5331 0000463C C3                  <2> 	ret 
  5332                              <1> %include 'source/programs/system.asm'
  5333 0000463D FF2C73797374656D00  <2> 	db 255,44,"system",0
  5334 00004646 BE[00470000]        <2> 	mov esi, systeminfomsg
  5335 0000464B E882DCFFFF          <2> 	call printquiet
  5336 00004650 B9[998B0000]        <2> 	mov ecx, osend
  5337 00004655 C1E90A              <2> 	shr ecx, 10
  5338 00004658 E8F3ECFFFF          <2> 	call showdec
  5339 0000465D BE[15470000]        <2> 	mov esi, diskbytemsg
  5340 00004662 E86BDCFFFF          <2> 	call printquiet
  5341 00004667 B9[998B0000]        <2> 	mov ecx, osend
  5342 0000466C 81C1[196F0100]      <2> 	add ecx, commandbufend
  5343 00004672 81E9[FF8C0000]      <2> 	sub ecx, bssstart	;add the extra buffer space
  5344 00004678 C1E90A              <2> 	shr ecx, 10
  5345 0000467B E8D0ECFFFF          <2> 	call showdec
  5346 00004680 BE[29470000]        <2> 	mov esi, membytemsg
  5347 00004685 E848DCFFFF          <2> 	call printquiet
  5348                              <2> getcpuspeed:
  5349 0000468A B8FE000000          <2> 	mov eax, 0xFE
  5350 0000468F E621                <2> 	out 0x21, al ;mask off all but timer interrupt
  5351 00004691 B020                <2> 	mov al, 0x20
  5352 00004693 E620                <2> 	out 0x20, al
  5353 00004695 31C0                <2> 	xor eax, eax
  5354 00004697 F4                  <2> 	hlt
  5355 00004698 C605[27060000]01    <2> 	mov byte [testingcpuspeed], 1
  5356                              <2> cpuspeedloop:	;wait until next timer interrupt, then inc eax until the next
  5357 0000469F 40                  <2> 	inc eax
  5358 000046A0 EBFD                <2> 	jmp cpuspeedloop
  5359                              <2> cpuspeedloopend:
  5360 000046A2 31C0                <2> 	xor eax, eax
  5361 000046A4 E621                <2> 	out 0x21, al
  5362 000046A6 B020                <2> 	mov al, 0x20
  5363 000046A8 E620                <2> 	out 0x20, al
  5364 000046AA 31D2                <2> 	xor edx, edx
  5365 000046AC 31C0                <2> 	xor eax, eax
  5366 000046AE A1[28060000]        <2> 	mov eax, [cpuspeedperint]
  5367 000046B3 8B1D[3A060000]      <2> 	mov ebx, [timeinterval]
  5368 000046B9 C1EB0A              <2> 	shr ebx, 10 ;divide the interval by 1024
  5369 000046BC F7F3                <2> 	div ebx	;quotient in eax, remainder in edx
  5370 000046BE 89C1                <2> 	mov ecx, eax
  5371 000046C0 E88BECFFFF          <2> 	call showdec
  5372 000046C5 BE[6B470000]        <2> 	mov esi, cpuspeedmsg
  5373 000046CA E803DCFFFF          <2> 	call printquiet
  5374 000046CF 8B0D[2C060000]      <2> 	mov ecx, [memoryspace]
  5375 000046D5 C1E914              <2> 	shr ecx, 20
  5376 000046D8 41                  <2> 	inc ecx	;the reading is one MB behind
  5377 000046D9 E872ECFFFF          <2> 	call showdec
  5378 000046DE BE[71470000]        <2> 	mov esi, memoryspacemsg
  5379 000046E3 E8FCDBFFFF          <2> 	call print
  5380 000046E8 803D[FF4D0000]00    <2> 	cmp byte [SoundBlaster], 0
  5381 000046EF 0F8494E6FFFF        <2> 	je near nwcmd
  5382 000046F5 BE[53470000]        <2> 	mov esi, soundblastermsg
  5383 000046FA E8E5DBFFFF          <2> 	call print
  5384 000046FF C3                  <2> 	ret
  5385                              <2> 
  5386 00004700 4B65726E656C20496E- <2> systeminfomsg db "Kernel Information:",10,0
  5387 00004709 666F726D6174696F6E- <2>
  5388 00004712 3A0A00              <2>
  5389 00004715 4B42204469736B2053- <2> diskbytemsg db "KB Disk Space Used",10,0
  5390 0000471E 706163652055736564- <2>
  5391 00004727 0A00                <2>
  5392 00004729 4B42204D656D6F7279- <2> membytemsg db "KB Memory Space Used",10,"System Information:",10,0
  5393 00004732 205370616365205573- <2>
  5394 0000473B 65640A53797374656D- <2>
  5395 00004744 20496E666F726D6174- <2>
  5396 0000474D 696F6E3A0A00        <2>
  5397 00004753 536F756E64626C6173- <2> soundblastermsg db "Soundblaster Detected.",10,0
  5398 0000475C 746572204465746563- <2>
  5399 00004765 7465642E0A00        <2>
  5400 0000476B 4D4950530A00        <2> cpuspeedmsg db "MIPS",10,0
  5401 00004771 4D42204D656D6F7279- <2> memoryspacemsg db "MB Memory Space Free",10,0
  5402 0000477A 205370616365204672- <2>
  5403 00004783 65650A00            <2>
  5404                              <1> %include 'source/programs/thread.asm'
  5405 00004787 FF2C74687265616400  <2> db 255,44,"thread",0
  5406 00004790 E96D2A0000          <2> 	jmp threadstarttest
  5407                              <1> %include 'source/programs/time.asm'
  5408 00004795 082E30303030303030- <2> timenscache db 8,".000000000"
  5409 0000479E 3030                <2>
  5410 000047A0 200A00              <2> timenscacheend: db " ",10,0
  5411 000047A3 00                  <2> istimeset db 0
  5412 000047A4 456E74657220746865- <2> settimemsg db "Enter the current UNIX time:",10,0
  5413 000047AD 2063757272656E7420- <2>
  5414 000047B6 554E49582074696D65- <2>
  5415 000047BF 3A0A00              <2>
  5416 000047C2 00<rept>            <2> timeinputbuffer times 12 db 0
  5417 000047CE 00                  <2> timeinputbend: db 0
  5418                              <2> 
  5419 000047CF FF2C74696D6500      <2> db 255,44,"time",0
  5420 000047D6 803D[A3470000]00    <2> 	cmp byte [istimeset], 0
  5421 000047DD 753A                <2> 	jne timeisset
  5422 000047DF BE[A4470000]        <2> 	mov esi, settimemsg
  5423 000047E4 E8FBDAFFFF          <2> 	call print
  5424 000047E9 BE[C2470000]        <2> 	mov esi, timeinputbuffer
  5425 000047EE BF[CE470000]        <2> 	mov edi, timeinputbend
  5426 000047F3 E8F0DBFFFF          <2> 	call readline
  5427 000047F8 BE[C2470000]        <2> 	mov esi, timeinputbuffer
  5428 000047FD 31FF                <2> 	xor edi, edi
  5429 000047FF E820ECFFFF          <2> 	call cnvrttxt
  5430 00004804 890D[32060000]      <2> 	mov [timeseconds], ecx
  5431 0000480A 31C9                <2> 	xor ecx, ecx
  5432 0000480C 890D[36060000]      <2> 	mov [timenanoseconds], ecx
  5433 00004812 C605[A3470000]01    <2> 	mov byte [istimeset], 1
  5434                              <2> timeisset:
  5435 00004819 8B0D[32060000]      <2> 	mov ecx, [timeseconds]
  5436 0000481F E82CEBFFFF          <2> 	call showdec
  5437                              <2> 	
  5438 00004824 8B0D[36060000]      <2> 	mov ecx, [timenanoseconds]
  5439 0000482A BE[95470000]        <2> 	mov esi, timenscache
  5440 0000482F C7460230303030      <2> 	mov dword [esi+ 2], "0000"
  5441 00004836 C7460630303030      <2> 	mov dword [esi + 6], "0000"
  5442 0000483D C6460A30            <2> 	mov byte [esi + 10], "0"
  5443 00004841 BE[A0470000]        <2> 	mov esi, timenscacheend
  5444 00004846 E8BCE8FFFF          <2> 	call convert
  5445 0000484B BE[95470000]        <2> 	mov esi, timenscache
  5446 00004850 E88FDAFFFF          <2> 	call print
  5447                              <2> 	
  5448 00004855 E80F000000          <2> 	call time
  5449 0000485A BE[354A0000]        <2> 	mov esi, timeshow
  5450 0000485F E880DAFFFF          <2> 	call print
  5451 00004864 E9BC000000          <2> 	jmp findday
  5452                              <2> time:
  5453 00004869 E84F010000          <2> 	call tstackput1
  5454 0000486E B00A                <2> 	mov al,10			;Get RTC register A
  5455 00004870 E879010000          <2> 	call tget1
  5456 00004875 A880                <2> 	test al,0x80			;Is update in progress?
  5457 00004877 75F0                <2> 	jne time				; yes, wait
  5458                              <2> 
  5459 00004879 B000                <2> 	mov al,0			;Get seconds (00 to 59)
  5460 0000487B E86E010000          <2> 	call tget1
  5461 00004880 A2[2C4A0000]        <2> 	mov [RTCtimeSecond],al
  5462                              <2> 
  5463 00004885 B002                <2> 	mov al,0x02			;Get minutes (00 to 59)
  5464 00004887 E862010000          <2> 	call tget1
  5465 0000488C A2[2D4A0000]        <2> 	mov [RTCtimeMinute],al
  5466                              <2> 
  5467 00004891 B004                <2> 	mov al,0x04			;Get hours (see notes)
  5468 00004893 E856010000          <2> 	call tget1
  5469 00004898 A2[2E4A0000]        <2> 	mov [RTCtimeHour],al
  5470                              <2> 
  5471 0000489D B007                <2> 	mov al,0x07			;Get day of month (01 to 31)
  5472 0000489F E84A010000          <2> 	call tget1
  5473 000048A4 A2[2F4A0000]        <2> 	mov [RTCtimeDay],al
  5474                              <2> 
  5475 000048A9 B008                <2> 	mov al,0x08			;Get month (01 to 12)
  5476 000048AB E83E010000          <2> 	call tget1
  5477 000048B0 A2[304A0000]        <2> 	mov [RTCtimeMonth],al
  5478                              <2> 
  5479 000048B5 B009                <2> 	mov al,0x09			;Get year (00 to 99)
  5480 000048B7 E832010000          <2> 	call tget1
  5481 000048BC A2[314A0000]        <2> 	mov [RTCtimeYear],al
  5482                              <2> 	
  5483 000048C1 BE[354A0000]        <2> 	mov esi, timeshow
  5484 000048C6 8A2D[2E4A0000]      <2> 	mov ch, [RTCtimeHour]
  5485 000048CC E828010000          <2> 	call tput1
  5486 000048D1 8A2D[2D4A0000]      <2> 	mov ch, [RTCtimeMinute]
  5487 000048D7 E81D010000          <2> 	call tput1
  5488 000048DC 8A2D[2C4A0000]      <2> 	mov ch, [RTCtimeSecond]
  5489 000048E2 E812010000          <2> 	call tput1
  5490 000048E7 BE[3E4A0000]        <2> 	mov esi, dateshow
  5491 000048EC 8A2D[304A0000]      <2> 	mov ch, [RTCtimeMonth]
  5492 000048F2 E802010000          <2> 	call tput1
  5493 000048F7 8A2D[2F4A0000]      <2> 	mov ch, [RTCtimeDay]
  5494 000048FD E8F7000000          <2> 	call tput1
  5495 00004902 B520                <2> 	mov ch, 0x20
  5496 00004904 E8F0000000          <2> 	call tput1
  5497 00004909 4E                  <2> 	dec esi
  5498 0000490A 8A2D[314A0000]      <2> 	mov ch, [RTCtimeYear]
  5499 00004910 E8E4000000          <2> 	call tput1
  5500 00004915 E8BD000000          <2> 	call tstackget1
  5501 0000491A C3                  <2> 	ret
  5502 0000491B BE[354A0000]        <2> 	mov esi, timeshow
  5503 00004920 E8BFD9FFFF          <2> 	call print
  5504                              <2> ;;get day of week
  5505                              <2> ;;add these:
  5506                              <2> ;;century value
  5507                              <2> ;;last 2 digits of year
  5508                              <2> ;;last 2 digits of year right shifted twice
  5509                              <2> ;;month table value
  5510                              <2> ;;day of the month
  5511                              <2> ;;divide these by 7
  5512                              <2> ;;the remainder is the day
  5513                              <2> findday:
  5514 00004925 31C0                <2> 	xor eax, eax
  5515                              <2> ;;first convert the values from BCD to hex
  5516 00004927 A0[2F4A0000]        <2> 	mov al, [RTCtimeDay]
  5517 0000492C E873000000          <2> 	call converttohex
  5518 00004931 8825[324A0000]      <2> 	mov [dayhex], ah
  5519 00004937 A0[304A0000]        <2> 	mov al, [RTCtimeMonth]
  5520 0000493C E863000000          <2> 	call converttohex
  5521 00004941 8825[334A0000]      <2> 	mov [monthhex], ah
  5522 00004947 A0[314A0000]        <2> 	mov al, [RTCtimeYear]
  5523 0000494C E853000000          <2> 	call converttohex
  5524 00004951 8825[344A0000]      <2> 	mov [yearhex], ah
  5525 00004957 31C0                <2> 	xor eax, eax
  5526 00004959 A0[344A0000]        <2> 	mov al, [yearhex]
  5527 0000495E C0E802              <2> 	shr al, 2
  5528 00004961 0205[344A0000]      <2> 	add al, [yearhex]
  5529 00004967 0506000000          <2> 	add eax, 6
  5530 0000496C 31DB                <2> 	xor ebx, ebx
  5531 0000496E 8A1D[334A0000]      <2> 	mov bl, [monthhex]
  5532 00004974 FECB                <2> 	dec bl
  5533 00004976 81C3[534A0000]      <2> 	add ebx, month
  5534 0000497C 31C9                <2> 	xor ecx, ecx
  5535 0000497E 8A0B                <2> 	mov cl, [ebx]
  5536 00004980 01C8                <2> 	add eax, ecx
  5537 00004982 8A0D[324A0000]      <2> 	mov cl, [dayhex]
  5538 00004988 01C8                <2> 	add eax, ecx
  5539 0000498A 66BB0700            <2> 	mov bx, 7
  5540 0000498E 31D2                <2> 	xor edx, edx
  5541 00004990 66F7F3              <2> 	div bx
  5542 00004993 C1E202              <2> 	shl edx, 2
  5543 00004996 81C2[5F4A0000]      <2> 	add edx, day
  5544 0000499C 8B32                <2> 	mov esi, [edx]
  5545 0000499E E841D9FFFF          <2> 	call print
  5546 000049A3 C3                  <2> 	ret
  5547                              <2> 	
  5548                              <2> converttohex:
  5549 000049A4 88C4                <2> 	mov ah, al
  5550 000049A6 C0E804              <2> 	shr al, 4
  5551 000049A9 C0E404              <2> 	shl ah, 4
  5552 000049AC C0EC04              <2> 	shr ah, 4
  5553 000049AF 3C00                <2> 	cmp al, 0
  5554 000049B1 7409                <2> 	je noconverttohex
  5555                              <2> converttohexlp:
  5556 000049B3 80C40A              <2> 	add ah, 10
  5557 000049B6 FEC8                <2> 	dec al
  5558 000049B8 3C00                <2> 	cmp al, 0
  5559 000049BA 75F7                <2> 	jne converttohexlp
  5560                              <2> noconverttohex:
  5561 000049BC C3                  <2> 	ret
  5562                              <2> 	
  5563                              <2> tstackput1:
  5564 000049BD 8935[284A0000]      <2> 	mov [tstack + 20], esi
  5565 000049C3 BE[144A0000]        <2> 	mov esi, tstack
  5566 000049C8 8906                <2> 	mov [esi], eax
  5567 000049CA 895E04              <2> 	mov [esi + 4], ebx
  5568 000049CD 894E08              <2> 	mov [esi + 8], ecx
  5569 000049D0 89560C              <2> 	mov [esi + 12], edx
  5570 000049D3 897E10              <2> 	mov [esi + 16], edi
  5571 000049D6 C3                  <2> 	ret
  5572                              <2> 	
  5573                              <2> tstackget1:
  5574 000049D7 BE[144A0000]        <2> 	mov esi, tstack
  5575 000049DC 8B06                <2> 	mov eax, [esi]
  5576 000049DE 8B5E04              <2> 	mov ebx, [esi + 4]
  5577 000049E1 8B4E08              <2> 	mov ecx, [esi + 8]
  5578 000049E4 8B560C              <2> 	mov edx, [esi + 12]
  5579 000049E7 8B7E10              <2> 	mov edi, [esi + 16]
  5580 000049EA 8B7614              <2> 	mov esi, [esi + 20]
  5581 000049ED C3                  <2> 	ret
  5582                              <2> 	
  5583                              <2> tget1:
  5584 000049EE 66BA7000            <2> 	mov dx, 0x70
  5585 000049F2 EE                  <2> 	out dx, al
  5586 000049F3 6642                <2> 	inc dx
  5587 000049F5 EC                  <2> 	in al, dx
  5588 000049F6 664A                <2> 	dec dx
  5589 000049F8 C3                  <2> 	ret
  5590                              <2> 	
  5591                              <2> tput1:
  5592 000049F9 66C1E904            <2> 	shr cx, 4
  5593 000049FD B030                <2> 	mov al, 48
  5594 000049FF 00E8                <2> 	add al, ch
  5595 00004A01 8806                <2> 	mov [esi], al
  5596 00004A03 46                  <2> 	inc esi
  5597 00004A04 B030                <2> 	mov al, 48
  5598 00004A06 C0E904              <2> 	shr cl, 4
  5599 00004A09 00C8                <2> 	add al, cl
  5600 00004A0B 8806                <2> 	mov [esi], al
  5601 00004A0D 81C602000000        <2> 	add esi, 2
  5602 00004A13 C3                  <2> 	ret
  5603                              <2> 		
  5604 00004A14 000000000000000000- <2> 	tstack dd 0,0,0,0,0,0
  5605 00004A1D 000000000000000000- <2>
  5606 00004A26 000000000000        <2>
  5607 00004A2C 00                  <2> 	RTCtimeSecond db 0
  5608 00004A2D 00                  <2> 	RTCtimeMinute db 0
  5609 00004A2E 00                  <2> 	RTCtimeHour db 0
  5610 00004A2F 00                  <2> 	RTCtimeDay db 0
  5611 00004A30 00                  <2> 	RTCtimeMonth db 0
  5612 00004A31 00                  <2> 	RTCtimeYear db 0
  5613 00004A32 00                  <2> 	dayhex db 0
  5614 00004A33 00                  <2> 	monthhex db 0
  5615 00004A34 00                  <2> 	yearhex db 0
  5616 00004A35 30303A30303A30300A  <2> 	timeshow db "00:00:00",10
  5617 00004A3E 30302D30302D303030- <2> 	dateshow db "00-00-0000",10,0
  5618 00004A47 300A00              <2>
  5619                              <2> 	oldcentury:	;;from 1700 to 1900
  5620 00004A4A 040200              <2> 	db 4,2,0
  5621                              <2> 	century:	;;from 2000 to 2500
  5622 00004A4D 060402000604        <2> 	db 6,4,2,0,6,4
  5623                              <2> 	month:
  5624 00004A53 000303060104060205- <2> 	db 0,3,3,6,1,4,6,2,5,0,3,5
  5625 00004A5C 000305              <2>
  5626                              <2> 	day:
  5627 00004A5F [7B4A0000]          <2> 	dd sunday
  5628 00004A63 [834A0000]          <2> 	dd monday
  5629 00004A67 [8B4A0000]          <2> 	dd tuesday
  5630 00004A6B [944A0000]          <2> 	dd wednesday
  5631 00004A6F [9F4A0000]          <2> 	dd thursday
  5632 00004A73 [A94A0000]          <2> 	dd friday
  5633 00004A77 [B14A0000]          <2> 	dd saturday
  5634                              <2> sunday:
  5635 00004A7B 53756E6461790A00    <2> 	db "Sunday",10,0
  5636                              <2> monday:
  5637 00004A83 4D6F6E6461790A00    <2> 	db "Monday",10,0
  5638                              <2> tuesday:
  5639 00004A8B 547565736461790A00  <2> 	db "Tuesday",10,0
  5640                              <2> wednesday:
  5641 00004A94 5765646E6573646179- <2> 	db "Wednesday",10,0
  5642 00004A9D 0A00                <2>
  5643                              <2> thursday:
  5644 00004A9F 54687572736461790A- <2> 	db "Thursday",10,0
  5645 00004AA8 00                  <2>
  5646                              <2> friday:
  5647 00004AA9 4672696461790A00    <2> 	db "Friday",10,0
  5648                              <2> saturday:
  5649 00004AB1 53617475726461790A- <2> 	db "Saturday",10,0
  5650 00004ABA 00                  <2>
  5651                              <1> %include 'source/programs/turnoff.asm'
  5652 00004ABB FF2C7475726E6F6666- <2> 	db 255,44,"turnoff",0
  5653 00004AC4 00                  <2>
  5654 00004AC5 66BB[E04A]          <2> 			mov bx, shutdown
  5655 00004AC9 66891D[C5100000]    <2> 			mov [realmodeptr], bx
  5656 00004AD0 BB[0A4B0000]        <2> 			mov ebx, halt
  5657 00004AD5 891D[C1100000]      <2> 			mov [realmodereturn], ebx
  5658 00004ADB E9E3C4FFFF          <2> 			jmp realmode
  5659                              <2> 
  5660                              <2> [BITS 16]
  5661                              <2> 		shutdown:
  5662 00004AE0 B453                <2> 			mov ah, 0x53
  5663 00004AE2 B004                <2> 			mov al, 4
  5664 00004AE4 31DB                <2> 			xor bx, bx
  5665 00004AE6 CD15                <2> 			int 0x15
  5666                              <2> 			
  5667 00004AE8 B453                <2> 			mov ah, 0x53
  5668 00004AEA B001                <2> 			mov al, 1
  5669 00004AEC 31DB                <2> 			xor bx, bx
  5670 00004AEE CD15                <2> 			int 0x15
  5671                              <2> 			
  5672 00004AF0 B453                <2> 			mov ah, 0x53
  5673 00004AF2 B008                <2> 			mov al, 8
  5674 00004AF4 BB0100              <2> 			mov bx, 1
  5675 00004AF7 B90100              <2> 			mov cx, 1
  5676 00004AFA CD15                <2> 			int 0x15
  5677                              <2> 			
  5678 00004AFC B453                <2> 			mov ah, 0x53
  5679 00004AFE B007                <2> 			mov al, 7
  5680 00004B00 BB0100              <2> 			mov bx, 1
  5681 00004B03 B90300              <2> 			mov cx, 3
  5682 00004B06 CD15                <2> 			int 0x15
  5683 00004B08 EBFE                <2> 			jmp $
  5684                              <2> 			[BITS 32]
  5685 00004B0A EBFE                <2> halt: jmp $
  5686                              <1> %include 'source/programs/wait.asm'
  5687 00004B0C FF2C7761697400      <2> db 255,44,"wait",0
  5688                              <2> waitkey:
  5689 00004B13 E84CDCFFFF          <2> 		call getchar
  5690 00004B18 C3                  <2> 		ret
  5691                              <1> %include 'source/programs/while.asm'
  5692 00004B19 FF2C7768696C6500    <2> db 255,44,"while",0
  5693 00004B21 30C0                <2> whilecmd:  xor al, al
  5694 00004B23 3805[6CA40000]      <2> 	cmp [BATCHISON], al
  5695 00004B29 0F8408F0FFFF        <2> 	je near notbatch
  5696 00004B2F 8B35[68A40000]      <2> 	mov esi, [BATCHPOS]
  5697 00004B35 81EE02000000        <2> 	sub esi, 2
  5698 00004B3B 4E                  <2> whilefnd: dec esi
  5699 00004B3C 8A06                <2> 	mov al, [esi]
  5700 00004B3E 3C0A                <2> 	cmp al, 10
  5701 00004B40 0F840A000000        <2> 	je near whilefnd2
  5702 00004B46 3C00                <2> 	cmp al, 0
  5703 00004B48 0F8402000000        <2> 	je near whilefnd2
  5704 00004B4E EBEB                <2> 	jmp whilefnd
  5705                              <2> whilefnd2:
  5706 00004B50 46                  <2> 	inc esi
  5707 00004B51 8935[6EA40000]      <2> 	mov [LOOPPOS], esi
  5708 00004B57 C605[6DA40000]01    <2> 	mov BYTE [LOOPON], 1
  5709 00004B5E BE[7CB80000]        <2> 	mov esi, buftxt
  5710 00004B63 BB[7CB80000]        <2> 	mov ebx, buftxt
  5711 00004B68 81C306000000        <2> 	add ebx, 6
  5712 00004B6E E92EF5FFFF          <2> 	jmp chkeqsn
  5713                              <1> progend:		;programs end here	
  5714                              <1> batchprogend:
  5715                                  	%include 'source/hardware.asm'
  5716                              <1> %include "source/drivers/sound/pcspkr.asm"
  5717                              <2> ;PC Speaker Drivers
  5718                              <2> PCSpeakerPWM:
  5719 00004B73 3C90                <2> 	cmp al,0x90	;If the byte taken from the memory is less than 80h,
  5720                              <2> 				;turn off the speaker to prevent "unwanted" sounds,
  5721 00004B75 720A                <2> 	jb TurnOffBeeper	;like: ASCII strings (e.g. "WAVEfmt" signature etc).
  5722 00004B77 E8C2000000          <2> 	call Sound_On
  5723 00004B7C E905000000          <2> 	jmp Sound_Done
  5724                              <2> TurnOffBeeper:
  5725 00004B81 E8D6000000          <2> 	call Sound_Off
  5726                              <2> Sound_Done:
  5727 00004B86 46                  <2> 	inc esi	;Increment ESI to load the next byte
  5728 00004B87 E913BBFFFF          <2> 	jmp keyinterrupt
  5729                              <2> 
  5730                              <2> PCSpeakerRAW:
  5731 00004B8C 60                  <2> 	pusha
  5732                              <2> nosoundrep:
  5733 00004B8D 8B35[41060000]      <2> 	mov esi, [soundpos]
  5734 00004B93 31C9                <2> 	xor ecx, ecx
  5735 00004B95 668B0D[3F060000]    <2> 	mov cx, [soundrepititions]
  5736 00004B9C 6681F90000          <2> 	cmp cx, 0
  5737 00004BA1 0F8548000000        <2> 	jne near donesetpitch
  5738 00004BA7 668B0E              <2> 	mov cx, [esi]
  5739 00004BAA 668B5E02            <2> 	mov bx, [esi + 2]
  5740 00004BAE 66890D[3F060000]    <2> 	mov [soundrepititions], cx
  5741 00004BB5 81C604000000        <2> 	add esi, 4
  5742 00004BBB 8935[41060000]      <2> 	mov [soundpos], esi
  5743 00004BC1 3B35[45060000]      <2> 	cmp esi, [soundendpos]
  5744 00004BC7 7735                <2> 	ja stopsound
  5745 00004BC9 66813D[3F060000]00- <2> 	cmp word [soundrepititions], 0
  5746 00004BD1 00                  <2>
  5747 00004BD2 74B9                <2> 	je nosoundrep
  5748 00004BD4 6681FB0000          <2> 	cmp bx, 0
  5749 00004BD9 740F                <2> 	je nosoundplay
  5750 00004BDB E840000000          <2> 	call setpitch
  5751 00004BE0 E849000000          <2> 	call startsound
  5752 00004BE5 E905000000          <2> 	jmp donesetpitch
  5753                              <2> nosoundplay:
  5754 00004BEA E846000000          <2> 	call killsound
  5755                              <2> donesetpitch:
  5756 00004BEF 6649                <2> 	dec cx
  5757 00004BF1 66890D[3F060000]    <2> 	mov [soundrepititions], cx
  5758 00004BF8 61                  <2> 	popa
  5759 00004BF9 E994BAFFFF          <2> 	jmp timerinterrupt
  5760                              <2> stopsound:
  5761 00004BFE 31C0                <2> 	xor eax, eax
  5762 00004C00 66A3[3F060000]      <2> 	mov [soundrepititions], ax
  5763 00004C06 A2[3E060000]        <2> 	mov [soundon], al
  5764 00004C0B A3[41060000]        <2> 	mov [soundpos], eax
  5765 00004C10 A3[45060000]        <2> 	mov [soundendpos], eax
  5766 00004C15 E81B000000          <2> 	call killsound
  5767 00004C1A 61                  <2> 	popa
  5768 00004C1B E972BAFFFF          <2> 	jmp timerinterrupt
  5769                              <2> 
  5770                              <2> 
  5771                              <2> setpitch:
  5772 00004C20 B0B6                <2> 	mov al, 0xB6
  5773 00004C22 E643                <2> 	out 0x43, al
  5774 00004C24 6689D8              <2> 	mov ax, bx
  5775 00004C27 E642                <2> 	out 0x42, al
  5776 00004C29 88E0                <2> 	mov al, ah
  5777 00004C2B E642                <2> 	out 0x42, al
  5778 00004C2D C3                  <2> 	ret
  5779                              <2> startsound:
  5780 00004C2E E461                <2> 	in al, 0x61
  5781 00004C30 0C03                <2> 	or al, 3
  5782 00004C32 E661                <2> 	out 0x61, al
  5783 00004C34 C3                  <2> 	ret
  5784                              <2> killsound:
  5785 00004C35 E461                <2> 	in al, 0x61
  5786 00004C37 24FC                <2> 	and al, 0xFC
  5787 00004C39 E661                <2> 	out 0x61, al
  5788 00004C3B C3                  <2> 	ret
  5789                              <2> 	
  5790                              <2> ;this is code that I got from
  5791                              <2> ;http://forum.osdev.org/viewtopic.php?f=13&t=17293
  5792                              <2> ;that plays wave files
  5793 00004C3C 0000                <2> WAVEDIV dw 0
  5794                              <2> 
  5795                              <2> Sound_On:	; A routine to make sounds with BX = frequency in Hz
  5796 00004C3E 668B1D[3C4C0000]    <2>    mov bx, [WAVEDIV]
  5797 00004C45 E461                <2>    in al,0x61
  5798 00004C47 A803                <2>    test al,3
  5799 00004C49 7508                <2>    jnz A99               
  5800 00004C4B 0C03                <2>    or al,3	;Turn on the speaker itself
  5801 00004C4D E661                <2>    out 0x61,al               
  5802 00004C4F B0B6                <2>    mov al,0xb6
  5803 00004C51 E643                <2>    out 0x43,al
  5804                              <2> A99:   
  5805 00004C53 88D8                <2>    mov al,bl
  5806 00004C55 E642                <2>    out 0x42,al             
  5807 00004C57 88F8                <2>    mov al,bh
  5808 00004C59 E642                <2>    out 0x42,al
  5809                              <2> Done1:
  5810 00004C5B C3                  <2>    ret
  5811                              <2> 
  5812                              <2> Sound_Off:
  5813 00004C5C E461                <2>    in al,0x61                 
  5814 00004C5E 24FC                <2>    and al,11111100b                               ;Turn off the speaker
  5815 00004C60 E661                <2>    out 0x61,al
  5816 00004C62 C3                  <2>    ret
  5817                              <1> %include "source/drivers/sound/sblaster.asm"
  5818                              <2> ;Sound Blaster Drivers
  5819                              <2> sblaster:
  5820                              <2> .init:
  5821 00004C63 E842010000          <2> 		call ResetDSP			;If the system is Sound Blaster 16 compatible, reset the DSP
  5822 00004C68 A2[FF4D0000]        <2> 		mov [SoundBlaster], al	;if the reset worked, show an available card
  5823 00004C6D 3C00                <2> 		cmp al, 0
  5824 00004C6F 740E                <2> 		je .noinit
  5825 00004C71 B0D1                <2> 		mov	al,0D1h 		; turn speaker(s) on
  5826 00004C73 E866010000          <2> 		call WriteDSP
  5827 00004C78 B088                <2> 		mov	al,088h 		; Left = 8, Right = 8 (15-highest)
  5828 00004C7A E81C010000          <2> 		call MstrVol 		; L = Hi Nibble, R = Lo Nibble
  5829                              <2> .noinit:
  5830 00004C7F C3                  <2> 		ret
  5831                              <2> sblastercont: ;this function goes to the next available portion of a sound, if necessary
  5832 00004C80 66813D[ED4D0000]00- <2> 	cmp word [Length0], 0
  5833 00004C88 00                  <2>
  5834 00004C89 0F84CFBAFFFF        <2> 	je near handled2
  5835 00004C8F 668B3D[ED4D0000]    <2> 	mov di, [Length0]
  5836 00004C96 664F                <2> 	dec di
  5837 00004C98 66893D[ED4D0000]    <2> 	mov [Length0], di
  5838 00004C9F A1[F14D0000]        <2> 	mov eax, [NextMemLoc]
  5839 00004CA4 A3[F54D0000]        <2> 	mov [MemLoc], eax
  5840 00004CA9 31C9                <2> 	xor ecx, ecx
  5841 00004CAB 66B9FFFF            <2> 	mov cx, 0xFFFF
  5842 00004CAF 66890D[EF4D0000]    <2> 	mov [Length1], cx
  5843 00004CB6 01C8                <2> 	add eax, ecx
  5844 00004CB8 A3[F14D0000]        <2> 	mov [NextMemLoc], eax
  5845 00004CBD E805000000          <2> 	call DMAPlay
  5846 00004CC2 E997BAFFFF          <2> 	jmp handled2 ;it is part of an interrupt routine
  5847                              <2> 
  5848                              <2> DMAPlay:    ;uses eax ebx edx
  5849 00004CC7 66FF0D[EF4D0000]    <2> 		dec	word [Length1]
  5850 00004CCE C605[F94D0000]00    <2> 		mov	byte [Page1],00h
  5851                              <2> 
  5852 00004CD5 B005                <2> 		mov	al,(Channel+4)
  5853 00004CD7 66BA0A00            <2> 		mov	dx,0Ah
  5854 00004CDB EE                  <2> 		out	dx,al
  5855 00004CDC 30C0                <2> 		xor	al,al
  5856 00004CDE 66BA0C00            <2> 		mov	dx,0Ch
  5857 00004CE2 EE                  <2> 		out	dx,al
  5858 00004CE3 B049                <2> 		mov	al,ModeReg
  5859 00004CE5 66BA0B00            <2> 		mov	dx,0Bh
  5860 00004CE9 EE                  <2> 		out	dx,al
  5861 00004CEA A1[F54D0000]        <2> 		mov	eax,[MemLoc]
  5862 00004CEF 66BA0200            <2> 		mov	dx,AddPort
  5863 00004CF3 EE                  <2> 		out	dx,al
  5864 00004CF4 86C4                <2> 		xchg al,ah
  5865 00004CF6 EE                  <2> 		out	dx,al
  5866 00004CF7 A1[F54D0000]        <2> 		mov	eax,[MemLoc]
  5867 00004CFC 89C2                <2> 		mov	edx,eax
  5868 00004CFE 2500000100          <2> 		and	eax,65536
  5869 00004D03 7406                <2> 		jz	MemLocN1
  5870 00004D05 FE05[F94D0000]      <2> 		inc	byte [Page1]
  5871                              <2> MemLocN1:
  5872 00004D0B 89D0                <2> 		mov	eax,edx
  5873 00004D0D 2500000200          <2> 		and	eax,131072
  5874 00004D12 7407                <2> 		jz	MemLocN2
  5875 00004D14 8005[F94D0000]02    <2> 		add	byte [Page1],02
  5876                              <2> MemLocN2:
  5877 00004D1B 89D0                <2> 		mov	eax,edx
  5878 00004D1D 2500000400          <2> 		and	eax,262144
  5879 00004D22 7407                <2> 		jz	MemLocN3
  5880 00004D24 8005[F94D0000]04    <2> 		add	byte [Page1],04
  5881                              <2> MemLocN3:
  5882 00004D2B 89D0                <2> 		mov	eax,edx
  5883 00004D2D 2500000800          <2> 		and	eax,524288
  5884 00004D32 7407                <2> 		jz	MemLocN4
  5885 00004D34 8005[F94D0000]08    <2> 		add	byte [Page1],08
  5886                              <2> MemLocN4:
  5887 00004D3B 66BA8300            <2> 		mov	dx,PgPort
  5888 00004D3F A0[F94D0000]        <2> 		mov	al,[Page1]
  5889 00004D44 EE                  <2> 		out	dx,al
  5890 00004D45 66BA0300            <2> 		mov	dx,LenPort
  5891 00004D49 66A1[EF4D0000]      <2> 		mov	ax,[Length1]
  5892 00004D4F EE                  <2> 		out	dx,al
  5893 00004D50 86C4                <2> 		xchg al,ah
  5894 00004D52 EE                  <2> 		out	dx,al
  5895 00004D53 66BA0A00            <2> 		mov	dx,0Ah
  5896 00004D57 B001                <2> 		mov	al,Channel
  5897 00004D59 EE                  <2> 		out	dx,al
  5898                              <2> 		
  5899 00004D5A B040                <2> 		mov	al,40h
  5900 00004D5C E87D000000          <2> 		call WriteDSP
  5901 00004D61 31D2                <2> 		xor	edx,edx
  5902 00004D63 B840420F00          <2> 		mov	eax,1000000
  5903 00004D68 8B1D[FA4D0000]      <2> 		mov	ebx,[Freq]
  5904 00004D6E F7F3                <2> 		div	ebx
  5905 00004D70 89C3                <2> 		mov	ebx,eax
  5906 00004D72 B800010000          <2> 		mov	eax,256
  5907 00004D77 29D8                <2> 		sub	eax,ebx
  5908 00004D79 E860000000          <2> 		call WriteDSP
  5909 00004D7E A0[FE4D0000]        <2> 		mov	al,[WAVEMode]	;write the mode
  5910 00004D83 E856000000          <2> 		call WriteDSP
  5911 00004D88 66A1[EF4D0000]      <2> 		mov	ax,[Length1]
  5912 00004D8E E84B000000          <2> 		call WriteDSP
  5913 00004D93 86C4                <2> 		xchg al,ah
  5914 00004D95 E844000000          <2> 		call WriteDSP
  5915 00004D9A C3                  <2> 		ret
  5916                              <2> 
  5917                              <2> MstrVol:    ;uses ax dx
  5918 00004D9B 6650                <2> 	   push ax
  5919 00004D9D 66BA2402            <2> 	   mov	dx,(BasePort+4)
  5920 00004DA1 B022                <2> 	   mov	al,22h
  5921 00004DA3 EE                  <2> 	   out	dx,al
  5922 00004DA4 6658                <2> 	   pop	ax
  5923 00004DA6 6642                <2> 	   inc	dx
  5924 00004DA8 EE                  <2> 	   out	dx,al
  5925 00004DA9 C3                  <2> 	   ret
  5926                              <2> 	   
  5927                              <2> ResetDSP:   ; uses cx dx
  5928 00004DAA 66BA2602            <2> 			mov	dx,(BasePort+6)
  5929 00004DAE B001                <2> 			mov	al,01
  5930 00004DB0 EE                  <2> 			out	dx,al
  5931 00004DB1 66B93200            <2> 			mov	cx,50
  5932 00004DB5 EC                  <2> WaitIt1:	in	al,dx
  5933 00004DB6 E2FD                <2> 			loop WaitIt1
  5934 00004DB8 30C0                <2> 			xor	al,al
  5935 00004DBA EE                  <2> 			out	dx,al
  5936 00004DBB 66B93200            <2> 			mov	cx,50
  5937 00004DBF EC                  <2> WaitIt2:	in	al,dx
  5938 00004DC0 E2FD                <2> 			loop WaitIt2
  5939 00004DC2 B4FF                <2> 			mov	ah,0FFh 		; part of Return Code
  5940 00004DC4 66BA2E02            <2> 			mov	dx,(BasePort+14)
  5941 00004DC8 EC                  <2> 			in	al,dx
  5942 00004DC9 2480                <2> 			and	al,80h
  5943 00004DCB 3C80                <2> 			cmp	al,80h
  5944 00004DCD 750C                <2> 			jne	ResetErr
  5945 00004DCF 66BA2A02            <2> 			mov	dx,(BasePort+10)
  5946 00004DD3 EC                  <2> 			in	al,dx
  5947 00004DD4 3CAA                <2> 			cmp	al,0AAh
  5948 00004DD6 7503                <2> 			jne	ResetErr
  5949 00004DD8 B001                <2> ResetOK:	mov al, 1		; return ax = 0 if reset ok
  5950 00004DDA C3                  <2> 			ret
  5951 00004DDB 30C0                <2> ResetErr:	xor al, al
  5952 00004DDD C3                  <2> 			ret
  5953                              <2> 
  5954                              <2> WriteDSP:   ;uses ax dx
  5955 00004DDE 6650                <2> 		push ax
  5956 00004DE0 66BA2C02            <2> 		mov	dx,(BasePort+12)
  5957 00004DE4 EC                  <2> WaitIt:	in	al,dx
  5958 00004DE5 2480                <2> 		and	al,80h
  5959 00004DE7 75FB                <2> 		jnz	WaitIt
  5960 00004DE9 6658                <2> 		pop	ax
  5961 00004DEB EE                  <2> 		out	dx,al
  5962 00004DEC C3                  <2> 		ret
  5963                              <2> 
  5964 00004DED 0000                <2> Length0 dw	0
  5965 00004DEF 0000                <2> Length1	dw  0
  5966 00004DF1 00000000            <2> NextMemLoc dd 0
  5967 00004DF5 00000000            <2> MemLoc	dd  0
  5968 00004DF9 00                  <2> Page1	db  0
  5969 00004DFA 00000000            <2> Freq	dd	0
  5970 00004DFE 14                  <2> WAVEMode db 14h
  5971                              <2> 
  5972                              <2> PgPort	equ 83h
  5973                              <2> AddPort	equ 02h
  5974                              <2> LenPort	equ 03h
  5975                              <2> ModeReg	equ 49h
  5976                              <2> Channel	equ 01h
  5977                              <2> BasePort	equ 220h
  5978 00004DFF 00                  <2> SoundBlaster	db 0
  5979                              <1> %include "source/drivers/network/rtl8139.asm"
  5980                              <2> ;RTL8139 NIC DRIVER
  5981                              <2> rtl8139:
  5982                              <2> .RBSTART equ 0x30
  5983                              <2> .IMR equ 0x3C
  5984                              <2> .ISR equ 0x3E
  5985                              <2> .CMD equ 0x37
  5986                              <2> .RCR equ 0x44
  5987                              <2> .CONFIG1 equ 0x52
  5988                              <2> .TSD0 equ 0x10
  5989                              <2> .TSAD0 equ 0x20
  5990                              <2> .initcard:	;should find card, get mac, and initialize card
  5991 00004E00 31C0                <2> 	xor eax, eax
  5992 00004E02 A2[AB6E0000]        <2> 	mov [pcifunction], al
  5993 00004E07 A2[A96E0000]        <2> 	mov [pcibus], al
  5994 00004E0C A2[AA6E0000]        <2> 	mov [pcidevice], al
  5995 00004E11 B002                <2> 	mov al, 0x02 ;;type code
  5996 00004E13 A2[266F0000]        <2> 	mov [pcitype], al
  5997 00004E18 E891200000          <2> 	call getpciport
  5998                              <2> .initnic:	;Here i tried the rtl8139 interface, fuck it
  5999 00004E1D 8915[B84F0000]      <2> 	mov [basenicaddr], edx
  6000 00004E23 89D1                <2> 	mov ecx, edx
  6001 00004E25 E86FE4FFFF          <2> 	call showhex	;for debugging, please remove
  6002 00004E2A BE[196F0100]        <2> 	mov esi, rbuffstart
  6003 00004E2F B900200000          <2> 	mov ecx, 8192
  6004 00004E34 31C0                <2> 	xor eax, eax
  6005                              <2> .clearrbuff:		;clear receive buffer which starts at rbuffstart
  6006 00004E36 8806                <2> 	mov [esi], al
  6007 00004E38 46                  <2> 	inc esi
  6008 00004E39 6649                <2> 	dec cx
  6009 00004E3B 6681F90000          <2> 	cmp cx, 0
  6010 00004E40 75F4                <2> 	jne .clearrbuff
  6011                              <2> .findmac:
  6012 00004E42 8B15[B84F0000]      <2> 	mov edx, [basenicaddr]
  6013 00004E48 BF[C04F0000]        <2> 	mov edi, sysmac
  6014 00004E4D B906000000          <2> 	mov ecx, 6
  6015                              <2> .macputloop:
  6016 00004E52 EC                  <2> 	in al, dx
  6017 00004E53 8807                <2> 	mov [edi], al
  6018 00004E55 47                  <2> 	inc edi
  6019 00004E56 42                  <2> 	inc edx
  6020 00004E57 49                  <2> 	dec ecx
  6021 00004E58 75F8                <2> 	jnz .macputloop
  6022 00004E5A B9[C04F0000]        <2> 	mov ecx, sysmac
  6023 00004E5F E803010000          <2> 	call showmac
  6024                              <2> .resetnic:
  6025 00004E64 8B15[B84F0000]      <2> 	mov edx, [basenicaddr]
  6026 00004E6A 81C252000000        <2> 	add edx, .CONFIG1
  6027 00004E70 30C0                <2> 	xor al, al
  6028 00004E72 EE                  <2> 	out dx, al	;WAKE UP!!!!
  6029 00004E73 8B15[B84F0000]      <2> 	mov edx, [basenicaddr]
  6030 00004E79 81C237000000        <2> 	add edx, .CMD
  6031 00004E7F B010                <2> 	mov al, 0x10
  6032 00004E81 EE                  <2> 	out dx, al	;Reset
  6033                              <2> .resetnicwait:
  6034 00004E82 8B15[B84F0000]      <2> 	mov edx, [basenicaddr]
  6035 00004E88 81C237000000        <2> 	add edx, .CMD
  6036 00004E8E EC                  <2> 	in al, dx
  6037 00004E8F 2410                <2> 	and al, 0x10
  6038 00004E91 3C10                <2> 	cmp al, 0x10
  6039 00004E93 0F84E9FFFFFF        <2> 	je near .resetnicwait
  6040 00004E99 8B15[B84F0000]      <2> 	mov edx, [basenicaddr]
  6041 00004E9F 81C230000000        <2> 	add edx, .RBSTART
  6042 00004EA5 B8[196F0100]        <2> 	mov eax, rbuffstart
  6043 00004EAA 0500001000          <2> 	add eax, 0x100000 ;change virtual to physical address
  6044 00004EAF EF                  <2> 	out dx, eax	;give nic receive buffer location
  6045 00004EB0 8B15[B84F0000]      <2> 	mov edx, [basenicaddr]
  6046 00004EB6 81C23C000000        <2> 	add edx, .IMR
  6047 00004EBC 66ED                <2> 	in ax, dx
  6048 00004EBE 660D7FE0            <2> 	or ax, 0xE07F ;set all possible interrupts to enabled
  6049 00004EC2 66EF                <2> 	out dx, ax	;set TOK and ROK
  6050 00004EC4 8B15[B84F0000]      <2> 	mov edx, [basenicaddr]
  6051 00004ECA 81C244000000        <2> 	add edx, .RCR
  6052 00004ED0 B80F000000          <2> 	mov eax, 0xf
  6053 00004ED5 0580000000          <2> 	add eax, 128 ;enable wrap option
  6054 00004EDA EF                  <2> 	out dx, eax	;recieve packets from all matches
  6055 00004EDB 8B15[B84F0000]      <2> 	mov edx, [basenicaddr]
  6056 00004EE1 81C237000000        <2> 	add edx, .CMD
  6057 00004EE7 B00C                <2> 	mov al, 0x0C
  6058 00004EE9 EE                  <2> 	out dx, al	;use transmit and receive
  6059 00004EEA C605[B74F0000]01    <2> 	mov byte [nicconfig], 1
  6060 00004EF1 C3                  <2> 	ret
  6061                              <2> 	
  6062                              <2> .sendpacket:	;packet with beginning in edi and end in esi
  6063 00004EF2 56                  <2> 	push esi
  6064 00004EF3 57                  <2> 	push edi
  6065                              <2> .nic2:		;here come the low level drivers :(
  6066                              <2> 			;frame begins at esi, ends at edi
  6067                              <2>  			;0x0200 is the class code for ethernet cards
  6068 00004EF4 803D[B74F0000]01    <2> 	cmp byte [nicconfig], 1
  6069 00004EFB 7405                <2> 	je .sendcachedata
  6070 00004EFD E8FEFEFFFF          <2> 	call .initcard
  6071                              <2> .sendcachedata:
  6072 00004F02 8B15[B84F0000]      <2> 	mov edx, [basenicaddr]
  6073 00004F08 81C220000000        <2> 	add edx, .TSAD0
  6074 00004F0E 5F                  <2> 	pop edi
  6075 00004F0F 89F8                <2> 	mov eax, edi
  6076 00004F11 0500001000          <2> 	add eax, 0x100000 ;base address
  6077 00004F16 EF                  <2> 	out dx, eax	;here's Johnny!
  6078 00004F17 5E                  <2> 	pop esi
  6079 00004F18 29FE                <2> 	sub esi, edi
  6080 00004F1A 8B15[B84F0000]      <2> 	mov edx, [basenicaddr]
  6081 00004F20 81C210000000        <2> 	add edx, .TSD0
  6082 00004F26 ED                  <2> 	in eax, dx ;get tsd
  6083 00004F27 2500E0FFFF          <2> 	and eax, 0xFFFFE000 ;clear off thirteen bits
  6084 00004F2C 01F0                <2> 	add eax, esi ;add length to tsd
  6085 00004F2E 25FFDFFFFF          <2> 	and eax, 0xFFFFDFFF ;clear own bit
  6086 00004F33 EF                  <2> 	out dx, eax
  6087                              <2> .checknicownbit:
  6088 00004F34 8B15[B84F0000]      <2> 	mov edx, [basenicaddr]
  6089 00004F3A 81C210000000        <2> 	add edx, .TSD0
  6090 00004F40 ED                  <2> 	in eax, dx
  6091 00004F41 2500200000          <2> 	and eax, 0x2000 ;check own bit
  6092 00004F46 3D00200000          <2> 	cmp eax, 0x2000
  6093 00004F4B 75E7                <2> 	jne .checknicownbit
  6094                              <2> .checknictokbit:
  6095 00004F4D 8B15[B84F0000]      <2> 	mov edx, [basenicaddr]
  6096 00004F53 81C210000000        <2> 	add edx, .TSD0
  6097 00004F59 ED                  <2> 	in eax, dx
  6098 00004F5A 2500800000          <2> 	and eax, 0x8000	;check tok bit
  6099 00004F5F 3D00800000          <2> 	cmp eax, 0x8000
  6100 00004F64 75E7                <2> 	jne .checknictokbit
  6101 00004F66 C3                  <2> 	ret
  6102                              <2> 	
  6103                              <2> showmac:	;mac begins in [ecx]
  6104 00004F67 BE[9F4F0000]        <2> 	mov esi, macprint
  6105 00004F6C 89CF                <2> 	mov edi, ecx
  6106 00004F6E 81C106000000        <2> 	add ecx, 6
  6107                              <2> showmacloop:
  6108 00004F74 8A07                <2> 	mov al, [edi]
  6109 00004F76 8A27                <2> 	mov ah, [edi]
  6110 00004F78 C0E804              <2> 	shr al, 4
  6111 00004F7B C0E404              <2> 	shl ah, 4
  6112 00004F7E C0EC04              <2> 	shr ah, 4
  6113 00004F81 0430                <2> 	add al, 48
  6114 00004F83 80C430              <2> 	add ah, 48
  6115 00004F86 668906              <2> 	mov [esi], ax
  6116 00004F89 81C603000000        <2> 	add esi, 3
  6117 00004F8F 47                  <2> 	inc edi
  6118 00004F90 39CF                <2> 	cmp edi, ecx
  6119 00004F92 72E0                <2> 	jb showmacloop
  6120 00004F94 BE[9F4F0000]        <2> 	mov esi, macprint
  6121 00004F99 E846D3FFFF          <2> 	call print
  6122 00004F9E C3                  <2> 	ret
  6123                              <2> 	
  6124 00004F9F 30303A30303A30303A- <2> macprint db "00:00:00:00:00:00  ",0
  6125 00004FA8 30303A30303A303020- <2>
  6126 00004FB1 2000                <2>
  6127 00004FB3 00000000            <2> ethernetend dw 0,0
  6128 00004FB7 00                  <2> nicconfig db 0
  6129 00004FB8 00000000            <2> basenicaddr	db 0,0,0,0
  6130 00004FBC C0A80005            <2> sysip db 192,168,0,5
  6131 00004FC0 000000000000        <2> sysmac	db 0,0,0,0,0,0		;my mac address
  6132                              <1> %include "source/drivers/input/mouse.asm"
  6133 00004FC6 00                  <2> mousedisabled db 0
  6134                              <2> 	
  6135                              <2> 	cursorgui:
  6136 00004FC7 803D[B4690000]01    <2> 		cmp byte [mouseon], 1
  6137 00004FCE 0F8432000000        <2> 		je near moused
  6138 00004FD4 803D[988B0000]00    <2> 		cmp byte [guion], 0
  6139 00004FDB 0F841F040000        <2> 		je near entdown
  6140                              <2> 	initmouse:
  6141 00004FE1 803D[988B0000]00    <2> 		cmp byte [guion], 0
  6142 00004FE8 7405                <2> 		je noswmsposinit
  6143 00004FEA E8BD080000          <2> 		call switchmousepos2
  6144                              <2> 	noswmsposinit:
  6145 00004FEF E84E020000          <2> 	  	call PS2SET
  6146 00004FF4 E877020000          <2> 		call ACTMOUS
  6147 00004FF9 C605[B4690000]01    <2> 		mov byte [mouseon],1
  6148 00005000 E890020000          <2> 		call GETB 	;;Get the responce byte of the mouse (like: Hey i am active)
  6149                              <2> 				;;If the bytes are mixed up,
  6150                              <2> 				;;remove this line or add another of this line.
  6151                              <2> 	nomouse:
  6152 00005005 C3                  <2> 		ret
  6153                              <2> 	moused:
  6154 00005006 803D[C64F0000]01    <2> 		cmp byte [mousedisabled], 1
  6155 0000500D 74F6                <2> 		je nomouse
  6156 0000500F 803D[B4690000]01    <2> 		  cmp byte [mouseon], 1
  6157 00005016 75C9                <2> 		  jne initmouse
  6158 00005018 E878020000          <2> 		  call GETB
  6159 0000501D 88C3                <2> 		  mov  bl, al
  6160 0000501F 80E301              <2> 		  and  bl, 1
  6161 00005022 881D[BA520000]      <2> 		  mov  BYTE [LBUTTON], bl
  6162 00005028 88C3                <2> 		  mov  bl, al
  6163 0000502A 80E302              <2> 		  and  bl, 2
  6164 0000502D D0EB                <2> 		  shr  bl, 1
  6165 0000502F 881D[BB520000]      <2> 		  mov  BYTE [RBUTTON], bl
  6166 00005035 88C3                <2> 		  mov  bl, al
  6167 00005037 80E304              <2> 		  and  bl, 4
  6168 0000503A C0EB02              <2> 		  shr  bl, 2
  6169 0000503D 881D[BC520000]      <2> 		  mov  BYTE [MBUTTON], bl
  6170 00005043 E84D020000          <2> 		  call GETB
  6171 00005048 A2[BD520000]        <2> 		  mov  BYTE [XCOORD], al
  6172 0000504D E843020000          <2> 		  call GETB
  6173 00005052 A2[BE520000]        <2> 		  mov  BYTE [YCOORD], al
  6174                              <2> 
  6175                              <2> 	showpixelcursor:
  6176 00005057 668B15[A9510000]    <2> 		mov dx, [mousecursorposition]
  6177 0000505E 668B0D[AB510000]    <2> 		mov cx, [mousecursorposition + 2]
  6178 00005065 668915[A5510000]    <2> 		mov [lastmouseposition], dx
  6179 0000506C 66890D[A7510000]    <2> 		mov [lastmouseposition + 2], cx
  6180 00005073 A0[BD520000]        <2> 		mov al, [XCOORD]
  6181 00005078 3C80                <2> 		cmp al, 128
  6182 0000507A 730C                <2> 		jae subxcoord
  6183 0000507C 00C0                <2> 		add al, al
  6184 0000507E 30E4                <2> 		xor ah, ah
  6185 00005080 6601C2              <2> 		add dx, ax
  6186 00005083 E90B000000          <2> 		jmp subxcoorddn
  6187                              <2> 	subxcoord:
  6188 00005088 00C0                <2> 		add al, al
  6189 0000508A 30DB                <2> 		xor bl, bl
  6190 0000508C 28C3                <2> 		sub bl, al
  6191 0000508E 30FF                <2> 		xor bh, bh
  6192 00005090 6629DA              <2> 		sub dx, bx
  6193                              <2> 	subxcoorddn:
  6194 00005093 8A1D[BE520000]      <2> 		mov bl, [YCOORD]
  6195 00005099 30C0                <2> 		xor al, al
  6196 0000509B 28D8                <2> 		sub al, bl
  6197 0000509D 3C80                <2> 		cmp al, 128
  6198 0000509F 730A                <2> 		jae subycoord
  6199 000050A1 30E4                <2> 		xor ah, ah
  6200 000050A3 6601C1              <2> 		add cx, ax
  6201 000050A6 E909000000          <2> 		jmp subycoorddn
  6202                              <2> 	subycoord:
  6203 000050AB 30DB                <2> 		xor bl, bl
  6204 000050AD 28C3                <2> 		sub bl, al
  6205 000050AF 30FF                <2> 		xor bh, bh
  6206 000050B1 6629D9              <2> 		sub cx, bx
  6207                              <2> 	subycoorddn:
  6208 000050B4 6681FA204E          <2> 		cmp dx, 20000
  6209 000050B9 7603                <2> 		jbe nooriginx2
  6210 000050BB 6631D2              <2> 		xor dx, dx
  6211                              <2> 	nooriginx2:
  6212 000050BE 6681F9204E          <2> 		cmp cx, 20000
  6213 000050C3 7603                <2> 		jbe nooriginy2
  6214 000050C5 6631C9              <2> 		xor cx, cx
  6215                              <2> 	nooriginy2:
  6216 000050C8 6681FA0000          <2> 		cmp dx, 0
  6217 000050CD 7415                <2> 		je nofixxcolumn2
  6218 000050CF 663B15[968B0000]    <2> 		cmp dx, [resolutionx2]
  6219 000050D6 720C                <2> 		jb nofixxcolumn2
  6220 000050D8 668B15[968B0000]    <2> 		mov dx, [resolutionx2]
  6221 000050DF 6681EA0200          <2> 		sub dx, 2
  6222                              <2> 	nofixxcolumn2:
  6223 000050E4 6681F90000          <2> 		cmp cx, 0
  6224 000050E9 7415                <2> 		je nofixyrow2
  6225 000050EB 663B0D[AA8A0000]    <2> 		cmp cx, [resolutiony]
  6226 000050F2 720C                <2> 		jb nofixyrow2
  6227 000050F4 668B0D[AA8A0000]    <2> 		mov cx, [resolutiony]
  6228 000050FB 6681E90100          <2> 		sub cx, 1
  6229                              <2> 	nofixyrow2:
  6230 00005100 668915[A9510000]    <2> 		mov [mousecursorposition], dx
  6231 00005107 66890D[AB510000]    <2> 		mov [mousecursorposition + 2], cx
  6232 0000510E 803D[988B0000]00    <2> 		cmp byte [guion], 0
  6233 00005115 0F8492000000        <2> 		je near termmouse
  6234 0000511B E82C070000          <2> 		call switchmousepos ;;use dragging code to ensure proper icon drag
  6235 00005120 803D[BA520000]01    <2> 		cmp byte [LBUTTON], 1
  6236 00005127 0F84F3070000        <2> 		je near clickicon
  6237 0000512D 803D[BB520000]01    <2> 		cmp byte [RBUTTON], 1
  6238 00005134 0F84E6070000        <2> 		je near clickicon
  6239 0000513A A0[0D590000]        <2> 		mov al, [pbutton]
  6240 0000513F C705[10590000]0000- <2> 		mov dword [dragging], 0
  6241 00005147 0000                <2>
  6242 00005149 3C00                <2> 		cmp al, 0
  6243 0000514B 740F                <2> 		je nopreviousbutton
  6244 0000514D E8A0060000          <2> 		call clearmousecursor
  6245 00005152 E8000D0000          <2> 		call reloadallgraphics
  6246                              <2> 	windowtermcopyend:
  6247 00005157 E850070000          <2> 		call switchmousepos2
  6248                              <2> 	nopreviousbutton:
  6249 0000515C 30C0                <2> 		xor al, al
  6250 0000515E A2[0D590000]        <2> 		mov [pbutton], al
  6251 00005163 A0[BA520000]        <2> 		mov al, [LBUTTON]
  6252 00005168 A2[0E590000]        <2> 		mov [pLBUTTON], al
  6253 0000516D A0[BB520000]        <2> 		mov al, [RBUTTON]
  6254 00005172 A2[0F590000]        <2> 		mov [pRBUTTON], al
  6255 00005177 31C9                <2> 		xor ecx, ecx
  6256 00005179 31D2                <2> 		xor edx, edx
  6257 0000517B 668B15[A9510000]    <2> 		mov dx, [mousecursorposition]
  6258 00005182 668B0D[AB510000]    <2> 		mov cx, [mousecursorposition + 2]
  6259 00005189 66BB18C7            <2> 		mov bx, 1100011100011000b
  6260 0000518D 30E4                <2> 		xor ah, ah
  6261 0000518F B0FE                <2> 		mov al, 254
  6262 00005191 C605[EF570000]01    <2> 		mov byte [showcursorfonton], 1
  6263 00005198 E884150000          <2> 		call showfontvesa
  6264 0000519D C605[EF570000]00    <2> 		mov byte [showcursorfonton], 0
  6265 000051A4 C3                  <2> 		ret
  6266                              <2> 
  6267 000051A5 84008400            <2> lastmouseposition dw 132,132
  6268 000051A9 84008400            <2> mousecursorposition dw 132,132	
  6269                              <2> 
  6270                              <2> termmouse:
  6271 000051AD BE[91BC0000]        <2> 		mov esi, videobuf
  6272 000051B2 31D2                <2> 		xor edx, edx
  6273 000051B4 668B15[A5510000]    <2> 		mov dx, [lastmouseposition]
  6274 000051BB 668B0D[A7510000]    <2> 		mov cx, [lastmouseposition + 2]
  6275 000051C2 66A1[40520000]      <2> 		mov ax, [cursorcache]
  6276 000051C8 663D0000            <2> 		cmp ax, 0
  6277 000051CC 7425                <2> 		je nocopycursorcache
  6278 000051CE 66C1E104            <2> 		shl cx, 4
  6279 000051D2 66C1E203            <2> 		shl dx, 3
  6280 000051D6 01D6                <2> 		add esi, edx
  6281 000051D8 6631D2              <2> 		xor dx, dx
  6282 000051DB 8A15[8A290000]      <2> 		mov dl, [charxy]
  6283 000051E1 6641                <2> 		inc cx
  6284                              <2> termmousecplp1:
  6285 000051E3 01D6                <2> 		add esi, edx
  6286 000051E5 6649                <2> 		dec cx
  6287 000051E7 6681F90000          <2> 		cmp cx, 0
  6288 000051EC 75F5                <2> 		jne termmousecplp1
  6289 000051EE 29D6                <2> 		sub esi, edx
  6290 000051F0 668906              <2> 		mov [esi], ax
  6291                              <2> nocopycursorcache:
  6292 000051F3 BE[91BC0000]        <2> 		mov esi, videobuf
  6293 000051F8 31D2                <2> 		xor edx, edx
  6294 000051FA 668B15[A9510000]    <2> 		mov dx, [mousecursorposition]
  6295 00005201 668B0D[AB510000]    <2> 		mov cx, [mousecursorposition + 2]
  6296 00005208 66C1E104            <2> 		shl cx, 4
  6297 0000520C 66C1E203            <2> 		shl dx, 3
  6298 00005210 01D6                <2> 		add esi, edx
  6299 00005212 6631D2              <2> 		xor dx, dx
  6300 00005215 8A15[8A290000]      <2> 		mov dl, [charxy]
  6301 0000521B 6641                <2> 		inc cx
  6302                              <2> termmousecplp2:
  6303 0000521D 01D6                <2> 		add esi, edx
  6304 0000521F 6649                <2> 		dec cx
  6305 00005221 6681F90000          <2> 		cmp cx, 0
  6306 00005226 75F5                <2> 		jne termmousecplp2
  6307 00005228 29D6                <2> 		sub esi, edx
  6308 0000522A 668B06              <2> 		mov ax, [esi]
  6309 0000522D 66A3[40520000]      <2> 		mov [cursorcache], ax
  6310 00005233 B080                <2> 		mov al, 128
  6311 00005235 B407                <2> 		mov ah, 7
  6312 00005237 668906              <2> 		mov [esi], ax
  6313 0000523A E8E2D7FFFF          <2> 		call termcopy
  6314 0000523F C3                  <2> 		ret
  6315 00005240 0000                <2> cursorcache db 0,0
  6316                              <2> 
  6317                              <2> PS2SET:
  6318 00005242 B0A8                <2>   mov  al, 0xa8		; enable mouse port
  6319 00005244 E664                <2>   out  0x64, al		; write to keyboardcontroller
  6320 00005246 E801000000          <2>   call CHKPRT		; check if command is progressed (demand!)
  6321 0000524B C3                  <2> ret
  6322                              <2> 
  6323                              <2> CHKPRT:
  6324 0000524C 66B96400            <2>   mov  cx, 100
  6325                              <2>  .again:
  6326 00005250 E464                <2>   in   al, 0x64		; read from keyboardcontroller
  6327 00005252 A802                <2>   test al, 2		; Check if input buffer is empty
  6328 00005254 7402                <2>   je .go
  6329 00005256 E2F8                <2>   loop .again
  6330                              <2>  .go:
  6331 00005258 C3                  <2> ret
  6332                              <2> 
  6333                              <2> WMOUS:
  6334 00005259 B0D4                <2>   mov  al, 0xd4		; write to mouse device instead of to keyboard
  6335 0000525B E664                <2>   out  0x64, al		; write to keyboardcontroller
  6336 0000525D E8EAFFFFFF          <2>   call CHKPRT		; check if command is progressed (demand!)
  6337 00005262 C3                  <2> ret
  6338                              <2> 
  6339                              <2> MBUFFUL:
  6340 00005263 66B96400            <2>   mov cx, 100
  6341                              <2>  .mn:
  6342 00005267 E464                <2>   in   al, 0x64		; read from keyboardcontroller
  6343 00005269 A820                <2>   test al, 0x20		; check if mouse output buffer is full
  6344 0000526B 7402                <2>   jz  .mnn
  6345 0000526D E2F8                <2>   loop .mn
  6346                              <2>  .mnn:
  6347 0000526F C3                  <2> ret
  6348                              <2> 
  6349                              <2> 
  6350                              <2> ACTMOUS:
  6351 00005270 E8E4FFFFFF          <2>   call WMOUS
  6352 00005275 B0F4                <2>   mov  al, 0xf4 	; Command to activate mouse itselve (Stream mode)
  6353 00005277 E660                <2>   out  0x60, al		; write ps/2 controller output port (activate mouse)
  6354 00005279 E8CEFFFFFF          <2>   call CHKPRT		; check if command is progressed (demand!)
  6355 0000527E E801000000          <2>   call CHKMOUS		; check if a byte is available
  6356 00005283 C3                  <2> ret
  6357                              <2> 
  6358                              <2> CHKMOUS:
  6359 00005284 B300                <2>   mov  bl, 0
  6360 00005286 66B96400            <2>   mov cx, 100
  6361                              <2>  .vrd:
  6362 0000528A E464                <2>   in   al, 0x64		; read from keyboardcontroller
  6363 0000528C A801                <2>   test al, 1		; check if controller buffer (60h) has data
  6364 0000528E 7504                <2>   jnz .yy
  6365 00005290 E2F8                <2>   loop .vrd
  6366 00005292 B301                <2>   mov  bl, 1
  6367                              <2>  .yy:
  6368 00005294 C3                  <2> ret
  6369                              <2> 
  6370                              <2> GETB:
  6371                              <2>  .cagain:
  6372 00005295 E8EAFFFFFF          <2>   call CHKMOUS		; check if a byte is available
  6373 0000529A 08DB                <2>   or bl, bl
  6374 0000529C 75F7                <2>   jnz .cagain
  6375 0000529E B0AD                <2>   mov  al, 0xad		; Disable Keyboard
  6376 000052A0 E664                <2>   out  0x64, al		; write to keyboardcontroller
  6377 000052A2 E8A5FFFFFF          <2>   call CHKPRT		; check if command is progressed (demand!)
  6378 000052A7 6631C0              <2>   xor  ax, ax
  6379 000052AA E460                <2>   in   al, 0x60		; read ps/2 controller output port (mousebyte)
  6380 000052AC 88C2                <2>   mov  dl, al
  6381 000052AE B0AE                <2>   mov  al, 0xae		; Enable Keyboard
  6382 000052B0 E664                <2>   out  0x64, al		; write to keyboardcontroller
  6383 000052B2 E895FFFFFF          <2>   call CHKPRT		; check if command is progressed (demand!)
  6384 000052B7 88D0                <2>   mov  al, dl
  6385 000052B9 C3                  <2> ret
  6386                              <2> 
  6387 000052BA 00                  <2> LBUTTON db 0x00	;	Left   button status 1=PRESSED 0=RELEASED
  6388 000052BB 00                  <2> RBUTTON db 0x00	;	Right  button status 1=PRESSED 0=RELEASED
  6389 000052BC 00                  <2> MBUTTON db 0x00	;	Middle button status 1=PRESSED 0=RELEASED
  6390 000052BD 00                  <2> XCOORD  db 0x00	;	the moved distance  (horizontal)
  6391 000052BE 00                  <2> YCOORD  db 0x00	;	the moved distance  (vertical)
  6392                              <1> %include "source/drivers/input/keyboard.asm"
  6393 000052BF 00                  <2> specialkey db 0
  6394 000052C0 00                  <2> charregion db 0
  6395                              <2> waitforinput:		;;this is basically the idle process
  6396                              <2> 					;;this halts the cpu for a small amount of time and then sees if there was a keypress
  6397                              <2> 					;;this lets the cpu stay at close to 0% instead of 100%
  6398 000052C1 6631C0              <2> 	xor ax, ax
  6399 000052C4 A0[29720000]        <2> 	mov al, [threadson]
  6400 000052C9 8825[29720000]      <2> 	mov [threadson], ah
  6401 000052CF FB                  <2> 	sti
  6402 000052D0 F4                  <2> 	hlt
  6403 000052D1 A2[29720000]        <2> 	mov [threadson], al
  6404 000052D6 3A25[AC270000]      <2> 	cmp ah, [trans]
  6405 000052DC 7401                <2> 	je getkey
  6406 000052DE C3                  <2> 	ret
  6407                              <2> getkey:
  6408 000052DF 31C0                <2> 		xor eax, eax
  6409 000052E1 A2[BF520000]        <2> 		mov [specialkey], al
  6410 000052E6 66A3[AA270000]      <2> 		mov [lastkey], ax
  6411 000052EC E464                <2> 		in al, 64h ; Status
  6412 000052EE A820                <2> 		test al, 20h ; PS2-Mouse?
  6413 000052F0 0F8510FDFFFF        <2> 		jnz near moused
  6414 000052F6 A801                <2> 		test al, 1 
  6415 000052F8 74C7                <2> 		jz waitforinput ; if output buffer full or no keypress, jump to idle process (only works when it is jz guistartin2, use jz guistartin to disable)
  6416                              <2> 	calckey:
  6417 000052FA E460                <2> 		in al, 60h
  6418 000052FC 88C4                <2> 		mov ah, al
  6419 000052FE 30C0                <2> 		xor al, al
  6420 00005300 8825[AB270000]      <2> 		mov [lastkey + 1], ah
  6421 00005306 88E0                <2> 		mov al, ah
  6422 00005308 BF[A1540000]        <2> 		mov edi, scancode
  6423                              <2> 	searchscan: 
  6424 0000530D 3C3A                <2> 		cmp al, 3Ah
  6425 0000530F 731A                <2> 		jae scanother
  6426 00005311 30E4                <2> 		xor ah, ah
  6427 00005313 C0E002              <2> 		shl al, 2
  6428 00005316 01C7                <2> 		add edi, eax
  6429 00005318 D0E8                <2> 		shr al, 1
  6430 0000531A 01C7                <2> 		add edi, eax
  6431 0000531C D0E8                <2> 		shr al, 1
  6432 0000531E 8A27                <2> 		mov ah, [edi]
  6433 00005320 80FC00              <2> 		cmp ah, 0
  6434 00005323 7406                <2> 		je scanother
  6435 00005325 E9D7000000          <2> 		jmp scanfound
  6436 0000532A 00                  <2> uppercase db 0
  6437                              <2> scanother:
  6438 0000532B 88C4                <2> 		mov ah, al
  6439 0000532D 30C0                <2> 		xor al, al
  6440 0000532F 66A3[AA270000]      <2> 		mov [lastkey], ax
  6441 00005335 80FCE0              <2> 		cmp ah, 0E0h
  6442 00005338 0F847D000000        <2> 		je near getkeyspecial
  6443 0000533E 803D[BF520000]E0    <2> 		cmp byte [specialkey], 0xE0
  6444 00005345 752B                <2> 		jne nospecialkey
  6445 00005347 80FC38              <2> 		cmp ah, 38h
  6446 0000534A 0F84A0000000        <2> 		je near alton
  6447 00005350 80FCB8              <2> 		cmp ah, 0B8h
  6448 00005353 0F849F000000        <2> 		je near altoff
  6449 00005359 80FC1D              <2> 		cmp ah, 1Dh
  6450 0000535C 0F847E000000        <2> 		je near ctron
  6451 00005362 80FC9D              <2> 		cmp ah, 9Dh
  6452 00005365 0F847D000000        <2> 		je near ctroff
  6453 0000536B 66A3[AA270000]      <2> 		mov [lastkey], ax
  6454 00005371 C3                  <2> 		ret
  6455                              <2> nospecialkey:
  6456 00005372 80FC2A              <2> 		cmp ah, 2Ah
  6457 00005375 0F8455000000        <2> 		je near shifton
  6458 0000537B 80FC36              <2> 		cmp ah, 36h
  6459 0000537E 0F844C000000        <2> 		je near shifton
  6460 00005384 80FC1C              <2> 		cmp ah, 1Ch
  6461 00005387 0F8473000000        <2> 		je near entdown
  6462 0000538D 80FCAA              <2> 		cmp ah, 0AAh
  6463 00005390 0F8442000000        <2> 		je near shiftoff
  6464 00005396 80FCB6              <2> 		cmp ah, 0B6h
  6465 00005399 0F8439000000        <2> 		je near shiftoff
  6466 0000539F 80FC3A              <2> 		cmp ah, 3Ah
  6467 000053A2 0F84A5000000        <2> 		je near capslock
  6468 000053A8 80FC45              <2> 		cmp ah, 0x45
  6469 000053AB 0F84AD000000        <2> 		je near numlock
  6470 000053B1 80FC46              <2> 		cmp ah, 0x46
  6471 000053B4 0F84BC000000        <2> 		je near scrolllock
  6472 000053BA C3                  <2> 		ret
  6473                              <2> 	getkeyspecial:
  6474 000053BB C605[BF520000]E0    <2> 		mov byte [specialkey], 0xE0
  6475 000053C2 E933FFFFFF          <2> 		jmp calckey
  6476                              <2> 	shift:
  6477 000053C7 A0[2A530000]        <2> 		mov al, [uppercase]
  6478 000053CC 3C01                <2> 		cmp al, 1
  6479 000053CE 7308                <2> 		jae shiftoff
  6480                              <2> 	shifton:
  6481 000053D0 C605[2A530000]01    <2> 		mov byte [uppercase], 1
  6482 000053D7 C3                  <2> 		ret
  6483                              <2> 	shiftoff:
  6484 000053D8 C605[2A530000]00    <2> 		mov byte [uppercase], 0
  6485 000053DF C3                  <2> 		ret
  6486                              <2> 	ctron:
  6487 000053E0 C605[4C540000]01    <2> 		mov byte [ctrkey], 1
  6488 000053E7 C3                  <2> 		ret
  6489                              <2> 	ctroff:
  6490 000053E8 C605[4C540000]00    <2> 		mov byte [ctrkey], 0
  6491 000053EF C3                  <2> 		ret
  6492                              <2> 	alton:
  6493 000053F0 C605[4B540000]01    <2> 		mov byte [altkey], 1
  6494 000053F7 C3                  <2> 		ret
  6495                              <2> 	altoff:
  6496 000053F8 C605[4B540000]00    <2> 		mov byte [altkey], 0
  6497 000053FF C3                  <2> 		ret
  6498                              <2> 	entdown:
  6499 00005400 C3                  <2> 		ret
  6500                              <2> 	scanfound:
  6501 00005401 81C704000000        <2> 		add edi, 4
  6502 00005407 803D[4C540000]01    <2> 		cmp byte [ctrkey], 1
  6503 0000540E 731B                <2> 		jae altin
  6504 00005410 81EF04000000        <2> 		sub edi, 4
  6505 00005416 81C702000000        <2> 		add edi, 2
  6506 0000541C 803D[4B540000]01    <2> 		cmp byte [altkey], 1
  6507 00005423 7306                <2> 		jae altin
  6508 00005425 81EF02000000        <2> 		sub edi, 2
  6509                              <2> altin:
  6510 0000542B 81C701000000        <2> 		add edi, 1
  6511 00005431 803D[2A530000]01    <2> 		cmp byte [uppercase], 1
  6512 00005438 7306                <2> 		jae uppercaseon
  6513 0000543A 81EF01000000        <2> 		sub edi, 1
  6514                              <2> uppercaseon:
  6515 00005440 8A07                <2> 		mov al,[edi]
  6516 00005442 A2[AA270000]        <2> 		mov [lastkey], al
  6517 00005447 C3                  <2> 		ret
  6518                              <2> 		
  6519 00005448 00                  <2> keyboardstatus db 0
  6520 00005449 00                  <2> numlockstatus db 0
  6521 0000544A 00                  <2> scrolllockstatus db 0
  6522 0000544B 00                  <2> altkey db 0
  6523 0000544C 00                  <2> ctrkey db 0
  6524                              <2> 	capslock:
  6525 0000544D 8035[48540000]04    <2> 		xor byte [keyboardstatus], 00000100b
  6526 00005454 E835000000          <2> 		call updatekblights
  6527 00005459 E969FFFFFF          <2> 		jmp shift
  6528                              <2> 		
  6529                              <2> 	numlock:
  6530 0000545E 8035[48540000]02    <2> 		xor byte [keyboardstatus], 00000010b
  6531 00005465 8035[49540000]01    <2> 		xor byte [numlockstatus], 1
  6532 0000546C E81D000000          <2> 		call updatekblights
  6533 00005471 E969FEFFFF          <2> 		jmp getkey
  6534                              <2> 	
  6535                              <2> 	scrolllock:
  6536 00005476 8035[48540000]01    <2> 		xor byte [keyboardstatus], 00000001b
  6537 0000547D 8035[4A540000]01    <2> 		xor byte [scrolllockstatus], 1
  6538 00005484 E805000000          <2> 		call updatekblights
  6539 00005489 E951FEFFFF          <2> 		jmp getkey
  6540                              <2> 		
  6541                              <2> 	updatekblights:
  6542 0000548E B0ED                <2> 		mov al, 0xED
  6543 00005490 66BA6000            <2> 		mov dx, 0x60
  6544 00005494 EE                  <2> 		out dx, al
  6545                              <2> 	chkkbdack:
  6546 00005495 EC                  <2> 		in al, dx
  6547 00005496 3CFA                <2> 		cmp al, 0xFA
  6548 00005498 75FB                <2> 		jne chkkbdack
  6549 0000549A A0[48540000]        <2> 		mov al, [keyboardstatus]
  6550 0000549F EE                  <2> 		out dx, al
  6551 000054A0 C3                  <2> 		ret
  6552                              <2> 		
  6553                              <2> scancode:
  6554 000054A1 000000000000        <2> 	db 0,0,0,0,0,0				;0h
  6555 000054A7 000000000000        <2> 	db 0,0,0,0,0,0				;1h
  6556 000054AD 3121AD000000        <2> 	db '1','!',0xAD,0,0,0		;2h
  6557 000054B3 3240FDFB0000        <2> 	db '2','@',0xFD,0xFB,0,0	;3h
  6558 000054B9 332300000000        <2> 	db '3','#',0,0,0,0			;4h
  6559 000054BF 34249B9C0000        <2> 	db '4','$',0x9B,0x9C,0,0	;5h
  6560 000054C5 3525EE000000        <2> 	db '5','%',0xEE,0,0,0		;6h
  6561 000054CB 365EAC000000        <2> 	db '6','^',0xAC,0,0,0		;7h
  6562 000054D1 3726AB000000        <2> 	db '7','&',0xAB,0,0,0		;8h
  6563 000054D7 382AEC000000        <2> 	db '8','*',0xEC,0,0,0		;9h
  6564 000054DD 392800000000        <2> 	db '9','(',0,0,0,0			;0Ah
  6565 000054E3 302900000000        <2> 	db '0',')',0,0,0,0			;0Bh
  6566 000054E9 2D5F9DF10000        <2> 	db '-','_',0x9D,0xF1,0,0	;0Ch
  6567 000054EF 3D2BF7F60000        <2> 	db '=','+',0xF7,0xF6,0,0	;0Dh
  6568 000054F5 080800000000        <2> 	db 8,8,0,0,0,0				;0Eh
  6569 000054FB 000000000000        <2> 	db 0,0,0,0,0,0				;0Fh
  6570 00005501 7151848E0000        <2> 	db 'q','Q',0x84,0x8E,0,0	;10h
  6571 00005507 7757868F0000        <2> 	db 'w','W',0x86,0x8F,0,0	;11h
  6572 0000550D 65458290EE45        <2> 	db 'e','E',0x82,0x90,0xEE,'E'	;12h
  6573 00005513 7252898A7050        <2> 	db 'r','R',0x89,0x8A,'p','P'	;13h
  6574 00005519 7454819AE754        <2> 	db 't','T',0x81,0x9A,0xE7,'T'	;14h
  6575 0000551F 795998007559        <2> 	db 'y','Y',0x98,0,'u','Y'	;15h
  6576 00005525 7555A3970000        <2> 	db 'u','U',0xA3,0x97,0,0		;16h
  6577 0000552B 6949A18D6949        <2> 	db 'i','I',0xA1,0x8D,'i','I'	;17h
  6578 00005531 6F4FA29577EA        <2> 	db 'o','O',0xA2,0x95,'w',0xEA	;18h
  6579 00005537 70509499E3EF        <2> 	db 'p','P',0x94,0x99,0xE3,0xEF	;19h
  6580 0000553D 5B7BF4000000        <2> 	db '[','{',0xF4,0,0,0		;1Ah
  6581 00005543 5D7DF5000000        <2> 	db ']','}',0xF5,0,0,0		;1Bh
  6582 00005549 000000000000        <2> 	db 0,0,0,0,0,0				;1Ch
  6583 0000554F 000000000000        <2> 	db 0,0,0,0,0,0				;1Dh
  6584 00005555 6141A085E041        <2> 	db 'a','A',0xA0,133,224,'A'	;1Eh
  6585 0000555B 73531500E5E4        <2> 	db 's','S',21,0,229,228		;1Fh
  6586 00005561 6444F800EB7F        <2> 	db 'd','D',0xF8,0,235,127	;20h
  6587 00005567 66469F00EDE8        <2> 	db 'f','F',159,0,237,232	;21h
  6588 0000556D 6747000079E2        <2> 	db 'g','G',0,0,'y',226		;22h
  6589 00005573 684800006E48        <2> 	db 'h','H',0,0,'n','H'		;23h
  6590 00005579 6A4A00000000        <2> 	db 'j','J',0,0,0,0			;24h
  6591 0000557F 6B4B00006B4B        <2> 	db 'k','K',0,0,'k','K'		;25h
  6592 00005585 6C4C0000E9E9        <2> 	db 'l','L',0,0,233,233		;26h
  6593 0000558B 3B3A14000000        <2> 	db ';',':',20,0,0,0			;27h
  6594 00005591 272200000000        <2> 	db 27h,22h,0,0,0,0			;28h
  6595 00005597 607E00000000        <2> 	db '`','~',0,0,0,0			;29h
  6596 0000559D 000000000000        <2> 	db 0,0,0,0,0,0				;2Ah
  6597 000055A3 5C7CAAB30000        <2> 	db 92,'|',170,179,0,0		;2Bh
  6598 000055A9 7A5A91927A5A        <2> 	db 'z','Z',145,146,'z','Z'	;2Ch
  6599 000055AF 7858000000F0        <2> 	db 'x','X',0,0,0,240		;2Dh
  6600 000055B5 634387800000        <2> 	db 'c','C',135,128,0,0		;2Eh
  6601 000055BB 765600000000        <2> 	db 'v','V',0,0,0,0			;2Fh
  6602 000055C1 62420000E142        <2> 	db 'b','B',0,0,225,'B'		;30h
  6603 000055C7 6E4EA4A5764E        <2> 	db 'n','N',0xA4,0xA5,'v','N'	;31h
  6604 000055CD 6D4D0000E64D        <2> 	db 'm','M',0,0,230,'M'		;32h
  6605 000055D3 2C3CF3AE0000        <2> 	db ',','<',0xF3,174,0,0		;33h
  6606 000055D9 2E3EF2AF0000        <2> 	db '.','>',0xF2,175,0,0		;34h
  6607 000055DF 2F3FA8000000        <2> 	db '/','?',0xA8,0,0,0		;35h
  6608 000055E5 000000000000        <2> 	db 0,0,0,0,0,0				;36h
  6609 000055EB 000000000000        <2> 	db 0,0,0,0,0,0				;37h
  6610 000055F1 000000000000        <2> 	db 0,0,0,0,0,0				;38h
  6611 000055F7 202000000000        <2> 	db ' ',' ',0,0,0,0			;39h
  6612                              <2> noscan:
  6613                              <2> 
  6614                              <1> ;drivers will soon be handled intelligently
  6615                              <1> ;every driver's source will be scanned for a .init function
  6616                              <1> ;that will be called and if it returns 0
  6617                              <1> ;the hardware was found and the driver initialized properly
  6618                              <1> initialize:
  6619                              <1> ;Now I will initialise the interrupt controllers and remap irq's
  6620 000055FD E814000000          <1> 	call .pic
  6621 00005602 E83C000000          <1> 	call .pit
  6622 00005607 E85E000000          <1> 	call .fpu
  6623 0000560C 31C0                <1> 	xor eax, eax
  6624 0000560E 31C9                <1> 	xor ecx, ecx
  6625 00005610 E84EF6FFFF          <1> 	call sblaster.init
  6626 00005615 C3                  <1> 	ret
  6627                              <1> 	
  6628                              <1> .pic:
  6629 00005616 B011                <1> 	mov al, 0x11
  6630 00005618 E620                <1> 	out 0x20, al
  6631 0000561A E6A0                <1> 	out 0xA0, al
  6632 0000561C B040                <1> 	mov al, 0x40	;interrupt for master
  6633 0000561E E621                <1> 	out 0x21, al
  6634 00005620 B048                <1> 	mov al, 0x48	;interrupt for slave
  6635 00005622 E6A1                <1> 	out 0xA1, al
  6636 00005624 B004                <1> 	mov al, 4
  6637 00005626 E621                <1> 	out 0x21, al
  6638 00005628 B002                <1> 	mov al, 2
  6639 0000562A E6A1                <1> 	out 0xA1, al
  6640 0000562C B001                <1> 	mov al, 0x1
  6641 0000562E E621                <1> 	out 0x21, al
  6642 00005630 B001                <1> 	mov al, 0x1
  6643 00005632 E6A1                <1> 	out 0xA1, al
  6644                              <1> 	;masks are set to zero so as not to mask
  6645 00005634 30C0                <1> 	xor al, al
  6646 00005636 E621                <1> 	out 0x21, al
  6647 00005638 30C0                <1> 	xor al, al
  6648 0000563A E6A1                <1> 	out 0xA1, al
  6649 0000563C B020                <1> 	mov al, 0x20
  6650 0000563E E6A0                <1> 	out 0xA0, al
  6651 00005640 E620                <1> 	out 0x20, al
  6652 00005642 C3                  <1> 	ret
  6653                              <1> .pit:
  6654                              <1> 	;initialize the PIT
  6655 00005643 66A1[30060000]      <1> 	mov ax, [pitdiv] ;this is the divider for the PIT
  6656 00005649 E640                <1> 	out 0x40, al
  6657 0000564B 66C1C008            <1> 	rol ax, 8
  6658 0000564F E640                <1> 	out 0x40, al
  6659                              <1> 	;enable rtc interrupt
  6660 00005651 B00B                <1> 	mov al, 0xB
  6661 00005653 E670                <1> 	out 0x70, al
  6662 00005655 66C1C008            <1> 	rol ax, 8
  6663 00005659 E471                <1> 	in al, 0x71
  6664 0000565B 66C1C008            <1> 	rol ax, 8
  6665 0000565F E670                <1> 	out 0x70, al
  6666 00005661 66C1C008            <1> 	rol ax, 8
  6667 00005665 0C40                <1> 	or al, 0x40
  6668 00005667 E671                <1> 	out 0x71, al
  6669 00005669 C3                  <1> 	ret
  6670                              <1> .fpu:
  6671                              <1> 	;And now to initialize the fpu
  6672 0000566A 0F20E0              <1> 	mov eax, cr4
  6673 0000566D 0D00020000          <1> 	or eax, 0x200
  6674 00005672 0F22E0              <1> 	mov cr4, eax
  6675 00005675 B87F0B0000          <1> 	mov eax, 0xB7F
  6676 0000567A 50                  <1> 	push eax
  6677 0000567B D92C24              <1> 	fldcw [esp]
  6678 0000567E 58                  <1> 	pop eax
  6679 0000567F C3                  <1> 	ret
  6680                              <1> 	
  6681                                      %include 'source/gui.asm'
  6682                              <1> guiclear:
  6683 00005680 8B3D[BE8A0000]      <1> 	mov edi, [physbaseptr]
  6684 00005686 668B15[A88A0000]    <1> 	mov dx, [resolutionx]
  6685 0000568D 668B0D[AA8A0000]    <1> 	mov cx, [resolutiony]
  6686 00005694 66A1[BD560000]      <1> 	mov ax, [background]
  6687                              <1> guiclearloop:
  6688 0000569A 668907              <1> 	mov [edi], ax
  6689 0000569D 81C702000000        <1> 	add edi, 2
  6690 000056A3 664A                <1> 	dec dx
  6691 000056A5 6681FA0000          <1> 	cmp dx, 0
  6692 000056AA 77EE                <1> 	ja guiclearloop
  6693 000056AC 6649                <1> 	dec cx
  6694 000056AE 668B15[A88A0000]    <1> 	mov dx, [resolutionx]
  6695 000056B5 6681F90000          <1> 	cmp cx, 0
  6696 000056BA 77DE                <1> 	ja guiclearloop
  6697 000056BC C3                  <1> 	ret
  6698                              <1> 
  6699 000056BD CF7B                <1> background dw 0111101111001111b
  6700                              <1> 
  6701                              <1> gui:	;Let's see what I can do, I am going to try to make this as freestanding as possible
  6702 000056BF 31C0                <1> 	xor eax, eax
  6703 000056C1 31DB                <1> 	xor ebx, ebx
  6704 000056C3 31C9                <1> 	xor ecx, ecx
  6705 000056C5 31D2                <1> 	xor edx, edx
  6706 000056C7 8B3D[BE8A0000]      <1> 	mov edi, [physbaseptr]
  6707 000056CD 668B15[A88A0000]    <1> 	mov dx, [resolutionx]
  6708 000056D4 668B0D[AA8A0000]    <1> 	mov cx, [resolutiony]
  6709 000056DB 668B1D[BD560000]    <1> 	mov bx, [background]
  6710                              <1> guiclearloop2:
  6711 000056E2 66891F              <1> 	mov [edi], bx
  6712 000056E5 81C702000000        <1> 	add edi, 2
  6713 000056EB 664A                <1> 	dec dx
  6714 000056ED 6681FA0000          <1> 	cmp dx, 0
  6715 000056F2 0F85EAFFFFFF        <1> 	jne near guiclearloop2
  6716 000056F8 6649                <1> 	dec cx
  6717 000056FA 668B15[A88A0000]    <1> 	mov dx, [resolutionx]
  6718 00005701 6681F90000          <1> 	cmp cx, 0
  6719 00005706 0F85D6FFFFFF        <1> 	jne near guiclearloop2
  6720 0000570C C605[988B0000]01    <1> 	mov byte [guion], 1
  6721 00005713 C605[F1570000]00    <1> 	mov byte [mouseselecton], 0
  6722 0000571A 31C0                <1> 	xor eax, eax
  6723 0000571C 31DB                <1> 	xor ebx, ebx
  6724 0000571E 31C9                <1> 	xor ecx, ecx
  6725 00005720 31D2                <1> 	xor edx, edx
  6726                              <1> 	
  6727 00005722 BE[C9690000]        <1> 	mov esi, pacmsg
  6728 00005727 6631C0              <1> 	xor ax, ax
  6729 0000572A 31DB                <1> 	xor ebx, ebx
  6730 0000572C 66B99000            <1> 	mov cx, 144
  6731 00005730 66BA0400            <1> 	mov dx, 4
  6732 00005734 E8640A0000          <1> 	call showstring
  6733                              <1> 	
  6734 00005739 BE[046B0000]        <1> 	mov esi, interneticon
  6735 0000573E 6631C0              <1> 	xor ax, ax
  6736 00005741 BB[366A0000]        <1> 	mov ebx, noie
  6737 00005746 66B91800            <1> 	mov cx, 24
  6738 0000574A 66BA0400            <1> 	mov dx, 4
  6739 0000574E E8F40E0000          <1> 	call showicon
  6740                              <1> 	
  6741 00005753 BE[866B0000]        <1> 	mov esi, wordicon
  6742 00005758 6631C0              <1> 	xor ax, ax
  6743 0000575B 31DB                <1> 	xor ebx, ebx
  6744 0000575D 66B91800            <1> 	mov cx, 24
  6745 00005761 66BA3000            <1> 	mov dx, 48
  6746 00005765 E8DD0E0000          <1> 	call showicon
  6747                              <1> 	
  6748 0000576A BE[086C0000]        <1> 	mov esi, pacmanpellet
  6749 0000576F 6631C0              <1> 	xor ax, ax
  6750 00005772 31DB                <1> 	xor ebx, ebx
  6751 00005774 66B94000            <1> 	mov cx, 64
  6752 00005778 66BA0400            <1> 	mov dx, 4
  6753 0000577C E8C60E0000          <1> 	call showicon
  6754                              <1> 	
  6755 00005781 BE[0C6D0000]        <1> 	mov esi, pacman
  6756 00005786 6631C0              <1> 	xor ax, ax
  6757 00005789 BB[1F6A0000]        <1> 	mov ebx, pacmannomnom
  6758 0000578E 66B94000            <1> 	mov cx, 64
  6759 00005792 66BA3000            <1> 	mov dx, 48
  6760 00005796 E8AC0E0000          <1> 	call showicon
  6761                              <1> 	
  6762 0000579B BE[8A6C0000]        <1> 	mov esi, ghostie
  6763 000057A0 6631C0              <1> 	xor ax, ax
  6764 000057A3 BB[086A0000]        <1> 	mov ebx, boo
  6765 000057A8 66B96C00            <1> 	mov cx, 108
  6766 000057AC 66BA0400            <1> 	mov dx, 4
  6767 000057B0 E8920E0000          <1> 	call showicon
  6768                              <1> 
  6769 000057B5 BE[B5690000]        <1> 	mov esi, start
  6770 000057BA 668B0D[AA8A0000]    <1> 	mov cx, [resolutiony]
  6771 000057C1 6681E91000          <1> 	sub cx, 16
  6772 000057C6 66BA0200            <1> 	mov dx, 2
  6773 000057CA 30E4                <1> 	xor ah, ah
  6774 000057CC B010                <1> 	mov al, 00010000b
  6775 000057CE BB[B16A0000]        <1> 	mov ebx, winblows
  6776 000057D3 E8C5090000          <1> 	call showstring
  6777                              <1> 	
  6778 000057D8 E8EAF7FFFF          <1> 	call cursorgui
  6779                              <1> guistart:
  6780 000057DD E8FDFAFFFF          <1> 	call getkey
  6781 000057E2 C605[EB570000]00    <1> 	mov byte [copygui], 0
  6782 000057E9 EBF2                <1> 	jmp guistart
  6783                              <1> 	
  6784                              <1> ;guicopy:	;;for double buffering
  6785                              <1> ;	mov byte [copygui], 1
  6786                              <1> ;	mov edi, [offscreenmemoffset]
  6787                              <1> ;	xor edx, edx
  6788                              <1> ;	xor ecx, ecx
  6789                              <1> ;	mov dx, [mousecursorposition]
  6790                              <1> ;	mov cx, [mousecursorposition + 2]
  6791                              <1> ;	add edi, edx
  6792                              <1> ;	mov dx, [resolutionx2]
  6793                              <1> ;	inc cx
  6794                              <1> ;guicp2:
  6795                              <1> ;	add edi, edx
  6796                              <1> ;	dec cx
  6797                              <1> ;	cmp cx, 0
  6798                              <1> ;	jne guicp2
  6799                              <1> ;	sub edi, edx
  6800                              <1> ;	mov [cursorloc], edi
  6801                              <1> ;	mov ebx, cursorbmp
  6802                              <1> ;	mov cx, [resolutiony]
  6803                              <1> ;	rol ecx, 16
  6804                              <1> ;	mov cx, [resolutionx]
  6805                              <1> ;	mov esi, [physbaseptr]
  6806                              <1> ;	mov edi, [offscreenmemoffset]
  6807                              <1> ;guicp1:
  6808                              <1> ;	mov ax, [esi]
  6809                              <1> ;	mov [edi], ax
  6810                              <1> ;	add esi, 2
  6811                              <1> ;	add edi, 2
  6812                              <1> ;	cmp edi, [cursorloc]
  6813                              <1> ;	je copycursor
  6814                              <1> ;dncopycursor:
  6815                              <1> ;	dec cx
  6816                              <1> ;	cmp cx, 0
  6817                              <1> ;	jne guicp1
  6818                              <1> ;	mov cx, [resolutionx]
  6819                              <1> ;	rol ecx, 16
  6820                              <1> ;	dec cx
  6821                              <1> ;	cmp cx, 0
  6822                              <1> ;	rol ecx, 16
  6823                              <1> ;	jne guicp1
  6824                              <1> ;	mov byte [copygui], 0
  6825                              <1> ;	ret
  6826                              <1> ;copycursor:
  6827                              <1> ;	cmp ebx, cursorbmpend
  6828                              <1> ;	jae dncopycursor
  6829                              <1> ;	mov dx, [resolutionx2]
  6830                              <1> ;	add edi, edx
  6831                              <1> ;	mov [cursorloc], edi
  6832                              <1> ;	sub edi, edx
  6833                              <1> ;	dec ebx
  6834                              <1> ;	sub edi, 2
  6835                              <1> ;	sub esi, 2
  6836                              <1> ;	mov dx, 9
  6837                              <1> ;curscplp:
  6838                              <1> ;	inc ebx
  6839                              <1> ;	add esi, 2
  6840                              <1> ;	add edi, 2
  6841                              <1> ;	mov ax, [esi]
  6842                              <1> ;	mov [edi], ax
  6843                              <1> ;	mov al, [ebx]
  6844                              <1> ;	cmp al, 0
  6845                              <1> ;	je curscplp2
  6846                              <1> ;	mov word [edi], 1110011110011100b
  6847                              <1> ;curscplp2:
  6848                              <1> ;	dec cx
  6849                              <1> ;	cmp cx, 0
  6850                              <1> ;	je dncopycursor
  6851                              <1> ;	dec dx
  6852                              <1> ;	cmp dx, 0
  6853                              <1> ;	jne curscplp
  6854                              <1> ;	jmp dncopycursor
  6855                              <1> 	
  6856                              <1> 	
  6857                              <1> ;cursorloc: dd 0
  6858                              <1> 				
  6859 000057EB 00                  <1> copygui db 0
  6860 000057EC 00                  <1> graphicsset db 0
  6861 000057ED 0000                <1> graphicspos db 0,0
  6862 000057EF 00                  <1> showcursorfonton db 0
  6863 000057F0 00                  <1> savefonton db 0
  6864 000057F1 00                  <1> mouseselecton db 0
  6865                              <1> 
  6866                              <1> 		
  6867                              <1> clearmousecursor:
  6868 000057F2 BE[BD560000]        <1> 		mov esi, background
  6869 000057F7 8B3D[BE8A0000]      <1> 		mov edi, [physbaseptr]
  6870 000057FD 31D2                <1> 		xor edx, edx
  6871 000057FF 31C9                <1> 		xor ecx, ecx
  6872 00005801 668B15[A5510000]    <1> 		mov dx, [lastmouseposition]
  6873 00005808 668B0D[A7510000]    <1> 		mov cx, [lastmouseposition + 2]
  6874 0000580F 01D7                <1> 		add edi, edx
  6875 00005811 31D2                <1> 		xor edx, edx
  6876 00005813 668B15[968B0000]    <1> 		mov dx, [resolutionx2]
  6877 0000581A 6681F90000          <1> 		cmp cx, 0
  6878 0000581F 740B                <1> 		je noyclr
  6879 00005821 01D7                <1> yclr:	add edi, edx
  6880 00005823 6649                <1> 		dec cx
  6881 00005825 6681F90000          <1> 		cmp cx, 0
  6882 0000582A 75F5                <1> 		jne yclr
  6883 0000582C 668B06              <1> noyclr:	mov ax, [esi]
  6884 0000582F C1C010              <1> 		rol eax, 16
  6885 00005832 668B06              <1> 		mov ax, [esi]
  6886 00005835 8907                <1> 		mov [edi], eax
  6887 00005837 894704              <1> 		mov [edi + 4], eax
  6888 0000583A 894708              <1> 		mov [edi + 8], eax
  6889 0000583D 89470C              <1> 		mov [edi + 12], eax
  6890 00005840 01D7                <1> 		add edi, edx
  6891 00005842 6641                <1> 		inc cx
  6892 00005844 6681F91000          <1> 		cmp cx, 16
  6893 00005849 72E1                <1> 		jb noyclr
  6894 0000584B C3                  <1> 		ret
  6895                              <1> 
  6896                              <1> switchmousepos:		;;switch were the mouse is located
  6897 0000584C BE[FF9E0000]        <1> 		mov esi, mousecolorbuf
  6898 00005851 8B3D[BE8A0000]      <1> 		mov edi, [physbaseptr]
  6899 00005857 31D2                <1> 		xor edx, edx
  6900 00005859 31C9                <1> 		xor ecx, ecx
  6901 0000585B 668B15[A5510000]    <1> 		mov dx, [lastmouseposition]
  6902 00005862 668B0D[A7510000]    <1> 		mov cx, [lastmouseposition + 2]
  6903 00005869 01D7                <1> 		add edi, edx
  6904 0000586B 31D2                <1> 		xor edx, edx
  6905 0000586D 668B15[968B0000]    <1> 		mov dx, [resolutionx2]
  6906 00005874 6681F90000          <1> 		cmp cx, 0
  6907 00005879 740B                <1> 		je noswmsy
  6908 0000587B 01D7                <1> swmsy:		add edi, edx
  6909 0000587D 6649                <1> 		dec cx
  6910 0000587F 6681F90000          <1> 		cmp cx, 0
  6911 00005884 75F5                <1> 		jne swmsy
  6912 00005886 8B06                <1> noswmsy:	mov eax, [esi]
  6913 00005888 8B5E04              <1> 		mov ebx, [esi + 4]
  6914 0000588B 8907                <1> 		mov [edi], eax
  6915 0000588D 895F04              <1> 		mov [edi + 4], ebx
  6916 00005890 8B4608              <1> 		mov eax, [esi + 8]
  6917 00005893 8B5E0C              <1> 		mov ebx, [esi + 12]
  6918 00005896 894708              <1> 		mov [edi + 8], eax
  6919 00005899 895F0C              <1> 		mov [edi + 12], ebx
  6920 0000589C 01D7                <1> 		add edi, edx
  6921 0000589E 81C610000000        <1> 		add esi, 16
  6922 000058A4 81FE[FF9F0000]      <1> 		cmp esi, mcolorend
  6923 000058AA 72DA                <1> 		jb noswmsy
  6924                              <1> 		
  6925                              <1> switchmousepos2:
  6926 000058AC BE[FF9E0000]        <1> 		mov esi, mousecolorbuf
  6927 000058B1 8B3D[BE8A0000]      <1> 		mov edi, [physbaseptr]
  6928 000058B7 31D2                <1> 		xor edx, edx
  6929 000058B9 31C9                <1> 		xor ecx, ecx
  6930 000058BB 668B15[A9510000]    <1> 		mov dx, [mousecursorposition]
  6931 000058C2 668B0D[AB510000]    <1> 		mov cx, [mousecursorposition + 2]
  6932 000058C9 01D7                <1> 		add edi, edx
  6933 000058CB 31D2                <1> 		xor edx, edx
  6934 000058CD 668B15[968B0000]    <1> 		mov dx, [resolutionx2]
  6935 000058D4 6681F90000          <1> 		cmp cx, 0
  6936 000058D9 740B                <1> 		je noswmsy2
  6937 000058DB 01D7                <1> swmsy2:		add edi, edx
  6938 000058DD 6649                <1> 		dec cx
  6939 000058DF 6681F90000          <1> 		cmp cx, 0
  6940 000058E4 75F5                <1> 		jne swmsy2
  6941 000058E6 8B07                <1> noswmsy2:	mov eax, [edi]
  6942 000058E8 8B5F04              <1> 		mov ebx, [edi + 4]
  6943 000058EB 8906                <1> 		mov [esi], eax
  6944 000058ED 895E04              <1> 		mov [esi + 4], ebx
  6945 000058F0 8B4708              <1> 		mov eax, [edi + 8]
  6946 000058F3 8B5F0C              <1> 		mov ebx, [edi + 12]
  6947 000058F6 894608              <1> 		mov [esi + 8], eax
  6948 000058F9 895E0C              <1> 		mov [esi + 12], ebx
  6949 000058FC 01D7                <1> 		add edi, edx
  6950 000058FE 81C610000000        <1> 		add esi, 16
  6951 00005904 81FE[FF9F0000]      <1> 		cmp esi, mcolorend
  6952 0000590A 72DA                <1> 		jb noswmsy2
  6953 0000590C C3                  <1> 		ret
  6954                              <1> 
  6955 0000590D 00                  <1> pbutton db 0
  6956 0000590E 00                  <1> pLBUTTON db 0
  6957 0000590F 00                  <1> pRBUTTON db 0
  6958 00005910 00000000            <1> dragging dw 0,0
  6959 00005914 0000000000000000    <1> lastpos dw 0,0,0,0
  6960 0000591C 00000000            <1> colorbuf dw 0,0
  6961                              <1> 	
  6962                              <1> 	clickicon:
  6963 00005920 B001                <1> 		mov al, 1
  6964 00005922 A2[0D590000]        <1> 		mov [pbutton], al
  6965 00005927 A0[0E590000]        <1> 		mov al, [pLBUTTON]
  6966 0000592C 2205[BA520000]      <1> 		and al, [LBUTTON]
  6967 00005932 8A25[0F590000]      <1> 		mov ah, [pRBUTTON]
  6968 00005938 2225[BB520000]      <1> 		and ah, [RBUTTON]
  6969 0000593E 08E0                <1> 		or al, ah
  6970 00005940 3C00                <1> 		cmp al, 0
  6971 00005942 741B                <1> 		je nodragclick
  6972 00005944 813D[10590000]0100- <1> 		cmp dword [dragging], 1
  6973 0000594C 0000                <1>
  6974 0000594E 732D                <1> 		jae dragclick
  6975 00005950 C705[10590000]0100- <1> 		mov dword [dragging], 1
  6976 00005958 0000                <1>
  6977 0000595A E91E000000          <1> 		jmp dragclick
  6978                              <1> 	nodragclick:
  6979 0000595F C705[10590000]0000- <1> 		mov dword [dragging], 0
  6980 00005967 0000                <1>
  6981 00005969 A0[BA520000]        <1> 		mov al, [LBUTTON]
  6982 0000596E A2[0E590000]        <1> 		mov [pLBUTTON], al
  6983 00005973 A0[BB520000]        <1> 		mov al, [RBUTTON]
  6984 00005978 A2[0F590000]        <1> 		mov [pRBUTTON], al
  6985                              <1> 	dragclick:
  6986 0000597D 6631C0              <1> 		xor ax, ax
  6987 00005980 BE[FF9C0000]        <1> 		mov esi, graphicstable
  6988 00005985 C705[036A0000]0000- <1> 		mov dword [codepointer], 0
  6989 0000598D 0000                <1>
  6990                              <1> 	clicon2:
  6991 0000598F 31D2                <1> 		xor edx, edx
  6992 00005991 31C9                <1> 		xor ecx, ecx
  6993 00005993 66813E0100          <1> 		cmp word [esi], 1
  6994 00005998 0F841B000000        <1> 		je near iconselect
  6995 0000599E 66813E0200          <1> 		cmp word [esi], 2
  6996 000059A3 0F8472010000        <1> 		je near textselected
  6997 000059A9 66813E0300          <1> 		cmp word [esi], 3
  6998 000059AE 0F84C7020000        <1> 		je near windowselect
  6999 000059B4 E901040000          <1> 		jmp nexticonsel
  7000                              <1> 	iconselect:
  7001 000059B9 668B5606            <1> 		mov dx, [esi + 6]
  7002 000059BD 6689D0              <1> 		mov ax, dx
  7003 000059C0 668B4E08            <1> 		mov cx, [esi + 8]
  7004 000059C4 6689CB              <1> 		mov bx, cx
  7005 000059C7 6681C32000          <1> 		add bx, 32
  7006 000059CC 6601D0              <1> 		add ax, dx
  7007 000059CF 813D[10590000]0100- <1> 		cmp dword [dragging], 1
  7008 000059D7 0000                <1>
  7009 000059D9 746F                <1> 		je dragicon
  7010 000059DB 813D[10590000]0000- <1> 		cmp dword [dragging], 0
  7011 000059E3 0000                <1>
  7012 000059E5 7411                <1> 		je nodragiconcheck
  7013 000059E7 3935[10590000]      <1> 		cmp dword [dragging], esi
  7014 000059ED 0F85C7030000        <1> 		jne near nexticonsel
  7015 000059F3 E952000000          <1> 		jmp dragicon
  7016                              <1> 	nodragiconcheck:
  7017 000059F8 663905[A9510000]    <1> 		cmp [mousecursorposition], ax
  7018 000059FF 0F82B5030000        <1> 		jb near nexticonsel
  7019 00005A05 66054000            <1> 		add ax, 64
  7020 00005A09 663905[A9510000]    <1> 		cmp [mousecursorposition], ax
  7021 00005A10 0F87A4030000        <1> 		ja near nexticonsel
  7022 00005A16 6629D0              <1> 		sub ax, dx
  7023 00005A19 66390D[AB510000]    <1> 		cmp [mousecursorposition + 2], cx
  7024 00005A20 0F8294030000        <1> 		jb near nexticonsel
  7025 00005A26 66391D[AB510000]    <1> 		cmp [mousecursorposition + 2], bx
  7026 00005A2D 0F8787030000        <1> 		ja near nexticonsel
  7027 00005A33 668B460A            <1> 		mov ax, [esi + 10]
  7028 00005A37 66250100            <1> 		and ax, 1
  7029 00005A3B 663D0100            <1> 		cmp ax, 1
  7030 00005A3F 0F84B6000000        <1> 		je near unselecticon
  7031 00005A45 E98D000000          <1> 		jmp nodragicon
  7032                              <1> 	dragicon:
  7033 00005A4A 663905[A5510000]    <1> 		cmp [lastmouseposition], ax
  7034 00005A51 0F8263030000        <1> 		jb near nexticonsel
  7035 00005A57 66054000            <1> 		add ax, 64
  7036 00005A5B 663905[A5510000]    <1> 		cmp [lastmouseposition], ax
  7037 00005A62 0F8752030000        <1> 		ja near nexticonsel
  7038 00005A68 6629D0              <1> 		sub ax, dx
  7039 00005A6B 66390D[A7510000]    <1> 		cmp [lastmouseposition + 2], cx
  7040 00005A72 0F8242030000        <1> 		jb near nexticonsel
  7041 00005A78 66391D[A7510000]    <1> 		cmp [lastmouseposition + 2], bx
  7042 00005A7F 0F8735030000        <1> 		ja near nexticonsel
  7043 00005A85 668B460A            <1> 		mov ax, [esi + 10]
  7044 00005A89 2410                <1> 		and al, 00010000b
  7045 00005A8B 3C10                <1> 		cmp al, 00010000b
  7046 00005A8D 7448                <1> 		je nodragicon
  7047 00005A8F 8935[10590000]      <1> 		mov [dragging], esi
  7048 00005A95 66D1E2              <1> 		shl dx, 1
  7049 00005A98 662B15[A5510000]    <1> 		sub dx, [lastmouseposition]
  7050 00005A9F 660315[A9510000]    <1> 		add dx, [mousecursorposition]
  7051 00005AA6 66D1EA              <1> 		shr dx, 1
  7052 00005AA9 66030D[AB510000]    <1> 		add cx, [mousecursorposition + 2]
  7053 00005AB0 662B0D[A7510000]    <1> 		sub cx, [lastmouseposition + 2]
  7054 00005AB7 663B15[968B0000]    <1> 		cmp dx, [resolutionx2]
  7055 00005ABE 7607                <1> 		jbe chkyresdrgicn
  7056 00005AC0 668B15[A9510000]    <1> 		mov dx, [mousecursorposition]
  7057                              <1> 	chkyresdrgicn:
  7058 00005AC7 663B0D[AA8A0000]    <1> 		cmp cx, [resolutiony]
  7059 00005ACE 7607                <1> 		jbe nodragicon
  7060 00005AD0 668B0D[AB510000]    <1> 		mov cx, [mousecursorposition + 2]
  7061                              <1> 	nodragicon:
  7062 00005AD7 66814E0A0100        <1> 		or word [esi + 10], 1
  7063 00005ADD 8B5E0C              <1> 		mov ebx, [esi + 12]
  7064 00005AE0 668B460A            <1> 		mov ax, [esi + 10]
  7065 00005AE4 8B7602              <1> 		mov esi, [esi + 2]
  7066 00005AE7 C705[036A0000]0000- <1> 		mov dword [codepointer], 0
  7067 00005AEF 0000                <1>
  7068 00005AF1 E8510B0000          <1> 		call showicon
  7069 00005AF6 E9D8020000          <1> 		jmp doneiconsel
  7070                              <1> 	unselecticon:
  7071 00005AFB 6681660AFEFF        <1> 		and word [esi + 10], 0xFFFE
  7072 00005B01 8B5E0C              <1> 		mov ebx, [esi + 12]
  7073 00005B04 668B460A            <1> 		mov ax, [esi + 10]
  7074 00005B08 8B7602              <1> 		mov esi, [esi + 2]
  7075 00005B0B 891D[036A0000]      <1> 		mov [codepointer], ebx
  7076 00005B11 E8310B0000          <1> 		call showicon
  7077 00005B16 E9B8020000          <1> 		jmp doneiconsel
  7078                              <1> 	textselected:
  7079 00005B1B 8B5E02              <1> 		mov ebx, [esi + 2]
  7080 00005B1E 668B5606            <1> 		mov dx, [esi + 6]
  7081 00005B22 6689D0              <1> 		mov ax, dx
  7082 00005B25 668B4E08            <1> 		mov cx, [esi + 8]
  7083                              <1> 	lengthtesttext:
  7084 00005B29 803B00              <1> 		cmp byte [ebx], 0
  7085 00005B2C 7407                <1> 		je donetesttextlength
  7086 00005B2E 43                  <1> 		inc ebx
  7087 00005B2F 66051000            <1> 		add ax, 16
  7088 00005B33 EBF4                <1> 		jmp lengthtesttext
  7089                              <1> 	donetesttextlength:
  7090 00005B35 6689CB              <1> 		mov bx, cx
  7091 00005B38 6681C30F00          <1> 		add bx, 15
  7092 00005B3D 813D[10590000]0100- <1> 		cmp dword [dragging], 1
  7093 00005B45 0000                <1>
  7094 00005B47 7468                <1> 		je dragtext
  7095 00005B49 813D[10590000]0000- <1> 		cmp dword [dragging], 0
  7096 00005B51 0000                <1>
  7097 00005B53 7411                <1> 		je nodragtextcheck
  7098 00005B55 3935[10590000]      <1> 		cmp dword [dragging], esi
  7099 00005B5B 0F8559020000        <1> 		jne near nexticonsel
  7100 00005B61 E94B000000          <1> 		jmp dragtext
  7101                              <1> 	nodragtextcheck:
  7102 00005B66 663915[A9510000]    <1> 		cmp [mousecursorposition], dx
  7103 00005B6D 0F8247020000        <1> 		jb near nexticonsel
  7104 00005B73 663905[A9510000]    <1> 		cmp [mousecursorposition], ax
  7105 00005B7A 0F873A020000        <1> 		ja near nexticonsel
  7106 00005B80 66390D[AB510000]    <1> 		cmp [mousecursorposition + 2], cx
  7107 00005B87 0F822D020000        <1> 		jb near nexticonsel
  7108 00005B8D 66391D[AB510000]    <1> 		cmp [mousecursorposition + 2], bx
  7109 00005B94 0F8720020000        <1> 		ja near nexticonsel
  7110 00005B9A 668B460A            <1> 		mov ax, [esi + 10]
  7111 00005B9E 66250100            <1> 		and ax, 1
  7112 00005BA2 663D0100            <1> 		cmp ax, 1
  7113 00005BA6 0F84AB000000        <1> 		je near unselecttext
  7114 00005BAC E986000000          <1> 		jmp nodragtext
  7115                              <1> 	dragtext:
  7116 00005BB1 663915[A5510000]    <1> 		cmp [lastmouseposition], dx
  7117 00005BB8 0F82FC010000        <1> 		jb near nexticonsel
  7118 00005BBE 663905[A5510000]    <1> 		cmp [lastmouseposition], ax
  7119 00005BC5 0F87EF010000        <1> 		ja near nexticonsel
  7120 00005BCB 66390D[A7510000]    <1> 		cmp [lastmouseposition + 2], cx
  7121 00005BD2 0F82E2010000        <1> 		jb near nexticonsel
  7122 00005BD8 66391D[A7510000]    <1> 		cmp [lastmouseposition + 2], bx
  7123 00005BDF 0F87D5010000        <1> 		ja near nexticonsel
  7124 00005BE5 668B460A            <1> 		mov ax, [esi + 10]
  7125 00005BE9 2410                <1> 		and al, 00010000b
  7126 00005BEB 663D1000            <1> 		cmp ax, 00010000b
  7127 00005BEF 0F8442000000        <1> 		je near nodragtext
  7128 00005BF5 8935[10590000]      <1> 		mov [dragging], esi
  7129 00005BFB 662B15[A5510000]    <1> 		sub dx, [lastmouseposition]
  7130 00005C02 660315[A9510000]    <1> 		add dx, [mousecursorposition]
  7131 00005C09 66030D[AB510000]    <1> 		add cx, [mousecursorposition + 2]
  7132 00005C10 662B0D[A7510000]    <1> 		sub cx, [lastmouseposition + 2]
  7133 00005C17 663B15[968B0000]    <1> 		cmp dx, [resolutionx2]
  7134 00005C1E 7607                <1> 		jbe chkyresdrgtxt
  7135 00005C20 668B15[A9510000]    <1> 		mov dx, [mousecursorposition]
  7136                              <1> 	chkyresdrgtxt:
  7137 00005C27 663B0D[AA8A0000]    <1> 		cmp cx, [resolutiony]
  7138 00005C2E 7607                <1> 		jbe nodragtext
  7139 00005C30 668B0D[AB510000]    <1> 		mov cx, [mousecursorposition + 2]
  7140                              <1> 	nodragtext:
  7141 00005C37 66814E0A0100        <1> 		or word [esi + 10], 1
  7142 00005C3D 8B5E0C              <1> 		mov ebx, [esi + 12]
  7143 00005C40 891D[036A0000]      <1> 		mov [codepointer], ebx
  7144 00005C46 668B460A            <1> 		mov ax, [esi + 10]
  7145 00005C4A 8B7602              <1> 		mov esi, [esi + 2]
  7146 00005C4D E84B050000          <1> 		call showstring
  7147 00005C52 E97C010000          <1> 		jmp doneiconsel
  7148                              <1> 	unselecttext:
  7149 00005C57 6681660AFEFF        <1> 		and word [esi + 10], 0xFFFE
  7150 00005C5D 8B5E0C              <1> 		mov ebx, [esi + 12]
  7151 00005C60 668B460A            <1> 		mov ax, [esi + 10]
  7152 00005C64 8B7602              <1> 		mov esi, [esi + 2]
  7153 00005C67 C705[036A0000]0000- <1> 		mov dword [codepointer], 0
  7154 00005C6F 0000                <1>
  7155 00005C71 E827050000          <1> 		call showstring
  7156 00005C76 E958010000          <1> 		jmp doneiconsel
  7157                              <1> windowselect:
  7158 00005C7B 8B7E02              <1> 		mov edi, [esi + 2]
  7159 00005C7E 668B5606            <1> 		mov dx, [esi + 6]
  7160 00005C82 6689D0              <1> 		mov ax, dx
  7161 00005C85 668B4E08            <1> 		mov cx, [esi + 8]
  7162 00005C89 6689CB              <1> 		mov bx, cx
  7163 00005C8C 6681C31000          <1> 		add bx, 16
  7164 00005C91 813D[10590000]0100- <1> 		cmp dword [dragging], 1
  7165 00005C99 0000                <1>
  7166 00005C9B 746D                <1> 		je dragwin
  7167 00005C9D 813D[10590000]0000- <1> 		cmp dword [dragging], 0
  7168 00005CA5 0000                <1>
  7169 00005CA7 7411                <1> 		je nodragwincheck
  7170 00005CA9 3935[10590000]      <1> 		cmp dword [dragging], esi
  7171 00005CAF 0F8505010000        <1> 		jne near nexticonsel
  7172 00005CB5 E950000000          <1> 		jmp dragwin
  7173                              <1> 	nodragwincheck:
  7174 00005CBA 663905[A9510000]    <1> 		cmp [mousecursorposition], ax
  7175 00005CC1 0F82F3000000        <1> 		jb near nexticonsel
  7176 00005CC7 660307              <1> 		add ax, [edi]
  7177 00005CCA 660307              <1> 		add ax, [edi]
  7178 00005CCD 663905[A9510000]    <1> 		cmp [mousecursorposition], ax
  7179 00005CD4 0F87E0000000        <1> 		ja near nexticonsel
  7180 00005CDA 66390D[AB510000]    <1> 		cmp [mousecursorposition + 2], cx
  7181 00005CE1 0F82D3000000        <1> 		jb near nexticonsel
  7182 00005CE7 66391D[AB510000]    <1> 		cmp [mousecursorposition + 2], bx
  7183 00005CEE 0F87C6000000        <1> 		ja near nexticonsel
  7184 00005CF4 662D1400            <1> 		sub ax, 20
  7185 00005CF8 663905[A9510000]    <1> 		cmp [mousecursorposition], ax
  7186 00005CFF 0F8795000000        <1> 		ja near killwin
  7187 00005D05 E97C000000          <1> 		jmp nodragwin
  7188                              <1> 	dragwin:
  7189 00005D0A 663905[A5510000]    <1> 		cmp [lastmouseposition], ax
  7190 00005D11 0F82A3000000        <1> 		jb near nexticonsel
  7191 00005D17 660307              <1> 		add ax, [edi]
  7192 00005D1A 660307              <1> 		add ax, [edi]
  7193 00005D1D 663905[A5510000]    <1> 		cmp [lastmouseposition], ax
  7194 00005D24 0F8790000000        <1> 		ja near nexticonsel
  7195 00005D2A 66390D[A7510000]    <1> 		cmp [lastmouseposition + 2], cx
  7196 00005D31 0F8283000000        <1> 		jb near nexticonsel
  7197 00005D37 66391D[A7510000]    <1> 		cmp [lastmouseposition + 2], bx
  7198 00005D3E 0F8776000000        <1> 		ja near nexticonsel
  7199 00005D44 8935[10590000]      <1> 		mov [dragging], esi
  7200 00005D4A 662B15[A5510000]    <1> 		sub dx, [lastmouseposition]
  7201 00005D51 660315[A9510000]    <1> 		add dx, [mousecursorposition]
  7202 00005D58 66030D[AB510000]    <1> 		add cx, [mousecursorposition + 2]
  7203 00005D5F 662B0D[A7510000]    <1> 		sub cx, [lastmouseposition + 2]
  7204 00005D66 663B15[968B0000]    <1> 		cmp dx, [resolutionx2]
  7205 00005D6D 7607                <1> 		jbe chkyresdrgwin
  7206 00005D6F 668B15[A9510000]    <1> 		mov dx, [mousecursorposition]
  7207                              <1> 	chkyresdrgwin:
  7208 00005D76 663B0D[AA8A0000]    <1> 		cmp cx, [resolutiony]
  7209 00005D7D 7607                <1> 		jbe nodragwin
  7210 00005D7F 668B0D[AB510000]    <1> 		mov cx, [mousecursorposition + 2]
  7211                              <1> 	nodragwin:
  7212 00005D86 8B5E0C              <1> 		mov ebx, [esi + 12]
  7213 00005D89 668B460A            <1> 		mov ax, [esi + 10]
  7214 00005D8D 8B7602              <1> 		mov esi, [esi + 2]
  7215 00005D90 E870040000          <1> 		call showwindow
  7216 00005D95 E939000000          <1> 		jmp doneiconsel
  7217                              <1> 	killwin:
  7218 00005D9A 66C7060000          <1> 		mov word [esi], 0
  7219 00005D9F C605[C6270000]00    <1> 		mov byte [termguion], 0
  7220 00005DA6 E8D5F8FFFF          <1> 		call guiclear
  7221 00005DAB E8A7000000          <1> 		call reloadallgraphics
  7222 00005DB0 E928FAFFFF          <1> 		jmp guistart
  7223 00005DB5 E93A000000          <1> 		jmp doneiconsel2
  7224                              <1> 	nexticonsel:
  7225 00005DBA 6681660AFEFF        <1> 		and word [esi + 10], 0xFFFE
  7226 00005DC0 81C610000000        <1> 		add esi, 16
  7227 00005DC6 81FE[FF9E0000]      <1> 		cmp esi, graphicstableend
  7228 00005DCC 7305                <1> 		jae doneiconsel
  7229 00005DCE E9BCFBFFFF          <1> 		jmp clicon2
  7230                              <1> 	doneiconsel:
  7231 00005DD3 813D[10590000]0100- <1> 		cmp dword [dragging], 1
  7232 00005DDB 0000                <1>
  7233 00005DDD 7315                <1> 		jae doneiconsel2
  7234 00005DDF 813D[036A0000]0000- <1> 		cmp dword [codepointer], 0
  7235 00005DE7 0000                <1>
  7236 00005DE9 7409                <1> 		je doneiconsel2
  7237 00005DEB 8B1D[036A0000]      <1> 		mov ebx, [codepointer]
  7238 00005DF1 FFD3                <1> 		call ebx 
  7239 00005DF3 C3                  <1> 		ret
  7240                              <1> 	doneiconsel2:
  7241 00005DF4 A0[BA520000]        <1> 		mov al, [LBUTTON]
  7242 00005DF9 A2[0E590000]        <1> 		mov [pLBUTTON], al
  7243 00005DFE A0[BB520000]        <1> 		mov al, [RBUTTON]
  7244 00005E03 A2[0F590000]        <1> 		mov [pRBUTTON], al
  7245 00005E08 66813D[10590000]01- <1> 		cmp word [dragging], 1
  7246 00005E10 00                  <1>
  7247 00005E11 0F860A000000        <1> 		jbe near noreloadgraphicsclick
  7248 00005E17 E8D6F9FFFF          <1> call clearmousecursor
  7249 00005E1C E836000000          <1> call reloadallgraphics
  7250                              <1> noreloadgraphicsclick:
  7251 00005E21 31C9                <1> 		xor ecx, ecx
  7252 00005E23 31D2                <1> 		xor edx, edx
  7253 00005E25 30E4                <1> 		xor ah, ah
  7254 00005E27 B0FE                <1> 		mov al, 254
  7255 00005E29 668B15[A9510000]    <1> 		mov dx, [mousecursorposition]
  7256 00005E30 668B0D[AB510000]    <1> 		mov cx, [mousecursorposition + 2]
  7257 00005E37 66BBE738            <1> 		mov bx, 0011100011100111b
  7258 00005E3B C605[EF570000]01    <1> 		mov byte [showcursorfonton], 1
  7259 00005E42 E8DA080000          <1> 		call showfontvesa
  7260 00005E47 C605[EF570000]00    <1> 		mov byte [showcursorfonton], 0
  7261 00005E4E C3                  <1> 		ret
  7262 00005E4F 00000000            <1> lastdrag dw 0,0
  7263 00005E53 00000000            <1> grpctblpos dw 0,0
  7264                              <1> 
  7265                              <1> reloadallgraphics:
  7266 00005E57 BF[FF9C0000]        <1> 		mov edi, graphicstable
  7267                              <1> reloadgraphicsloop:
  7268 00005E5C 8B7702              <1> 		mov esi, [edi + 2]
  7269 00005E5F 668B5706            <1> 		mov dx, [edi + 6]
  7270 00005E63 668B4F08            <1> 		mov cx, [edi + 8]
  7271 00005E67 668B07              <1> 		mov ax, [edi]
  7272 00005E6A 668B5F0A            <1> 		mov bx, [edi + 10]
  7273 00005E6E 893D[535E0000]      <1> 		mov [grpctblpos], edi
  7274 00005E74 3B3D[10590000]      <1> 		cmp edi, [dragging]
  7275 00005E7A 741E                <1> 		je loadedgraphic
  7276 00005E7C 663D0100            <1> 		cmp ax, 1
  7277 00005E80 0F8436000000        <1> 		je near icongraphic
  7278 00005E86 663D0200            <1> 		cmp ax, 2
  7279 00005E8A 0F843C000000        <1> 		je near stringgraphic
  7280 00005E90 663D0300            <1> 		cmp ax, 3
  7281 00005E94 0F8416000000        <1> 		je near windowgraphic
  7282 00005E9A 8B3D[535E0000]      <1> loadedgraphic:  mov edi, [grpctblpos]
  7283 00005EA0 81C710000000        <1> 		add edi, 16
  7284 00005EA6 81FF[FF9E0000]      <1> 		cmp edi, graphicstableend
  7285 00005EAC 732E                <1> 		jae donereloadgraphics
  7286 00005EAE EBAC                <1> 		jmp reloadgraphicsloop
  7287 00005EB0 E8F8030000          <1> windowgraphic:	call showwindow2
  7288 00005EB5 E8F3C4FFFF          <1> 		call cleardouble
  7289 00005EBA EBDE                <1> 		jmp loadedgraphic
  7290 00005EBC 80E301              <1> icongraphic:	and bl, 1
  7291 00005EBF 881D[076A0000]      <1> 		mov [iconselected], bl
  7292 00005EC5 E890070000          <1> 		call showicon2
  7293 00005ECA EBCE                <1> 		jmp loadedgraphic
  7294 00005ECC 80E301              <1> stringgraphic:  and bl, 1
  7295 00005ECF 881D[F1570000]      <1> 		mov [mouseselecton], bl
  7296 00005ED5 E8D6020000          <1> 		call showstring2
  7297 00005EDA EBBE                <1> 		jmp loadedgraphic
  7298                              <1> donereloadgraphics:
  7299 00005EDC 8B3D[10590000]      <1> 		mov edi, [dragging]
  7300 00005EE2 81FF[FF9C0000]      <1> 		cmp edi, graphicstable
  7301 00005EE8 7226                <1> 		jb notcorrectdrag
  7302 00005EEA 668B07              <1> 		mov ax, [edi]
  7303 00005EED 8B7702              <1> 		mov esi, [edi + 2]
  7304 00005EF0 668B5706            <1> 		mov dx, [edi + 6]
  7305 00005EF4 668B4F08            <1> 		mov cx, [edi + 8]
  7306 00005EF8 668B5F0A            <1> 		mov bx, [edi + 10]
  7307 00005EFC 663D0100            <1> 		cmp ax, 1
  7308 00005F00 750F                <1> 		jne noticondragging
  7309 00005F02 80E301              <1> 		and bl, 1
  7310 00005F05 881D[076A0000]      <1> 		mov [iconselected], bl
  7311 00005F0B E84A070000          <1> 		call showicon2
  7312                              <1> notcorrectdrag:
  7313 00005F10 C3                  <1> 		ret
  7314                              <1> 
  7315                              <1> 	noticondragging:
  7316 00005F11 663D0200            <1> 		cmp ax, 2
  7317 00005F15 75F9                <1> 		jne notcorrectdrag
  7318 00005F17 80E301              <1> 		and bl, 1
  7319 00005F1A 881D[F1570000]      <1> 		mov [mouseselecton], bl
  7320 00005F20 E88B020000          <1> 		call showstring2
  7321 00005F25 EBE9                <1> 		jmp notcorrectdrag
  7322                              <1> 
  7323 00005F27 00<rept>            <1> grphbuf times 16 db 0
  7324                              <1> 	graphicsadd:
  7325 00005F37 BF[FF9C0000]        <1> 		mov edi, graphicstable
  7326                              <1> 	shwgrph1:
  7327 00005F3C 397702              <1> 		cmp dword [edi + 2], esi
  7328 00005F3F 7414                <1> 		je showgraphicsreplace2
  7329 00005F41 81C710000000        <1> 		add edi, 16
  7330 00005F47 81FF[FF9E0000]      <1> 		cmp edi, graphicstableend
  7331 00005F4D 0F832F020000        <1> 		jae near showgraphicsnew
  7332 00005F53 EBE7                <1> 		jmp shwgrph1
  7333                              <1> 	showgraphicsreplace2:
  7334 00005F55 8935[295F0000]      <1> 		mov [grphbuf + 2], esi
  7335 00005F5B 668915[2D5F0000]    <1> 		mov [grphbuf + 6], dx
  7336 00005F62 66890D[2F5F0000]    <1> 		mov [grphbuf + 8], cx
  7337 00005F69 891D[335F0000]      <1> 		mov [grphbuf + 12], ebx
  7338 00005F6F 30FF                <1> 		xor bh, bh
  7339 00005F71 88E3                <1> 		mov bl, ah
  7340 00005F73 30E4                <1> 		xor ah, ah
  7341 00005F75 66A3[315F0000]      <1> 		mov [grphbuf + 10], ax	
  7342 00005F7B 66891D[275F0000]    <1> 		mov [grphbuf], bx
  7343 00005F82 66A1[275F0000]      <1> 		mov ax, [grphbuf]
  7344 00005F88 663D0100            <1> 		cmp ax, 1
  7345 00005F8C 0F8419000000        <1> 		je near replaceicon
  7346 00005F92 663D0200            <1> 		cmp ax, 2
  7347 00005F96 0F8493000000        <1> 		je near replacestring
  7348 00005F9C 663D0300            <1> 		cmp ax, 3
  7349 00005FA0 0F840F010000        <1> 		je near replacewindow
  7350 00005FA6 E9B4010000          <1> 		jmp showgraphicsreplace
  7351                              <1> 	replaceicon:
  7352 00005FAB 893D[14590000]      <1> 		mov [lastpos], edi
  7353 00005FB1 8935[18590000]      <1> 		mov [lastpos + 4], esi
  7354 00005FB7 8B7702              <1> 		mov esi, [edi + 2]
  7355 00005FBA 668B5F0C            <1> 		mov bx, [edi + 12]
  7356 00005FBE 668B5706            <1> 		mov dx, [edi + 6]
  7357 00005FC2 668B4F08            <1> 		mov cx, [edi + 8]
  7358 00005FC6 668B06              <1> 		mov ax, [esi]
  7359 00005FC9 66A3[1C590000]      <1> 		mov [colorbuf], ax
  7360 00005FCF 66A1[BD560000]      <1> 		mov ax, [background]
  7361 00005FD5 668906              <1> 		mov [esi], ax
  7362 00005FD8 8B5F0C              <1> 		mov ebx, [edi + 12]
  7363 00005FDB 668B470A            <1> 		mov ax, [edi + 10]
  7364 00005FDF 2401                <1> 		and al, 1
  7365 00005FE1 A2[076A0000]        <1> 		mov [iconselected], al
  7366 00005FE6 668B470A            <1> 		mov ax, [edi + 10]
  7367 00005FEA E86B060000          <1> 		call showicon2
  7368 00005FEF 8B3D[14590000]      <1> 		mov edi, [lastpos]
  7369 00005FF5 8B7702              <1> 		mov esi, [edi + 2]
  7370 00005FF8 66A1[1C590000]      <1> 		mov ax, [colorbuf]
  7371 00005FFE 668906              <1> 		mov [esi], ax
  7372 00006001 8B35[18590000]      <1> 		mov esi, [lastpos + 4]
  7373 00006007 668B15[2D5F0000]    <1> 		mov dx, [grphbuf + 6]
  7374 0000600E 668B0D[2F5F0000]    <1> 		mov cx, [grphbuf + 8]
  7375 00006015 668B1D[275F0000]    <1> 		mov bx, [grphbuf]
  7376 0000601C 66A1[315F0000]      <1> 		mov ax, [grphbuf + 10]
  7377 00006022 88DC                <1> 		mov ah, bl
  7378 00006024 8B1D[335F0000]      <1> 		mov ebx, [grphbuf + 12]
  7379 0000602A E930010000          <1> 		jmp showgraphicsreplace
  7380                              <1> 	replacestring:
  7381 0000602F 893D[14590000]      <1> 		mov [lastpos], edi
  7382 00006035 8935[18590000]      <1> 		mov [lastpos + 4], esi
  7383 0000603B 8B5F0C              <1> 		mov ebx, [edi + 12]
  7384 0000603E 8B7702              <1> 		mov esi, [edi + 2]
  7385 00006041 668B5706            <1> 		mov dx, [edi + 6]
  7386 00006045 668B4F08            <1> 		mov cx, [edi + 8]
  7387 00006049 66A1[E8610000]      <1> 		mov ax, [colorfont2]
  7388 0000604F 66A3[1C590000]      <1> 		mov [colorbuf], ax
  7389 00006055 66A1[BD560000]      <1> 		mov ax, [background]
  7390 0000605B 66A3[E8610000]      <1> 		mov [colorfont2], ax		
  7391 00006061 8B5F0C              <1> 		mov ebx, [edi + 12]
  7392 00006064 668B470A            <1> 		mov ax, [edi + 10]
  7393 00006068 2401                <1> 		and al, 1
  7394 0000606A A2[F1570000]        <1> 		mov [mouseselecton], al
  7395 0000606F 668B470A            <1> 		mov ax, [edi + 10]
  7396 00006073 E838010000          <1> 		call showstring2
  7397 00006078 66A1[1C590000]      <1> 		mov ax, [colorbuf]
  7398 0000607E 66A3[E8610000]      <1> 		mov [colorfont2], ax
  7399 00006084 8B3D[14590000]      <1> 		mov edi, [lastpos]
  7400 0000608A 8B7702              <1> 		mov esi, [edi + 2]
  7401 0000608D 668B15[2D5F0000]    <1> 		mov dx, [grphbuf + 6]
  7402 00006094 668B0D[2F5F0000]    <1> 		mov cx, [grphbuf + 8]
  7403 0000609B 668B1D[275F0000]    <1> 		mov bx, [grphbuf]
  7404 000060A2 66A1[315F0000]      <1> 		mov ax, [grphbuf + 10]
  7405 000060A8 88DC                <1> 		mov ah, bl
  7406 000060AA 8B1D[335F0000]      <1> 		mov ebx, [grphbuf + 12]
  7407 000060B0 E9AA000000          <1> 		jmp showgraphicsreplace
  7408                              <1> 	replacewindow:
  7409 000060B5 893D[14590000]      <1> 		mov [lastpos], edi
  7410 000060BB 8935[18590000]      <1> 		mov [lastpos + 4], esi
  7411 000060C1 8B7702              <1> 		mov esi, [edi + 2]
  7412 000060C4 8B3D[F7610000]      <1> 		mov edi, [windowbufloc]
  7413 000060CA 31D2                <1> 		xor edx, edx
  7414 000060CC 668B15[968B0000]    <1> 		mov dx, [resolutionx2]
  7415 000060D3 C1E204              <1> 		shl edx, 4
  7416 000060D6 29D7                <1> 		sub edi, edx
  7417 000060D8 31D2                <1> 		xor edx, edx
  7418 000060DA 668B16              <1> 		mov dx, [esi]
  7419 000060DD 660316              <1> 		add dx, [esi]
  7420 000060E0 668B4E02            <1> 		mov cx, [esi + 2]
  7421 000060E4 6681C11000          <1> 		add cx, 16
  7422 000060E9 66A1[BD560000]      <1> 		mov ax, [background]
  7423                              <1> 	clearwindow:
  7424 000060EF 668907              <1> 		mov [edi], ax
  7425 000060F2 81C702000000        <1> 		add edi, 2
  7426 000060F8 81EA02000000        <1> 		sub edx, 2
  7427 000060FE 81FA00000000        <1> 		cmp edx, 0
  7428 00006104 75E9                <1> 		jne clearwindow
  7429 00006106 6649                <1> 		dec cx
  7430 00006108 668B15[968B0000]    <1> 		mov dx, [resolutionx2]
  7431 0000610F 662B16              <1> 		sub dx, [esi]
  7432 00006112 662B16              <1> 		sub dx, [esi]
  7433 00006115 01D7                <1> 		add edi, edx
  7434 00006117 668B16              <1> 		mov dx, [esi]
  7435 0000611A 660316              <1> 		add dx, [esi]
  7436 0000611D 6681F90000          <1> 		cmp cx, 0
  7437 00006122 75CB                <1> 		jne clearwindow
  7438 00006124 C605[C7270000]00    <1> 		mov byte [termcopyon], 0
  7439 0000612B 8B3D[14590000]      <1> 		mov edi, [lastpos]
  7440 00006131 8B35[295F0000]      <1> 		mov esi, [grphbuf + 2]
  7441 00006137 668B15[2D5F0000]    <1> 		mov dx, [grphbuf + 6]
  7442 0000613E 668B0D[2F5F0000]    <1> 		mov cx, [grphbuf + 8]
  7443 00006145 668B1D[275F0000]    <1> 		mov bx, [grphbuf]
  7444 0000614C 66A1[315F0000]      <1> 		mov ax, [grphbuf + 10]
  7445 00006152 88DC                <1> 		mov ah, bl
  7446 00006154 8B1D[335F0000]      <1> 		mov ebx, [grphbuf + 12]
  7447 0000615A E900000000          <1> 		jmp showgraphicsreplace
  7448                              <1> 	showgraphicsreplace:
  7449 0000615F 897702              <1> 		mov [edi + 2], esi
  7450 00006162 66895706            <1> 		mov [edi + 6], dx
  7451 00006166 66894F08            <1> 		mov [edi + 8], cx
  7452 0000616A 895F0C              <1> 		mov [edi + 12], ebx
  7453 0000616D 30FF                <1> 		xor bh, bh
  7454 0000616F 88E3                <1> 		mov bl, ah
  7455 00006171 30E4                <1> 		xor ah, ah
  7456 00006173 6689470A            <1> 		mov [edi + 10], ax
  7457 00006177 66891F              <1> 		mov [edi], bx
  7458 0000617A 8B5F0C              <1> 		mov ebx, [edi + 12]
  7459 0000617D 668B470A            <1> 		mov ax, [edi + 10]
  7460 00006181 C3                  <1> 		ret
  7461                              <1> 	showgraphicsnew:
  7462 00006182 BF[FF9C0000]        <1> 		mov edi, graphicstable
  7463                              <1> 	shwgrph2:
  7464 00006187 66813F0000          <1> 		cmp word [edi], 0
  7465 0000618C 74D1                <1> 		je showgraphicsreplace
  7466 0000618E 81C710000000        <1> 		add edi, 16
  7467 00006194 81FF[FF9E0000]      <1> 		cmp edi, graphicstableend
  7468 0000619A 72EB                <1> 		jb shwgrph2
  7469                              <1> 	showgraphicsdone:
  7470 0000619C C3                  <1> 		ret
  7471                              <1> 
  7472                              <1> 	showstring:
  7473 0000619D A2[F1570000]        <1> 		mov [mouseselecton], al
  7474 000061A2 8025[F1570000]01    <1> 		and byte [mouseselecton], 1
  7475 000061A9 B402                <1> 		mov ah, 2
  7476 000061AB E887FDFFFF          <1> 		call graphicsadd
  7477                              <1> 	showstring2:
  7478 000061B0 30E4                <1> 		xor ah, ah
  7479 000061B2 8A06                <1> 		mov al, [esi]
  7480 000061B4 3C00                <1> 		cmp al, 0
  7481 000061B6 7428                <1> 		je doneshowstring
  7482 000061B8 46                  <1> 		inc esi
  7483 000061B9 3CFF                <1> 		cmp al, 255
  7484 000061BB 74F3                <1> 		je showstring2
  7485 000061BD 8935[B0690000]      <1> 		mov [showstringesi], esi
  7486 000061C3 668B1D[E8610000]    <1> 		mov bx, [colorfont2]
  7487 000061CA E852050000          <1> 		call showfontvesa
  7488 000061CF 3C0A                <1> 		cmp al, 10
  7489 000061D1 7405                <1> 		je noproceedshst
  7490 000061D3 6681C20800          <1> 		add dx, 8
  7491                              <1> 	noproceedshst:
  7492 000061D8 8B35[B0690000]      <1> 		mov esi, [showstringesi]
  7493 000061DE EBD0                <1> 		jmp showstring2
  7494                              <1> 	doneshowstring:
  7495 000061E0 C605[F1570000]00    <1> 		mov byte [mouseselecton], 0
  7496 000061E7 C3                  <1> 		ret
  7497                              <1> 
  7498 000061E8 FFFF                <1> colorfont2 dw 0xFFFF
  7499 000061EA 00                  <1> colorcache db 0
  7500 000061EB 0000                <1> winvcopystx dw 0
  7501 000061ED 0000                <1> winvcopysty dw 0
  7502 000061EF 0000                <1> winvcopydx dw 0
  7503 000061F1 0000                <1> winvcopycx dw 0
  7504 000061F3 FFFF0000            <1> windowcolor dw 0xFFFF,0x0
  7505 000061F7 00000000            <1> windowbufloc: dw 0,0
  7506 000061FB 00000000            <1> windowinfobuf dd 0
  7507 000061FF 0000                <1> termcol dw 0
  7508 00006201 00000000            <1> wincopyendpos dd 0
  7509                              <1> 
  7510                              <1> 	showwindow:	;;windowstuff in si, position in (dx, cx), nothing in ax, code in bx
  7511 00006205 C605[C6270000]01    <1> 		mov byte [termguion], 1
  7512 0000620C 6681C11000          <1> 		add cx, 16
  7513 00006211 668915[EB610000]    <1> 		mov [winvcopystx], dx
  7514 00006218 66890D[ED610000]    <1> 		mov [winvcopysty], cx
  7515 0000621F 8935[FB610000]      <1> 		mov [windowinfobuf], esi
  7516 00006225 668B16              <1> 		mov dx, [esi]
  7517 00006228 668B4E02            <1> 		mov cx, [esi + 2]
  7518 0000622C 31C0                <1> 		xor eax, eax
  7519 0000622E 31DB                <1> 		xor ebx, ebx
  7520 00006230 6689D0              <1> 		mov ax, dx
  7521 00006233 6689CB              <1> 		mov bx, cx
  7522 00006236 66C1E803            <1> 		shr ax, 3
  7523 0000623A 66C1EB04            <1> 		shr bx, 4
  7524 0000623E 66A3[FF610000]      <1> 		mov [termcol], ax
  7525 00006244 A2[8A290000]        <1> 		mov [charxy], al
  7526 00006249 881D[8B290000]      <1> 		mov [charxy + 1], bl
  7527 0000624F BF[91BC0000]        <1> 		mov edi, videobuf
  7528 00006254 81FB00000000        <1> 		cmp ebx, 0
  7529 0000625A 0F84CD030000        <1> 		je near donewincopynow	;AAAAAAAAA!!!!!
  7530                              <1> 	findendposwin:
  7531 00006260 01C7                <1> 		add edi, eax
  7532 00006262 01C7                <1> 		add edi, eax
  7533 00006264 4B                  <1> 		dec ebx
  7534 00006265 81FB00000000        <1> 		cmp ebx, 0
  7535 0000626B 77F3                <1> 		ja findendposwin
  7536 0000626D 893D[01620000]      <1> 		mov [wincopyendpos], edi
  7537 00006273 31FF                <1> 		xor edi, edi
  7538 00006275 6631C0              <1> 		xor ax, ax
  7539 00006278 6631DB              <1> 		xor bx, bx
  7540 0000627B 6601D2              <1> 		add dx, dx
  7541 0000627E 668915[EF610000]    <1> 		mov [winvcopydx], dx
  7542 00006285 66890D[F1610000]    <1> 		mov [winvcopycx], cx
  7543 0000628C 668B0D[ED610000]    <1> 		mov cx, [winvcopysty]
  7544 00006293 6681E91000          <1> 		sub cx, 16
  7545 00006298 668B15[EB610000]    <1> 		mov dx, [winvcopystx]
  7546 0000629F C605[C7270000]00    <1> 		mov byte [termcopyon], 0
  7547 000062A6 B403                <1> 		mov ah, 3
  7548 000062A8 E88AFCFFFF          <1> 		call graphicsadd
  7549                              <1> 	showwindow2:
  7550 000062AD 6681C11000          <1> 		add cx, 16
  7551 000062B2 668915[EB610000]    <1> 		mov [winvcopystx], dx
  7552 000062B9 66890D[ED610000]    <1> 		mov [winvcopysty], cx
  7553 000062C0 668B16              <1> 		mov dx, [esi]
  7554 000062C3 668B4E02            <1> 		mov cx, [esi + 2]
  7555 000062C7 6601D2              <1> 		add dx, dx
  7556 000062CA 668915[EF610000]    <1> 		mov [winvcopydx], dx
  7557 000062D1 66890D[F1610000]    <1> 		mov [winvcopycx], cx
  7558 000062D8 8B3D[F7610000]      <1> 		mov edi, [windowbufloc]
  7559 000062DE 31D2                <1> 		xor edx, edx
  7560 000062E0 668B15[968B0000]    <1> 		mov dx, [resolutionx2]
  7561 000062E7 C1E204              <1> 		shl edx, 4
  7562 000062EA 29D7                <1> 		sub edi, edx
  7563 000062EC 803D[C7270000]00    <1> 		cmp byte [termcopyon], 0
  7564 000062F3 7538                <1> 		jne nocleartitlebarpos
  7565 000062F5 8B3D[BE8A0000]      <1> 		mov edi, [physbaseptr]
  7566 000062FB 31D2                <1> 		xor edx, edx
  7567 000062FD 668B15[EB610000]    <1> 		mov dx, [winvcopystx]
  7568 00006304 01D7                <1> 		add edi, edx
  7569 00006306 668B0D[ED610000]    <1> 		mov cx, [winvcopysty]
  7570 0000630D 6681E91000          <1> 		sub cx, 16
  7571 00006312 6681F90000          <1> 		cmp cx, 0
  7572 00006317 7414                <1> 		je nocleartitlebarpos
  7573                              <1> 	cleartitlebarpos:
  7574 00006319 31D2                <1> 		xor edx, edx
  7575 0000631B 668B15[968B0000]    <1> 		mov dx, [resolutionx2]
  7576 00006322 01D7                <1> 		add edi, edx
  7577 00006324 6649                <1> 		dec cx
  7578 00006326 6681F90000          <1> 		cmp cx, 0
  7579 0000632B 75EC                <1> 		jne cleartitlebarpos
  7580                              <1> 	nocleartitlebarpos:
  7581 0000632D 66B91000            <1> 		mov cx, 16
  7582 00006331 668B15[EF610000]    <1> 		mov dx, [winvcopydx]
  7583 00006338 6681F90000          <1> 		cmp cx, 0
  7584 0000633D 0F8448000000        <1> 		je near canceltitlebarput
  7585 00006343 6681FA0000          <1> 		cmp dx, 0
  7586 00006348 0F843D000000        <1> 		je near canceltitlebarput
  7587                              <1> 	titlebarput:
  7588 0000634E 66A1[F3610000]      <1> 		mov ax, [windowcolor]
  7589 00006354 668907              <1> 		mov [edi], ax
  7590 00006357 6681EA0200          <1> 		sub dx, 2
  7591 0000635C 81C702000000        <1> 		add edi, 2
  7592 00006362 6681FA0000          <1> 		cmp dx, 0
  7593 00006367 75E5                <1> 		jne titlebarput
  7594 00006369 31D2                <1> 		xor edx, edx
  7595 0000636B 668B15[968B0000]    <1> 		mov dx, [resolutionx2]
  7596 00006372 6649                <1> 		dec cx
  7597 00006374 662B15[EF610000]    <1> 		sub dx, [winvcopydx]
  7598 0000637B 01D7                <1> 		add edi, edx
  7599 0000637D 668B15[EF610000]    <1> 		mov dx, [winvcopydx]
  7600 00006384 6681F90000          <1> 		cmp cx, 0
  7601 00006389 75C3                <1> 		jne titlebarput
  7602                              <1> 	canceltitlebarput:
  7603 0000638B 893D[F7610000]      <1> 		mov [windowbufloc], edi
  7604 00006391 803D[C7270000]02    <1> 		cmp byte [termcopyon], 2
  7605 00006398 0F8461000000        <1> 		je near winvcpst
  7606 0000639E 6631C0              <1> 		xor ax, ax
  7607 000063A1 81C604000000        <1> 		add esi, 4
  7608 000063A7 668B15[EB610000]    <1> 		mov dx, [winvcopystx]
  7609 000063AE 668B0D[ED610000]    <1> 		mov cx, [winvcopysty]
  7610 000063B5 6681E91000          <1> 		sub cx, 16
  7611 000063BA 6631DB              <1> 		xor bx, bx
  7612 000063BD C605[F1570000]01    <1> 		mov byte [mouseselecton], 1
  7613 000063C4 E8E7FDFFFF          <1> 		call showstring2
  7614 000063C9 B058                <1> 		mov al, "X"
  7615 000063CB 30E4                <1> 		xor ah, ah
  7616 000063CD 668B1D[E8610000]    <1> 		mov bx, [colorfont2]
  7617 000063D4 668B15[EB610000]    <1> 		mov dx, [winvcopystx]
  7618 000063DB 668B0D[ED610000]    <1> 		mov cx, [winvcopysty]
  7619 000063E2 6681E91000          <1> 		sub cx, 16
  7620 000063E7 6681EA1400          <1> 		sub dx, 20
  7621 000063EC 660315[EF610000]    <1> 		add dx, [winvcopydx]
  7622 000063F3 C605[F1570000]01    <1> 		mov byte [mouseselecton], 1
  7623 000063FA E822030000          <1> 		call showfontvesa
  7624                              <1> 	winvcpst:
  7625 000063FF 8B3D[F7610000]      <1> 		mov edi, [windowbufloc]
  7626 00006405 E97E000000          <1> 		jmp windowvideocopyset
  7627                              <1> 
  7628                              <1> 	windowvideocopy:
  7629 0000640A 8B35[FB610000]      <1> 		mov esi, [windowinfobuf]
  7630 00006410 668B16              <1> 		mov dx, [esi]
  7631 00006413 668B4E02            <1> 		mov cx, [esi + 2]
  7632 00006417 31C0                <1> 		xor eax, eax
  7633 00006419 31DB                <1> 		xor ebx, ebx
  7634 0000641B 6689D0              <1> 		mov ax, dx
  7635 0000641E 6689CB              <1> 		mov bx, cx
  7636 00006421 66C1E803            <1> 		shr ax, 3
  7637 00006425 66C1EB04            <1> 		shr bx, 4
  7638 00006429 66A3[FF610000]      <1> 		mov [termcol], ax
  7639 0000642F A2[8A290000]        <1> 		mov [charxy], al
  7640 00006434 881D[8B290000]      <1> 		mov [charxy + 1], bl
  7641 0000643A 8B3D[F7610000]      <1> 		mov edi, [windowbufloc]
  7642 00006440 3B3D[BE8A0000]      <1> 		cmp edi, [physbaseptr]
  7643 00006446 0F833C000000        <1> 		jae near windowvideocopyset
  7644 0000644C 31C9                <1> 		xor ecx, ecx
  7645 0000644E 31D2                <1> 		xor edx, edx
  7646 00006450 668B15[EB610000]    <1> 		mov dx, [winvcopystx]
  7647 00006457 668B0D[ED610000]    <1> 		mov cx, [winvcopysty]
  7648 0000645E 8B3D[BE8A0000]      <1> 		mov edi, [physbaseptr]
  7649 00006464 01D7                <1> 		add edi, edx
  7650 00006466 81F900000000        <1> 		cmp ecx, 0
  7651 0000646C 741A                <1> 		je windowvideocopyset
  7652                              <1> 	yrescopylp:
  7653 0000646E 31D2                <1> 		xor edx, edx
  7654 00006470 668B15[968B0000]    <1> 		mov dx, [resolutionx2]
  7655 00006477 01D7                <1> 		add edi, edx
  7656 00006479 6649                <1> 		dec cx
  7657 0000647B 6681F90000          <1> 		cmp cx, 0
  7658 00006480 75EC                <1> 		jne yrescopylp
  7659 00006482 893D[F7610000]      <1> 		mov [windowbufloc], edi
  7660                              <1> 	windowvideocopyset:
  7661 00006488 6631C9              <1> 		xor cx, cx
  7662 0000648B 6649                <1> 		dec cx
  7663 0000648D 66890D[3F660000]    <1> 		mov [charposline], cx
  7664 00006494 89FE                <1> 		mov esi, edi
  7665 00006496 81EE10000000        <1> 		sub esi, 16
  7666 0000649C 31D2                <1> 		xor edx, edx
  7667 0000649E 668B15[968B0000]    <1> 		mov dx, [resolutionx2]
  7668 000064A5 C1E204              <1> 		shl edx, 4
  7669 000064A8 01D6                <1> 		add esi, edx
  7670 000064AA BF[91BC0000]        <1> 		mov edi, videobuf
  7671 000064AF 81EF02000000        <1> 		sub edi, 2
  7672 000064B5 893D[41660000]      <1> 		mov [charposvbuf], edi
  7673 000064BB E96E000000          <1> 		jmp nextcharwin
  7674                              <1> 	copywindow:
  7675 000064C0 B201                <1> 		mov dl, 1
  7676 000064C2 D0C6                <1> 		rol dh, 1
  7677 000064C4 20F2                <1> 		and dl, dh
  7678 000064C6 803D[EA610000]10    <1> 		cmp byte [colorcache], 0x10
  7679 000064CD 731C                <1> 		jae switchwincolors
  7680 000064CF 66A1[F5610000]      <1> 		mov ax, [windowcolor + 2]
  7681 000064D5 668907              <1> 		mov [edi], ax
  7682 000064D8 80FA00              <1> 		cmp dl, 0
  7683 000064DB 7425                <1> 		je nowritewin
  7684 000064DD 66A1[F3610000]      <1> 		mov ax, [windowcolor]
  7685 000064E3 668907              <1> 		mov [edi], ax
  7686 000064E6 E917000000          <1> 		jmp nowritewin
  7687                              <1> 	switchwincolors:
  7688 000064EB 66A1[F3610000]      <1> 		mov ax, [windowcolor]
  7689 000064F1 668907              <1> 		mov [edi], ax
  7690 000064F4 80FA00              <1> 		cmp dl, 0
  7691 000064F7 7409                <1> 		je nowritewin
  7692 000064F9 66A1[F5610000]      <1> 		mov ax, [windowcolor + 2]
  7693 000064FF 668907              <1> 		mov [edi], ax
  7694                              <1> 	nowritewin:
  7695 00006502 81C702000000        <1> 		add edi, 2
  7696 00006508 FEC1                <1> 		inc cl
  7697 0000650A 80F908              <1> 		cmp cl, 8
  7698 0000650D 75B1                <1> 		jne copywindow
  7699 0000650F 6643                <1> 		inc bx
  7700 00006511 30C9                <1> 		xor cl, cl
  7701 00006513 31D2                <1> 		xor edx, edx
  7702 00006515 668B15[968B0000]    <1> 		mov dx, [resolutionx2]
  7703 0000651C 01D6                <1> 		add esi, edx
  7704 0000651E 89F7                <1> 		mov edi, esi
  7705 00006520 678AB7[8678]        <1> 		mov dh, [fonts + bx]
  7706 00006525 D0CE                <1> 		ror dh, 1
  7707 00006527 FEC5                <1> 		inc ch
  7708 00006529 80FD10              <1> 		cmp ch, 16
  7709 0000652C 7592                <1> 		jne copywindow
  7710                              <1> 	nextcharwin:
  7711 0000652E 6631C9              <1> 		xor cx, cx
  7712 00006531 8B3D[41660000]      <1> 		mov edi, [charposvbuf]
  7713 00006537 81C702000000        <1> 		add edi, 2
  7714 0000653D 3B3D[01620000]      <1> 		cmp edi, [wincopyendpos]
  7715 00006543 0F83E4000000        <1> 		jae near donewincopynow
  7716 00006549 8A7F01              <1> 		mov bh, [edi + 1]
  7717 0000654C 80FF00              <1> 		cmp bh, 0
  7718 0000654F 7505                <1> 		jne nofixcolorwin
  7719 00006551 B707                <1> 		mov bh, 7
  7720 00006553 887F01              <1> 		mov [edi + 1], bh
  7721                              <1> 	nofixcolorwin:
  7722 00006556 883D[EA610000]      <1> 		mov [colorcache], bh
  7723 0000655C 8A1F                <1> 		mov bl, [edi]
  7724 0000655E 893D[41660000]      <1> 		mov [charposvbuf], edi
  7725 00006564 81EF[91BC0000]      <1> 		sub edi, videobuf
  7726 0000656A 81C7[D10D0100]      <1> 		add edi, videobuf2
  7727 00006570 8A6701              <1> 		mov ah, [edi + 1]
  7728 00006573 8A07                <1> 		mov al, [edi]
  7729 00006575 6639D8              <1> 		cmp ax, bx
  7730 00006578 7543                <1> 		jne noskipcharcopy
  7731                              <1> 	skipcharcopy:
  7732 0000657A 81C610000000        <1> 		add esi, 16
  7733 00006580 668B0D[3F660000]    <1> 		mov cx, [charposline]
  7734 00006587 6641                <1> 		inc cx
  7735 00006589 66890D[3F660000]    <1> 		mov [charposline], cx
  7736 00006590 663B0D[FF610000]    <1> 		cmp cx, [termcol]
  7737 00006597 7295                <1> 		jb nextcharwin
  7738 00006599 6631C9              <1> 		xor cx, cx
  7739 0000659C 66890D[3F660000]    <1> 		mov [charposline], cx
  7740 000065A3 31D2                <1> 		xor edx, edx
  7741 000065A5 668B15[968B0000]    <1> 		mov dx, [resolutionx2]
  7742 000065AC C1E204              <1> 		shl edx, 4
  7743 000065AF 662B15[EF610000]    <1> 		sub dx, [winvcopydx]
  7744 000065B6 01D6                <1> 		add esi, edx
  7745 000065B8 E971FFFFFF          <1> 		jmp nextcharwin
  7746                              <1> 	noskipcharcopy:
  7747 000065BD 881F                <1> 		mov [edi], bl
  7748 000065BF 887F01              <1> 		mov [edi + 1], bh
  7749 000065C2 8B3D[41660000]      <1> 		mov edi, [charposvbuf]
  7750 000065C8 30FF                <1> 		xor bh, bh
  7751 000065CA 66C1E304            <1> 		shl bx, 4
  7752 000065CE 31D2                <1> 		xor edx, edx
  7753 000065D0 668B15[968B0000]    <1> 		mov dx, [resolutionx2]
  7754 000065D7 C1E204              <1> 		shl edx, 4
  7755 000065DA 29D6                <1> 		sub esi, edx
  7756 000065DC 81C610000000        <1> 		add esi, 16
  7757 000065E2 89F7                <1> 		mov edi, esi
  7758 000065E4 668B0D[3F660000]    <1> 		mov cx, [charposline]
  7759 000065EB 6641                <1> 		inc cx
  7760 000065ED 663B0D[FF610000]    <1> 		cmp cx, [termcol]
  7761 000065F4 7316                <1> 		jae fixwindowcopy
  7762 000065F6 66890D[3F660000]    <1> 		mov [charposline], cx
  7763 000065FD 6631C9              <1> 		xor cx, cx
  7764 00006600 678AB7[8678]        <1> 		mov dh, [fonts + bx]
  7765 00006605 D0CE                <1> 		ror dh, 1
  7766 00006607 E9B4FEFFFF          <1> 		jmp copywindow
  7767                              <1> fixwindowcopy:
  7768 0000660C 6631C9              <1> 		xor cx, cx
  7769 0000660F 66890D[3F660000]    <1> 		mov [charposline], cx
  7770 00006616 662B15[EF610000]    <1> 		sub dx, [winvcopydx]
  7771 0000661D 01D6                <1> 		add esi, edx
  7772 0000661F 89F7                <1> 		mov edi, esi
  7773 00006621 678AB7[8678]        <1> 		mov dh, [fonts + bx]
  7774 00006626 D0CE                <1> 		ror dh, 1
  7775 00006628 E993FEFFFF          <1> 		jmp copywindow
  7776                              <1> donewincopynow:
  7777 0000662D 803D[C7270000]01    <1> 		cmp byte [termcopyon], 1
  7778 00006634 7501                <1> 		jne forgetresetstuff
  7779 00006636 61                  <1> 		popa
  7780                              <1> forgetresetstuff:
  7781 00006637 C605[C7270000]00    <1> 		mov byte [termcopyon], 0
  7782 0000663E C3                  <1> 		ret
  7783                              <1> 		
  7784 0000663F 0000                <1> charposline dw 0
  7785 00006641 00000000            <1> charposvbuf dw 0,0
  7786 00006645 0000                <1> iconcolor dw 0
  7787                              <1> 	showicon:	;;icon in si, position in (dx,cx), selected in ax, code in bx
  7788 00006647 A2[076A0000]        <1> 		mov [iconselected], al
  7789 0000664C 8025[076A0000]01    <1> 		and byte [iconselected], 1
  7790 00006653 B401                <1> 		mov ah, 1
  7791 00006655 E8DDF8FFFF          <1> 		call graphicsadd
  7792                              <1> 	showicon2:
  7793 0000665A 8B3D[BE8A0000]      <1> 		mov edi, [physbaseptr]
  7794 00006660 6601D2              <1> 		add dx, dx
  7795 00006663 663B15[968B0000]    <1> 		cmp dx, [resolutionx2]
  7796 0000666A 720C                <1> 		jb screenxgood
  7797 0000666C 668B15[968B0000]    <1> 		mov dx, [resolutionx2]
  7798 00006673 6681EA4000          <1> 		sub dx, 64
  7799                              <1> 	screenxgood:
  7800 00006678 6681F90000          <1> 		cmp cx, 0
  7801 0000667D 7422                <1> 		je noscreenygoodchk
  7802 0000667F 663B0D[AA8A0000]    <1> 		cmp cx, [resolutiony]
  7803 00006686 720C                <1> 		jb screenygood
  7804 00006688 668B0D[AA8A0000]    <1> 		mov cx, [resolutiony]
  7805 0000668F 6681E92000          <1> 		sub cx, 32
  7806                              <1> 	screenygood:
  7807 00006694 31DB                <1> 		xor ebx, ebx
  7808 00006696 668B1D[968B0000]    <1> 		mov bx, [resolutionx2]
  7809 0000669D 01DF                <1> 		add edi, ebx
  7810 0000669F E2F3                <1> 		loop screenygood
  7811                              <1> 	noscreenygoodchk:
  7812 000066A1 31DB                <1> 		xor ebx, ebx
  7813 000066A3 6689D3              <1> 		mov bx, dx
  7814 000066A6 01DF                <1> 		add edi, ebx
  7815 000066A8 6631C9              <1> 		xor cx, cx
  7816 000066AB 668B06              <1> 		mov ax, [esi]
  7817 000066AE 81C602000000        <1> 		add esi, 2
  7818 000066B4 66A3[45660000]      <1> 		mov [iconcolor], ax
  7819                              <1> 	writeicon:
  7820 000066BA 8B06                <1> 		mov eax, [esi]
  7821 000066BC D1C0                <1> 		rol eax, 1
  7822 000066BE 30C9                <1> 		xor cl, cl
  7823                              <1> 	writeiconline:
  7824 000066C0 B201                <1> 		mov dl, 1
  7825 000066C2 20C2                <1> 		and dl, al
  7826 000066C4 3215[076A0000]      <1> 		xor dl, [iconselected]
  7827 000066CA 668B1D[BD560000]    <1> 		mov bx, [background]
  7828 000066D1 66891F              <1> 		mov [edi], bx
  7829 000066D4 80FA00              <1> 		cmp dl, 0
  7830 000066D7 740A                <1> 		je noiconline
  7831 000066D9 668B15[45660000]    <1> 		mov dx, [iconcolor]
  7832 000066E0 668917              <1> 		mov [edi], dx
  7833                              <1> 	noiconline:
  7834 000066E3 81C702000000        <1> 		add edi, 2
  7835 000066E9 D1C0                <1> 		rol eax, 1
  7836 000066EB FEC1                <1> 		inc cl
  7837 000066ED 80F920              <1> 		cmp cl, 32
  7838 000066F0 72CE                <1> 		jb writeiconline
  7839 000066F2 81C604000000        <1> 		add esi, 4
  7840 000066F8 FEC5                <1> 		inc ch
  7841 000066FA 31D2                <1> 		xor edx, edx
  7842 000066FC 668B15[968B0000]    <1> 		mov dx, [resolutionx2]
  7843 00006703 01D7                <1> 		add edi, edx
  7844 00006705 81EF40000000        <1> 		sub edi, 64
  7845 0000670B 80FD20              <1> 		cmp ch, 32
  7846 0000670E 72AA                <1> 		jb writeicon
  7847 00006710 31C0                <1> 		xor eax, eax
  7848 00006712 C3                  <1> 		ret
  7849                              <1> 
  7850 00006713 02                  <1> resolutionbytes db 2
  7851 00006714 0000                <1> posxvesa dw 0
  7852 00006716 0000                <1> posyvesa dw 0
  7853 00006718 FFFF                <1> colorfont dw 0xFFFF
  7854                              <1> savefontvesa:		;;same rules as showfontvesa
  7855 0000671A C605[F0570000]01    <1> 	mov byte [savefonton], 1
  7856                              <1> showfontvesa:		;;position in (dx,cx), color in bx, char in al
  7857 00006721 3CFF                <1> 	cmp al, 255
  7858 00006723 7501                <1> 	jne nostopshowfont
  7859 00006725 C3                  <1> 	ret
  7860                              <1> nostopshowfont:
  7861 00006726 66890D[16670000]    <1> 	mov [posyvesa], cx
  7862 0000672D 3C0A                <1> 	cmp al, 10
  7863 0000672F 0F8424000000        <1> 	je near goodvesafontx
  7864 00006735 31C9                <1> 	xor ecx, ecx
  7865 00006737 668B0D[968B0000]    <1> 	mov cx, [resolutionx2]
  7866 0000673E 6639CA              <1> 	cmp dx, cx
  7867 00006741 7616                <1> 	jbe goodvesafontx
  7868 00006743 6631D2              <1> 	xor dx, dx
  7869 00006746 668B0D[16670000]    <1> 	mov cx, [posyvesa]
  7870 0000674D 6681C11000          <1> 	add cx, 16
  7871 00006752 66890D[16670000]    <1> 	mov [posyvesa], cx
  7872                              <1> goodvesafontx:
  7873 00006759 668B0D[16670000]    <1> 	mov cx, [posyvesa]
  7874 00006760 668915[14670000]    <1> 	mov [posxvesa], dx
  7875 00006767 8B3D[BE8A0000]      <1> 	mov edi, [physbaseptr]
  7876 0000676D 66891D[18670000]    <1> 	mov [colorfont], bx
  7877 00006774 31DB                <1> 	xor ebx, ebx
  7878 00006776 88C3                <1> 	mov bl, al
  7879 00006778 31C0                <1> 	xor eax, eax
  7880 0000677A 88D8                <1> 	mov al, bl
  7881 0000677C 6689D3              <1> 	mov bx, dx
  7882 0000677F 89DA                <1> 	mov edx, ebx
  7883 00006781 31DB                <1> 	xor ebx, ebx
  7884 00006783 6681F90000          <1> 	cmp cx, 0
  7885 00006788 7415                <1> 	je vesaposloopdn
  7886 0000678A 668B1D[968B0000]    <1> 	mov bx, [resolutionx2]
  7887                              <1> vesaposloop:
  7888 00006791 01DA                <1> 	add edx, ebx
  7889 00006793 6681E90100          <1> 	sub cx, 1
  7890 00006798 6681F90000          <1> 	cmp cx, 0
  7891 0000679D 75F2                <1> 	jne vesaposloop
  7892                              <1> vesaposloopdn:
  7893 0000679F 01D7                <1> 	add edi, edx
  7894 000067A1 BE[86780000]        <1> 	mov esi, fonts
  7895                              <1> findfontvesa:
  7896 000067A6 30E4                <1> 	xor ah, ah
  7897 000067A8 3C0A                <1> 	cmp al, 10
  7898 000067AA 0F84FE000000        <1> 	je near nwlinevesa
  7899 000067B0 C1E004              <1> 	shl eax, 4
  7900 000067B3 01C6                <1> 	add esi, eax
  7901 000067B5 C1E804              <1> 	shr eax, 4
  7902 000067B8 81FE[86880000]      <1> 	cmp esi, fontend
  7903 000067BE 0F83B9000000        <1> 	jae near donefontvesa
  7904 000067C4 4E                  <1> 	dec esi
  7905                              <1> foundfontvesa:
  7906 000067C5 46                  <1> 	inc esi
  7907 000067C6 803D[F0570000]01    <1> 	cmp byte [savefonton], 1
  7908 000067CD 0F8401010000        <1> 	je near vesafontsaver
  7909 000067D3 30C9                <1> 	xor cl, cl
  7910 000067D5 8A06                <1> 	mov al, [esi]
  7911 000067D7 668B15[968B0000]    <1> 	mov dx, [resolutionx2]
  7912 000067DE 662B15[14670000]    <1> 	sub dx, [posxvesa]
  7913 000067E5 6681FA1000          <1> 	cmp dx, 16
  7914 000067EA 7708                <1> 	ja paintfontvesa
  7915 000067EC D0EA                <1> 	shr dl, 1
  7916 000067EE 8815[AD680000]      <1> 	mov [charwidth], dl
  7917                              <1> paintfontvesa:
  7918 000067F4 B201                <1> 	mov dl, 1
  7919 000067F6 20C2                <1> 	and dl, al
  7920 000067F8 803D[EF570000]01    <1> 	cmp byte [showcursorfonton], 1
  7921 000067FF 0F8435000000        <1> 	je near nodelpaintedfont
  7922 00006805 803D[EF570000]02    <1> 	cmp byte [showcursorfonton], 2
  7923 0000680C 0F8518000000        <1> 	jne near noswitchcursorfonton
  7924 00006812 80FA00              <1> 	cmp dl, 0
  7925 00006815 0F842E000000        <1> 	je near nopixelset
  7926 0000681B 668B1D[18670000]    <1> 	mov bx, [colorfont]
  7927 00006822 66891F              <1> 	mov [edi], bx
  7928 00006825 E91F000000          <1> 	jmp nopixelset
  7929                              <1> noswitchcursorfonton:
  7930 0000682A 3215[F1570000]      <1> 	xor dl, [mouseselecton]
  7931 00006830 668B1D[BD560000]    <1> 	mov bx, [background]
  7932 00006837 66891F              <1> 	mov [edi], bx
  7933                              <1> nodelpaintedfont:
  7934 0000683A 80FA00              <1> 	cmp dl, 0
  7935 0000683D 740A                <1> 	je nopixelset
  7936 0000683F 668B15[18670000]    <1> 	mov dx, [colorfont]
  7937 00006846 668917              <1> 	mov [edi], dx
  7938                              <1> nopixelset:
  7939 00006849 81C702000000        <1> 	add edi, 2
  7940 0000684F D0C0                <1> 	rol al, 1
  7941 00006851 FEC1                <1> 	inc cl
  7942 00006853 3A0D[AD680000]      <1> 	cmp cl, [charwidth]
  7943 00006859 7299                <1> 	jb paintfontvesa
  7944 0000685B FEC5                <1> 	inc ch
  7945 0000685D 31D2                <1> 	xor edx, edx
  7946 0000685F 668B15[968B0000]    <1> 	mov dx, [resolutionx2]
  7947 00006866 01D7                <1> 	add edi, edx
  7948 00006868 31D2                <1> 	xor edx, edx
  7949 0000686A 8A15[AD680000]      <1> 	mov dl, [charwidth]
  7950 00006870 00D2                <1> 	add dl, dl
  7951 00006872 29D7                <1> 	sub edi, edx
  7952 00006874 80FD10              <1> 	cmp ch, 16
  7953 00006877 0F8248FFFFFF        <1> 	jb foundfontvesa
  7954                              <1> donefontvesa:
  7955 0000687D B208                <1> 	mov dl, 8
  7956 0000687F 8815[AD680000]      <1> 	mov [charwidth], dl
  7957 00006885 668B15[14670000]    <1> 	mov dx, [posxvesa]
  7958 0000688C 8A1D[AD680000]      <1> 	mov bl, [charwidth]
  7959 00006892 30FF                <1> 	xor bh, bh
  7960 00006894 6601DA              <1> 	add dx, bx
  7961 00006897 668B1D[18670000]    <1> 	mov bx, [colorfont]
  7962 0000689E 668B0D[16670000]    <1> 	mov cx, [posyvesa]
  7963 000068A5 C605[F0570000]00    <1> 	mov byte [savefonton], 0
  7964 000068AC C3                  <1> 	ret
  7965 000068AD 08                  <1> charwidth db 8
  7966                              <1> nwlinevesa:
  7967 000068AE 668B15[14670000]    <1> 	mov dx, [posxvesa]
  7968 000068B5 6631D2              <1> 	xor dx, dx
  7969 000068B8 668915[14670000]    <1> 	mov [posxvesa], dx
  7970 000068BF 668B0D[16670000]    <1> 	mov cx, [posyvesa]
  7971 000068C6 6681C11000          <1> 	add cx, 16
  7972 000068CB 66890D[16670000]    <1> 	mov [posyvesa], cx
  7973 000068D2 EBA9                <1> 	jmp donefontvesa
  7974                              <1> vesafontsaver:
  7975 000068D4 30C0                <1> 	xor al, al
  7976 000068D6 30C9                <1> 	xor cl, cl
  7977                              <1> vesafontsaver2:
  7978 000068D8 668B17              <1> 	mov dx, [edi]
  7979 000068DB 663B15[18670000]    <1> 	cmp dx, [colorfont]
  7980 000068E2 742F                <1> 	je colorfontmatch
  7981                              <1> donecolormatch:
  7982 000068E4 81C702000000        <1> 	add edi, 2
  7983 000068EA D0C0                <1> 	rol al, 1
  7984 000068EC FEC1                <1> 	inc cl
  7985 000068EE 80F908              <1> 	cmp cl, 8
  7986 000068F1 72E5                <1> 	jb vesafontsaver2
  7987 000068F3 8806                <1> 	mov [esi], al
  7988 000068F5 46                  <1> 	inc esi
  7989 000068F6 FEC5                <1> 	inc ch
  7990 000068F8 31D2                <1> 	xor edx, edx
  7991 000068FA 668B15[968B0000]    <1> 	mov dx, [resolutionx2]
  7992 00006901 01D7                <1> 	add edi, edx
  7993 00006903 81EF10000000        <1> 	sub edi, 16
  7994 00006909 80FD10              <1> 	cmp ch, 16
  7995 0000690C 72C6                <1> 	jb vesafontsaver
  7996 0000690E E96AFFFFFF          <1> 	jmp donefontvesa
  7997                              <1> colorfontmatch:
  7998 00006913 0401                <1> 	add al, 1
  7999 00006915 EBCD                <1> 	jmp donecolormatch
  8000                              <1> 	
  8001                              <1> showbmp:
  8002 00006917 668B06              <1> 	mov ax, [esi]
  8003 0000691A 663D424D            <1> 	cmp ax, "BM"
  8004 0000691E 0F8582000000        <1> 	jne near endedbmp
  8005 00006924 8B3D[BE8A0000]      <1> 	mov edi, [physbaseptr]
  8006 0000692A 6689D0              <1> 	mov ax, dx
  8007 0000692D 6689CB              <1> 	mov bx, cx
  8008 00006930 31C9                <1> 	xor ecx, ecx
  8009 00006932 31D2                <1> 	xor edx, edx
  8010 00006934 6689D9              <1> 	mov cx, bx
  8011 00006937 6689C2              <1> 	mov dx, ax
  8012 0000693A 01D7                <1> 	add edi, edx
  8013 0000693C 01D7                <1> 	add edi, edx
  8014 0000693E 31D2                <1> 	xor edx, edx
  8015 00006940 668B15[968B0000]    <1> 	mov dx, [resolutionx2]
  8016 00006947 41                  <1> 	inc ecx
  8017 00006948 034E16              <1> 	add ecx, [esi + 22]
  8018                              <1> bmplocloop:
  8019 0000694B 01D7                <1> 	add edi, edx
  8020 0000694D E2FC                <1> 	loop bmplocloop
  8021 0000694F 29D7                <1> 	sub edi, edx
  8022 00006951 8B5612              <1> 	mov edx, [esi + 18]
  8023 00006954 8B4E16              <1> 	mov ecx, [esi + 22]
  8024 00006957 8B460A              <1> 	mov eax, [esi + 10]
  8025 0000695A 8B5E02              <1> 	mov ebx, [esi + 2]
  8026 0000695D 01F3                <1> 	add ebx, esi
  8027 0000695F 891D[AC690000]      <1> 	mov [bmpend], ebx
  8028 00006965 89D3                <1> 	mov ebx, edx
  8029 00006967 01C6                <1> 	add esi, eax
  8030                              <1> ldxbmp:
  8031 00006969 668B06              <1> 	mov ax, [esi]
  8032 0000696C 668907              <1> 	mov [edi], ax
  8033 0000696F 81C702000000        <1> 	add edi, 2
  8034 00006975 81C602000000        <1> 	add esi, 2
  8035 0000697B 3B35[AC690000]      <1> 	cmp esi, [bmpend]
  8036 00006981 7723                <1> 	ja endedbmp
  8037 00006983 4A                  <1> 	dec edx
  8038 00006984 81FA00000000        <1> 	cmp edx, 0
  8039 0000698A 77DD                <1> 	ja ldxbmp
  8040 0000698C 31D2                <1> 	xor edx, edx
  8041 0000698E 668B15[968B0000]    <1> 	mov dx, [resolutionx2]
  8042 00006995 29DF                <1> 	sub edi, ebx
  8043 00006997 29DF                <1> 	sub edi, ebx
  8044 00006999 29D7                <1> 	sub edi, edx
  8045 0000699B 49                  <1> 	dec ecx
  8046 0000699C 89DA                <1> 	mov edx, ebx
  8047 0000699E 81F900000000        <1> 	cmp ecx, 0
  8048 000069A4 77C3                <1> 	ja ldxbmp
  8049                              <1> endedbmp:
  8050 000069A6 E801EFFFFF          <1> 	call switchmousepos2
  8051 000069AB C3                  <1> 	ret
  8052                              <1> 	
  8053 000069AC 00000000            <1> 	bmpend dd 0
  8054                              <1> 
  8055                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Here are some vars;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  8056 000069B0 00000000            <1> 	showstringesi dw 0,0
  8057 000069B4 00                  <1> 	mouseon db 0
  8058 000069B5 737461727400        <1> 	start	db "start",0
  8059 000069BB 536F6C6C65724F5300  <1> 	gotomenu db "SollerOS",0
  8060 000069C4 426F6F2100          <1> 	boomsg db "Boo!",0
  8061 000069C9 5061636D616E207761- <1> 	pacmsg	db "Pacman was easy to draw.",0
  8062 000069D2 73206561737920746F- <1>
  8063 000069DB 20647261772E00      <1>
  8064 000069E2 4F6D206E6F6D206E6F- <1> 	pacnom  db "Om nom nom nom",0
  8065 000069EB 6D206E6F6D00        <1>
  8066 000069F1 77696E646F77732073- <1> 	winmsg	db "windows sucks",0
  8067 000069FA 75636B7300          <1>
  8068 000069FF 5800                <1> 	xmsg db "X",0
  8069 00006A01 0000                <1> 	icon dw 0	;pointer to icon
  8070 00006A03 00000000            <1> 	codepointer dw 0,0 ;pointer to code
  8071 00006A07 00                  <1> 	iconselected db 0
  8072                              <1> 	
  8073                              <1> 	boo:
  8074 00006A08 BE[C4690000]        <1> 		mov esi, boomsg
  8075 00006A0D 66BA6400            <1> 		mov dx, 100
  8076 00006A11 66B94001            <1> 		mov cx, 320
  8077 00006A15 31DB                <1> 		xor ebx, ebx
  8078 00006A17 6631C0              <1> 		xor ax, ax
  8079 00006A1A E97EF7FFFF          <1> 		jmp showstring
  8080                              <1> 
  8081                              <1> 	pacmannomnom:
  8082 00006A1F BE[E2690000]        <1> 		mov esi, pacnom
  8083 00006A24 66BA8200            <1> 		mov dx, 130
  8084 00006A28 66B93C00            <1> 		mov cx, 60
  8085 00006A2C 31DB                <1> 		xor ebx, ebx
  8086 00006A2E 6631C0              <1> 		xor ax, ax
  8087 00006A31 E967F7FFFF          <1> 		jmp showstring	
  8088                              <1> 	
  8089                              <1> 	noie:
  8090 00006A36 66C705[F26A0000]80- <1> 		mov word [termwindow], 640
  8091 00006A3E 02                  <1>
  8092 00006A3F 66C705[F46A0000]E0- <1> 		mov word [termwindow + 2], 480	;the previous lines of code make a large terminal window that is 4 characters smaller than the screen
  8093 00006A47 01                  <1>
  8094 00006A48 BE[F26A0000]        <1> 		mov esi, termwindow
  8095 00006A4D 66BA1000            <1> 		mov dx, 16
  8096 00006A51 66B91000            <1> 		mov cx, 16
  8097 00006A55 BB[552C0000]        <1> 		mov ebx, os
  8098 00006A5A 6631C0              <1> 		xor ax, ax
  8099 00006A5D E8A3F7FFFF          <1> 		call showwindow
  8100 00006A62 E9EEC1FFFF          <1> 		jmp os
  8101                              <1> 
  8102                              <1> 	gotomenuboot:
  8103 00006A67 31D2                <1> 		xor edx, edx
  8104 00006A69 31C9                <1> 		xor ecx, ecx
  8105 00006A6B 668B15[A88A0000]    <1> 		mov dx, [resolutionx]
  8106 00006A72 668B0D[AA8A0000]    <1> 		mov cx, [resolutiony]
  8107 00006A79 66C1E904            <1> 		shr cx, 4
  8108 00006A7D 6681E90100          <1> 		sub cx, 1
  8109 00006A82 66C1E104            <1> 		shl cx, 4
  8110 00006A86 668915[F26A0000]    <1> 		mov [termwindow], dx
  8111 00006A8D 66890D[F46A0000]    <1> 		mov [termwindow + 2], cx	;the previous lines of code make a large terminal window that is fullscreen
  8112 00006A94 BE[F26A0000]        <1> 		mov esi, termwindow
  8113 00006A99 6631D2              <1> 		xor dx, dx
  8114 00006A9C 6631C9              <1> 		xor cx, cx
  8115 00006A9F BB[552C0000]        <1> 		mov ebx, os
  8116 00006AA4 6631C0              <1> 		xor ax, ax
  8117 00006AA7 E859F7FFFF          <1> 		call showwindow
  8118 00006AAC E9A4C1FFFF          <1> 		jmp os
  8119                              <1> 		;ret
  8120                              <1> 
  8121                              <1> 	winblows:
  8122 00006AB1 BE[F1690000]        <1> 		mov esi, winmsg
  8123 00006AB6 6631D2              <1> 		xor dx, dx
  8124 00006AB9 668B0D[AA8A0000]    <1> 		mov cx, [resolutiony]
  8125 00006AC0 6681E92000          <1> 		sub cx, 32
  8126 00006AC5 31DB                <1> 		xor ebx, ebx
  8127 00006AC7 30E4                <1> 		xor ah, ah
  8128 00006AC9 B011                <1> 		mov al, 00010001b
  8129 00006ACB E8CDF6FFFF          <1> 		call showstring
  8130 00006AD0 BE[BB690000]        <1> 		mov esi, gotomenu
  8131 00006AD5 668B0D[AA8A0000]    <1> 		mov cx, [resolutiony]
  8132 00006ADC 6681E93000          <1> 		sub cx, 48
  8133 00006AE1 6631D2              <1> 		xor dx, dx
  8134 00006AE4 30E4                <1> 		xor ah, ah
  8135 00006AE6 B010                <1> 		mov al, 00010000b
  8136 00006AE8 BB[676A0000]        <1> 		mov ebx, gotomenuboot
  8137 00006AED E9ABF6FFFF          <1> 		jmp showstring
  8138                              <1> 
  8139 00006AF2 20035802            <1> 	termwindow:	dw 800,600	;;window size
  8140 00006AF6 53757065725465726D- <1> 	termmsg:	db "SuperTerminal",0	;;window title
  8141 00006AFF 696E616C00          <1>
  8142                              <1> 	
  8143 00006AFF <incbin>            <1> interneticon: 	incbin 'source/precompiled/interneticon.pak'
  8144 00006AFF <incbin>            <1> wordicon: 	incbin 'source/precompiled/wordicon.pak'
  8145 00006AFF <incbin>            <1> pacmanpellet: incbin 'source/precompiled/pacmanpellet.pak'
  8146 00006AFF <incbin>            <1> ghostie	incbin 'source/precompiled/ghostie.pak'
  8147 00006AFF <incbin>            <1> pacman	incbin 'source/precompiled/pacman.pak'
  8148                                      %include 'source/arp.asm'
  8149                              <1> ;ARP TESTING
  8150                              <1> arpinit:
  8151 00006D8E BE[456E0000]        <1> 	mov esi, arptable
  8152 00006D93 BF[C04F0000]        <1> 	mov edi, sysmac
  8153 00006D98 BB[BC4F0000]        <1> 	mov ebx, sysip
  8154 00006D9D 8B0F                <1> 	mov ecx, [edi]
  8155 00006D9F 890E                <1> 	mov [esi], ecx
  8156 00006DA1 668B4F04            <1> 	mov cx, [edi + 4]
  8157 00006DA5 894E04              <1> 	mov [esi + 4], ecx
  8158 00006DA8 8B0B                <1> 	mov ecx, [ebx]
  8159 00006DAA 894E06              <1> 	mov [esi + 6], ecx
  8160 00006DAD C605[446E0000]01    <1> 	mov byte [arpconfig], 1
  8161 00006DB4 C3                  <1> 	ret
  8162                              <1> arptest:
  8163 00006DB5 803D[446E0000]01    <1> 	cmp byte [arpconfig], 1
  8164 00006DBC 7405                <1> 	je arptest2
  8165 00006DBE E8CBFFFFFF          <1> 	call arpinit
  8166                              <1> arptest2:	;try to reach 192.168.0.1
  8167 00006DC3 8B0D[C04F0000]      <1> 	mov ecx, [sysmac]
  8168 00006DC9 668B1D[C44F0000]    <1> 	mov bx, [sysmac + 4]
  8169 00006DD0 890D[0A6E0000]      <1> 	mov [sourcemac], ecx
  8170 00006DD6 66891D[0E6E0000]    <1> 	mov [sourcemac + 4],bx
  8171 00006DDD 890D[1A6E0000]      <1> 	mov [arpsenderinfo], ecx
  8172 00006DE3 66891D[1E6E0000]    <1> 	mov [arpsenderinfo + 4], bx
  8173 00006DEA BF[046E0000]        <1> 	mov edi, frame
  8174 00006DEF BE[446E0000]        <1> 	mov esi, framend
  8175 00006DF4 E8F9E0FFFF          <1> 	call rtl8139.sendpacket
  8176 00006DF9 BE[61780000]        <1> 	mov esi, line
  8177 00006DFE E8E1B4FFFF          <1> 	call print
  8178 00006E03 C3                  <1> 	ret
  8179                              <1> 	
  8180                              <1> ;example frame
  8181                              <1> frame:
  8182 00006E04 FFFFFFFFFFFF        <1> destinationmac:	db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
  8183 00006E0A 000000000000        <1> sourcemac:		db 0,0,0,0,0,0
  8184 00006E10 0608                <1> ethertype:		dw 0x0806			;;arp
  8185                              <1> 	;;example packet
  8186 00006E12 0100                <1> 	arppacket: 		dw 1				;;ethernet is 1
  8187 00006E14 0008                <1> 	arpprotocol: 	dw 0x0800			;;ip is 0x800
  8188 00006E16 0604                <1> 					db 6,4				;;length of mac, length of ip
  8189 00006E18 0100                <1> 	arpoperation: 	dw 1				;;one for arp request
  8190 00006E1A 000000000000        <1> 	arpsenderinfo:	db 0x00,0x00,0x00,0x00,0x00,0x00	;;mac
  8191 00006E20 C0A80005            <1> 					db 192,168,0,5			;;ip
  8192 00006E24 000000000000        <1> 	arptargetinfo:	db 0x00,0x00,0x00,0x00,0x00,0x00	;;ignored in requests
  8193 00006E2A C0A80001            <1> 					db 192,168,0,1			;;ip
  8194 00006E2E 00<rept>            <1> padding:		times (64-($-frame)) db 0
  8195                              <1> framend:
  8196                              <1> 
  8197 00006E44 00                  <1> arpconfig db 0
  8198                              <1> arptable:	;;mac,ip
  8199 00006E45 000000000000000000- <1> 	times 10 db 0,0,0,0,0,0,0,0,0,0
  8200 00006E4E 00<rept>            <1>
  8201                              <1> arptableend:
  8202                                      %include 'source/pci.asm'
  8203 00006EA9 00                  <1> pcibus		db 0
  8204 00006EAA 00                  <1> pcidevice	db 0
  8205 00006EAB 00                  <1> pcifunction	db 0
  8206 00006EAC 00                  <1> pciregister	db 0
  8207 00006EAD 00                  <1> pcireqtype db 0
  8208                              <1> 
  8209                              <1> getpciport:
  8210 00006EAE B001                <1> 	mov al, 1
  8211 00006EB0 A2[AD6E0000]        <1> 	mov [pcireqtype], al
  8212 00006EB5 E916000000          <1> 	jmp searchpci
  8213                              <1> pcidump:
  8214 00006EBA 31C0                <1> 	xor eax, eax
  8215 00006EBC A2[AB6E0000]        <1> 	mov [pcifunction], al
  8216 00006EC1 A2[A96E0000]        <1> 	mov [pcibus], al
  8217 00006EC6 A2[AA6E0000]        <1> 	mov [pcidevice], al
  8218 00006ECB A2[AD6E0000]        <1> 	mov [pcireqtype], al
  8219                              <1> searchpci:		;;return in ebx, start X in pciX
  8220 00006ED0 30C0                <1> 	xor al, al
  8221 00006ED2 A2[AC6E0000]        <1> 	mov [pciregister], al
  8222 00006ED7 E855010000          <1> 	call getpciaddr
  8223 00006EDC BAF80C0000          <1> 	mov edx, 0xCF8
  8224 00006EE1 EF                  <1> 	out dx, eax	;;request pci config
  8225 00006EE2 BAFC0C0000          <1> 	mov edx, 0xCFC
  8226 00006EE7 ED                  <1> 	in eax, dx 	;;read in pci config
  8227 00006EE8 3D0000FFFF          <1> 	cmp eax, 0xFFFF0000
  8228 00006EED 0F8237000000        <1> 	jb near checkpcidevice
  8229                              <1> searchpciret:
  8230                              <1> nextpcidevice:
  8231 00006EF3 30C0                <1> 	xor al, al
  8232 00006EF5 A2[AB6E0000]        <1> 	mov [pcifunction], al
  8233 00006EFA A0[AA6E0000]        <1> 	mov al, [pcidevice]
  8234 00006EFF 3C1F                <1> 	cmp al, 11111b
  8235 00006F01 0F83C1000000        <1> 	jae near nextpcibus
  8236 00006F07 FEC0                <1> 	inc al
  8237 00006F09 A2[AA6E0000]        <1> 	mov [pcidevice], al
  8238 00006F0E EBC0                <1> 	jmp searchpci
  8239 00006F10 A0[AB6E0000]        <1> 	mov al, [pcifunction]
  8240 00006F15 3C07                <1> 	cmp al, 111b
  8241 00006F17 0F83D6FFFFFF        <1> 	jae near nextpcidevice
  8242 00006F1D FEC0                <1> 	inc al
  8243 00006F1F A2[AB6E0000]        <1> 	mov [pcifunction], al
  8244 00006F24 EBAA                <1> 	jmp searchpci
  8245 00006F26 00000000            <1> pcitype: db 0,0,0,0
  8246                              <1> checkpcidevice:
  8247 00006F2A 30C0                <1> 	xor al, al
  8248 00006F2C 3805[AD6E0000]      <1> 	cmp [pcireqtype], al
  8249 00006F32 0F842B000000        <1> 	je near dumppcidevice
  8250 00006F38 B008                <1> 	mov al, 0x08
  8251 00006F3A A2[AC6E0000]        <1> 	mov [pciregister], al	;;class code, subclass, revision id
  8252 00006F3F E8ED000000          <1> 	call getpciaddr
  8253 00006F44 BAF80C0000          <1> 	mov edx, 0xCF8
  8254 00006F49 EF                  <1> 	out dx, eax
  8255 00006F4A BAFC0C0000          <1> 	mov edx, 0xCFC
  8256 00006F4F ED                  <1> 	in eax, dx
  8257 00006F50 C1C008              <1> 	rol eax, 8
  8258 00006F53 8A1D[266F0000]      <1> 	mov bl, [pcitype]
  8259 00006F59 38D8                <1> 	cmp al, bl
  8260 00006F5B 0F8486000000        <1> 	je near foundpciaddr
  8261 00006F61 EB90                <1> 	jmp searchpciret
  8262                              <1> dumppcidevice:
  8263 00006F63 30C0                <1> 	xor al, al
  8264 00006F65 A2[AC6E0000]        <1> 	mov [pciregister], al
  8265 00006F6A E8C2000000          <1> 	call getpciaddr
  8266 00006F6F 89C1                <1> 	mov ecx, eax
  8267 00006F71 C605[84320000]05    <1> 	mov byte [firsthexshown], 5
  8268 00006F78 E81CC3FFFF          <1> 	call showhex
  8269                              <1> dumppcidevicelp:
  8270 00006F7D A2[AC6E0000]        <1> 	mov [pciregister], al
  8271 00006F82 E8AA000000          <1> 	call getpciaddr
  8272 00006F87 BAF80C0000          <1> 	mov edx, 0xCF8
  8273 00006F8C EF                  <1> 	out dx, eax
  8274 00006F8D BAFC0C0000          <1> 	mov edx, 0xCFC
  8275 00006F92 ED                  <1> 	in eax, dx
  8276 00006F93 89C1                <1> 	mov ecx, eax
  8277 00006F95 A0[AC6E0000]        <1> 	mov al, [pciregister]
  8278 00006F9A 0404                <1> 	add al, 4
  8279 00006F9C C605[84320000]05    <1> 	mov byte [firsthexshown], 5
  8280 00006FA3 E8F1C2FFFF          <1> 	call showhex
  8281 00006FA8 3C3C                <1> 	cmp al, 0x3C
  8282 00006FAA 72D1                <1> 	jb dumppcidevicelp
  8283                              <1> dumppcidn:
  8284 00006FAC 803D[88290000]00    <1> 	cmp byte [charpos], 0
  8285 00006FB3 0F843AFFFFFF        <1> 	je near searchpciret
  8286 00006FB9 BE[61780000]        <1> 	mov esi, line
  8287 00006FBE E821B3FFFF          <1> 	call print
  8288 00006FC3 E92BFFFFFF          <1> 	jmp searchpciret
  8289                              <1> nextpcibus:
  8290 00006FC8 30C0                <1> 	xor al, al
  8291 00006FCA A2[AA6E0000]        <1> 	mov [pcidevice], al
  8292 00006FCF A0[A96E0000]        <1> 	mov al, [pcibus]
  8293 00006FD4 3C7F                <1> 	cmp al, 1111111b
  8294 00006FD6 730C                <1> 	jae donesearchpci
  8295 00006FD8 FEC0                <1> 	inc al
  8296 00006FDA A2[A96E0000]        <1> 	mov [pcibus], al
  8297 00006FDF E9ECFEFFFF          <1> 	jmp searchpci
  8298                              <1> donesearchpci:
  8299 00006FE4 31D2                <1> 	xor edx, edx
  8300 00006FE6 C3                  <1> 	ret
  8301                              <1> foundpciaddr:
  8302 00006FE7 B010                <1> 	mov al, 0x10
  8303 00006FE9 A2[AC6E0000]        <1> 	mov [pciregister], al
  8304                              <1> findpciioaddr:
  8305 00006FEE E83E000000          <1> 	call getpciaddr
  8306 00006FF3 BAF80C0000          <1> 	mov edx, 0xCF8
  8307 00006FF8 EF                  <1> 	out dx, eax
  8308 00006FF9 BAFC0C0000          <1> 	mov edx, 0xCFC
  8309 00006FFE ED                  <1> 	in eax, dx
  8310 00006FFF 89C3                <1> 	mov ebx, eax
  8311 00007001 81E301000000        <1> 	and ebx, 1
  8312 00007007 81FB00000000        <1> 	cmp ebx, 0
  8313 0000700D 0F8408000000        <1> 	je near notpciioaddr
  8314 00007013 2D01000000          <1> 	sub eax, 1
  8315 00007018 89C2                <1> 	mov edx, eax
  8316 0000701A C3                  <1> 	ret
  8317                              <1> notpciioaddr:
  8318 0000701B A0[AC6E0000]        <1> 	mov al, [pciregister]
  8319 00007020 0404                <1> 	add al, 4
  8320 00007022 3C28                <1> 	cmp al, 0x28
  8321 00007024 0F87C9FEFFFF        <1> 	ja near searchpciret
  8322 0000702A A2[AC6E0000]        <1> 	mov [pciregister], al
  8323 0000702F EBBD                <1> 	jmp findpciioaddr
  8324                              <1> getpciaddr:		;;puts it in eax and ebx
  8325 00007031 31C0                <1> 			xor eax, eax
  8326 00007033 BB00000080          <1> 			mov ebx, 0x80000000
  8327 00007038 A0[A96E0000]        <1> 			mov al, [pcibus]
  8328 0000703D C1E010              <1> 			shl eax, 16
  8329 00007040 01C3                <1> 			add ebx, eax
  8330 00007042 31C0                <1> 			xor eax, eax
  8331 00007044 A0[AA6E0000]        <1> 			mov al, [pcidevice]
  8332 00007049 C1E00B              <1> 			shl eax, 11
  8333 0000704C 01C3                <1> 			add ebx, eax
  8334 0000704E 31C0                <1> 			xor eax, eax
  8335 00007050 A0[AB6E0000]        <1> 			mov al, [pcifunction]
  8336 00007055 C1E008              <1> 			shl eax, 8
  8337 00007058 01C3                <1> 			add ebx, eax
  8338 0000705A 31C0                <1> 			xor eax, eax
  8339 0000705C A0[AC6E0000]        <1> 			mov al, [pciregister]
  8340 00007061 01C3                <1> 			add ebx, eax
  8341 00007063 89D8                <1> 			mov eax, ebx
  8342 00007065 C3                  <1> 			ret
  8343                                      %include 'source/disk.asm'
  8344                              <1> ;This loads files using the methods in the loaded driver
  8345                              <1> %include "source/drivers/disk/realmode.asm"
  8346                              <2> diskrreal:
  8347                              <2> 			;read from disk using real mode-it does not work with large files
  8348                              <2> 			;sector count in cl
  8349                              <2> 			;disk number in ch
  8350                              <2> 			;48 bit address with last 32 bits in ebx
  8351                              <2> 			;buffer in esi
  8352                              <2> 			;puts end of buffer in edi and end lba address in edx
  8353 00007066 880D[93700000]      <2> 	mov [sdlength], cl
  8354 0000706C 891D[94700000]      <2> 	mov [sdaddress], ebx
  8355 00007072 8935[F2710000]      <2> 	mov [oldesireal], esi
  8356 00007078 66BE[9870]          <2> 	mov si, readdiskreal
  8357 0000707C 668935[C5100000]    <2> 	mov [realmodeptr], si
  8358 00007083 BE[D4700000]        <2> 	mov esi, backfromrealread
  8359 00007088 8935[C1100000]      <2> 	mov [realmodereturn], esi
  8360 0000708E E9309FFFFF          <2> 	jmp realmode
  8361 00007093 00                  <2> sdlength db 0
  8362 00007094 00000000            <2> sdaddress dd 0
  8363                              <2> 
  8364                              <2> [BITS 16]
  8365                              <2> readdiskreal:
  8366 00007098 C706[C470]1000      <2> 	mov word [dlen], 0x10
  8367 0000709E C706[C870]0000      <2> 	mov word [daddress], 0
  8368 000070A4 C706[CA70]0001      <2> 	mov word [dsegm], 0x100
  8369 000070AA 66891E[CC70]        <2> 	mov [dlbaad], ebx
  8370 000070AF 880E[C670]          <2> 	mov [dreadlen], cl
  8371                              <2> ReadHardDisk:
  8372 000070B3 BE[C470]            <2> 	mov si, diskaddresspacket
  8373 000070B6 31C0                <2> 	xor ax, ax
  8374 000070B8 B442                <2> 	mov ah, 0x42
  8375 000070BA 8A16[C370]          <2> 	mov dl, [dnumber]
  8376 000070BE CD13                <2> 	int 0x13
  8377 000070C0 72F1                <2> 	jc ReadHardDisk
  8378 000070C2 C3                  <2> 	ret
  8379                              <2> 
  8380 000070C3 80                  <2> dnumber db 0x80
  8381                              <2> diskaddresspacket:
  8382 000070C4 10                  <2> dlen:	db 0x10 ;size of packet
  8383 000070C5 00                  <2> 		db 0
  8384 000070C6 7F00                <2> dreadlen:	dw 0x7F	;blocks to read=maximum
  8385 000070C8 0000                <2> daddress:	dw 0x0	;address 0
  8386 000070CA 0001                <2> dsegm:		dw 0x100	;segment
  8387                              <2> 		;start with known value for hd
  8388                              <2> dlbaad:
  8389 000070CC 00000000            <2> 	dd 0	;lba address
  8390 000070D0 00000000            <2> 	dd 0
  8391                              <2> [BITS 32]
  8392                              <2> backfromrealread:
  8393 000070D4 8B35[F2710000]      <2> 	mov esi, [oldesireal]
  8394 000070DA 8B1D[94700000]      <2> 	mov ebx, [sdaddress]
  8395 000070E0 31C9                <2> 	xor ecx, ecx
  8396 000070E2 8A0D[93700000]      <2> 	mov cl, [sdlength]
  8397 000070E8 01CB                <2> 	add ebx, ecx
  8398 000070EA 66B80800            <2> 	mov ax, LINEAR_SEL
  8399 000070EE 8EE0                <2> 	mov fs, ax
  8400 000070F0 BF00100000          <2> 	mov edi, 0x1000
  8401 000070F5 B200                <2> 	mov dl, 0
  8402 000070F7 D0E1                <2> 	shl cl, 1
  8403                              <2> copyfromrmodedisk:
  8404 000070F9 648A07              <2> 	mov al, [fs:edi]
  8405 000070FC 8806                <2> 	mov [esi], al
  8406 000070FE 47                  <2> 	inc edi
  8407 000070FF 46                  <2> 	inc esi
  8408 00007100 FECA                <2> 	dec dl
  8409 00007102 80FA00              <2> 	cmp dl, 0
  8410 00007105 75F2                <2> 	jne copyfromrmodedisk
  8411 00007107 FEC9                <2> 	dec cl
  8412 00007109 B200                <2> 	mov dl, 0
  8413 0000710B 80F900              <2> 	cmp cl, 0
  8414 0000710E 75E9                <2> 	jne copyfromrmodedisk
  8415 00007110 66B82800            <2> 	mov ax, NEW_DATA_SEL
  8416 00007114 8EE0                <2> 	mov fs, ax
  8417 00007116 89F7                <2> 	mov edi, esi
  8418 00007118 8B35[F2710000]      <2> 	mov esi, [oldesireal]
  8419 0000711E 89DA                <2> 	mov edx, ebx
  8420 00007120 8B1D[94700000]      <2> 	mov ebx, [sdaddress]
  8421 00007126 C3                  <2> 	ret
  8422                              <2> 	
  8423                              <1> loadfile:	;loads a file with the name buffer's location in edi into location in esi
  8424 00007127 803F00              <1> 	cmp byte [edi], 0
  8425 0000712A 0F8448000000        <1> 	je near nofileload
  8426 00007130 89FA                <1> 	mov edx, edi
  8427 00007132 BB[998B0000]        <1> 	mov ebx, diskfileindex
  8428                              <1> nextnamechar:
  8429 00007137 8A07                <1> 	mov al, [edi]
  8430 00007139 3C26                <1> 	cmp al, '&'
  8431 0000713B 7440                <1> 	je nullfile
  8432 0000713D 8A23                <1> 	mov ah, [ebx]
  8433 0000713F 47                  <1> 	inc edi
  8434 00007140 43                  <1> 	inc ebx
  8435 00007141 88C1                <1> 	mov cl, al
  8436 00007143 08E1                <1> 	or cl, ah
  8437 00007145 80F900              <1> 	cmp cl, 0
  8438 00007148 744E                <1> 	je equalfilenames
  8439 0000714A 80F920              <1> 	cmp cl, ' '
  8440 0000714D 7449                <1> 	je equalfilenames
  8441 0000714F 3C2A                <1> 	cmp al, '*'
  8442 00007151 742B                <1> 	je equalfilenames2
  8443 00007153 80FC00              <1> 	cmp ah, 0
  8444 00007156 7410                <1> 	je nextfilename
  8445 00007158 3C00                <1> 	cmp al, 0
  8446 0000715A 7404                <1> 	je getebxzero
  8447 0000715C 38E0                <1> 	cmp al, ah
  8448 0000715E 74D7                <1> 	je nextnamechar
  8449                              <1> getebxzero:
  8450 00007160 8A23                <1> 	mov ah, [ebx]
  8451 00007162 43                  <1> 	inc ebx
  8452 00007163 80FC00              <1> 	cmp ah, 0
  8453 00007166 75F8                <1> 	jne getebxzero
  8454                              <1> nextfilename:
  8455 00007168 81C308000000        <1> 	add ebx, 8		;next descriptor
  8456 0000716E 89D7                <1> 	mov edi, edx
  8457 00007170 81FB[FF8C0000]      <1> 	cmp ebx, enddiskfileindex
  8458 00007176 72BF                <1> 	jb nextnamechar
  8459                              <1> nofileload:
  8460 00007178 BA94010000          <1> 	mov edx, 404	;indicate not found error
  8461                              <1> nullfile:
  8462 0000717D C3                  <1> 	ret
  8463                              <1> equalfilenames2:
  8464 0000717E 81EB02000000        <1> 	sub ebx, 2
  8465                              <1> eqfilefind:
  8466 00007184 43                  <1> 	inc ebx
  8467 00007185 81FB[FF8C0000]      <1> 	cmp ebx, enddiskfileindex
  8468 0000718B 0F83E7FFFFFF        <1> 	jae near nofileload
  8469 00007191 8A03                <1> 	mov al, [ebx]
  8470 00007193 3C00                <1> 	cmp al, 0
  8471 00007195 75ED                <1> 	jne eqfilefind
  8472 00007197 43                  <1> 	inc ebx
  8473                              <1> equalfilenames:
  8474 00007198 8B4304              <1> 	mov eax, [ebx + 4] 	;put file size in eax
  8475 0000719B 8B1B                <1> 	mov ebx, [ebx]		;put file beginning in ebx
  8476 0000719D 031D[55010000]      <1> 	add ebx, [lbaad]	;add offset to solleros
  8477 000071A3 31C9                <1> 	xor ecx, ecx
  8478 000071A5 88C1                <1> 	mov cl, al			;get excess number of sectors
  8479 000071A7 C0E102              <1> 	shl cl, 2
  8480 000071AA C0E902              <1> 	shr cl, 2			;cut off at 64
  8481 000071AD 29C8                <1> 	sub eax, ecx		;get rid of excess sectors
  8482 000071AF B500                <1> 	mov ch, 0			;drive 0
  8483 000071B1 C1E806              <1> 	shr eax, 6			;get number of 64 sector tracks
  8484                              <1> loaddiskfile:			;tracks in eax, excess sectors in cl, drive in ch, buffer in esi, address in ebx
  8485 000071B4 A3[F6710000]        <1> 	mov [filetracks], eax
  8486 000071B9 89F7                <1> 	mov edi, esi		;just in case cl is 0
  8487 000071BB 89DA                <1> 	mov edx, ebx
  8488 000071BD 80F900              <1> 	cmp cl, 0
  8489 000071C0 7405                <1> 	je copytracksforfile
  8490 000071C2 E89FFEFFFF          <1> 	call diskrreal	;take care of excess sectors
  8491                              <1> copytracksforfile:
  8492 000071C7 A1[F6710000]        <1> 	mov eax, [filetracks]
  8493 000071CC 3D00000000          <1> 	cmp eax, 0
  8494 000071D1 7419                <1> 	je donecopyfile
  8495 000071D3 48                  <1> 	dec eax
  8496 000071D4 A3[F6710000]        <1> 	mov [filetracks], eax
  8497 000071D9 89D3                <1> 	mov ebx, edx	;get end lba
  8498 000071DB B140                <1> 	mov cl, 0x40 ;for compatability with BIOS it uses 64 instead of 128
  8499 000071DD 8A2D[54010000]      <1> 	mov ch, [DriveNumber]
  8500 000071E3 89FE                <1> 	mov esi, edi	;reset buffer
  8501 000071E5 E87CFEFFFF          <1> 	call diskrreal
  8502 000071EA EBDB                <1> 	jmp copytracksforfile
  8503                              <1> donecopyfile:
  8504 000071EC BA00000000          <1> 	mov edx, 0	;no error
  8505 000071F1 C3                  <1> 	ret
  8506                              <1> 
  8507 000071F2 00000000            <1> oldesireal dd 0
  8508 000071F6 00000000            <1> filetracks dd 0
  8509 000071FA 00                  <1> lbad1 db 0
  8510 000071FB 00                  <1> lbad2 db 0
  8511 000071FC 00                  <1> lbad3 db 0
  8512 000071FD 00                  <1> lbad4 db 0
  8513 000071FE 00                  <1> lbad5 db 0
  8514 000071FF 00                  <1> lbad6 db 0
  8515 00007200 6400                <1> segments dw 100
  8516                              <1> 
  8517                              <1> 
  8518                              <1> 	
  8519                                      %include 'source/threads.asm'
  8520                              <1> ;;THIS IS MY FIRST ATTEMPT AT IMPLEMENTING THREADS
  8521                              <1> threadstarttest:
  8522 00007202 E9B2040000          <1>     jmp startthreads
  8523                              <1> mainthread:
  8524 00007207 F4                  <1> 	hlt		;;this does not work properly
  8525 00007208 EBFD                <1> 	jmp mainthread
  8526                              <1> 	
  8527                              <1> nwcmdst:
  8528 0000720A C605[29720000]00    <1> 	mov byte [threadson], 0
  8529 00007211 E973BBFFFF          <1> 	jmp nwcmd
  8530                              <1> 	
  8531                              <1> modelthread:
  8532 00007216 B001                <1> 	mov al, 1
  8533 00007218 B409                <1> 	mov ah, 9
  8534 0000721A 8B0D[1A780000]      <1> 	mov ecx, [currentthread]
  8535 00007220 CD30                <1> 	int 0x30
  8536 00007222 E86B94FFFF          <1> 	call timerinterrupt
  8537 00007227 EBE1                <1> 	jmp nwcmdst
  8538                              <1> 	
  8539                              <1> 	
  8540 00007229 00                  <1> threadson db 0
  8541 0000722A 04000000            <1> lastthread dd 4
  8542                              <1> 
  8543                              <1> thrdtst:
  8544 0000722E [16720000]<rept>    <1> times 256 dd modelthread	;;could go up to 2048, but that takes too long
  8545                              <1> thrdtstend:
  8546                              <1> 
  8547 0000762E 00000000            <1> 	espold dd 0
  8548                              <1> 
  8549                              <1> threadfork:
  8550 00007632 C605[29720000]01    <1> 	mov byte [threadson], 1
  8551 00007639 60                  <1> 	pushad
  8552                              <1> 	
  8553 0000763A 8CC8                <1> 	mov eax, cs
  8554 0000763C 89C2                <1> 	mov edx, eax
  8555 0000763E 8B4C2428            <1> 	mov ecx, [esp + 40]
  8556 00007642 81C900020000        <1> 	or ecx, 0x200
  8557 00007648 89E3                <1> 	mov ebx, esp
  8558 0000764A BC[35B30100]        <1> 	mov esp, stackdummy
  8559                              <1> 	
  8560 0000764F 60                  <1> 	pushad
  8561 00007650 B8[07720000]        <1> 	mov eax, mainthread
  8562 00007655 89442420            <1> 	mov [esp + 32], eax
  8563 00007659 89542424            <1> 	mov [esp + 36], edx
  8564 0000765D 894C2428            <1> 	mov [esp + 40], ecx
  8565 00007661 8925[2D8F0100]      <1> 	mov [threadlist], esp
  8566                              <1> 	
  8567 00007667 891D[2E760000]      <1> 	mov [espold], ebx
  8568 0000766D 89F0                <1> 	mov eax, esi
  8569 0000766F BC[35B70100]        <1> 	mov esp, stack1
  8570 00007674 8B1D[2A720000]      <1> 	mov ebx, [lastthread]
  8571 0000767A C1E30A              <1> 	shl ebx, 10
  8572 0000767D 01DC                <1> 	add esp, ebx
  8573 0000767F C1EB0A              <1> 	shr ebx, 10
  8574 00007682 60                  <1> 	pushad
  8575 00007683 89442420            <1> 	mov [esp + 32], eax
  8576 00007687 89542424            <1> 	mov [esp + 36], edx
  8577 0000768B 894C2428            <1> 	mov [esp + 40], ecx
  8578 0000768F 89A3[2D8F0100]      <1> 	mov [threadlist + ebx], esp
  8579 00007695 8B25[2E760000]      <1> 	mov esp, [espold]
  8580 0000769B 81C304000000        <1> 	add ebx, 4
  8581 000076A1 89A3[2D8F0100]      <1> 	mov [threadlist + ebx], esp
  8582 000076A7 81C304000000        <1> 	add ebx, 4
  8583 000076AD 891D[2A720000]      <1> 	mov [lastthread], ebx
  8584 000076B3 B020                <1> 	mov al, 0x20
  8585 000076B5 E620                <1> 	out 0x20, al
  8586 000076B7 61                  <1> 	popad
  8587 000076B8 C3                  <1> 	ret
  8588                              <1> 
  8589                              <1> startthreads:
  8590 000076B9 C605[29720000]01    <1> 	mov byte [threadson], 1
  8591 000076C0 60                  <1> 	pushad
  8592                              <1> 	
  8593 000076C1 8CC8                <1> 	mov eax, cs
  8594 000076C3 89C2                <1> 	mov edx, eax
  8595 000076C5 8B4C2428            <1> 	mov ecx, [esp + 40]
  8596 000076C9 81C900020000        <1> 	or ecx, 0x200
  8597 000076CF 89E3                <1> 	mov ebx, esp
  8598 000076D1 BC[35B30100]        <1> 	mov esp, stackdummy
  8599                              <1> 	
  8600 000076D6 60                  <1> 	pushad
  8601 000076D7 B8[07720000]        <1> 	mov eax, mainthread
  8602 000076DC 89442420            <1> 	mov [esp + 32], eax	;used to be 32
  8603 000076E0 89542424            <1> 	mov [esp + 36], edx ;used to be 36
  8604 000076E4 894C2428            <1> 	mov [esp + 40], ecx
  8605 000076E8 8925[2D8F0100]      <1> 	mov [threadlist], esp
  8606                              <1> 
  8607                              <1> 			;;that above setup the dummy thread which for some reason does not run
  8608                              <1> 			;;this below will setup the threads found in thrdtst
  8609                              <1> 
  8610                              <1> testthreads:
  8611 000076EE BE[2E720000]        <1> 	mov esi, thrdtst
  8612 000076F3 BC[35B70100]        <1> 	mov esp, stack1
  8613 000076F8 BF[2D8F0100]        <1> 	mov edi, threadlist
  8614 000076FD 81C704000000        <1> 	add edi, 4
  8615                              <1> nxtthreadld:
  8616 00007703 60                  <1> 	pushad
  8617 00007704 8B06                <1> 	mov eax, [esi]
  8618 00007706 89442420            <1> 	mov [esp + 32], eax
  8619 0000770A 89542424            <1> 	mov [esp + 36], edx
  8620 0000770E 894C2428            <1> 	mov [esp + 40], ecx
  8621 00007712 8927                <1> 	mov [edi], esp
  8622 00007714 81C400040000        <1> 	add esp, 1024
  8623 0000771A 81C604000000        <1> 	add esi, 4
  8624 00007720 81C704000000        <1> 	add edi, 4
  8625 00007726 81FF[35AF0100]      <1> 	cmp edi, threadlistend
  8626 0000772C 0F831A000000        <1> 	jae near nomorethreadspace
  8627 00007732 81FC[35BF2100]      <1> 	cmp esp, bssend
  8628 00007738 0F8347000000        <1> 	jae near nomorestackspace
  8629 0000773E 81FE[2E760000]      <1> 	cmp esi, thrdtstend
  8630 00007744 72BD                <1> 	jb nxtthreadld
  8631 00007746 89DC                <1> 	mov esp, ebx
  8632 00007748 61                  <1> 	popad
  8633 00007749 FB                  <1> 	sti
  8634 0000774A EBFE                <1> 	jmp $	;;wait for the irq to hook
  8635                              <1> 	
  8636                              <1> nomorethreadspace:
  8637 0000774C BE[62770000]        <1> 	mov esi, nmts
  8638 00007751 E88EABFFFF          <1> 	call print
  8639 00007756 C605[29720000]00    <1> 	mov byte [threadson], 0
  8640 0000775D E927B6FFFF          <1> 	jmp nwcmd
  8641 00007762 74656820636F6C6F6E- <1> nmts	db "teh colonel no can haz moar treds",10,0
  8642 0000776B 656C206E6F2063616E- <1>
  8643 00007774 2068617A206D6F6172- <1>
  8644 0000777D 2074726564730A00    <1>
  8645                              <1> 
  8646                              <1> nomorestackspace:
  8647 00007785 BE[9B770000]        <1> 	mov esi, nmss
  8648 0000778A E855ABFFFF          <1> 	call print
  8649 0000778F C605[29720000]00    <1> 	mov byte [threadson], 0
  8650 00007796 E9EEB5FFFF          <1> 	jmp nwcmd
  8651 0000779B 74656820636F6C6F6E- <1> nmss	db "teh colonel no can haz moar staqz",10,0
  8652 000077A4 656C206E6F2063616E- <1>
  8653 000077AD 2068617A206D6F6172- <1>
  8654 000077B6 20737461717A0A00    <1>
  8655                              <1> 	
  8656                              <1> threadswitch:
  8657 000077BE FA                  <1> 	cli
  8658 000077BF 60                  <1> 	pushad
  8659 000077C0 BF[2D8F0100]        <1> 	mov edi, threadlist
  8660 000077C5 A1[1A780000]        <1> 	mov eax, [currentthread]
  8661 000077CA 40                  <1> 	inc eax
  8662 000077CB A3[1A780000]        <1> 	mov [currentthread], eax
  8663 000077D0 6648                <1> 	dec ax
  8664 000077D2 C1E002              <1> 	shl eax, 2
  8665 000077D5 01C7                <1> 	add edi, eax
  8666 000077D7 8927                <1> 	mov [edi], esp
  8667 000077D9 81C704000000        <1> 	add edi, 4
  8668 000077DF 81FF[35AF0100]      <1> 	cmp edi, threadlistend
  8669 000077E5 0F830D000000        <1> 	jae near nookespthread
  8670 000077EB 8B07                <1> 	mov eax, [edi]
  8671 000077ED 3D00000000          <1> 	cmp eax, 0
  8672 000077F2 0F8519000000        <1> 	jne near okespthread
  8673                              <1> nookespthread:
  8674 000077F8 BF[2D8F0100]        <1> 	mov edi, threadlist
  8675 000077FD 31C0                <1> 	xor eax, eax
  8676 000077FF A3[1A780000]        <1> 	mov [currentthread], eax
  8677 00007804 8B07                <1> 	mov eax, [edi]
  8678 00007806 3D00000000          <1> 	cmp eax, 0
  8679 0000780B 0F84F9F9FFFF        <1> 	je near nwcmdst
  8680                              <1> okespthread:
  8681 00007811 89C4                <1> 	mov esp, eax
  8682 00007813 B020                <1> 	mov al, 0x20
  8683 00007815 E620                <1> 	out 0x20, al
  8684 00007817 61                  <1> 	popad
  8685 00007818 FB                  <1> 	sti
  8686 00007819 C3                  <1> 	ret
  8687                              <1> 	
  8688 0000781A 00000000            <1> currentthread dd 0
  8689                                      %include 'source/data.asm'
  8690 0000781E 6578697400          <1> 	exitmsg db	"exit",0
  8691 00007823 50726F6772616D2022- <1> 	notfound1 db "Program ",34,0
  8692 0000782C 00                  <1>
  8693 0000782D 22206E6F7420666F75- <1> 	notfound2 db  34," not found.",10,0
  8694 00007836 6E642E0A00          <1>
  8695 0000783B 757365726E616D653A- <1> 	userask db "username:",0
  8696 00007844 00                  <1>
  8697 00007845 70617373776F72643A- <1> 	pwdask	db	"password:",0
  8698 0000784E 00                  <1>
  8699 0000784F 40                  <1> 	computer db "@"
  8700 00007850 536F6C6C65724F5300  <1> 	computername	db	"SollerOS",0
  8701 00007859 20                  <1> 	location db " "
  8702 0000785A 2F00                <1> 	locationname db "/",0
  8703 0000785C 5D242000            <1> 	endprompt db "]$ ",0
  8704 00007860 0D                  <1> 	crlf 	db  13
  8705 00007861 0A00                <1> 	line	db	10,0
  8706                              <1> 	userlst:
  8707 00007863 726F6F7400          <1> 			db "root",0
  8708 00007868 617765736F6D65706F- <1> 			db "awesomepower",0
  8709 00007871 77657200            <1>
  8710 00007875 7573657200          <1> 			db "user",0
  8711 0000787A 70617373776F726400  <1> 			db "password",0
  8712 00007883 6E00                <1> 			db "n",0	;;abuse for quick entry-a quick double n followed by a double enter will get you in
  8713 00007885 00                  <1> 			db 0
  8714                              <1> 	userlstend:
  8715                              <1> 	
  8716 00007885 <incbin>            <1> fonts:	incbin 'source/precompiled/fonts.pak'
  8717                              <1> fontend:
  8718                              <1> 
  8719                              <1> mcursor:
  8720 00008886 01                  <1> 	db	00000001b
  8721 00008887 81                  <1> 	db	10000001b
  8722 00008888 C1                  <1> 	db	11000001b
  8723 00008889 E1                  <1> 	db	11100001b
  8724 0000888A F1                  <1> 	db	11110001b
  8725 0000888B F9                  <1> 	db	11111001b
  8726 0000888C FD                  <1> 	db	11111101b
  8727 0000888D FF                  <1> 	db	11111111b
  8728 0000888E F9                  <1> 	db	11111001b
  8729 0000888F B9                  <1> 	db	10111001b
  8730 00008890 39                  <1> 	db	00111001b
  8731 00008891 1C                  <1> 	db	00011100b
  8732 00008892 1C                  <1> 	db	00011100b
  8733 00008893 0E                  <1> 	db	00001110b
  8734 00008894 0E                  <1> 	db	00001110b
  8735 00008895 0C                  <1> 	db	00001100b
  8736                              <1> 	
  8737                              <1> VBEMODEBLOCK:
  8738 00008896 00<rept>            <1> vbesignature 		times  4 db 0 	;VBE Signature
  8739 0000889A 00<rept>            <1> vbeversion  		times  2 db 0	;VBE Version
  8740 0000889C 00<rept>            <1> oemstringptr  		times  4 db 0	;Pointer to OEM String
  8741 000088A0 00<rept>            <1> capabilities 		times  4 db 0	;Capabilities of graphics cont.
  8742 000088A4 00<rept>            <1> videomodeptr 		times  4 db 0	;Pointer to Video Mode List
  8743 000088A8 00<rept>            <1> totalmemory   		times  2 db 0	;number of 64Kb memory blocks
  8744 000088AA 00<rept>            <1> oemsoftwarerev  	times  2 db 0	;VBE implementation Software revision
  8745 000088AC 00<rept>            <1> oemvendornameptr 	times  4 db 0	;Pointer to Vendor Name String
  8746 000088B0 00<rept>            <1> oemproductnameptr 	times  4 db 0	;Pointer to Product Name String
  8747 000088B4 00<rept>            <1> oemproductrevptr 	times  4 db 0	;Pointer to Product Revision String
  8748 000088B8 00<rept>            <1> reserved			times  222 db 0	;Reserved for VBE implementation scratch area
  8749 00008996 00<rept>            <1> oemdata 			times  256 db 0	;Data Area for OEM Strings
  8750                              <1> 
  8751                              <1> VBEMODEINFOBLOCK:
  8752                              <1> ;Mandatory information for all VBE revision
  8753 00008A96 00<rept>            <1> modeattributes   	times  2 db 0	;Mode attributes
  8754 00008A98 00                  <1> winaattributes   	times  1 db 0	;Window A attributes
  8755 00008A99 00                  <1> winbattributes   	times  1 db 0	;Window B attributes
  8756 00008A9A 00<rept>            <1> wingranularity   	times  2 db 0	;Window granularity
  8757 00008A9C 00<rept>            <1> winsize          	times  2 db 0	;Window size
  8758 00008A9E 00<rept>            <1> winasegment      	times  2 db 0	;Window A start segment
  8759 00008AA0 00<rept>            <1> winbsegment      	times  2 db 0	;Window B start segment
  8760 00008AA2 00<rept>            <1> winfuncptr       	times  4 db 0	;pointer to window function
  8761 00008AA6 00<rept>            <1> bytesperscanline 	times  2 db 0	;Bytes per scan line
  8762                              <1> 
  8763                              <1> ;Mandatory information for VBE 1.2 and above
  8764 00008AA8 00<rept>            <1> resolutionx     	times  2 db 0	;Horizontal resolution in pixel or chars
  8765 00008AAA 00<rept>            <1> resolutiony	    	times  2 db 0	;Vertical resolution in pixel or chars
  8766 00008AAC 00                  <1> xcharsize       	times  1 db 0	;Character cell width in pixel
  8767 00008AAD 00                  <1> ycharsize       	times  1 db 0	;Character cell height in pixel
  8768 00008AAE 00                  <1> numberofplanes  	times  1 db 0	;Number of memory planes
  8769 00008AAF 00                  <1> bitsperpixel    	times  1 db 0	;Bits per pixel
  8770 00008AB0 00                  <1> numberofbanks   	times  1 db 0	;Number of banks
  8771 00008AB1 00                  <1> memorymodel     	times  1 db 0	;Memory model type
  8772 00008AB2 00                  <1> banksize        	times  1 db 0	;Bank size in KB
  8773 00008AB3 00                  <1> numberofimagepages	times  1 db 0	;Number of images
  8774 00008AB4 00                  <1> reserved1       	times  1 db 0	;Reserved for page function
  8775                              <1> 
  8776                              <1> ;Direct Color fields (required for direct/6 and YUV/7 memory models)
  8777 00008AB5 00                  <1> redmasksize			times  1 db 0	;Size of direct color red mask in bits
  8778 00008AB6 00                  <1> redfieldposition	times  1 db 0	;Bit position of lsb of red bask
  8779 00008AB7 00                  <1> greenmasksize   	times  1 db 0	;Size of direct color green mask in bits
  8780 00008AB8 00                  <1> greenfieldposition	times  1 db 0	;Bit position of lsb of green bask
  8781 00008AB9 00                  <1> bluemasksize		times  1 db 0	;Size of direct color blue mask in bits
  8782 00008ABA 00                  <1> bluefieldposition	times  1 db 0	;Bit position of lsb of blue bask
  8783 00008ABB 00                  <1> rsvdmasksize        times  1 db 0		;Size of direct color reserved mask in bits
  8784 00008ABC 00                  <1> rsvdfieldposition	times  1 db 0		;Bit position of lsb of reserved bask
  8785 00008ABD 00                  <1> directcolormodeinfo	times  1 db 0	;Direct color mode attributes
  8786                              <1> 
  8787                              <1> ;Mandatory information for VBE 2.0 and above
  8788 00008ABE 00<rept>            <1> physbaseptr 		times  4 db 0	;Physical address for flat frame buffer
  8789 00008AC2 00<rept>            <1> offscreenmemoffset 	times  4 db 0	;Pointer to start of off screen memory
  8790 00008AC6 00<rept>            <1> offscreenmemsize 	times  2 db 0    ;Amount of off screen memory in 1Kb units
  8791 00008AC8 00<rept>            <1> reserved2 			times  206 db 0  ;Remainder of ModeInfoBlock
  8792                              <1> 
  8793 00008B96 0000                <1> resolutionx2 dw 0	;this is not part of the VBE but is necessary GUI info
  8794 00008B98 00                  <1> guion db 0
  8795                              <1> VBEEND:
  8796                              <1> osend:	;this is the end of the operating system's space on disk
  8797                                      %include 'fileindex.asm'
  8798                              <1> diskfileindex:
  8799 00008B99 617267746573742E65- <1> db "argtest.elf",0
  8800 00008BA2 6C6600              <1>
  8801 00008BA5 47000000            <1> dd (f0-$$)/512
  8802 00008BA9 08010000            <1> dd (f1-f0)/512
  8803 00008BAD 626300              <1> db "bc",0
  8804 00008BB0 4F010000            <1> dd (f1-$$)/512
  8805 00008BB4 D4020000            <1> dd (f2-f1)/512
  8806 00008BB8 63686172746573742E- <1> db "chartest.elf",0
  8807 00008BC1 656C6600            <1>
  8808 00008BC5 23040000            <1> dd (f2-$$)/512
  8809 00008BC9 28010000            <1> dd (f3-f2)/512
  8810 00008BCD 646F73746573742E63- <1> db "dostest.com",0
  8811 00008BD6 6F6D00              <1>
  8812 00008BD9 4B050000            <1> dd (f3-$$)/512
  8813 00008BDD 01000000            <1> dd (f4-f3)/512
  8814 00008BE1 66696E616C636F756E- <1> db "finalcount.snd",0
  8815 00008BEA 742E736E6400        <1>
  8816 00008BF0 4C050000            <1> dd (f4-$$)/512
  8817 00008BF4 01000000            <1> dd (f5-f4)/512
  8818 00008BF8 68656C6C6F776F726C- <1> db "helloworld.elf",0
  8819 00008C01 642E656C6600        <1>
  8820 00008C07 4D050000            <1> dd (f5-$$)/512
  8821 00008C0B DA010000            <1> dd (f6-f5)/512
  8822 00008C0F 696E7400            <1> db "int",0
  8823 00008C13 27070000            <1> dd (f6-$$)/512
  8824 00008C17 01000000            <1> dd (f7-f6)/512
  8825 00008C1B 6C6F7374776F6F6473- <1> db "lostwoods.snd",0
  8826 00008C24 2E736E6400          <1>
  8827 00008C29 28070000            <1> dd (f7-$$)/512
  8828 00008C2D 01000000            <1> dd (f8-f7)/512
  8829 00008C31 6D6172696F2E736E64- <1> db "mario.snd",0
  8830 00008C3A 00                  <1>
  8831 00008C3B 29070000            <1> dd (f8-$$)/512
  8832 00008C3F 01000000            <1> dd (f9-f8)/512
  8833 00008C43 736F6C6C65726F732E- <1> db "solleros.bmp",0
  8834 00008C4C 626D7000            <1>
  8835 00008C50 2A070000            <1> dd (f9-$$)/512
  8836 00008C54 B0020000            <1> dd (f10-f9)/512
  8837 00008C58 736F6C6C65726F732E- <1> db "solleros.txt",0
  8838 00008C61 74787400            <1>
  8839 00008C65 DA090000            <1> dd (f10-$$)/512
  8840 00008C69 01000000            <1> dd (f11-f10)/512
  8841 00008C6D 736F6E676F74696D65- <1> db "songotime.snd",0
  8842 00008C76 2E736E6400          <1>
  8843 00008C7B DB090000            <1> dd (f11-$$)/512
  8844 00008C7F 01000000            <1> dd (f12-f11)/512
  8845 00008C83 737464696F74657374- <1> db "stdiotest.elf",0
  8846 00008C8C 2E656C6600          <1>
  8847 00008C91 DC090000            <1> dd (f12-$$)/512
  8848 00008C95 26010000            <1> dd (f13-f12)/512
  8849 00008C99 74656C7900          <1> db "tely",0
  8850 00008C9E 020B0000            <1> dd (f13-$$)/512
  8851 00008CA2 01000000            <1> dd (f14-f13)/512
  8852 00008CA6 7475746F7269616C2E- <1> db "tutorial.sh",0
  8853 00008CAF 736800              <1>
  8854 00008CB2 030B0000            <1> dd (f14-$$)/512
  8855 00008CB6 03000000            <1> dd (f15-f14)/512
  8856 00008CBA 756E667300          <1> db "unfs",0
  8857 00008CBF 060B0000            <1> dd (f15-$$)/512
  8858 00008CC3 02000000            <1> dd (f16-f15)/512
  8859 00008CC7 766963746F72792E77- <1> db "victory.wav",0
  8860 00008CD0 617600              <1>
  8861 00008CD3 080B0000            <1> dd (f16-$$)/512
  8862 00008CD7 16000000            <1> dd (f17-f16)/512
  8863 00008CDB 5F696D672E62696E00  <1> db "_img.bin",0
  8864 00008CE4 1E0B0000            <1> dd (f17-$$)/512
  8865 00008CE8 D7020000            <1> dd (f18-f17)/512
  8866 00008CEC 5F756E66732D64656D- <1> db "_unfs-demo",0
  8867 00008CF5 6F00                <1>
  8868 00008CF7 F50D0000            <1> dd (f18-$$)/512
  8869 00008CFB 05000000            <1> dd (f19-f18)/512
  8870                              <1> enddiskfileindex:
  8871                              <1> 
  8872                                      %include 'source/bss.asm'
  8873                              <1> bssstart: equ $
  8874                              <1> stack: equ bssstart
  8875                              <1> stackend: equ stack + 4096
  8876                              <1> graphicstable equ stackend;w type, dw datalocation, w locationx, w locationy, w selected, dw code
  8877                              <1> 	graphicstableend equ graphicstable + 200h
  8878                              <1> mousecolorbuf equ graphicstableend ;where the gui under the mouse is stored
  8879                              <1> mcolorend equ mousecolorbuf + 256
  8880                              <1> fileindex: equ mcolorend
  8881                              <1> fileindexend: equ fileindex + 1024
  8882                              <1> uid equ fileindexend
  8883                              <1> IFON equ uid + 4
  8884                              <1> IFTRUE equ IFON + 1
  8885                              <1> BATCHPOS equ IFTRUE + 100
  8886                              <1> BATCHISON equ BATCHPOS + 4
  8887                              <1> LOOPON equ BATCHISON + 1
  8888                              <1> LOOPPOS	equ LOOPON + 1
  8889                              <1> variables: equ LOOPPOS + 4
  8890                              <1> varend: equ variables + 4096
  8891                              <1> buftxt2: equ varend
  8892                              <1> buftxt: equ buftxt2 + 1024 + 10
  8893                              <1> buftxtend: equ buftxt + 1024
  8894                              <1> buf2: equ buftxtend
  8895                              <1> numbuf: equ buf2 + 20
  8896                              <1> videobuf equ numbuf + 1	;1280x1024pixels in characters
  8897                              <1> videobufend	equ videobuf + 160*64*2
  8898                              <1> videobuf2 equ videobufend + 160*2
  8899                              <1> videobuf2end equ videobuf2 + 160*64*2
  8900                              <1> lastcommandpos: equ videobuf2end + 160*2
  8901                              <1> currentcommandpos: equ lastcommandpos + 4
  8902                              <1> commandbuf: equ currentcommandpos + 4
  8903                              <1> commandbufend: equ commandbuf + 4096 ;this is where kernel space only ends, the rest is for threading
  8904                              <1> rbuffstart: equ commandbufend ;for use with networking
  8905                              <1> threadlist: equ rbuffstart + 8212 ;this buffer will hold the stack locations of all of the threads, up to 2048
  8906                              <1> threadlistend: equ threadlist + 2050*4
  8907                              <1> stacks:	equ threadlistend ;the stacks will go on forever until end of memory
  8908                              <1> stackdummy: equ stacks + 1024
  8909                              <1> stack1: equ stackdummy + 1024  ;woah, thats a lot of space for stacks
  8910                              <1> bssend:	equ stack1 + 1024*2050	;from here on, it is not kernel space so apps can be loaded here.
  8911                              <1> dosprogloc equ 0x400000
  8912                                      %include 'files.asm'
  8913 00008CFF 00<rept>            <1> align 512,db 0
  8914                              <1> f0:
  8915 00008CFF <incbin>            <1> incbin "included/argtest.elf"
  8916 00029C23 00<rept>            <1> align 512,db 0
  8917                              <1> f1:
  8918 00029C23 <incbin>            <1> incbin "included/bc"
  8919 000845E9 00<rept>            <1> align 512,db 0
  8920                              <1> f2:
  8921 000845E9 <incbin>            <1> incbin "included/chartest.elf"
  8922 000A94D4 00<rept>            <1> align 512,db 0
  8923                              <1> f3:
  8924 000A94D4 <incbin>            <1> incbin "included/dostest.com"
  8925 000A972B 00<rept>            <1> align 512,db 0
  8926                              <1> f4:
  8927 000A972B <incbin>            <1> incbin "included/finalcount.snd"
  8928 000A9902 00<rept>            <1> align 512,db 0
  8929                              <1> f5:
  8930 000A9902 <incbin>            <1> incbin "included/helloworld.elf"
  8931 000E4C10 00<rept>            <1> align 512,db 0
  8932                              <1> f6:
  8933 000E4C10 <incbin>            <1> incbin "included/int"
  8934 000E4F74 00<rept>            <1> align 512,db 0
  8935                              <1> f7:
  8936 000E4F74 <incbin>            <1> incbin "included/lostwoods.snd"
  8937 000E5056 00<rept>            <1> align 512,db 0
  8938                              <1> f8:
  8939 000E5056 <incbin>            <1> incbin "included/mario.snd"
  8940 000E523A 00<rept>            <1> align 512,db 0
  8941                              <1> f9:
  8942 000E523A <incbin>            <1> incbin "included/solleros.bmp"
  8943 0013B3E6 00<rept>            <1> align 512,db 0
  8944                              <1> f10:
  8945 0013B3E6 <incbin>            <1> incbin "included/solleros.txt"
  8946 0013B576 00<rept>            <1> align 512,db 0
  8947                              <1> f11:
  8948 0013B576 <incbin>            <1> incbin "included/songotime.snd"
  8949 0013B64A 00<rept>            <1> align 512,db 0
  8950                              <1> f12:
  8951 0013B64A <incbin>            <1> incbin "included/stdiotest.elf"
  8952 00160370 00<rept>            <1> align 512,db 0
  8953                              <1> f13:
  8954 00160370 <incbin>            <1> incbin "included/tely"
  8955 0016059F 00<rept>            <1> align 512,db 0
  8956                              <1> f14:
  8957 0016059F <incbin>            <1> incbin "included/tutorial.sh"
  8958 00160B45 00<rept>            <1> align 512,db 0
  8959                              <1> f15:
  8960 00160B45 <incbin>            <1> incbin "included/unfs"
  8961                              <1> align 512,db 0
  8962                              <1> f16:
  8963 00160B45 <incbin>            <1> incbin "included/victory.wav"
  8964 00163B48 00<rept>            <1> align 512,db 0
  8965                              <1> f17:
  8966 00163B48 <incbin>            <1> incbin "included/_img.bin"
  8967                              <1> align 512,db 0
  8968                              <1> f18:
  8969 00163B48 <incbin>            <1> incbin "included/_unfs-demo"
  8970                              <1> align 512,db 0
  8971                              <1> f19:
