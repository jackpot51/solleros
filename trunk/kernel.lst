     1                                  [BITS 16]
     2                                      %include 'source/boot.asm'
     3                              <1>     ; MENU.ASM
     4                              <1> %include 'source/signature.asm'
     5                              <2> signature:
     6 00000000 536F6C6C65724F53    <2> db "SollerOS" ;Operating system name
     7 00000008 20416C706861204275- <2> db " Alpha Build ",0	;Soller OS development level
     8 00000011 696C642000          <2>
     9 00000016 CF000000            <2> dd 207	;version number
    10                              <2> signatureend:
    11                              <1> menustart:	
    12 0000001A 8CC8                <1> 	mov ax, cs
    13 0000001C 8ED8                <1> 	mov ds, ax
    14 0000001E 8EC0                <1> 	mov es, ax
    15 00000020 8ED0                <1> 	mov ss, ax
    16 00000022 880E[9701]          <1> 	mov [DriveNumber], cl
    17 00000026 668916[9801]        <1> 	mov [lbaad], edx
    18 0000002B E84801              <1> 	call guiload2	;make users switch using a command-this leads to very fast boots
    19 0000002E E80C02              <1> 	call getmemorysize ;get the memory map after the video is initialized
    20 00000031 6631DB              <1> 	xor ebx, ebx
    21 00000034 6631C9              <1> 	xor ecx, ecx
    22 00000037 6631D2              <1> 	xor edx, edx
    23 0000003A 6631F6              <1> 	xor esi, esi
    24 0000003D 6631FF              <1> 	xor edi, edi
    25 00000040 E98A04              <1> 	jmp pmode
    26                              <1> guiswitch:
    27 00000043 81F90000            <1> 	cmp cx, 0
    28 00000047 750B                <1> 	jne guiswitchdefnum
    29 00000049 B81200              <1> 	mov ax, 12h
    30 0000004C 31DB                <1> 	xor bx, bx
    31 0000004E CD10                <1> 	int 10h
    32 00000050 E95100              <1> 	jmp guiloadagain
    33                              <1> guiswitchnocando:
    34 00000053 C3                  <1> 	ret	;return without switching as mode number is bad
    35                              <1> guiswitchdefnum:	;switch to a defined mode number
    36 00000054 B8004F              <1> 	mov ax, 0x4F00
    37 00000057 BF[AB89]            <1> 	mov di, VBEMODEBLOCK
    38 0000005A CD10                <1> 	int 10h
    39 0000005C BE[CD89]            <1> 	mov si, reserved
    40 0000005F 81EE0200            <1> 	sub si, 2
    41                              <1> .loop:
    42 00000063 81C60200            <1> 	add si, 2
    43 00000067 81FE[AB8A]          <1> 	cmp si, oemdata
    44 0000006B 74E6                <1> 	je guiswitchnocando
    45 0000006D 813CFFFF            <1> 	cmp word [si], 0xFFFF
    46 00000071 74E0                <1> 	je guiswitchnocando
    47 00000073 390C                <1> 	cmp [si], cx
    48 00000075 75EC                <1> 	jne .loop
    49 00000077 8936[9E01]          <1> 	mov [videomodecache], si
    50 0000007B 81C90040            <1> 	or cx, 0x4000	;make sure linear frame buffer is selected
    51 0000007F B8014F              <1> 	mov ax, 0x4F01
    52 00000082 BF[AB8B]            <1> 	mov di, VBEMODEINFOBLOCK
    53 00000085 890E[9C01]          <1> 	mov [vesamode], cx
    54 00000089 CD10                <1> 	int 10h
    55 0000008B E9CB00              <1> 	jmp selectedvesa
    56                              <1> guiload:
    57 0000008E BE[B504]            <1> 	mov si, bootmsg
    58 00000091 E81C01              <1> 	call printrm
    59 00000094 31C0                <1> 	xor ax, ax
    60 00000096 CD16                <1> 	int 16h
    61 00000098 3C79                <1> 	cmp al, "y"
    62 0000009A 0F85D800            <1> 	jne near guiload2
    63 0000009E BE[7579]            <1> 	mov si, crlf
    64 000000A1 E80C01              <1> 	call printrm
    65                              <1> guiloadagain:
    66 000000A4 B8004F              <1> 	mov ax, 04F00h
    67 000000A7 BF[AB89]            <1> 	mov di, VBEMODEBLOCK
    68 000000AA CD10                <1> 	int 10h
    69 000000AC BE[CD89]            <1> 	mov si, reserved
    70 000000AF 81EE0200            <1> 	sub si, 2
    71                              <1> findvideomodes:
    72 000000B3 81C60200            <1> 	add si, 2
    73 000000B7 8B0C                <1> 	mov cx, [si]
    74 000000B9 81F9FFFF            <1> 	cmp cx, 0xFFFF
    75 000000BD 0F840A00            <1> 	je near nextvmode
    76 000000C1 81FE[AB8A]          <1> 	cmp si, oemdata
    77 000000C5 0F83AD00            <1> 	jae near guiload2	;;kill if no valid list is found
    78 000000C9 EBE8                <1> 	jmp findvideomodes 	
    79                              <1> ;;debug,shows vmodes available
    80                              <1> nextvmode:
    81 000000CB 81EE0200            <1> 	sub si, 2
    82 000000CF 81FE[CD89]          <1> 	cmp si, reserved
    83 000000D3 0F82CDFF            <1> 	jb near guiloadagain
    84 000000D7 8B0C                <1> 	mov cx, [si]
    85 000000D9 81F9FFFF            <1> 	cmp cx, 0xFFFF
    86 000000DD 0F84EAFF            <1> 	je near nextvmode
    87 000000E1 81C10040            <1> 	add cx, 0x4000 		;;Linear Frame Buffer
    88 000000E5 B8014F              <1> 	mov ax, 04F01h
    89 000000E8 BF[AB8B]            <1> 	mov di, VBEMODEINFOBLOCK
    90 000000EB 890E[9C01]          <1> 	mov [vesamode], cx
    91 000000EF CD10                <1> 	int 10h
    92 000000F1 A0[C48B]            <1> 	mov al, [bitsperpixel]
    93 000000F4 3C10                <1> 	cmp al, 16
    94 000000F6 75D3                <1> 	jne nextvmode
    95 000000F8 8936[9E01]          <1> 	mov [videomodecache], si
    96 000000FC 84E4                <1> 	test ah, ah
    97 000000FE 0F842200            <1> 	jz near setvesamode
    98 00000102 EBC7                <1> 	jmp nextvmode
    99 00000104 0A0D49732074686973- <1> isthisvideook db 10,13,"Is this video mode OK?(y/n)",13,10,0
   100 0000010D 20766964656F206D6F- <1>
   101 00000116 6465204F4B3F28792F- <1>
   102 0000011F 6E290D0A00          <1>
   103                              <1> setvesamode:
   104 00000124 8B0E[BD8B]          <1> 	mov cx, [resolutionx]
   105 00000128 E89D00              <1> 	call decshow
   106 0000012B B078                <1> 	mov al, "x"
   107 0000012D E80501              <1> 	call char
   108 00000130 8B0E[BF8B]          <1> 	mov cx, [resolutiony]
   109 00000134 E89100              <1> 	call decshow
   110 00000137 B040                <1> 	mov al, "@"
   111 00000139 E8F900              <1> 	call char
   112 0000013C 31C9                <1> 	xor cx, cx
   113 0000013E 8A0E[C48B]          <1> 	mov cl, [bitsperpixel]
   114 00000142 E88300              <1> 	call decshow
   115 00000145 BE[0401]            <1> 	mov si, isthisvideook
   116 00000148 E86500              <1> 	call printrm
   117 0000014B 31C0                <1> 	xor ax, ax
   118 0000014D CD16                <1> 	int 16h
   119 0000014F 8B36[9E01]          <1> 	mov si, [videomodecache]
   120 00000153 3C79                <1> 	cmp al, "y"
   121 00000155 0F8572FF            <1> 	jne near nextvmode
   122                              <1> selectedvesa:
   123 00000159 8B16[BD8B]          <1> 	mov dx, [resolutionx]
   124 0000015D 01D2                <1> 	add dx, dx
   125 0000015F 8916[AB8C]          <1> 	mov [resolutionx2], dx
   126 00000163 31D2                <1> 	xor dx, dx
   127 00000165 31C9                <1> 	xor cx, cx
   128 00000167 B8024F              <1> 	mov ax, 04F02h
   129 0000016A 8B1E[9C01]          <1> 	mov bx, [vesamode]
   130 0000016E CD10                <1> 	int 10h		;;enter VESA mode
   131 00000170 C606[AD8C]01        <1> 	mov byte [guion], 1
   132 00000175 C3                  <1> 	ret
   133                              <1> guiload2:
   134 00000176 B9E001              <1> 	mov cx, 480
   135 00000179 BA8002              <1> 	mov dx, 640
   136 0000017C 8916[BD8B]          <1> 	mov [resolutionx], dx
   137 00000180 01D2                <1> 	add dx, dx
   138 00000182 8916[AB8C]          <1> 	mov [resolutionx2], dx
   139 00000186 890E[BF8B]          <1> 	mov [resolutiony], cx
   140 0000018A B81200              <1> 	mov ax, 12h
   141 0000018D 31DB                <1> 	xor bx, bx
   142 0000018F CD10                <1> 	int 10h
   143 00000191 C606[AD8C]00        <1> 	mov byte [guion], 0
   144 00000196 C3                  <1> 	ret
   145                              <1> 
   146 00000197 00                  <1> DriveNumber db 0
   147 00000198 00000000            <1> lbaad dd 0
   148                              <1> 	
   149 0000019C 0000                <1> vesamode dw 0
   150 0000019E 0000                <1> videomodecache dw 0
   151                              <1> 
   152                              <1> tests:
   153 000001A0 BB0700              <1> 	mov bx, 7
   154 000001A3 B40E                <1> 	mov ah, 0Eh
   155 000001A5 FEC0                <1> 	inc al
   156 000001A7 3C02                <1> 	cmp al, 2
   157 000001A9 7501                <1> 	jne cnttest
   158 000001AB C3                  <1> 	ret
   159                              <1> cnttest:
   160 000001AC CD10                <1> 	int 10h
   161 000001AE EBF0                <1> 	jmp tests
   162                              <1> 
   163                              <1>     printrm:			; 'si' comes in with string address
   164 000001B0 BB0700              <1> 	    mov bx,07		; write to display
   165 000001B3 B40E                <1> 	    mov ah,0Eh		; screen function
   166 000001B5 8A04                <1>     prs2:    mov al,[si]         ; get next character
   167 000001B7 3C00                <1> 	    cmp al,0		; look for terminator 
   168 000001B9 7405                <1>             je finpr2		; zero byte at end of string
   169 000001BB CD10                <1> 	    int 10h		; write character to screen.    
   170 000001BD 46                  <1>      	    inc si	     	; move to next character
   171 000001BE EBF5                <1> 	    jmp prs2		; loop
   172 000001C0 C3                  <1>     finpr2: ret
   173                              <1> 
   174 000001C1 0000000000          <1> dcnm db 0,0,0,0,0
   175 000001C6 0000                <1> dcnmend db 0,0
   176                              <1> 
   177                              <1> 
   178                              <1> decshow:
   179 000001C8 BE[C101]            <1> 	mov si, dcnm
   180                              <1> decclear:
   181 000001CB B030                <1> 	mov al, "0"
   182 000001CD 8804                <1> 	mov [si], al
   183 000001CF 46                  <1> 	inc si
   184 000001D0 81FE[C601]          <1> 	cmp si, dcnmend
   185 000001D4 76F5                <1> 	jbe decclear
   186 000001D6 4E                  <1> 	dec si
   187 000001D7 E81500              <1> 	call convertrm
   188 000001DA BE[C101]            <1> 	mov si, dcnm
   189                              <1> dectst:
   190 000001DD 8A04                <1> 	mov al, [si]
   191 000001DF 46                  <1> 	inc si
   192 000001E0 81FE[C601]          <1> 	cmp si, dcnmend
   193 000001E4 7704                <1> 	ja dectstend
   194 000001E6 3C30                <1> 	cmp al, "0"
   195 000001E8 76F3                <1> 	jbe dectst
   196                              <1> dectstend:
   197 000001EA 4E                  <1> 	dec si
   198 000001EB E8C2FF              <1> 	call printrm
   199 000001EE C3                  <1> 	ret
   200                              <1> 	
   201                              <1> 	
   202                              <1> convertrm:
   203 000001EF 4E                  <1> 	dec si
   204 000001F0 89F3                <1> 	mov bx, si		;place to convert into must be in si, number to convert must be in cx
   205                              <1> cnvrtrm:
   206 000001F2 89DE                <1> 	mov si, bx
   207 000001F4 81EE0300            <1> 	sub si, 3
   208 000001F8 46                  <1> ten3rm:	inc si
   209 000001F9 81F9E803            <1> 	cmp cx, 1000
   210 000001FD 7208                <1> 	jb ten2rm
   211 000001FF 81E9E803            <1> 	sub cx, 1000
   212 00000203 FE04                <1> 	inc byte [si]
   213 00000205 EBEB                <1> 	jmp cnvrtrm
   214 00000207 46                  <1> ten2rm:	inc si
   215 00000208 81F96400            <1> 	cmp cx, 100
   216 0000020C 7208                <1> 	jb ten1rm
   217 0000020E 81E96400            <1> 	sub cx, 100
   218 00000212 FE04                <1> 	inc byte [si]
   219 00000214 EBDC                <1> 	jmp cnvrtrm
   220 00000216 46                  <1> ten1rm:	inc si
   221 00000217 81F90A00            <1> 	cmp cx, 10
   222 0000021B 7208                <1> 	jb ten0rm
   223 0000021D 81E90A00            <1> 	sub cx, 10
   224 00000221 FE04                <1> 	inc byte [si]
   225 00000223 EBCD                <1> 	jmp cnvrtrm
   226 00000225 46                  <1> ten0rm:	inc si
   227 00000226 81F90100            <1> 	cmp cx, 1
   228 0000022A 7208                <1> 	jb tendnrm
   229 0000022C 81E90100            <1> 	sub cx, 1
   230 00000230 FE04                <1> 	inc byte [si]
   231 00000232 EBBE                <1> 	jmp cnvrtrm
   232                              <1> tendnrm:
   233 00000234 C3                  <1> 	ret
   234                              <1> 
   235                              <1>     char: 		    ;char must be in al
   236 00000235 BB0700              <1>        mov bx, 07
   237 00000238 B40E                <1> 	   mov ah, 0Eh
   238 0000023A CD10                <1> 	   int 10h
   239 0000023C C3                  <1> 	   ret
   240                              <1> 
   241                              <1> 
   242                              <1> getmemorysize:
   243 0000023D BF[7302]            <1> 	mov di, memlistbuf
   244 00000240 6631DB              <1> 	xor ebx, ebx
   245                              <1> getmemsizeloop:
   246 00000243 66B820E80000        <1> 	mov eax, 0xE820
   247 00000249 66BA50414D53        <1> 	mov edx, 0x0534D4150
   248 0000024F 66B918000000        <1> 	mov ecx, 24
   249 00000255 CD15                <1> 	int 0x15
   250 00000257 81C71800            <1> 	add di, 24
   251 0000025B 81FF[B304]          <1> 	cmp di, memlistend
   252 0000025F 7309                <1> 	jae nomoregetmemsize
   253 00000261 6681FB00000000      <1> 	cmp ebx, 0
   254 00000268 75D9                <1> 	jne getmemsizeloop
   255                              <1> nomoregetmemsize:
   256 0000026A 81EF[7302]          <1> 	sub di, memlistbuf
   257 0000026E 893E[B304]          <1> 	mov [memlistend], di
   258 00000272 C3                  <1> 	ret
   259                              <1> 	
   260                              <1> 
   261                              <1> memlistbuf:
   262 00000273 00<rept>            <1> 	times 576 db 0
   263 000004B3 0000                <1> memlistend: dw 0
   264                              <1> 	
   265 000004B5 426F6F7420696E746F- <1> bootmsg:	db "Boot into the GUI?(y/n)",0
   266 000004BE 20746865204755493F- <1>
   267 000004C7 28792F6E2900        <1>
   268                                      %include 'source/pmode.asm'
   269                              <1> [BITS 16]
   270                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   271                              <1> ;	16-bit real mode
   272                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   273                              <1> 
   274                              <1> pmode:
   275 000004CD BA9200              <1> 	mov dx, 0x92
   276 000004D0 EC                  <1> 	in al, dx	;;A20
   277 000004D1 0C02                <1> 	or al, 2
   278 000004D3 EE                  <1> 	out dx, al
   279 000004D4 6631DB              <1> 	xor ebx, ebx
   280 000004D7 8CCB                <1> 	mov bx,cs		; EBX=segment
   281 000004D9 66C1E304            <1> 	shl ebx,4		;	<< 4
   282 000004DD 67668D03            <1> 	lea eax,[ebx]		; EAX=linear address of segment base
   283 000004E1 A3[F107]            <1> 	mov [gdt2 + 2],ax
   284 000004E4 A3[F907]            <1> 	mov [gdt3 + 2],ax
   285 000004E7 66C1E810            <1> 	shr eax,16
   286 000004EB A2[F307]            <1> 	mov [gdt2 + 4],al
   287 000004EE A2[FB07]            <1> 	mov [gdt3 + 4],al
   288 000004F1 8826[F607]          <1> 	mov [gdt2 + 7],ah
   289 000004F5 8826[FE07]          <1> 	mov [gdt3 + 7],ah
   290                              <1> 
   291 000004F9 66B8[5BA00100]      <1> 	mov eax, stack
   292 000004FF 660306[8706]        <1> 	add eax, [newcodecache]
   293 00000504 A3[E907]            <1> 	mov [gdts + 2],ax
   294 00000507 66C1E810            <1> 	shr eax, 16
   295 0000050B A2[EB07]            <1> 	mov [gdts + 4],al
   296 0000050E 8826[EE07]          <1> 	mov [gdts + 7], ah
   297                              <1> 	
   298 00000512 66A1[8706]          <1> 	mov eax, [newcodecache]
   299 00000516 A3[0108]            <1> 	mov [gdt4 + 2],ax
   300 00000519 A3[0908]            <1> 	mov [gdt5 + 2],ax
   301 0000051C A3[1108]            <1> 	mov [gdtv8086 + 2], ax
   302 0000051F A3[1908]            <1> 	mov [gdtv80862 + 2], ax
   303 00000522 66C1E810            <1> 	shr eax,16
   304 00000526 A2[0308]            <1> 	mov [gdt4 + 4],al
   305 00000529 A2[0B08]            <1> 	mov [gdt5 + 4],al
   306 0000052C A2[1308]            <1> 	mov [gdtv8086 + 4],al
   307 0000052F A2[1B08]            <1> 	mov [gdtv80862 + 4],al
   308 00000532 8826[0608]          <1> 	mov [gdt4 + 7],ah
   309 00000536 8826[0E08]          <1> 	mov [gdt5 + 7],ah
   310 0000053A 8826[1608]          <1> 	mov [gdtv8086 + 7],ah
   311 0000053E 8826[1E08]          <1> 	mov [gdtv80862 + 7],ah
   312                              <1> 	
   313 00000542 66B800004000        <1> 	mov eax, dosprogloc
   314 00000548 660306[8706]        <1> 	add eax, [newcodecache]
   315 0000054D A3[2108]            <1> 	mov [gdtdos + 2],ax
   316 00000550 A3[2908]            <1> 	mov [gdtdos2 + 2],ax
   317 00000553 66C1E810            <1> 	shr eax,16
   318 00000557 A2[2308]            <1> 	mov [gdtdos + 4],al
   319 0000055A A2[2B08]            <1> 	mov [gdtdos2 + 4],al
   320 0000055D 8826[2608]          <1> 	mov [gdtdos + 7],ah
   321 00000561 8826[2E08]          <1> 	mov [gdtdos2 + 7],ah
   322                              <1> 	
   323                              <1> ; fix up gdt and idt
   324 00000565 67668D83[D7070000]  <1> 	lea eax,[ebx + gdt]	; EAX=linear address of gdt
   325 0000056D 66A3[CD07]          <1> 	mov [gdtr + 2],eax
   326 00000571 67668D83[2F080000]  <1> 	lea eax,[ebx + idt]	; EAX=linear address of idt
   327 00000579 66A3[D307]          <1> 	mov [idtr + 2],eax
   328 0000057D FA                  <1> 	cli
   329 0000057E 0F0116[CB07]        <1> 	lgdt [gdtr]
   330 00000583 0F011E[D107]        <1> 	lidt [idtr]
   331 00000588 6631DB              <1> 	xor ebx, ebx
   332 0000058B 8CDB                <1> 	mov bx, ds
   333 0000058D 66891E[8306]        <1> 	mov [basecache], ebx
   334 00000592 0F20C0              <1> 	mov eax,cr0
   335 00000595 0C01                <1> 	or al,1
   336 00000597 0F22C0              <1> 	mov cr0,eax
   337 0000059A EA[9F05]1800        <1> 	jmp SYS_CODE_SEL:do_pm
   338                              <1> [BITS 32]
   339                              <1> do_pm:
   340 0000059F 31C0                <1> 	xor eax, eax
   341 000005A1 66B82000            <1> 	mov ax, SYS_DATA_SEL
   342 000005A5 8ED8                <1> 	mov ds, ax
   343 000005A7 8EC0                <1> 	mov es, ax
   344 000005A9 8EE0                <1> 	mov fs, ax
   345 000005AB 66B81000            <1> 	mov ax, STACK_SEL
   346 000005AF 8ED0                <1> 	mov ss, ax
   347 000005B1 BC00200000          <1> 	mov esp, 8192
   348 000005B6 66B83000            <1> 	mov ax, NEW_DATA_SEL
   349 000005BA 8EE8                <1> 	mov gs, ax
   350                              <1> 	
   351                              <1> copykernel:
   352 000005BC 648B06              <1> 	mov eax, [fs:esi]
   353 000005BF 658906              <1> 	mov [gs:esi], eax
   354 000005C2 81C604000000        <1> 	add esi, 4
   355 000005C8 81FE[248E0000]      <1> 	cmp esi, bssstart
   356 000005CE 72EC                <1> 	jb copykernel
   357 000005D0 EA[D7050000]2800    <1> 	jmp NEW_CODE_SEL:done_copy
   358                              <1> 	
   359                              <1> done_copy:
   360 000005D7 66B83000            <1> 	mov ax, NEW_DATA_SEL	;;these MUST be setup AFTER the kernel switches places!!!
   361 000005DB 8ED8                <1> 	mov ds, ax
   362 000005DD 8EC0                <1> 	mov es, ax
   363 000005DF 8EE0                <1> 	mov fs, ax
   364 000005E1 66B81000            <1> 	mov ax, STACK_SEL
   365 000005E5 8ED0                <1> 	mov ss, ax
   366 000005E7 BC00200000          <1> 	mov esp, 8192
   367 000005EC 66B82000            <1> 	mov ax, SYS_DATA_SEL
   368 000005F0 8EE8                <1> 	mov gs, ax
   369                              <1> 	
   370 000005F2 E80E510000          <1> 	call initialize	;initialize drivers
   371                              <1> 	
   372 000005F7 A1[87060000]        <1> 	mov eax, [newcodecache]
   373 000005FC C1E804              <1> 	shr eax, 4
   374 000005FF A3[83060000]        <1> 	mov [basecache], eax
   375                              <1> 	
   376 00000604 89C3                <1> 	mov ebx, eax
   377 00000606 C1E304              <1> 	shl ebx, 4
   378 00000609 8B3D[D38B0000]      <1> 	mov edi, [physbaseptr]
   379 0000060F 29DF                <1> 	sub edi, ebx
   380 00000611 893D[D38B0000]      <1> 	mov [physbaseptr], edi
   381                              <1> 	
   382 00000617 BE[248E0000]        <1> 	mov esi, bssstart
   383 0000061C 31C0                <1> 	xor eax, eax
   384                              <1> clearkernelbuffers:
   385 0000061E 8906                <1> 	mov [esi], eax
   386 00000620 81C604000000        <1> 	add esi, 4
   387 00000626 81FE[5BA82100]      <1> 	cmp esi, bssend
   388 0000062C 72F0                <1> 	jb clearkernelbuffers
   389 0000062E FB                  <1> 	sti
   390                              <1> 
   391                              <1> getmemoryspace:
   392 0000062F BE[73020000]        <1> 	mov esi, memlistbuf
   393 00000634 31FF                <1> 	xor edi, edi
   394 00000636 668B3D[B3040000]    <1> 	mov di, [memlistend]
   395 0000063D 01F7                <1> 	add edi, esi
   396 0000063F 31C0                <1> 	xor eax, eax
   397                              <1> memoryspaceaddition:
   398 00000641 39FE                <1> 	cmp esi, edi
   399 00000643 7322                <1> 	jae finishedmemspacecalc
   400 00000645 81C608000000        <1> 	add esi, 8
   401 0000064B 8B0E                <1> 	mov ecx, [esi]
   402 0000064D 81C608000000        <1> 	add esi, 8
   403 00000653 8B1E                <1> 	mov ebx, [esi]
   404 00000655 81C608000000        <1> 	add esi, 8
   405 0000065B 81FB01000000        <1> 	cmp ebx, 1
   406 00000661 75DE                <1> 	jne memoryspaceaddition
   407 00000663 01C8                <1> 	add eax, ecx
   408 00000665 EBDA                <1> 	jmp memoryspaceaddition
   409                              <1> finishedmemspacecalc:
   410 00000667 A3[90060000]        <1> 	mov [memoryspace], eax
   411                              <1> 	
   412 0000066C 803D[AD8C0000]00    <1> 	cmp byte [guion], 0
   413 00000673 0F8505000000        <1> 	jne near guistartup
   414 00000679 E93D260000          <1> 	jmp os
   415                              <1> guistartup:	;this prevents weird issues
   416 0000067E E944510000          <1> 	jmp gui
   417                              <1> 	
   418 00000683 00000000            <1> basecache dd 0
   419 00000687 00001000            <1> newcodecache dd 0x100000
   420                              <1> 
   421 0000068B 00                  <1> testingcpuspeed db 0
   422 0000068C 00000000            <1> cpuspeedperint dd 0
   423 00000690 00000000            <1> memoryspace dd 0
   424 00000694 7D0A                <1> pitdiv dw 2685
   425 00000696 00000000            <1> timeseconds dd 0
   426 0000069A 00000000            <1> timenanoseconds dd 0
   427 0000069E 2E562200            <1> timeinterval dd 2250286;4500572
   428 000006A2 00                  <1> soundon db 0
   429 000006A3 0000                <1> soundrepititions dw 0
   430 000006A5 00000000            <1> soundpos dd 0
   431 000006A9 00000000            <1> soundendpos dd 0
   432 000006AD 0000                <1> WAVSamplingRate dw 0
   433 000006AF 00000000            <1> WAVFileSize         dd 0
   434 000006B3 00                  <1> EnableDigitized     db 0
   435                              <1> 
   436                              <1> cpuspeedend:
   437 000006B4 C605[8B060000]00    <1> 	mov byte [testingcpuspeed], 0
   438 000006BB A3[8C060000]        <1> 	mov [cpuspeedperint], eax
   439 000006C0 B8[AA470000]        <1> 	mov eax, cpuspeedloopend
   440 000006C5 890424              <1> 	mov [esp], eax
   441 000006C8 E9F7000000          <1> 	jmp handled
   442                              <1> 
   443                              <1> ;if using the rtc, the default frequency yeilds a period of 976562.5ns
   444                              <1> ;if using the pit, div=451 is 377981.0004, div=5370 is 4500572.00007ns
   445                              <1> ;div=55483 is 46500044.000006ns, div=2685 is 2250286.00004ns, div=902 is 755962.0008
   446                              <1> 
   447                              <1> pitinterrupt: ;this controls threading
   448 000006CD FA                  <1> 	cli
   449 000006CE 803D[8B060000]01    <1> 	cmp byte [testingcpuspeed], 1	;check to see if the cpu speed test is running
   450 000006D5 74DD                <1> 	je cpuspeedend
   451                              <1> 	
   452 000006D7 803D[B3060000]01    <1> 	cmp byte [EnableDigitized], 1
   453 000006DE 0F8497450000        <1> 	je near PCSpeakerPWM
   454                              <1> 	
   455 000006E4 E8B4000000          <1> 	call timekeeper ;this updates the internal time
   456                              <1> 	
   457 000006E9 803D[A2060000]01    <1> 	cmp byte [soundon], 1
   458 000006F0 0F849E450000        <1> 	je near PCSpeakerRAW
   459                              <1> timerinterrupt:	;put this into the interrupt handler that controls threading
   460 000006F6 803D[31730000]01    <1> 	cmp byte [threadson], 1
   461 000006FD 0F84C8710000        <1> 	je near threadswitch
   462                              <1> keyinterrupt:		;checks for escape, if pressed, it quits the program currently running
   463 00000703 803D[31730000]00    <1> 	cmp byte [threadson], 0
   464 0000070A 0F84B4000000        <1> 	je near handled
   465 00000710 FA                  <1> 	cli
   466 00000711 60                  <1> 	pusha
   467 00000712 E460                <1> 	in al, 60h
   468 00000714 3C01                <1> 	cmp al, 1		;escape
   469 00000716 7405                <1> 	je userint
   470 00000718 E9A5000000          <1> 	jmp handled2
   471                              <1> userint:
   472                              <1> 	;UNMASK ALL INTS
   473 0000071D 30C0                <1> 	xor al, al
   474 0000071F E621                <1> 	out 0x21, al
   475 00000721 30C0                <1> 	xor al, al
   476 00000723 E6A1                <1> 	out 0xA1, al
   477 00000725 B020                <1> 	mov al, 0x20
   478 00000727 E6A0                <1> 	out 0xA0, al
   479 00000729 E620                <1> 	out 0x20, al
   480                              <1> 	;RESET PIT DIVISOR
   481 0000072B 66A1[94060000]      <1> 	mov ax, [pitdiv]
   482 00000731 E640                <1> 	out 0x40, al
   483 00000733 66C1C008            <1> 	rol ax, 8
   484 00000737 E640                <1> 	out 0x40, al
   485                              <1> 	;RESET PIC
   486 00000739 B020                <1> 	mov al, 0x20
   487 0000073B E620                <1> 	out 0x20, al
   488 0000073D 61                  <1> 	popa
   489 0000073E FB                  <1> 	sti
   490 0000073F E918270000          <1> 	jmp nwcmd
   491                              <1> 
   492                              <1> rtl8139.irq:
   493 00000744 FA                  <1> 	cli
   494 00000745 60                  <1> 	pusha
   495 00000746 8B15[C0500000]      <1> 	mov edx, [basenicaddr]
   496 0000074C 81C23E000000        <1> 	add edx, rtl8139.ISR
   497 00000752 31C0                <1> 	xor eax, eax
   498 00000754 66ED                <1> 	in ax, dx
   499 00000756 89C1                <1> 	mov ecx, eax
   500 00000758 E80F2C0000          <1> 	call showhex
   501 0000075D BE[6C070000]        <1> 	mov esi, rtl8139.irq.msg
   502 00000762 E8E31B0000          <1> 	call print
   503 00000767 E956000000          <1> 	jmp handled2
   504 0000076C 0A5A4F4D4720544548- <1> .msg db 10,"ZOMG TEH RTL8139 REZPONDED",10,0
   505 00000775 2052544C3831333920- <1>
   506 0000077E 52455A504F4E444544- <1>
   507 00000787 0A00                <1>
   508                              <1> sblaster.irq:
   509 00000789 FA                  <1> 	cli
   510 0000078A 60                  <1> 	pusha
   511 0000078B 803D[074F0000]01    <1> 	cmp byte [SoundBlaster], 1
   512 00000792 0F84F0450000        <1> 	je near sblastercont
   513 00000798 E925000000          <1> 	jmp handled2
   514                              <1> 	
   515                              <1> timekeeper:
   516 0000079D 50                  <1> 	push eax
   517 0000079E A1[9A060000]        <1> 	mov eax, [timenanoseconds]
   518 000007A3 0305[9E060000]      <1> 	add eax, [timeinterval]
   519 000007A9 3D00CA9A3B          <1> 	cmp eax, 1000000000
   520 000007AE 720B                <1> 	jb nonanosecondrollover
   521 000007B0 FF05[96060000]      <1> 	inc dword [timeseconds]
   522 000007B6 2D00CA9A3B          <1> 	sub eax, 1000000000
   523                              <1> nonanosecondrollover:
   524 000007BB A3[9A060000]        <1> 	mov [timenanoseconds], eax
   525 000007C0 58                  <1> 	pop eax
   526 000007C1 C3                  <1> 	ret
   527                              <1> 	
   528                              <1> handled2:
   529 000007C2 61                  <1> 	popa
   530                              <1> handled3:
   531 000007C3 FB                  <1> 	sti
   532                              <1> handled:
   533 000007C4 50                  <1> 	push eax
   534 000007C5 B020                <1> 	mov al, 0x20
   535 000007C7 E620                <1> 	out 0x20, al
   536 000007C9 58                  <1> 	pop eax
   537 000007CA CF                  <1> 	iret
   538                              <1> [BITS 16]
   539                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   540                              <1> ;	16-bit limit/32-bit linear base address of GDT and IDT
   541                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   542 000007CB 5700                <1> gdtr:	dw gdt_end - gdt - 1	; GDT limit
   543 000007CD 00000000            <1> 	dd 0    		; filled with linear, physical address of GDT
   544                              <1> 
   545 000007D1 FF07                <1> idtr:	dw idt_end - idt - 1	; IDT limit
   546 000007D3 00000000            <1> 	dd 0			; filled with linear, physical address of IDT
   547                              <1> 
   548                              <1> 
   549 000007D7 0000                <1> gdt:	dw 0			; limit 15:0
   550 000007D9 0000                <1> 	dw 0			; base 15:0
   551 000007DB 00                  <1> 	db 0			; base 23:16
   552 000007DC 00                  <1> 	db 0			; type
   553 000007DD 00                  <1> 	db 0			; limit 19:16, flags
   554 000007DE 00                  <1> 	db 0			; base 31:24
   555                              <1> ; linear data segment descriptor
   556                              <1> LINEAR_SEL	equ	$-gdt
   557 000007DF FFFF                <1> 	dw 0xFFFF		; limit 0xFFFFF
   558 000007E1 0000                <1> 	dw 0			; base for this one is always 0
   559 000007E3 00                  <1> 	db 0
   560 000007E4 92                  <1> 	db 0x92			; present, ring 0, data, expand-up, writable
   561 000007E5 CF                  <1> 	db 0xCF			; page-granular, 32-bit
   562 000007E6 00                  <1> 	db 0
   563                              <1> STACK_SEL	equ $-gdt
   564 000007E7 0002                <1> gdts:	dw (stackend)/4096
   565 000007E9 0000                <1> 	dw 0
   566 000007EB 00                  <1> 	db 0
   567 000007EC 92                  <1> 	db 0x92
   568 000007ED CF                  <1> 	db 0xCF
   569 000007EE 00                  <1> 	db 0
   570                              <1> ; code segment descriptor
   571                              <1> SYS_CODE_SEL	equ	$-gdt
   572 000007EF FFFF                <1> gdt2:	dw 0xFFFF
   573 000007F1 0000                <1> 	dw 0			; (base gets set above)
   574 000007F3 00                  <1> 	db 0
   575 000007F4 9A                  <1> 	db 0x9A			; present, ring 0, code, non-conforming, readable
   576 000007F5 CF                  <1> 	db 0xCF
   577 000007F6 00                  <1> 	db 0
   578                              <1> ; data segment descriptor
   579                              <1> SYS_DATA_SEL	equ	$-gdt
   580 000007F7 FFFF                <1> gdt3:	dw 0xFFFF
   581 000007F9 0000                <1> 	dw 0			; (base gets set above)
   582 000007FB 00                  <1> 	db 0
   583 000007FC 92                  <1> 	db 0x92			; present, ring 0, data, expand-up, writable
   584 000007FD CF                  <1> 	db 0xCF
   585 000007FE 00                  <1> 	db 0
   586                              <1> NEW_CODE_SEL	equ	$-gdt
   587 000007FF FFFF                <1> gdt4:	dw 0xFFFF
   588 00000801 0000                <1> 	dw 0			; (base gets set above)
   589 00000803 00                  <1> 	db 0
   590 00000804 9A                  <1> 	db 0x9A			; present, ring 0, code, non-conforming, readable
   591 00000805 CF                  <1> 	db 0xCF
   592 00000806 00                  <1> 	db 0
   593                              <1> ; data segment descriptor
   594                              <1> NEW_DATA_SEL	equ	$-gdt
   595 00000807 FFFF                <1> gdt5:	dw 0xFFFF
   596 00000809 0000                <1> 	dw 0			; (base gets set above)
   597 0000080B 00                  <1> 	db 0
   598 0000080C 92                  <1> 	db 0x92			; present, ring 0, data, expand-up, writable
   599 0000080D CF                  <1> 	db 0xCF
   600 0000080E 00                  <1> 	db 0
   601                              <1> V8086_CODE_SEL	equ $-gdt
   602 0000080F FFFF                <1> gdtv8086: dw 0xFFFF
   603 00000811 0000                <1> 	dw 0
   604 00000813 00                  <1> 	db 0
   605 00000814 9A                  <1> 	db 0x9A
   606 00000815 8F                  <1> 	db 0x8F
   607 00000816 00                  <1> 	db 0
   608                              <1> V8086_DATA_SEL	equ $-gdt
   609 00000817 FFFF                <1> gdtv80862: dw 0xFFFF
   610 00000819 0000                <1> 	dw 0
   611 0000081B 00                  <1> 	db 0
   612 0000081C 92                  <1> 	db 0x92
   613 0000081D 8F                  <1> 	db 0x8F
   614 0000081E 00                  <1> 	db 0
   615                              <1> DOS_CODE_SEL	equ $-gdt	;this gives dos programs complete access to one megabyte at the beginning of memory
   616 0000081F 0001                <1> gdtdos:	dw 256	;give it 1 MB
   617 00000821 0000                <1> 	dw 0
   618 00000823 00                  <1> 	db 0
   619 00000824 9A                  <1> 	db 0x9A
   620 00000825 8F                  <1> 	db 0x8F ;16 bit
   621 00000826 00                  <1> 	db 0
   622                              <1> DOS_DATA_SEL 	equ $-gdt
   623 00000827 0001                <1> gdtdos2:	dw 256
   624 00000829 0000                <1> 	dw 0
   625 0000082B 00                  <1> 	db 0
   626 0000082C 92                  <1> 	db 0x92
   627 0000082D 8F                  <1> 	db 0x8F ;16 bit
   628 0000082E 00                  <1> 	db 0
   629                              <1> gdt_end:
   630                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   631                              <1> ;	interrupt descriptor table (IDT)
   632                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   633                              <1> ; 32 reserved interrupts:
   634                              <1> idt:	
   635                              <1> %assign i 0
   636                              <1> %rep    32
   637                              <1> 		dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   638                              <1> %assign i i+1
   639                              <1> %endrep
   640 0000082F [3111]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   641                              <2> %assign i i+1
   642 00000837 [3E11]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   643                              <2> %assign i i+1
   644 0000083F [4B11]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   645                              <2> %assign i i+1
   646 00000847 [5811]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   647                              <2> %assign i i+1
   648 0000084F [6511]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   649                              <2> %assign i i+1
   650 00000857 [7211]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   651                              <2> %assign i i+1
   652 0000085F [7F11]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   653                              <2> %assign i i+1
   654 00000867 [8C11]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   655                              <2> %assign i i+1
   656 0000086F [9911]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   657                              <2> %assign i i+1
   658 00000877 [A611]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   659                              <2> %assign i i+1
   660 0000087F [B311]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   661                              <2> %assign i i+1
   662 00000887 [C011]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   663                              <2> %assign i i+1
   664 0000088F [CD11]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   665                              <2> %assign i i+1
   666 00000897 [DA11]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   667                              <2> %assign i i+1
   668 0000089F [E711]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   669                              <2> %assign i i+1
   670 000008A7 [F411]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   671                              <2> %assign i i+1
   672 000008AF [0112]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   673                              <2> %assign i i+1
   674 000008B7 [0E12]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   675                              <2> %assign i i+1
   676 000008BF [1B12]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   677                              <2> %assign i i+1
   678 000008C7 [2812]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   679                              <2> %assign i i+1
   680 000008CF [3512]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   681                              <2> %assign i i+1
   682 000008D7 [4212]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   683                              <2> %assign i i+1
   684 000008DF [4F12]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   685                              <2> %assign i i+1
   686 000008E7 [5C12]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   687                              <2> %assign i i+1
   688 000008EF [6912]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   689                              <2> %assign i i+1
   690 000008F7 [7612]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   691                              <2> %assign i i+1
   692 000008FF [8312]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   693                              <2> %assign i i+1
   694 00000907 [9012]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   695                              <2> %assign i i+1
   696 0000090F [9D12]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   697                              <2> %assign i i+1
   698 00000917 [AA12]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   699                              <2> %assign i i+1
   700 0000091F [B712]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   701                              <2> %assign i i+1
   702 00000927 [C412]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   703                              <2> %assign i i+1
   704 0000092F [932B]2800008E0000  <1> 		dw int20h,NEW_CODE_SEL,0x8E00,0
   705 00000937 [972B]2800008E0000  <1> 		dw int21h,NEW_CODE_SEL,0x8E00,0
   706                              <1> %assign i 0x22
   707                              <1> %rep 14
   708                              <1> 		dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   709                              <1> %assign i +1
   710                              <1> %endrep
   711 0000093F [EB12]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   712                              <2> %assign i +1
   713 00000947 [3E11]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   714                              <2> %assign i +1
   715 0000094F [3E11]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   716                              <2> %assign i +1
   717 00000957 [3E11]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   718                              <2> %assign i +1
   719 0000095F [3E11]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   720                              <2> %assign i +1
   721 00000967 [3E11]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   722                              <2> %assign i +1
   723 0000096F [3E11]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   724                              <2> %assign i +1
   725 00000977 [3E11]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   726                              <2> %assign i +1
   727 0000097F [3E11]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   728                              <2> %assign i +1
   729 00000987 [3E11]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   730                              <2> %assign i +1
   731 0000098F [3E11]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   732                              <2> %assign i +1
   733 00000997 [3E11]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   734                              <2> %assign i +1
   735 0000099F [3E11]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   736                              <2> %assign i +1
   737 000009A7 [3E11]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   738                              <2> %assign i +1
   739                              <1> ;INT 30h for os use and 3rd party use:
   740 000009AF [3922]2800008E0000  <1> 		dw newints,NEW_CODE_SEL,0x8E00,0
   741                              <1> %assign i 0x31
   742                              <1> %rep 15
   743                              <1> 		dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   744                              <1> %assign i +1
   745                              <1> %endrep
   746 000009B7 [AE13]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   747                              <2> %assign i +1
   748 000009BF [3E11]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   749                              <2> %assign i +1
   750 000009C7 [3E11]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   751                              <2> %assign i +1
   752 000009CF [3E11]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   753                              <2> %assign i +1
   754 000009D7 [3E11]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   755                              <2> %assign i +1
   756 000009DF [3E11]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   757                              <2> %assign i +1
   758 000009E7 [3E11]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   759                              <2> %assign i +1
   760 000009EF [3E11]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   761                              <2> %assign i +1
   762 000009F7 [3E11]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   763                              <2> %assign i +1
   764 000009FF [3E11]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   765                              <2> %assign i +1
   766 00000A07 [3E11]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   767                              <2> %assign i +1
   768 00000A0F [3E11]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   769                              <2> %assign i +1
   770 00000A17 [3E11]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   771                              <2> %assign i +1
   772 00000A1F [3E11]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   773                              <2> %assign i +1
   774 00000A27 [3E11]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   775                              <2> %assign i +1
   776                              <1> ;and here we are at 0x40
   777                              <1> ;here are all the irq's
   778 00000A2F [CD06]2800008E0000  <1> 		dw pitinterrupt,NEW_CODE_SEL,0x8E00,0 ;IRQ 0 = PIT
   779 00000A37 [C407]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 1 = keyboard
   780 00000A3F [C407]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 2
   781 00000A47 [C407]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 3
   782 00000A4F [C407]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 4
   783 00000A57 [8907]2800008E0000  <1> 		dw sblaster.irq,NEW_CODE_SEL,0x8E00,0 ;IRQ 5 = default SoundBlaster
   784 00000A5F [C407]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 6
   785 00000A67 [C407]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 7
   786 00000A6F [C407]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 8 = RTC
   787 00000A77 [C407]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 9
   788 00000A7F [C407]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 10
   789 00000A87 [4407]2800008E0000  <1> 		dw rtl8139.irq,NEW_CODE_SEL,0x8E00,0 ;IRQ 11 = default RTL8139
   790 00000A8F [C407]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 12
   791 00000A97 [C407]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 13
   792 00000A9F [C407]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 14
   793 00000AA7 [C407]2800008E0000  <1> 		dw handled,NEW_CODE_SEL,0x8E00,0 ;IRQ 15
   794                              <1> ;This brings me up to 0x50
   795                              <1> %assign i 0x50
   796                              <1> %rep 176
   797                              <1> 		dw handled, NEW_CODE_SEL,0x8E00,0
   798                              <1> 		;dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   799                              <1> %assign i +1
   800                              <1> %endrep
   801 00000AAF [C407]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   802                              <2> 
   803                              <2> %assign i +1
   804 00000AB7 [C407]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   805                              <2> 
   806                              <2> %assign i +1
   807 00000ABF [C407]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   808                              <2> 
   809                              <2> %assign i +1
   810 00000AC7 [C407]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   811                              <2> 
   812                              <2> %assign i +1
   813 00000ACF [C407]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   814                              <2> 
   815                              <2> %assign i +1
   816 00000AD7 [C407]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   817                              <2> 
   818                              <2> %assign i +1
   819 00000ADF [C407]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   820                              <2> 
   821                              <2> %assign i +1
   822 00000AE7 [C407]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   823                              <2> 
   824                              <2> %assign i +1
   825 00000AEF [C407]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   826                              <2> 
   827                              <2> %assign i +1
   828 00000AF7 [C407]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   829                              <2> 
   830                              <2> %assign i +1
   831 00000AFF [C407]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   832                              <2> 
   833                              <2> %assign i +1
   834 00000B07 [C407]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   835                              <2> 
   836                              <2> %assign i +1
   837 00000B0F [C407]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   838                              <2> 
   839                              <2> %assign i +1
   840 00000B17 [C407]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   841                              <2> 
   842                              <2> %assign i +1
   843 00000B1F [C407]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   844                              <2> 
   845                              <2> %assign i +1
   846 00000B27 [C407]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   847                              <2> 
   848                              <2> %assign i +1
   849 00000B2F [C407]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   850                              <2> 
   851                              <2> %assign i +1
   852 00000B37 [C407]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   853                              <2> 
   854                              <2> %assign i +1
   855 00000B3F [C407]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   856                              <2> 
   857                              <2> %assign i +1
   858 00000B47 [C407]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   859                              <2> 
   860                              <2> %assign i +1
   861 00000B4F [C407]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   862                              <2> 
   863                              <2> %assign i +1
   864 00000B57 [C407]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   865                              <2> 
   866                              <2> %assign i +1
   867 00000B5F [C407]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   868                              <2> 
   869                              <2> %assign i +1
   870 00000B67 [C407]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   871                              <2> 
   872                              <2> %assign i +1
   873 00000B6F [C407]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   874                              <2> 
   875                              <2> %assign i +1
   876 00000B77 [C407]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   877                              <2> 
   878                              <2> %assign i +1
   879 00000B7F [C407]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   880                              <2> 
   881                              <2> %assign i +1
   882 00000B87 [C407]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   883                              <2> 
   884                              <2> %assign i +1
   885 00000B8F [C407]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   886                              <2> 
   887                              <2> %assign i +1
   888 00000B97 [C407]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   889                              <2> 
   890                              <2> %assign i +1
   891 00000B9F [C407]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   892                              <2> 
   893                              <2> %assign i +1
   894 00000BA7 [C407]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   895                              <2> 
   896                              <2> %assign i +1
   897 00000BAF [C407]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   898                              <2> 
   899                              <2> %assign i +1
   900 00000BB7 [C407]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   901                              <2> 
   902                              <2> %assign i +1
   903 00000BBF [C407]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   904                              <2> 
   905                              <2> %assign i +1
   906 00000BC7 [C407]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   907                              <2> 
   908                              <2> %assign i +1
   909 00000BCF [C407]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   910                              <2> 
   911                              <2> %assign i +1
   912 00000BD7 [C407]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   913                              <2> 
   914                              <2> %assign i +1
   915 00000BDF [C407]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   916                              <2> 
   917                              <2> %assign i +1
   918 00000BE7 [C407]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   919                              <2> 
   920                              <2> %assign i +1
   921 00000BEF [C407]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   922                              <2> 
   923                              <2> %assign i +1
   924 00000BF7 [C407]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   925                              <2> 
   926                              <2> %assign i +1
   927 00000BFF [C407]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   928                              <2> 
   929                              <2> %assign i +1
   930 00000C07 [C407]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   931                              <2> 
   932                              <2> %assign i +1
   933 00000C0F [C407]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   934                              <2> 
   935                              <2> %assign i +1
   936 00000C17 [C407]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   937                              <2> 
   938                              <2> %assign i +1
   939 00000C1F [C407]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   940                              <2> 
   941                              <2> %assign i +1
   942 00000C27 [C407]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   943                              <2> 
   944                              <2> %assign i +1
   945 00000C2F [C407]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   946                              <2> 
   947                              <2> %assign i +1
   948 00000C37 [C407]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   949                              <2> 
   950                              <2> %assign i +1
   951 00000C3F [C407]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   952                              <2> 
   953                              <2> %assign i +1
   954 00000C47 [C407]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   955                              <2> 
   956                              <2> %assign i +1
   957 00000C4F [C407]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   958                              <2> 
   959                              <2> %assign i +1
   960 00000C57 [C407]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   961                              <2> 
   962                              <2> %assign i +1
   963 00000C5F [C407]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   964                              <2> 
   965                              <2> %assign i +1
   966 00000C67 [C407]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   967                              <2> 
   968                              <2> %assign i +1
   969 00000C6F [C407]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   970                              <2> 
   971                              <2> %assign i +1
   972 00000C77 [C407]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   973                              <2> 
   974                              <2> %assign i +1
   975 00000C7F [C407]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   976                              <2> 
   977                              <2> %assign i +1
   978 00000C87 [C407]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   979                              <2> 
   980                              <2> %assign i +1
   981 00000C8F [C407]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   982                              <2> 
   983                              <2> %assign i +1
   984 00000C97 [C407]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   985                              <2> 
   986                              <2> %assign i +1
   987 00000C9F [C407]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   988                              <2> 
   989                              <2> %assign i +1
   990 00000CA7 [C407]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   991                              <2> 
   992                              <2> %assign i +1
   993 00000CAF [C407]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   994                              <2> 
   995                              <2> %assign i +1
   996 00000CB7 [C407]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
   997                              <2> 
   998                              <2> %assign i +1
   999 00000CBF [C407]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1000                              <2> 
  1001                              <2> %assign i +1
  1002 00000CC7 [C407]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1003                              <2> 
  1004                              <2> %assign i +1
  1005 00000CCF [C407]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1006                              <2> 
  1007                              <2> %assign i +1
  1008 00000CD7 [C407]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1009                              <2> 
  1010                              <2> %assign i +1
  1011 00000CDF [C407]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1012                              <2> 
  1013                              <2> %assign i +1
  1014 00000CE7 [C407]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1015                              <2> 
  1016                              <2> %assign i +1
  1017 00000CEF [C407]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1018                              <2> 
  1019                              <2> %assign i +1
  1020 00000CF7 [C407]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1021                              <2> 
  1022                              <2> %assign i +1
  1023 00000CFF [C407]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1024                              <2> 
  1025                              <2> %assign i +1
  1026 00000D07 [C407]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1027                              <2> 
  1028                              <2> %assign i +1
  1029 00000D0F [C407]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1030                              <2> 
  1031                              <2> %assign i +1
  1032 00000D17 [C407]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1033                              <2> 
  1034                              <2> %assign i +1
  1035 00000D1F [C407]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1036                              <2> 
  1037                              <2> %assign i +1
  1038 00000D27 [C407]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1039                              <2> 
  1040                              <2> %assign i +1
  1041 00000D2F [C407]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1042                              <2> 
  1043                              <2> %assign i +1
  1044 00000D37 [C407]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1045                              <2> 
  1046                              <2> %assign i +1
  1047 00000D3F [C407]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1048                              <2> 
  1049                              <2> %assign i +1
  1050 00000D47 [C407]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1051                              <2> 
  1052                              <2> %assign i +1
  1053 00000D4F [C407]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1054                              <2> 
  1055                              <2> %assign i +1
  1056 00000D57 [C407]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1057                              <2> 
  1058                              <2> %assign i +1
  1059 00000D5F [C407]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1060                              <2> 
  1061                              <2> %assign i +1
  1062 00000D67 [C407]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1063                              <2> 
  1064                              <2> %assign i +1
  1065 00000D6F [C407]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1066                              <2> 
  1067                              <2> %assign i +1
  1068 00000D77 [C407]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1069                              <2> 
  1070                              <2> %assign i +1
  1071 00000D7F [C407]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1072                              <2> 
  1073                              <2> %assign i +1
  1074 00000D87 [C407]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1075                              <2> 
  1076                              <2> %assign i +1
  1077 00000D8F [C407]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1078                              <2> 
  1079                              <2> %assign i +1
  1080 00000D97 [C407]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1081                              <2> 
  1082                              <2> %assign i +1
  1083 00000D9F [C407]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1084                              <2> 
  1085                              <2> %assign i +1
  1086 00000DA7 [C407]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1087                              <2> 
  1088                              <2> %assign i +1
  1089 00000DAF [C407]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1090                              <2> 
  1091                              <2> %assign i +1
  1092 00000DB7 [C407]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1093                              <2> 
  1094                              <2> %assign i +1
  1095 00000DBF [C407]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1096                              <2> 
  1097                              <2> %assign i +1
  1098 00000DC7 [C407]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1099                              <2> 
  1100                              <2> %assign i +1
  1101 00000DCF [C407]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1102                              <2> 
  1103                              <2> %assign i +1
  1104 00000DD7 [C407]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1105                              <2> 
  1106                              <2> %assign i +1
  1107 00000DDF [C407]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1108                              <2> 
  1109                              <2> %assign i +1
  1110 00000DE7 [C407]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1111                              <2> 
  1112                              <2> %assign i +1
  1113 00000DEF [C407]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1114                              <2> 
  1115                              <2> %assign i +1
  1116 00000DF7 [C407]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1117                              <2> 
  1118                              <2> %assign i +1
  1119 00000DFF [C407]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1120                              <2> 
  1121                              <2> %assign i +1
  1122 00000E07 [C407]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1123                              <2> 
  1124                              <2> %assign i +1
  1125 00000E0F [C407]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1126                              <2> 
  1127                              <2> %assign i +1
  1128 00000E17 [C407]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1129                              <2> 
  1130                              <2> %assign i +1
  1131 00000E1F [C407]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1132                              <2> 
  1133                              <2> %assign i +1
  1134 00000E27 [C407]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1135                              <2> 
  1136                              <2> %assign i +1
  1137 00000E2F [C407]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1138                              <2> 
  1139                              <2> %assign i +1
  1140 00000E37 [C407]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1141                              <2> 
  1142                              <2> %assign i +1
  1143 00000E3F [C407]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1144                              <2> 
  1145                              <2> %assign i +1
  1146 00000E47 [C407]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1147                              <2> 
  1148                              <2> %assign i +1
  1149 00000E4F [C407]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1150                              <2> 
  1151                              <2> %assign i +1
  1152 00000E57 [C407]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1153                              <2> 
  1154                              <2> %assign i +1
  1155 00000E5F [C407]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1156                              <2> 
  1157                              <2> %assign i +1
  1158 00000E67 [C407]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1159                              <2> 
  1160                              <2> %assign i +1
  1161 00000E6F [C407]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1162                              <2> 
  1163                              <2> %assign i +1
  1164 00000E77 [C407]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1165                              <2> 
  1166                              <2> %assign i +1
  1167 00000E7F [C407]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1168                              <2> 
  1169                              <2> %assign i +1
  1170 00000E87 [C407]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1171                              <2> 
  1172                              <2> %assign i +1
  1173 00000E8F [C407]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1174                              <2> 
  1175                              <2> %assign i +1
  1176 00000E97 [C407]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1177                              <2> 
  1178                              <2> %assign i +1
  1179 00000E9F [C407]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1180                              <2> 
  1181                              <2> %assign i +1
  1182 00000EA7 [C407]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1183                              <2> 
  1184                              <2> %assign i +1
  1185 00000EAF [C407]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1186                              <2> 
  1187                              <2> %assign i +1
  1188 00000EB7 [C407]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1189                              <2> 
  1190                              <2> %assign i +1
  1191 00000EBF [C407]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1192                              <2> 
  1193                              <2> %assign i +1
  1194 00000EC7 [C407]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1195                              <2> 
  1196                              <2> %assign i +1
  1197 00000ECF [C407]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1198                              <2> 
  1199                              <2> %assign i +1
  1200 00000ED7 [C407]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1201                              <2> 
  1202                              <2> %assign i +1
  1203 00000EDF [C407]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1204                              <2> 
  1205                              <2> %assign i +1
  1206 00000EE7 [C407]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1207                              <2> 
  1208                              <2> %assign i +1
  1209 00000EEF [C407]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1210                              <2> 
  1211                              <2> %assign i +1
  1212 00000EF7 [C407]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1213                              <2> 
  1214                              <2> %assign i +1
  1215 00000EFF [C407]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1216                              <2> 
  1217                              <2> %assign i +1
  1218 00000F07 [C407]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1219                              <2> 
  1220                              <2> %assign i +1
  1221 00000F0F [C407]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1222                              <2> 
  1223                              <2> %assign i +1
  1224 00000F17 [C407]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1225                              <2> 
  1226                              <2> %assign i +1
  1227 00000F1F [C407]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1228                              <2> 
  1229                              <2> %assign i +1
  1230 00000F27 [C407]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1231                              <2> 
  1232                              <2> %assign i +1
  1233 00000F2F [C407]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1234                              <2> 
  1235                              <2> %assign i +1
  1236 00000F37 [C407]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1237                              <2> 
  1238                              <2> %assign i +1
  1239 00000F3F [C407]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1240                              <2> 
  1241                              <2> %assign i +1
  1242 00000F47 [C407]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1243                              <2> 
  1244                              <2> %assign i +1
  1245 00000F4F [C407]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1246                              <2> 
  1247                              <2> %assign i +1
  1248 00000F57 [C407]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1249                              <2> 
  1250                              <2> %assign i +1
  1251 00000F5F [C407]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1252                              <2> 
  1253                              <2> %assign i +1
  1254 00000F67 [C407]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1255                              <2> 
  1256                              <2> %assign i +1
  1257 00000F6F [C407]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1258                              <2> 
  1259                              <2> %assign i +1
  1260 00000F77 [C407]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1261                              <2> 
  1262                              <2> %assign i +1
  1263 00000F7F [C407]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1264                              <2> 
  1265                              <2> %assign i +1
  1266 00000F87 [C407]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1267                              <2> 
  1268                              <2> %assign i +1
  1269 00000F8F [C407]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1270                              <2> 
  1271                              <2> %assign i +1
  1272 00000F97 [C407]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1273                              <2> 
  1274                              <2> %assign i +1
  1275 00000F9F [C407]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1276                              <2> 
  1277                              <2> %assign i +1
  1278 00000FA7 [C407]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1279                              <2> 
  1280                              <2> %assign i +1
  1281 00000FAF [C407]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1282                              <2> 
  1283                              <2> %assign i +1
  1284 00000FB7 [C407]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1285                              <2> 
  1286                              <2> %assign i +1
  1287 00000FBF [C407]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1288                              <2> 
  1289                              <2> %assign i +1
  1290 00000FC7 [C407]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1291                              <2> 
  1292                              <2> %assign i +1
  1293 00000FCF [C407]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1294                              <2> 
  1295                              <2> %assign i +1
  1296 00000FD7 [C407]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1297                              <2> 
  1298                              <2> %assign i +1
  1299 00000FDF [C407]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1300                              <2> 
  1301                              <2> %assign i +1
  1302 00000FE7 [C407]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1303                              <2> 
  1304                              <2> %assign i +1
  1305 00000FEF [C407]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1306                              <2> 
  1307                              <2> %assign i +1
  1308 00000FF7 [C407]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1309                              <2> 
  1310                              <2> %assign i +1
  1311 00000FFF [C407]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1312                              <2> 
  1313                              <2> %assign i +1
  1314 00001007 [C407]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1315                              <2> 
  1316                              <2> %assign i +1
  1317 0000100F [C407]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1318                              <2> 
  1319                              <2> %assign i +1
  1320 00001017 [C407]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1321                              <2> 
  1322                              <2> %assign i +1
  1323 0000101F [C407]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1324                              <2> 
  1325                              <2> %assign i +1
  1326 00001027 [C407]2800008E0000  <2>  dw handled, NEW_CODE_SEL,0x8E00,0
  1327                              <2> 
  1328                              <2> %assign i +1
  1329                              <1> idt_end:
  1330                              <1> [BITS 32]
  1331                                  	%include 'source/realmode.asm'
  1332                              <1> realmode:	;make sure the real mode program's address is in realmodeptr 
  1333                              <1> 			;and the return address is in realmodereturn
  1334 0000102F FA                  <1> 	cli
  1335 00001030 A3[23110000]        <1> 	mov [realmodeeax], eax
  1336 00001035 891D[1F110000]      <1> 	mov [realmodeebx], ebx
  1337                              <1> 
  1338 0000103B BB[1B110000]        <1> 	mov ebx, cr0old
  1339                              <1> rmcopytofirstmbyte:
  1340 00001040 8B03                <1> 	mov eax, [ebx]
  1341 00001042 658903              <1> 	mov [gs:ebx], eax
  1342 00001045 81C304000000        <1> 	add ebx, 4
  1343 0000104B 81FB[2B110000]      <1> 	cmp ebx, realmodeptr
  1344 00001051 76ED                <1> 	jbe rmcopytofirstmbyte
  1345                              <1> 
  1346 00001053 EA[5A100000]3800    <1> 	jmp V8086_CODE_SEL:protected16bit
  1347                              <1> 
  1348                              <1> [BITS 16]
  1349                              <1> protected16bit:
  1350 0000105A B84000              <1> 	mov ax, V8086_DATA_SEL
  1351 0000105D 8ED8                <1> 	mov ds, ax
  1352 0000105F 8EC0                <1> 	mov es, ax
  1353 00001061 8EE0                <1> 	mov fs, ax
  1354 00001063 8EE8                <1> 	mov gs, ax
  1355                              <1> 	;mov ss, ax
  1356 00001065 0F20C0              <1> 	mov eax, cr0
  1357 00001068 66A3[1B11]          <1> 	mov [cr0old], eax
  1358 0000106C 6625FEFFFF7F        <1> 	and eax, 0x7FFFFFFE
  1359 00001072 0F22C0              <1> 	mov cr0, eax	;now in real mode
  1360 00001075 EA[7A10]0010        <1> 	jmp 0x1000:inrealmode
  1361                              <1> 
  1362                              <1> inrealmode:
  1363 0000107A 8CC8                <1> 	mov ax, cs
  1364 0000107C 8ED8                <1> 	mov ds, ax
  1365 0000107E 8EC0                <1> 	mov es, ax
  1366 00001080 8EE0                <1> 	mov fs, ax
  1367 00001082 8EE8                <1> 	mov gs, ax
  1368                              <1> 	;mov ss, ax
  1369                              <1> 	
  1370 00001084 B011                <1> 	mov al, 0x11
  1371 00001086 E620                <1> 	out 0x20, al
  1372 00001088 E6A0                <1> 	out 0xA0, al
  1373 0000108A B008                <1> 	mov al, 0x8		;interrupt for master
  1374 0000108C E621                <1> 	out 0x21, al
  1375 0000108E B070                <1> 	mov al, 0x70	;interrupt for slave
  1376 00001090 E6A1                <1> 	out 0xA1, al
  1377 00001092 B004                <1> 	mov al, 4
  1378 00001094 E621                <1> 	out 0x21, al
  1379 00001096 B002                <1> 	mov al, 2
  1380 00001098 E6A1                <1> 	out 0xA1, al
  1381 0000109A B001                <1> 	mov al, 0x1
  1382 0000109C E621                <1> 	out 0x21, al
  1383 0000109E B001                <1> 	mov al, 0x1
  1384 000010A0 E6A1                <1> 	out 0xA1, al
  1385                              <1> 	
  1386 000010A2 0F011E[1511]        <1> 	lidt [idt_real]
  1387 000010A7 FB                  <1> 	sti
  1388                              <1> 
  1389 000010A8 66A1[2311]          <1> 	mov eax, [realmodeeax]
  1390 000010AC 668B1E[1F11]        <1> 	mov ebx, [realmodeebx]
  1391                              <1> 
  1392 000010B1 FF16[2B11]          <1> 	call word [realmodeptr] ;call the real mode program here
  1393                              <1> 
  1394 000010B5 66A3[2311]          <1> 	mov [realmodeeax], eax
  1395 000010B9 66891E[1F11]        <1> 	mov [realmodeebx], ebx
  1396                              <1> 
  1397 000010BE FA                  <1> 	cli
  1398 000010BF 0F0116[CB07]        <1> 	lgdt [gdtr]
  1399 000010C4 0F011E[D107]        <1> 	lidt [idtr]
  1400 000010C9 0F20C0              <1> 	mov eax, cr0
  1401 000010CC 0C01                <1> 	or al, 1
  1402 000010CE 0F22C0              <1> 	mov cr0,eax
  1403 000010D1 EA[D610]2800        <1> 	jmp NEW_CODE_SEL:returntopmode
  1404                              <1> 
  1405                              <1> [BITS 32]
  1406                              <1> returntopmode:
  1407 000010D6 66B83000            <1> 	mov ax, NEW_DATA_SEL
  1408 000010DA 8ED8                <1> 	mov ds, ax
  1409 000010DC 8EC0                <1> 	mov es, ax
  1410 000010DE 8EE0                <1> 	mov fs, ax
  1411                              <1> 	;mov ss, ax
  1412 000010E0 66B82000            <1> 	mov ax, SYS_DATA_SEL
  1413 000010E4 8EE8                <1> 	mov gs, ax
  1414                              <1> 
  1415 000010E6 BB[1B110000]        <1> 	mov ebx, cr0old
  1416                              <1> rmcopyfromfirstmbyte:
  1417 000010EB 658B03              <1> 	mov eax, [gs:ebx]
  1418 000010EE 8903                <1> 	mov [ebx], eax
  1419 000010F0 81C304000000        <1> 	add ebx, 4
  1420 000010F6 81FB[2B110000]      <1> 	cmp ebx, realmodeptr
  1421 000010FC 76ED                <1> 	jbe rmcopyfromfirstmbyte
  1422                              <1> 
  1423 000010FE E81B460000          <1> 	call initialize.pic ;reset irq's and masks
  1424 00001103 FB                  <1> 	sti
  1425 00001104 A1[23110000]        <1> 	mov eax, [realmodeeax]
  1426 00001109 8B1D[1F110000]      <1> 	mov ebx, [realmodeebx]
  1427 0000110F FF25[27110000]      <1> 	jmp dword [realmodereturn]
  1428                              <1> 
  1429                              <1> idt_real:
  1430 00001115 FF03                <1> 	dw 0x3FF
  1431 00001117 00000000            <1> 	dd 0
  1432 0000111B 00000000            <1> cr0old dd 0
  1433 0000111F 00000000            <1> realmodeebx dd 0
  1434 00001123 00000000            <1> realmodeeax dd 0
  1435 00001127 00000000            <1> realmodereturn dd 0
  1436 0000112B 0000                <1> realmodeptr dw 0
  1437 0000112D 00000000            <1> dd 0 ;make sure the copy thing doesnt overflow
  1438                                  [BITS 32]
  1439                                      %include 'source/exception.asm'
  1440                              <1> unhand:	
  1441                              <1> 	%assign i 0
  1442                              <1> 	%rep 0x50
  1443                              <1> 	cli
  1444                              <1> 	mov byte [intprob], i
  1445                              <1> 	jmp unhand2
  1446                              <1> 	%assign i i+1
  1447                              <1> 	%endrep
  1448 00001131 FA                  <2>  cli
  1449 00001132 C605[3A180000]00    <2>  mov byte [intprob], i
  1450 00001139 E903040000          <2>  jmp unhand2
  1451                              <2>  %assign i i+1
  1452 0000113E FA                  <2>  cli
  1453 0000113F C605[3A180000]01    <2>  mov byte [intprob], i
  1454 00001146 E9F6030000          <2>  jmp unhand2
  1455                              <2>  %assign i i+1
  1456 0000114B FA                  <2>  cli
  1457 0000114C C605[3A180000]02    <2>  mov byte [intprob], i
  1458 00001153 E9E9030000          <2>  jmp unhand2
  1459                              <2>  %assign i i+1
  1460 00001158 FA                  <2>  cli
  1461 00001159 C605[3A180000]03    <2>  mov byte [intprob], i
  1462 00001160 E9DC030000          <2>  jmp unhand2
  1463                              <2>  %assign i i+1
  1464 00001165 FA                  <2>  cli
  1465 00001166 C605[3A180000]04    <2>  mov byte [intprob], i
  1466 0000116D E9CF030000          <2>  jmp unhand2
  1467                              <2>  %assign i i+1
  1468 00001172 FA                  <2>  cli
  1469 00001173 C605[3A180000]05    <2>  mov byte [intprob], i
  1470 0000117A E9C2030000          <2>  jmp unhand2
  1471                              <2>  %assign i i+1
  1472 0000117F FA                  <2>  cli
  1473 00001180 C605[3A180000]06    <2>  mov byte [intprob], i
  1474 00001187 E9B5030000          <2>  jmp unhand2
  1475                              <2>  %assign i i+1
  1476 0000118C FA                  <2>  cli
  1477 0000118D C605[3A180000]07    <2>  mov byte [intprob], i
  1478 00001194 E9A8030000          <2>  jmp unhand2
  1479                              <2>  %assign i i+1
  1480 00001199 FA                  <2>  cli
  1481 0000119A C605[3A180000]08    <2>  mov byte [intprob], i
  1482 000011A1 E99B030000          <2>  jmp unhand2
  1483                              <2>  %assign i i+1
  1484 000011A6 FA                  <2>  cli
  1485 000011A7 C605[3A180000]09    <2>  mov byte [intprob], i
  1486 000011AE E98E030000          <2>  jmp unhand2
  1487                              <2>  %assign i i+1
  1488 000011B3 FA                  <2>  cli
  1489 000011B4 C605[3A180000]0A    <2>  mov byte [intprob], i
  1490 000011BB E981030000          <2>  jmp unhand2
  1491                              <2>  %assign i i+1
  1492 000011C0 FA                  <2>  cli
  1493 000011C1 C605[3A180000]0B    <2>  mov byte [intprob], i
  1494 000011C8 E974030000          <2>  jmp unhand2
  1495                              <2>  %assign i i+1
  1496 000011CD FA                  <2>  cli
  1497 000011CE C605[3A180000]0C    <2>  mov byte [intprob], i
  1498 000011D5 E967030000          <2>  jmp unhand2
  1499                              <2>  %assign i i+1
  1500 000011DA FA                  <2>  cli
  1501 000011DB C605[3A180000]0D    <2>  mov byte [intprob], i
  1502 000011E2 E95A030000          <2>  jmp unhand2
  1503                              <2>  %assign i i+1
  1504 000011E7 FA                  <2>  cli
  1505 000011E8 C605[3A180000]0E    <2>  mov byte [intprob], i
  1506 000011EF E94D030000          <2>  jmp unhand2
  1507                              <2>  %assign i i+1
  1508 000011F4 FA                  <2>  cli
  1509 000011F5 C605[3A180000]0F    <2>  mov byte [intprob], i
  1510 000011FC E940030000          <2>  jmp unhand2
  1511                              <2>  %assign i i+1
  1512 00001201 FA                  <2>  cli
  1513 00001202 C605[3A180000]10    <2>  mov byte [intprob], i
  1514 00001209 E933030000          <2>  jmp unhand2
  1515                              <2>  %assign i i+1
  1516 0000120E FA                  <2>  cli
  1517 0000120F C605[3A180000]11    <2>  mov byte [intprob], i
  1518 00001216 E926030000          <2>  jmp unhand2
  1519                              <2>  %assign i i+1
  1520 0000121B FA                  <2>  cli
  1521 0000121C C605[3A180000]12    <2>  mov byte [intprob], i
  1522 00001223 E919030000          <2>  jmp unhand2
  1523                              <2>  %assign i i+1
  1524 00001228 FA                  <2>  cli
  1525 00001229 C605[3A180000]13    <2>  mov byte [intprob], i
  1526 00001230 E90C030000          <2>  jmp unhand2
  1527                              <2>  %assign i i+1
  1528 00001235 FA                  <2>  cli
  1529 00001236 C605[3A180000]14    <2>  mov byte [intprob], i
  1530 0000123D E9FF020000          <2>  jmp unhand2
  1531                              <2>  %assign i i+1
  1532 00001242 FA                  <2>  cli
  1533 00001243 C605[3A180000]15    <2>  mov byte [intprob], i
  1534 0000124A E9F2020000          <2>  jmp unhand2
  1535                              <2>  %assign i i+1
  1536 0000124F FA                  <2>  cli
  1537 00001250 C605[3A180000]16    <2>  mov byte [intprob], i
  1538 00001257 E9E5020000          <2>  jmp unhand2
  1539                              <2>  %assign i i+1
  1540 0000125C FA                  <2>  cli
  1541 0000125D C605[3A180000]17    <2>  mov byte [intprob], i
  1542 00001264 E9D8020000          <2>  jmp unhand2
  1543                              <2>  %assign i i+1
  1544 00001269 FA                  <2>  cli
  1545 0000126A C605[3A180000]18    <2>  mov byte [intprob], i
  1546 00001271 E9CB020000          <2>  jmp unhand2
  1547                              <2>  %assign i i+1
  1548 00001276 FA                  <2>  cli
  1549 00001277 C605[3A180000]19    <2>  mov byte [intprob], i
  1550 0000127E E9BE020000          <2>  jmp unhand2
  1551                              <2>  %assign i i+1
  1552 00001283 FA                  <2>  cli
  1553 00001284 C605[3A180000]1A    <2>  mov byte [intprob], i
  1554 0000128B E9B1020000          <2>  jmp unhand2
  1555                              <2>  %assign i i+1
  1556 00001290 FA                  <2>  cli
  1557 00001291 C605[3A180000]1B    <2>  mov byte [intprob], i
  1558 00001298 E9A4020000          <2>  jmp unhand2
  1559                              <2>  %assign i i+1
  1560 0000129D FA                  <2>  cli
  1561 0000129E C605[3A180000]1C    <2>  mov byte [intprob], i
  1562 000012A5 E997020000          <2>  jmp unhand2
  1563                              <2>  %assign i i+1
  1564 000012AA FA                  <2>  cli
  1565 000012AB C605[3A180000]1D    <2>  mov byte [intprob], i
  1566 000012B2 E98A020000          <2>  jmp unhand2
  1567                              <2>  %assign i i+1
  1568 000012B7 FA                  <2>  cli
  1569 000012B8 C605[3A180000]1E    <2>  mov byte [intprob], i
  1570 000012BF E97D020000          <2>  jmp unhand2
  1571                              <2>  %assign i i+1
  1572 000012C4 FA                  <2>  cli
  1573 000012C5 C605[3A180000]1F    <2>  mov byte [intprob], i
  1574 000012CC E970020000          <2>  jmp unhand2
  1575                              <2>  %assign i i+1
  1576 000012D1 FA                  <2>  cli
  1577 000012D2 C605[3A180000]20    <2>  mov byte [intprob], i
  1578 000012D9 E963020000          <2>  jmp unhand2
  1579                              <2>  %assign i i+1
  1580 000012DE FA                  <2>  cli
  1581 000012DF C605[3A180000]21    <2>  mov byte [intprob], i
  1582 000012E6 E956020000          <2>  jmp unhand2
  1583                              <2>  %assign i i+1
  1584 000012EB FA                  <2>  cli
  1585 000012EC C605[3A180000]22    <2>  mov byte [intprob], i
  1586 000012F3 E949020000          <2>  jmp unhand2
  1587                              <2>  %assign i i+1
  1588 000012F8 FA                  <2>  cli
  1589 000012F9 C605[3A180000]23    <2>  mov byte [intprob], i
  1590 00001300 E93C020000          <2>  jmp unhand2
  1591                              <2>  %assign i i+1
  1592 00001305 FA                  <2>  cli
  1593 00001306 C605[3A180000]24    <2>  mov byte [intprob], i
  1594 0000130D E92F020000          <2>  jmp unhand2
  1595                              <2>  %assign i i+1
  1596 00001312 FA                  <2>  cli
  1597 00001313 C605[3A180000]25    <2>  mov byte [intprob], i
  1598 0000131A E922020000          <2>  jmp unhand2
  1599                              <2>  %assign i i+1
  1600 0000131F FA                  <2>  cli
  1601 00001320 C605[3A180000]26    <2>  mov byte [intprob], i
  1602 00001327 E915020000          <2>  jmp unhand2
  1603                              <2>  %assign i i+1
  1604 0000132C FA                  <2>  cli
  1605 0000132D C605[3A180000]27    <2>  mov byte [intprob], i
  1606 00001334 E908020000          <2>  jmp unhand2
  1607                              <2>  %assign i i+1
  1608 00001339 FA                  <2>  cli
  1609 0000133A C605[3A180000]28    <2>  mov byte [intprob], i
  1610 00001341 E9FB010000          <2>  jmp unhand2
  1611                              <2>  %assign i i+1
  1612 00001346 FA                  <2>  cli
  1613 00001347 C605[3A180000]29    <2>  mov byte [intprob], i
  1614 0000134E E9EE010000          <2>  jmp unhand2
  1615                              <2>  %assign i i+1
  1616 00001353 FA                  <2>  cli
  1617 00001354 C605[3A180000]2A    <2>  mov byte [intprob], i
  1618 0000135B E9E1010000          <2>  jmp unhand2
  1619                              <2>  %assign i i+1
  1620 00001360 FA                  <2>  cli
  1621 00001361 C605[3A180000]2B    <2>  mov byte [intprob], i
  1622 00001368 E9D4010000          <2>  jmp unhand2
  1623                              <2>  %assign i i+1
  1624 0000136D FA                  <2>  cli
  1625 0000136E C605[3A180000]2C    <2>  mov byte [intprob], i
  1626 00001375 E9C7010000          <2>  jmp unhand2
  1627                              <2>  %assign i i+1
  1628 0000137A FA                  <2>  cli
  1629 0000137B C605[3A180000]2D    <2>  mov byte [intprob], i
  1630 00001382 E9BA010000          <2>  jmp unhand2
  1631                              <2>  %assign i i+1
  1632 00001387 FA                  <2>  cli
  1633 00001388 C605[3A180000]2E    <2>  mov byte [intprob], i
  1634 0000138F E9AD010000          <2>  jmp unhand2
  1635                              <2>  %assign i i+1
  1636 00001394 FA                  <2>  cli
  1637 00001395 C605[3A180000]2F    <2>  mov byte [intprob], i
  1638 0000139C E9A0010000          <2>  jmp unhand2
  1639                              <2>  %assign i i+1
  1640 000013A1 FA                  <2>  cli
  1641 000013A2 C605[3A180000]30    <2>  mov byte [intprob], i
  1642 000013A9 E993010000          <2>  jmp unhand2
  1643                              <2>  %assign i i+1
  1644 000013AE FA                  <2>  cli
  1645 000013AF C605[3A180000]31    <2>  mov byte [intprob], i
  1646 000013B6 E986010000          <2>  jmp unhand2
  1647                              <2>  %assign i i+1
  1648 000013BB FA                  <2>  cli
  1649 000013BC C605[3A180000]32    <2>  mov byte [intprob], i
  1650 000013C3 E979010000          <2>  jmp unhand2
  1651                              <2>  %assign i i+1
  1652 000013C8 FA                  <2>  cli
  1653 000013C9 C605[3A180000]33    <2>  mov byte [intprob], i
  1654 000013D0 E96C010000          <2>  jmp unhand2
  1655                              <2>  %assign i i+1
  1656 000013D5 FA                  <2>  cli
  1657 000013D6 C605[3A180000]34    <2>  mov byte [intprob], i
  1658 000013DD E95F010000          <2>  jmp unhand2
  1659                              <2>  %assign i i+1
  1660 000013E2 FA                  <2>  cli
  1661 000013E3 C605[3A180000]35    <2>  mov byte [intprob], i
  1662 000013EA E952010000          <2>  jmp unhand2
  1663                              <2>  %assign i i+1
  1664 000013EF FA                  <2>  cli
  1665 000013F0 C605[3A180000]36    <2>  mov byte [intprob], i
  1666 000013F7 E945010000          <2>  jmp unhand2
  1667                              <2>  %assign i i+1
  1668 000013FC FA                  <2>  cli
  1669 000013FD C605[3A180000]37    <2>  mov byte [intprob], i
  1670 00001404 E938010000          <2>  jmp unhand2
  1671                              <2>  %assign i i+1
  1672 00001409 FA                  <2>  cli
  1673 0000140A C605[3A180000]38    <2>  mov byte [intprob], i
  1674 00001411 E92B010000          <2>  jmp unhand2
  1675                              <2>  %assign i i+1
  1676 00001416 FA                  <2>  cli
  1677 00001417 C605[3A180000]39    <2>  mov byte [intprob], i
  1678 0000141E E91E010000          <2>  jmp unhand2
  1679                              <2>  %assign i i+1
  1680 00001423 FA                  <2>  cli
  1681 00001424 C605[3A180000]3A    <2>  mov byte [intprob], i
  1682 0000142B E911010000          <2>  jmp unhand2
  1683                              <2>  %assign i i+1
  1684 00001430 FA                  <2>  cli
  1685 00001431 C605[3A180000]3B    <2>  mov byte [intprob], i
  1686 00001438 E904010000          <2>  jmp unhand2
  1687                              <2>  %assign i i+1
  1688 0000143D FA                  <2>  cli
  1689 0000143E C605[3A180000]3C    <2>  mov byte [intprob], i
  1690 00001445 E9F7000000          <2>  jmp unhand2
  1691                              <2>  %assign i i+1
  1692 0000144A FA                  <2>  cli
  1693 0000144B C605[3A180000]3D    <2>  mov byte [intprob], i
  1694 00001452 E9EA000000          <2>  jmp unhand2
  1695                              <2>  %assign i i+1
  1696 00001457 FA                  <2>  cli
  1697 00001458 C605[3A180000]3E    <2>  mov byte [intprob], i
  1698 0000145F E9DD000000          <2>  jmp unhand2
  1699                              <2>  %assign i i+1
  1700 00001464 FA                  <2>  cli
  1701 00001465 C605[3A180000]3F    <2>  mov byte [intprob], i
  1702 0000146C E9D0000000          <2>  jmp unhand2
  1703                              <2>  %assign i i+1
  1704 00001471 FA                  <2>  cli
  1705 00001472 C605[3A180000]40    <2>  mov byte [intprob], i
  1706 00001479 E9C3000000          <2>  jmp unhand2
  1707                              <2>  %assign i i+1
  1708 0000147E FA                  <2>  cli
  1709 0000147F C605[3A180000]41    <2>  mov byte [intprob], i
  1710 00001486 E9B6000000          <2>  jmp unhand2
  1711                              <2>  %assign i i+1
  1712 0000148B FA                  <2>  cli
  1713 0000148C C605[3A180000]42    <2>  mov byte [intprob], i
  1714 00001493 E9A9000000          <2>  jmp unhand2
  1715                              <2>  %assign i i+1
  1716 00001498 FA                  <2>  cli
  1717 00001499 C605[3A180000]43    <2>  mov byte [intprob], i
  1718 000014A0 E99C000000          <2>  jmp unhand2
  1719                              <2>  %assign i i+1
  1720 000014A5 FA                  <2>  cli
  1721 000014A6 C605[3A180000]44    <2>  mov byte [intprob], i
  1722 000014AD E98F000000          <2>  jmp unhand2
  1723                              <2>  %assign i i+1
  1724 000014B2 FA                  <2>  cli
  1725 000014B3 C605[3A180000]45    <2>  mov byte [intprob], i
  1726 000014BA E982000000          <2>  jmp unhand2
  1727                              <2>  %assign i i+1
  1728 000014BF FA                  <2>  cli
  1729 000014C0 C605[3A180000]46    <2>  mov byte [intprob], i
  1730 000014C7 E975000000          <2>  jmp unhand2
  1731                              <2>  %assign i i+1
  1732 000014CC FA                  <2>  cli
  1733 000014CD C605[3A180000]47    <2>  mov byte [intprob], i
  1734 000014D4 E968000000          <2>  jmp unhand2
  1735                              <2>  %assign i i+1
  1736 000014D9 FA                  <2>  cli
  1737 000014DA C605[3A180000]48    <2>  mov byte [intprob], i
  1738 000014E1 E95B000000          <2>  jmp unhand2
  1739                              <2>  %assign i i+1
  1740 000014E6 FA                  <2>  cli
  1741 000014E7 C605[3A180000]49    <2>  mov byte [intprob], i
  1742 000014EE E94E000000          <2>  jmp unhand2
  1743                              <2>  %assign i i+1
  1744 000014F3 FA                  <2>  cli
  1745 000014F4 C605[3A180000]4A    <2>  mov byte [intprob], i
  1746 000014FB E941000000          <2>  jmp unhand2
  1747                              <2>  %assign i i+1
  1748 00001500 FA                  <2>  cli
  1749 00001501 C605[3A180000]4B    <2>  mov byte [intprob], i
  1750 00001508 E934000000          <2>  jmp unhand2
  1751                              <2>  %assign i i+1
  1752 0000150D FA                  <2>  cli
  1753 0000150E C605[3A180000]4C    <2>  mov byte [intprob], i
  1754 00001515 E927000000          <2>  jmp unhand2
  1755                              <2>  %assign i i+1
  1756 0000151A FA                  <2>  cli
  1757 0000151B C605[3A180000]4D    <2>  mov byte [intprob], i
  1758 00001522 E91A000000          <2>  jmp unhand2
  1759                              <2>  %assign i i+1
  1760 00001527 FA                  <2>  cli
  1761 00001528 C605[3A180000]4E    <2>  mov byte [intprob], i
  1762 0000152F E90D000000          <2>  jmp unhand2
  1763                              <2>  %assign i i+1
  1764 00001534 FA                  <2>  cli
  1765 00001535 C605[3A180000]4F    <2>  mov byte [intprob], i
  1766 0000153C E900000000          <2>  jmp unhand2
  1767                              <2>  %assign i i+1
  1768                              <1> unhand2:
  1769 00001541 FA                  <1> 	cli
  1770 00001542 1E                  <1> 	push ds
  1771 00001543 06                  <1> 	push es
  1772 00001544 0FA0                <1> 	push fs
  1773 00001546 0FA8                <1> 	push gs
  1774 00001548 16                  <1> 	push ss
  1775 00001549 60                  <1> 	pushad
  1776 0000154A 803D[AD8C0000]00    <1> 	cmp byte [guion], 0
  1777 00001551 0F8432000000        <1> 	je near noguiunhandstuff
  1778 00001557 66C705[34180000]08- <1> 	mov word [locunhandy], 8
  1779 0000155F 00                  <1>
  1780 00001560 66C705[36180000]08- <1> 	mov word [locunhandx], 8
  1781 00001568 00                  <1>
  1782 00001569 668B1D[C5570000]    <1> 	mov bx, [background]
  1783 00001570 66891D[38180000]    <1> 	mov [backgroundcache], bx
  1784 00001577 C605[CE500000]01    <1> 	mov byte [mousedisabled],1
  1785 0000157E 66BB00F8            <1> 	mov bx, 1111100000000000b
  1786 00001582 66891D[C5570000]    <1> 	mov [background], bx
  1787                              <1> noguiunhandstuff:
  1788 00001589 89E6                <1> 	mov esi, esp
  1789 0000158B 8935[28180000]      <1> 	mov [espfirst], esi
  1790 00001591 81C6BC000000        <1> 	add esi, ((unhndrgend - unhndrg)/15)*4
  1791 00001597 8935[24180000]      <1> 	mov [esploc], esi
  1792 0000159D BE[43180000]        <1> 	mov esi, unhandmsg
  1793 000015A2 8935[2C180000]      <1> 	mov [esiloc], esi
  1794 000015A8 31C9                <1> 	xor ecx, ecx
  1795 000015AA 8A0D[3A180000]      <1> 	mov cl, [intprob]
  1796 000015B0 BB[D61B0000]        <1> 	mov ebx, errortypes
  1797 000015B5 C1E102              <1> 	shl ecx, 2
  1798 000015B8 01CB                <1> 	add ebx, ecx
  1799 000015BA 81FB[161C0000]      <1> 	cmp ebx, errortypesend
  1800 000015C0 7205                <1> 	jb gooderrortype
  1801 000015C2 BB[161C0000]        <1> 	mov ebx, errortypesend
  1802                              <1> gooderrortype:
  1803 000015C7 8B33                <1> 	mov esi, [ebx]
  1804 000015C9 803D[AD8C0000]00    <1> 	cmp byte [guion], 0
  1805 000015D0 0F842D000000        <1> 	je near errortext
  1806 000015D6 668B0D[34180000]    <1> 	mov cx, [locunhandy]
  1807 000015DD 668B15[36180000]    <1> 	mov dx, [locunhandx]
  1808 000015E4 66B80100            <1> 	mov ax, 1
  1809 000015E8 6631DB              <1> 	xor bx, bx
  1810 000015EB E8C84C0000          <1> 	call showstring2
  1811 000015F0 66890D[34180000]    <1> 	mov [locunhandy], cx
  1812 000015F7 668915[36180000]    <1> 	mov [locunhandx], dx
  1813 000015FE E905000000          <1> 	jmp errortextdone
  1814                              <1> errortext:
  1815 00001603 E8420D0000          <1> 	call print		;;get the error message and print it
  1816                              <1> errortextdone:
  1817 00001608 31C9                <1> 	xor ecx, ecx
  1818 0000160A 8A0D[3A180000]      <1> 	mov cl, [intprob]
  1819 00001610 E8A8010000          <1> 	call expdump
  1820                              <1> dumpstack:
  1821 00001615 8B35[24180000]      <1> 	mov esi, [esploc]
  1822 0000161B 39E6                <1> 	cmp esi, esp
  1823 0000161D 7216                <1> 	jb donedump
  1824 0000161F 368B0E              <1> 	mov ecx, [ss:esi]
  1825 00001622 81EE04000000        <1> 	sub esi, 4
  1826 00001628 8935[24180000]      <1> 	mov [esploc], esi
  1827 0000162E E88A010000          <1> 	call expdump
  1828 00001633 EBE0                <1> 	jmp dumpstack
  1829                              <1> donedump:
  1830 00001635 0F20C1              <1> 	mov ecx, cr0
  1831 00001638 E880010000          <1> 	call expdump
  1832 0000163D 0F20D1              <1> 	mov ecx, cr2
  1833 00001640 E878010000          <1> 	call expdump
  1834 00001645 0F20D9              <1> 	mov ecx, cr3
  1835 00001648 E870010000          <1> 	call expdump
  1836 0000164D 0F20E1              <1> 	mov ecx, cr4
  1837 00001650 E868010000          <1> 	call expdump
  1838 00001655 8B35[24180000]      <1> 	mov esi, [esploc]
  1839 0000165B 368B7C2434          <1> 	mov edi, [ss:esp + 52]
  1840 00001660 81C710000000        <1> 	add edi, 16
  1841 00001666 893D[3F180000]      <1> 	mov [codelocend], edi
  1842 0000166C 81EF20000000        <1> 	sub edi, 32
  1843                              <1> dumpcodeloop:
  1844 00001672 893D[3B180000]      <1> 	mov [codeloc], edi
  1845 00001678 8B0F                <1> 	mov ecx, [edi]
  1846 0000167A E83E010000          <1> 	call expdump
  1847 0000167F 8B3D[3B180000]      <1> 	mov edi, [codeloc]
  1848 00001685 81C704000000        <1> 	add edi, 4
  1849 0000168B 3B3D[3F180000]      <1> 	cmp edi, [codelocend]
  1850 00001691 72DF                <1> 	jb dumpcodeloop
  1851 00001693 BE[4E170000]        <1> 	mov esi, backtoosmsg
  1852 00001698 803D[AD8C0000]00    <1> 	cmp byte [guion], 0
  1853 0000169F 750A                <1> 	jne guibacktomsg
  1854 000016A1 E8A40C0000          <1> 	call print
  1855 000016A6 E91A000000          <1> 	jmp backtomsgdone
  1856                              <1> guibacktomsg:
  1857 000016AB 668B15[36180000]    <1> 	mov dx, [locunhandx]
  1858 000016B2 668B0D[34180000]    <1> 	mov cx, [locunhandy]
  1859 000016B9 66B80100            <1> 	mov ax, 1
  1860 000016BD 6631DB              <1> 	xor bx, bx
  1861 000016C0 E8F34B0000          <1> 	call showstring2
  1862                              <1> backtomsgdone:
  1863 000016C5 30C0                <1> 	xor al, al
  1864 000016C7 E800110000          <1> 	call rdcharint
  1865 000016CC 803D[3A180000]03    <1> 	cmp byte [intprob], 3
  1866 000016D3 753C                <1> 	jne nodebugint
  1867 000016D5 803D[AD8C0000]00    <1> 	cmp byte [guion], 0
  1868 000016DC 7422                <1> 	je nodebuggui
  1869 000016DE 668B1D[38180000]    <1> 	mov bx, [backgroundcache]
  1870 000016E5 66891D[C5570000]    <1> 	mov [background], bx
  1871 000016EC 6631DB              <1> 	xor bx, bx
  1872 000016EF C605[CE500000]00    <1> 	mov byte [mousedisabled], 0
  1873 000016F6 E88D400000          <1> 	call guiclear
  1874 000016FB E85F480000          <1> 	call reloadallgraphics
  1875                              <1> nodebuggui:
  1876 00001700 8B35[28180000]      <1> 	mov esi, [espfirst]
  1877 00001706 89F4                <1> 	mov esp, esi
  1878 00001708 61                  <1> 	popad
  1879 00001709 17                  <1> 	pop ss
  1880 0000170A 0FA9                <1> 	pop gs
  1881 0000170C 0FA1                <1> 	pop fs
  1882 0000170E 07                  <1> 	pop es
  1883 0000170F 1F                  <1> 	pop ds
  1884 00001710 CF                  <1> 	iret
  1885                              <1> nodebugint:
  1886 00001711 61                  <1> 	popad
  1887 00001712 17                  <1> 	pop ss
  1888 00001713 0FA9                <1> 	pop gs
  1889 00001715 0FA1                <1> 	pop fs
  1890 00001717 07                  <1> 	pop es
  1891 00001718 1F                  <1> 	pop ds
  1892 00001719 803D[AD8C0000]00    <1> 	cmp byte [guion], 0
  1893 00001720 7427                <1> 	je returnunhandgui
  1894 00001722 668B1D[38180000]    <1> 	mov bx, [backgroundcache]
  1895 00001729 66891D[C5570000]    <1> 	mov [background], bx
  1896 00001730 6631DB              <1> 	xor bx, bx
  1897 00001733 C605[CE500000]00    <1> 	mov byte [mousedisabled], 0
  1898 0000173A E849400000          <1> 	call guiclear
  1899 0000173F E81B480000          <1> 	call reloadallgraphics
  1900 00001744 E97E400000          <1> 	jmp gui
  1901                              <1> returnunhandgui:
  1902 00001749 E90E170000          <1> 	jmp nwcmd
  1903 0000174E 506C6561736520706F- <1> backtoosmsg db "Please post any problems in the Issues section at solleros.googlecode.com",10
  1904 00001757 737420616E79207072- <1>
  1905 00001760 6F626C656D7320696E- <1>
  1906 00001769 207468652049737375- <1>
  1907 00001772 65732073656374696F- <1>
  1908 0000177B 6E20617420736F6C6C- <1>
  1909 00001784 65726F732E676F6F67- <1>
  1910 0000178D 6C65636F64652E636F- <1>
  1911 00001796 6D0A                <1>
  1912 00001798 507265737320616E79- <1> 			db "Press any key to return to SollerOS",10,0
  1913 000017A1 206B657920746F2072- <1>
  1914 000017AA 657475726E20746F20- <1>
  1915 000017B3 536F6C6C65724F530A- <1>
  1916 000017BC 00                  <1>
  1917                              <1> expdump:
  1918 000017BD 8B35[2C180000]      <1> 	mov esi, [esiloc]
  1919 000017C3 89F7                <1> 	mov edi, esi
  1920 000017C5 81C70F000000        <1> 	add edi, 15
  1921 000017CB 81C604000000        <1> 	add esi, 4
  1922 000017D1 893D[2C180000]      <1> 	mov [esiloc], edi
  1923 000017D7 81EF03000000        <1> 	sub edi, 3
  1924 000017DD E8E01A0000          <1> 	call converthex
  1925 000017E2 81EE04000000        <1> 	sub esi, 4
  1926 000017E8 803D[AD8C0000]00    <1> 	cmp byte [guion], 0
  1927 000017EF 0F8429000000        <1> 	je near expdumptext
  1928 000017F5 668B0D[34180000]    <1> 	mov cx, [locunhandy]
  1929 000017FC 668B15[36180000]    <1> 	mov dx, [locunhandx]
  1930 00001803 66B80100            <1> 	mov ax, 1
  1931 00001807 6631DB              <1> 	xor bx, bx
  1932 0000180A E8A94A0000          <1> 	call showstring2
  1933 0000180F 66890D[34180000]    <1> 	mov [locunhandy], cx
  1934 00001816 668915[36180000]    <1> 	mov [locunhandx], dx
  1935 0000181D C3                  <1> 	ret
  1936                              <1> expdumptext:
  1937 0000181E E8270B0000          <1> 	call print
  1938 00001823 C3                  <1> 	ret
  1939 00001824 00000000            <1> esploc dd 0
  1940 00001828 00000000            <1> espfirst dd 0
  1941 0000182C 00000000            <1> esiloc dd 0
  1942 00001830 00000000            <1> esiregbuf dd 0
  1943 00001834 0100                <1> locunhandy dw 1
  1944 00001836 0100                <1> locunhandx dw 1
  1945 00001838 0000                <1> backgroundcache dw 0
  1946 0000183A 00                  <1> intprob db 0
  1947 0000183B 00000000            <1> codeloc dd 0
  1948 0000183F 00000000            <1> codelocend dd 0
  1949                              <1> 	unhandmsg:	
  1950 00001843 494E543D3030303030- <1> 			db "INT=00000000 ",10,0
  1951 0000184C 303030200A00        <1>
  1952                              <1> unhndrg:
  1953 00001852 FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0	;;this dumps the stack before the stack frame in question
  1954 0000185B 303030202000<rept>  <1>
  1955 000018BB FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000 ",10,0
  1956 000018C4 303030200A00        <1>
  1957 000018CA FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0	;;this dumps the stack before the stack frame in question
  1958 000018D3 303030202000<rept>  <1>
  1959 00001933 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000 ",10,0
  1960 0000193C 303030200A00        <1>
  1961 00001942 FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0	;;this dumps the stack before the stack frame in question
  1962 0000194B 303030202000<rept>  <1>
  1963 000019AB FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000 ",10,0
  1964 000019B4 303030200A00        <1>
  1965 000019BA FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0	;;this dumps the stack before the stack frame in question
  1966 000019C3 303030202000<rept>  <1>
  1967 00001A23 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000 ",10,0
  1968 00001A2C 303030200A00        <1>
  1969                              <1> unhandregs:
  1970 00001A32 45464C3D3030303030- <1> 			db "EFL=00000000  ",0
  1971 00001A3B 303030202000        <1>
  1972 00001A41 43533A3D3030303030- <1> 			db "CS:=00000000  ",0
  1973 00001A4A 303030202000        <1>
  1974 00001A50 4549503D3030303030- <1> 			db "EIP=00000000 ",10,0
  1975 00001A59 303030200A00        <1>
  1976 00001A5F 44533A3D3030303030- <1> 			db "DS:=00000000  ",0
  1977 00001A68 303030202000        <1>
  1978 00001A6E 45533A3D3030303030- <1> 			db "ES:=00000000  ",0
  1979 00001A77 303030202000        <1>
  1980 00001A7D 46533A3D3030303030- <1> 			db "FS:=00000000  ",0
  1981 00001A86 303030202000        <1>
  1982 00001A8C 47533A3D3030303030- <1> 			db "GS:=00000000  ",0
  1983 00001A95 303030202000        <1>
  1984 00001A9B 53533A3D3030303030- <1> 			db "SS:=00000000 ",10,0
  1985 00001AA4 303030200A00        <1>
  1986 00001AAA 4541583D3030303030- <1> 			db "EAX=00000000  ",0
  1987 00001AB3 303030202000        <1>
  1988 00001AB9 4543583D3030303030- <1> 			db "ECX=00000000  ",0
  1989 00001AC2 303030202000        <1>
  1990 00001AC8 4544583D3030303030- <1> 			db "EDX=00000000  ",0
  1991 00001AD1 303030202000        <1>
  1992 00001AD7 4542583D3030303030- <1> 			db "EBX=00000000 ",10,0
  1993 00001AE0 303030200A00        <1>
  1994 00001AE6 4553503D3030303030- <1> 			db "ESP=00000000  ",0
  1995 00001AEF 303030202000        <1>
  1996 00001AF5 4542503D3030303030- <1> 			db "EBP=00000000  ",0
  1997 00001AFE 303030202000        <1>
  1998 00001B04 4553493D3030303030- <1> 			db "ESI=00000000  ",0
  1999 00001B0D 303030202000        <1>
  2000 00001B13 4544493D3030303030- <1> unhndrgend:	db "EDI=00000000 ",10,0
  2001 00001B1C 303030200A00        <1>
  2002 00001B22 4352303D3030303030- <1> 			db "CR0=00000000  ",0
  2003 00001B2B 303030202000        <1>
  2004 00001B31 4352323D3030303030- <1> 			db "CR2=00000000  ",0
  2005 00001B3A 303030202000        <1>
  2006 00001B40 4352333D3030303030- <1> 			db "CR3=00000000  ",0
  2007 00001B49 303030202000        <1>
  2008 00001B4F 4352343D3030303030- <1> 			db "CR4=00000000 ",10,0
  2009 00001B58 303030200A00        <1>
  2010 00001B5E FFFFFFFF3030303030- <1> unhandcode: times 2 db 255,255,255,255,"00000000  ",0	;;this dumps the code before and after the interrupt in question
  2011 00001B67 303030202000<rept>  <1>
  2012 00001B7C FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000 ",255,0
  2013 00001B85 30303020FF00        <1>
  2014 00001B8B FFFFFF5B3030303030- <1> 			db 255,255,255,"[00000000] ",0
  2015 00001B94 3030305D2000        <1>
  2016 00001B9A FFFFFFFF3030303030- <1> 			times 3 db 255,255,255,255,"00000000  ",0
  2017 00001BA3 303030202000<rept>  <1>
  2018 00001BC7 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",255,10,0
  2019 00001BD0 303030FF0A00        <1>
  2020                              <1> unhandmsgend:
  2021                              <1> 
  2022                              <1> errortypes:
  2023 00001BD6 [1A1C0000]          <1> 			dd err0
  2024 00001BDA [7E1C0000]          <1> 			dd err1
  2025 00001BDE [DF1C0000]          <1> 			dd err2
  2026 00001BE2 [341D0000]          <1> 			dd err3
  2027 00001BE6 [981D0000]          <1> 			dd err4
  2028 00001BEA [EA1D0000]          <1> 			dd err5
  2029 00001BEE [541E0000]          <1> 			dd err6
  2030 00001BF2 [BC1E0000]          <1> 			dd err7
  2031 00001BF6 [061F0000]          <1> 			dd err8
  2032 00001BFA [631F0000]          <1> 			dd err9
  2033 00001BFE [BC1F0000]          <1> 			dd err10
  2034 00001C02 [07200000]          <1> 			dd err11
  2035 00001C06 [57200000]          <1> 			dd err12
  2036 00001C0A [B0200000]          <1> 			dd err13
  2037 00001C0E [13210000]          <1> 			dd err14
  2038 00001C12 [4F210000]          <1> 			dd err15
  2039                              <1> errortypesend:
  2040 00001C16 [DA210000]          <1> 			dd unknownerror
  2041                              <1> 			
  2042 00001C1A 4469766973696F6E20- <1> err0	db "Division by zero:",10
  2043 00001C23 6279207A65726F3A0A  <1>
  2044 00001C2C 546563686E6963616C- <1> 		db "Technically lim a",246,"x = ",236," when a is any real number. Happy Easter!",10
  2045 00001C35 6C79206C696D2061F6- <1>
  2046 00001C3E 78203D20EC20776865- <1>
  2047 00001C47 6E206120697320616E- <1>
  2048 00001C50 79207265616C206E75- <1>
  2049 00001C59 6D6265722E20486170- <1>
  2050 00001C62 707920456173746572- <1>
  2051 00001C6B 210A                <1>
  2052 00001C6D 202020202020202020- <1> 		db "            x",26,"0",10,0
  2053 00001C76 202020781A300A00    <1>
  2054                              <1> 		
  2055 00001C7E 53696E676C652D7374- <1> err1	db "Single-step/Breakpoint:",10
  2056 00001C87 65702F427265616B70- <1>
  2057 00001C90 6F696E743A0A        <1>
  2058 00001C96 4120627265616B706F- <1> 		db "A breakpoint fault, breakpoint trap, or single-step trap was triggered.",10,0
  2059 00001C9F 696E74206661756C74- <1>
  2060 00001CA8 2C20627265616B706F- <1>
  2061 00001CB1 696E7420747261702C- <1>
  2062 00001CBA 206F722073696E676C- <1>
  2063 00001CC3 652D73746570207472- <1>
  2064 00001CCC 617020776173207472- <1>
  2065 00001CD5 696767657265642E0A- <1>
  2066 00001CDE 00                  <1>
  2067                              <1> 		
  2068 00001CDF 4E6F6E6D61736B6162- <1> err2	db "Nonmaskable interrupt:",10
  2069 00001CE8 6C6520696E74657272- <1>
  2070 00001CF1 7570743A0A          <1>
  2071 00001CF6 412068617264776172- <1> 		db "A hardware interrupt was triggered that could not be masked.",10,0
  2072 00001CFF 6520696E7465727275- <1>
  2073 00001D08 707420776173207472- <1>
  2074 00001D11 696767657265642074- <1>
  2075 00001D1A 68617420636F756C64- <1>
  2076 00001D23 206E6F74206265206D- <1>
  2077 00001D2C 61736B65642E0A00    <1>
  2078                              <1> 		
  2079 00001D34 427265616B706F696E- <1> err3	db "Breakpoint:",10
  2080 00001D3D 743A0A              <1>
  2081 00001D40 5468697320696E7465- <1> 		db "This interrupt is used in programs to show the stack and registers and can be",10
  2082 00001D49 727275707420697320- <1>
  2083 00001D52 7573656420696E2070- <1>
  2084 00001D5B 726F6772616D732074- <1>
  2085 00001D64 6F2073686F77207468- <1>
  2086 00001D6D 6520737461636B2061- <1>
  2087 00001D76 6E6420726567697374- <1>
  2088 00001D7F 65727320616E642063- <1>
  2089 00001D88 616E2062650A        <1>
  2090 00001D8E 69676E6F7265642E0A- <1> 		db "ignored.",10,0
  2091 00001D97 00                  <1>
  2092                              <1> 		
  2093 00001D98 4F766572666C6F773A- <1> err4	db "Overflow:",10
  2094 00001DA1 0A                  <1>
  2095 00001DA2 5468652070726F6365- <1> 		db "The processor ran into an INTO instruction with the overflow flag set.",10,0
  2096 00001DAB 73736F722072616E20- <1>
  2097 00001DB4 696E746F20616E2049- <1>
  2098 00001DBD 4E544F20696E737472- <1>
  2099 00001DC6 756374696F6E207769- <1>
  2100 00001DCF 746820746865206F76- <1>
  2101 00001DD8 6572666C6F7720666C- <1>
  2102 00001DE1 6167207365742E0A00  <1>
  2103                              <1> 		
  2104 00001DEA 426F756E6473206368- <1> err5	db "Bounds check:",10
  2105 00001DF3 65636B3A0A          <1>
  2106 00001DF8 5468652070726F6365- <1> 		db "The processor rebounded from a BOUND instruction run on an operand that was out",10
  2107 00001E01 73736F72207265626F- <1>
  2108 00001E0A 756E6465642066726F- <1>
  2109 00001E13 6D206120424F554E44- <1>
  2110 00001E1C 20696E737472756374- <1>
  2111 00001E25 696F6E2072756E206F- <1>
  2112 00001E2E 6E20616E206F706572- <1>
  2113 00001E37 616E64207468617420- <1>
  2114 00001E40 776173206F75740A    <1>
  2115 00001E48 6F6620626F756E6473- <1> 		db "of bounds.",10,0
  2116 00001E51 2E0A00              <1>
  2117                              <1> 		
  2118 00001E54 496E76616C6964206F- <1> err6	db "Invalid opcode:",10
  2119 00001E5D 70636F64653A0A      <1>
  2120 00001E64 5468652070726F6365- <1> 		db "The processor has no idea what it was trying to execute. Don't run SSE4 code",10
  2121 00001E6D 73736F722068617320- <1>
  2122 00001E76 6E6F20696465612077- <1>
  2123 00001E7F 686174206974207761- <1>
  2124 00001E88 7320747279696E6720- <1>
  2125 00001E91 746F20657865637574- <1>
  2126 00001E9A 652E20446F6E277420- <1>
  2127 00001EA3 72756E205353453420- <1>
  2128 00001EAC 636F64650A          <1>
  2129 00001EB1 6F6E20343836277321- <1> 		db "on 486's!",10,0
  2130 00001EBA 0A00                <1>
  2131                              <1> 		
  2132 00001EBC 436F70726F63657373- <1> err7	db "Coprocessor not available:",10
  2133 00001EC5 6F72206E6F74206176- <1>
  2134 00001ECE 61696C61626C653A0A  <1>
  2135 00001ED7 446F6E277420796F75- <1> 		db "Don't you know they don't make those anymore!",10,0
  2136 00001EE0 206B6E6F7720746865- <1>
  2137 00001EE9 7920646F6E2774206D- <1>
  2138 00001EF2 616B652074686F7365- <1>
  2139 00001EFB 20616E796D6F726521- <1>
  2140 00001F04 0A00                <1>
  2141                              <1> 		
  2142 00001F06 446F75626C65206661- <1> err8	db "Double fault:",10
  2143 00001F0F 756C743A0A          <1>
  2144 00001F14 546865206578636570- <1> 		db "The exception handler could not handle that it could not handle an exception.",10,0
  2145 00001F1D 74696F6E2068616E64- <1>
  2146 00001F26 6C657220636F756C64- <1>
  2147 00001F2F 206E6F742068616E64- <1>
  2148 00001F38 6C6520746861742069- <1>
  2149 00001F41 7420636F756C64206E- <1>
  2150 00001F4A 6F742068616E646C65- <1>
  2151 00001F53 20616E206578636570- <1>
  2152 00001F5C 74696F6E2E0A00      <1>
  2153                              <1> 		
  2154 00001F63 436F70726F63657373- <1> err9	db "Coprocessor segment overrun:",10,0
  2155 00001F6C 6F72207365676D656E- <1>
  2156 00001F75 74206F76657272756E- <1>
  2157 00001F7E 3A0A00              <1>
  2158 00001F81 54686973206E657665- <1> 		db "This never happens in modern computers, and never should.",10,0
  2159 00001F8A 722068617070656E73- <1>
  2160 00001F93 20696E206D6F646572- <1>
  2161 00001F9C 6E20636F6D70757465- <1>
  2162 00001FA5 72732C20616E64206E- <1>
  2163 00001FAE 657665722073686F75- <1>
  2164 00001FB7 6C642E0A00          <1>
  2165                              <1> 
  2166 00001FBC 496E76616C69642054- <1> err10	db "Invalid TSS:",10
  2167 00001FC5 53533A0A            <1>
  2168 00001FC9 546865205453532074- <1> 		db "The TSS that was switched to is invalid. Nothing funny here.",10,0
  2169 00001FD2 686174207761732073- <1>
  2170 00001FDB 776974636865642074- <1>
  2171 00001FE4 6F20697320696E7661- <1>
  2172 00001FED 6C69642E204E6F7468- <1>
  2173 00001FF6 696E672066756E6E79- <1>
  2174 00001FFF 20686572652E0A00    <1>
  2175                              <1> 		
  2176 00002007 5365676D656E74206E- <1> err11	db "Segment not present:",10
  2177 00002010 6F742070726573656E- <1>
  2178 00002019 743A0A              <1>
  2179 0000201C 546865207072657365- <1> 		db "The present bit of the segment descriptor is set to zero.",10,0
  2180 00002025 6E7420626974206F66- <1>
  2181 0000202E 20746865207365676D- <1>
  2182 00002037 656E74206465736372- <1>
  2183 00002040 6970746F7220697320- <1>
  2184 00002049 73657420746F207A65- <1>
  2185 00002052 726F2E0A00          <1>
  2186                              <1> 		
  2187 00002057 537461636B20657863- <1> err12	db "Stack exception:",10
  2188 00002060 657074696F6E3A0A    <1>
  2189 00002068 546865205353206465- <1> 		db "The SS descriptor is invalid or not present or its limit is too small.",10,0
  2190 00002071 7363726970746F7220- <1>
  2191 0000207A 697320696E76616C69- <1>
  2192 00002083 64206F72206E6F7420- <1>
  2193 0000208C 70726573656E74206F- <1>
  2194 00002095 7220697473206C696D- <1>
  2195 0000209E 697420697320746F6F- <1>
  2196 000020A7 20736D616C6C2E0A00  <1>
  2197                              <1> 		
  2198 000020B0 47656E6572616C2070- <1> err13	db "General protection violation:",10
  2199 000020B9 726F74656374696F6E- <1>
  2200 000020C2 2076696F6C6174696F- <1>
  2201 000020CB 6E3A0A              <1>
  2202 000020CE 596F752076696F6C61- <1> 		db "You violated the computer. Step away slowly. The FBI is on its way.",10,0
  2203 000020D7 746564207468652063- <1>
  2204 000020E0 6F6D70757465722E20- <1>
  2205 000020E9 537465702061776179- <1>
  2206 000020F2 20736C6F776C792E20- <1>
  2207 000020FB 546865204642492069- <1>
  2208 00002104 73206F6E2069747320- <1>
  2209 0000210D 7761792E0A00        <1>
  2210                              <1> 		
  2211 00002113 50616765206661756C- <1> err14	db "Page fault:",10
  2212 0000211C 743A0A              <1>
  2213 0000211F 546865207061676520- <1> 		db "The page that was requested was not available.",10,0
  2214 00002128 746861742077617320- <1>
  2215 00002131 726571756573746564- <1>
  2216 0000213A 20776173206E6F7420- <1>
  2217 00002143 617661696C61626C65- <1>
  2218 0000214C 2E0A00              <1>
  2219                              <1> 		
  2220 0000214F 526573657276656420- <1> err15	db "Reserved for Plan R:",10
  2221 00002158 666F7220506C616E20- <1>
  2222 00002161 523A0A              <1>
  2223 00002164 5468697320696E7465- <1> 		db "This interrupt is reserved for usage only by the military when it is necessary",10
  2224 0000216D 727275707420697320- <1>
  2225 00002176 726573657276656420- <1>
  2226 0000217F 666F72207573616765- <1>
  2227 00002188 206F6E6C7920627920- <1>
  2228 00002191 746865206D696C6974- <1>
  2229 0000219A 617279207768656E20- <1>
  2230 000021A3 6974206973206E6563- <1>
  2231 000021AC 6573736172790A      <1>
  2232 000021B3 746F20696E69746961- <1> 		db "to initiate a full-scale coup d'",130,"tat.",10,0
  2233 000021BC 746520612066756C6C- <1>
  2234 000021C5 2D7363616C6520636F- <1>
  2235 000021CE 757020642782746174- <1>
  2236 000021D7 2E0A00              <1>
  2237                              <1> 		
  2238 000021DA 576861742074686520- <1> unknownerror db "What the hell just happened? Is everyone okay? Hard drive? Video card?",10
  2239 000021E3 68656C6C206A757374- <1>
  2240 000021EC 2068617070656E6564- <1>
  2241 000021F5 3F2049732065766572- <1>
  2242 000021FE 796F6E65206F6B6179- <1>
  2243 00002207 3F2048617264206472- <1>
  2244 00002210 6976653F2056696465- <1>
  2245 00002219 6F20636172643F0A    <1>
  2246 00002221 4D656D6F72793F2041- <1> 			db	"Memory? Are you there?",10,0
  2247 0000222A 726520796F75207468- <1>
  2248 00002233 6572653F0A00        <1>
  2249                                      %include 'source/ints.asm'
  2250                              <1> newints:	;;for great justice
  2251 00002239 80FC00              <1> 	cmp ah, 0		;;originally 0
  2252 0000223C 0F847F000000        <1> 	je near intx0   ;;0=kills app
  2253 00002242 80FC01              <1> 	cmp ah, 1		;;originally 1
  2254 00002245 0F84E3000000        <1> 	je near intx1   ;;3=print string
  2255 0000224B 80FC02              <1> 	cmp ah, 2		;;originally 2
  2256 0000224E 0F8435010000        <1> 	je near intx2	;;4=read string
  2257 00002254 80FC03              <1> 	cmp ah, 3		;;originally 3
  2258 00002257 0F8467010000        <1> 	je near intx3	;;6=clear screen
  2259 0000225D 80FC04              <1> 	cmp ah, 4		;;originally 4
  2260 00002260 0F84DE010000        <1> 	je near intx4	;;5=read and print string
  2261 00002266 80FC05              <1> 	cmp ah, 5		;;originally 5		
  2262 00002269 0F8451050000        <1> 	je near intx5	;;2=get char
  2263 0000226F 80FC06              <1> 	cmp ah, 6		;;originally 6
  2264 00002272 0F849B050000        <1> 	je near intx6	;;1=print char
  2265 00002278 80FC07              <1> 	cmp ah, 7
  2266 0000227B 0F8473070000        <1> 	je near intx7	;;read file
  2267                              <1> ;	cmp ah, 8		;;write file
  2268                              <1> ;	je near intx8
  2269 00002281 80FC09              <1> 	cmp ah, 9
  2270 00002284 0F8474070000        <1> 	je near intx9	;;convert number to string
  2271 0000228A 80FC0A              <1> 	cmp ah, 10
  2272 0000228D 0F8483070000        <1> 	je near intx10	;;convert string to number
  2273 00002293 80FC0B              <1> 	cmp ah, 11
  2274 00002296 0F8480070000        <1> 	je near intx11	;;create thread
  2275 0000229C 80FC0C              <1> 	cmp ah, 12		;;get time
  2276 0000229F 0F847D070000        <1> 	je near intx12
  2277 000022A5 80FC0D              <1> 	cmp ah, 13		;;set time
  2278 000022A8 0F8485070000        <1> 	je near intx13
  2279 000022AE 80FC0E              <1> 	cmp ah, 14		;;run program
  2280 000022B1 0F8488070000        <1> 	je near intx14
  2281 000022B7 80FC0F              <1> 	cmp ah, 15		;;get program info-location of name/options/number of options/environmental vars
  2282 000022BA 0F8491070000        <1> 	je near intx15
  2283 000022C0 C3                  <1> 	ret
  2284                              <1> 	
  2285                              <1> ;;the jmp timerinterrupt's ensure that task switches occur
  2286                              <1> intx0:
  2287                              <1> 	%include 'source/interrupts/0-exit.asm'
  2288                              <2> exitprog:
  2289 000022C1 66BB3000            <2> 	mov bx, NEW_DATA_SEL
  2290 000022C5 8EDB                <2> 	mov ds, bx
  2291 000022C7 8EC3                <2> 	mov es, bx
  2292 000022C9 8EE3                <2> 	mov fs, bx
  2293 000022CB 66BB2000            <2> 	mov bx, SYS_DATA_SEL
  2294 000022CF 8EEB                <2> 	mov gs, bx
  2295 000022D1 3C00                <2> 	cmp al, 0
  2296 000022D3 0F8505000000        <2> 	jne near warnexitstatus
  2297 000022D9 E97E0B0000          <2> 	jmp nwcmd
  2298                              <2> 	
  2299                              <2> warnexitstatus:
  2300 000022DE 88C1                <2> 	mov cl, al
  2301 000022E0 B000                <2> 	mov al, 0
  2302 000022E2 A2[57330000]        <2> 	mov [firsthexshown], al
  2303 000022E7 6651                <2> 	push cx
  2304 000022E9 BE[09230000]        <2> 	mov esi, exitstatus1msg
  2305 000022EE E857000000          <2> 	call print
  2306 000022F3 6659                <2> 	pop cx
  2307 000022F5 E85E100000          <2> 	call showhexsmall
  2308 000022FA BE[1E230000]        <2> 	mov esi, exitstatus2msg
  2309 000022FF E846000000          <2> 	call print
  2310 00002304 E9530B0000          <2> 	jmp nwcmd
  2311                              <2> 	
  2312 00002309 416E20657869742073- <2> exitstatus1msg db "An exit status of 0x",0
  2313 00002312 7461747573206F6620- <2>
  2314 0000231B 307800              <2>
  2315 0000231E 087761732072657475- <2> exitstatus2msg db 8,"was returned.",10,0
  2316 00002327 726E65642E0A00      <2>
  2317                              <1> intx1:
  2318                              <1> 	%include 'source/interrupts/1-prntstr.asm'
  2319 0000232E E81E000000          <2> call printint
  2320 00002333 E9BEE3FFFF          <2> jmp timerinterrupt
  2321                              <2> 
  2322                              <2> 	printquiet:
  2323 00002338 6631C0              <2> 		xor ax, ax
  2324 0000233B A2[84230000]        <2> 		mov [endkeyprint], al
  2325 00002340 66BB0700            <2> 		mov bx, 7
  2326 00002344 E828000000          <2> 		call printintb
  2327 00002349 C3                  <2> 		ret
  2328                              <2>     print:
  2329 0000234A 6631C0              <2> 		xor ax, ax
  2330 0000234D 66BB0700            <2> 		mov bx, 7
  2331                              <2> 	printint:	;;print line, al=last key,bl=modifier, esi=buffer
  2332 00002351 8935[85230000]      <2> 		mov [startesiprint], esi
  2333 00002357 A2[84230000]        <2> 		mov [endkeyprint], al
  2334 0000235C E810000000          <2> 		call printintb
  2335 00002361 89F1                <2> 		mov ecx, esi
  2336 00002363 2B0D[85230000]      <2> 		sub ecx, [startesiprint]
  2337 00002369 51                  <2> 		push ecx
  2338 0000236A E818070000          <2> 		call termcopy
  2339 0000236F 59                  <2> 		pop ecx
  2340 00002370 C3                  <2> 		ret
  2341                              <2> 	printintb:
  2342 00002371 8A06                <2> 		mov al, [esi]
  2343 00002373 3A05[84230000]      <2> 		cmp al, [endkeyprint]
  2344 00002379 7408                <2> 		je doneprintint
  2345 0000237B E8AE040000          <2> 		call prcharq
  2346 00002380 46                  <2> 		inc esi
  2347 00002381 EBEE                <2> 		jmp printintb
  2348                              <2> 	doneprintint:
  2349 00002383 C3                  <2> 		ret
  2350                              <2> 
  2351 00002384 00                  <2> endkeyprint db 0
  2352 00002385 00000000            <2> startesiprint dd 0
  2353                              <1> intx2:
  2354                              <1> 	%include 'source/interrupts/2-readstr.asm'
  2355 00002389 E805000000          <2> call readint
  2356 0000238E E963E3FFFF          <2> jmp timerinterrupt
  2357                              <2> 
  2358                              <2> 	readint:	;;get line, al=last key, esi = buffer, edi = endbuffer
  2359 00002393 A2[BF230000]        <2> 		mov [endkeyread], al
  2360 00002398 893D[C0230000]      <2> 		mov [endbufferread], edi
  2361                              <2> 	readintb:
  2362 0000239E 56                  <2> 		push esi
  2363 0000239F 30C0                <2> 		xor al, al
  2364 000023A1 E826040000          <2> 		call rdcharint
  2365 000023A6 5E                  <2> 		pop esi
  2366 000023A7 8806                <2> 		mov [esi], al
  2367 000023A9 46                  <2> 		inc esi
  2368 000023AA 3B35[C0230000]      <2> 		cmp esi, [endbufferread]
  2369 000023B0 7308                <2> 		jae readdone
  2370 000023B2 3A05[BF230000]      <2> 		cmp al, [endkeyread]
  2371 000023B8 75E4                <2> 		jne readintb
  2372                              <2> 	readdone:
  2373 000023BA 4E                  <2> 		dec esi
  2374 000023BB C60600              <2> 		mov byte [esi], 0
  2375 000023BE C3                  <2> 	ret
  2376 000023BF 00                  <2> endkeyread db 0
  2377 000023C0 00000000            <2> endbufferread dd 0
  2378                              <1> intx3:
  2379                              <1> 	%include 'source/interrupts/3-clearscrn.asm'
  2380 000023C4 E805000000          <2> call clear
  2381 000023C9 E928E3FFFF          <2> jmp timerinterrupt
  2382                              <2> clear:		
  2383 000023CE 668B0D[F0290000]    <2> 		mov cx, [charxy]
  2384 000023D5 BF[B7AD0000]        <2> 		mov edi, videobuf
  2385 000023DA 6631C0              <2> 		xor ax, ax
  2386 000023DD 66A3[EA290000]      <2> 		mov [linebeginpos], ax
  2387 000023E3 66A3[EC290000]      <2> 		mov [videobufpos], ax
  2388 000023E9 6631D2              <2> 		xor dx, dx
  2389 000023EC 66A3[EE290000]      <2> 		mov [charpos], ax
  2390 000023F2 B407                <2> 		mov ah, 7
  2391                              <2> 	clearb:
  2392 000023F4 8807                <2> 		mov [edi], al
  2393 000023F6 886701              <2> 		mov [edi + 1], ah
  2394 000023F9 81C702000000        <2> 		add edi, 2
  2395 000023FF FEC9                <2> 		dec cl
  2396 00002401 80F900              <2> 		cmp cl, 0
  2397 00002404 75EE                <2> 		jne clearb
  2398 00002406 8A0D[F0290000]      <2> 		mov cl, [charxy]
  2399 0000240C FECD                <2> 		dec ch
  2400 0000240E 80FD00              <2> 		cmp ch, 0
  2401 00002411 75E1                <2> 		jne clearb
  2402                              <2> 	cleardouble:
  2403 00002413 BF[F7FE0000]        <2> 		mov edi, videobuf2
  2404 00002418 668B0D[F0290000]    <2> 		mov cx, [charxy]
  2405 0000241F 31C0                <2> 		xor eax, eax
  2406                              <2> 	clearc:
  2407 00002421 668907              <2> 		mov [edi], ax
  2408 00002424 81C702000000        <2> 		add edi, 2
  2409 0000242A FEC9                <2> 		dec cl
  2410 0000242C 80F900              <2> 		cmp cl, 0
  2411 0000242F 75F0                <2> 		jne clearc
  2412 00002431 8A0D[F0290000]      <2> 		mov cl, [charxy]
  2413 00002437 FECD                <2> 		dec ch
  2414 00002439 80FD00              <2> 		cmp ch, 0
  2415 0000243C 75E3                <2> 		jne clearc
  2416 0000243E E844060000          <2> 		call termcopy
  2417 00002443 C3                  <2> 		ret
  2418                              <2> 		
  2419                              <1> intx4:
  2420                              <1> 	%include 'source/interrupts/4-prntreadstr.asm'
  2421 00002444 E809000000          <2> call rdprint
  2422 00002449 E9A8E2FFFF          <2> jmp timerinterrupt
  2423                              <2> 
  2424                              <2> readline:
  2425 0000244E B00A                <2>   mov al, 10
  2426 00002450 B307                <2>   mov bl, 7
  2427                              <2> 	rdprint:	;;print and get line, al=last key, bl=modifier, esi=buffer, edi=bufferend
  2428 00002452 8935[B5270000]      <2> 		mov [buftxtloc], esi
  2429 00002458 A2[AD270000]        <2> 		mov [endkeyrdpr], al
  2430 0000245D 881D[AE270000]      <2> 		mov [modkeyrdpr], bl
  2431 00002463 8935[AF270000]      <2> 		mov [firstesirdpr], esi
  2432 00002469 893D[B9270000]      <2> 		mov [endbufferrdpr], edi
  2433                              <2> 	rdprintb:
  2434 0000246F 56                  <2> 		push esi
  2435 00002470 B001                <2> 		mov al, 1
  2436 00002472 E855030000          <2> 		call rdcharint
  2437 00002477 5E                  <2> 		pop esi
  2438 00002478 803D[C7530000]E0    <2> 		cmp byte [specialkey], 0xE0
  2439 0000247F 751B                <2> 		jne notspecialrdprnt
  2440 00002481 80FC53              <2> 		cmp ah, 0x53
  2441 00002484 0F84E8020000        <2> 		je near rdprdel
  2442 0000248A 80FC47              <2> 		cmp ah, 0x47
  2443 0000248D 0F8407010000        <2> 		je near rdprhome
  2444 00002493 80FC4F              <2> 		cmp ah, 0x4F
  2445 00002496 0F841D010000        <2> 		je near rdprend
  2446                              <2> 	notspecialrdprnt:
  2447 0000249C 80FC48              <2> 		cmp ah, 0x48
  2448 0000249F 0F84D5010000        <2> 		je near rdprup
  2449 000024A5 80FC50              <2> 		cmp ah, 0x50
  2450 000024A8 0F84AF010000        <2> 		je near rdprdown
  2451 000024AE 80FC4D              <2> 		cmp ah, 0x4D
  2452 000024B1 0F845E010000        <2> 		je near rdprright
  2453 000024B7 80FC4B              <2> 		cmp ah, 0x4B
  2454 000024BA 0F8416010000        <2> 		je near rdprleft
  2455 000024C0 3C08                <2> 		cmp al, 8
  2456 000024C2 0F84C5020000        <2> 		je near rdprbscheck
  2457 000024C8 3C00                <2> 		cmp al, 0
  2458 000024CA 74A3                <2> 		je rdprintb
  2459 000024CC 80FC00              <2> 		cmp ah, 0
  2460 000024CF 749E                <2> 		je rdprintb
  2461 000024D1 8806                <2> 		mov [esi], al
  2462 000024D3 46                  <2> 		inc esi
  2463                              <2> 	bscheckequal:
  2464 000024D4 8A1D[AE270000]      <2> 		mov bl, [modkeyrdpr]
  2465 000024DA 8A3D[B4270000]      <2> 		mov bh, [txtmask]
  2466 000024E0 80FF00              <2> 		cmp bh, 0
  2467 000024E3 7404                <2> 		je nomasktxt
  2468 000024E5 88F8                <2> 		mov al, bh
  2469 000024E7 30FF                <2> 		xor bh, bh
  2470                              <2> 	nomasktxt:
  2471 000024E9 E82F030000          <2> 		call prcharint
  2472 000024EE 56                  <2> 		push esi
  2473 000024EF 66A3[AB270000]      <2> 		mov [axcache], ax
  2474 000024F5 8A25[AD270000]      <2> 		mov ah, [endkeyrdpr]
  2475 000024FB 38E0                <2> 		cmp al, ah
  2476 000024FD 7429                <2> 		je nobackprintbuftxt2
  2477 000024FF BE[98A50000]        <2> 		mov esi, buftxt2
  2478 00002504 E82FFEFFFF          <2> 		call printquiet
  2479 00002509 B020                <2> 		mov al, " "
  2480 0000250B E81E030000          <2> 		call prcharq
  2481 00002510 B008                <2> 		mov al, 8
  2482 00002512 81FE[98A50000]      <2> 		cmp esi, buftxt2
  2483 00002518 740E                <2> 		je nobackprintbuftxt2
  2484                              <2> 	backprintbuftxt2:
  2485 0000251A E80F030000          <2> 		call prcharq
  2486 0000251F 4E                  <2> 		dec esi
  2487 00002520 81FE[98A50000]      <2> 		cmp esi, buftxt2
  2488 00002526 77F2                <2> 		ja backprintbuftxt2
  2489                              <2> 	nobackprintbuftxt2:
  2490 00002528 3C0A                <2> 		cmp al, 10
  2491 0000252A 7405                <2> 		je nonobackprint
  2492 0000252C E8EC020000          <2> 		call prcharint
  2493                              <2> 	nonobackprint:
  2494 00002531 5E                  <2> 		pop esi
  2495 00002532 3B35[B9270000]      <2> 		cmp esi, [endbufferrdpr]
  2496 00002538 0F8319000000        <2> 		jae near donerdprinc
  2497 0000253E 66A1[AB270000]      <2> 		mov ax, [axcache]
  2498 00002544 8A25[AD270000]      <2> 		mov ah, [endkeyrdpr]
  2499 0000254A 38E0                <2> 		cmp al, ah
  2500 0000254C 0F851DFFFFFF        <2> 		jne rdprintb
  2501 00002552 E901000000          <2> 		jmp donerdprint
  2502                              <2> 	donerdprinc:
  2503 00002557 46                  <2> 		inc esi
  2504                              <2> 	donerdprint:
  2505 00002558 4E                  <2> 		dec esi
  2506 00002559 BF[98A50000]        <2> 		mov edi, buftxt2
  2507                              <2> 	copylaterstuff:
  2508 0000255E 8A07                <2> 		mov al, [edi]
  2509 00002560 3C00                <2> 		cmp al, 0
  2510 00002562 7406                <2> 		je nocopylaterstuff
  2511 00002564 8806                <2> 		mov [esi], al
  2512 00002566 47                  <2> 		inc edi
  2513 00002567 46                  <2> 		inc esi
  2514 00002568 EBF4                <2> 		jmp copylaterstuff
  2515                              <2> 	nocopylaterstuff:
  2516 0000256A C60600              <2> 		mov byte [esi], 0
  2517 0000256D E80B000000          <2> 		call clearbuftxt2
  2518 00002572 89F1                <2> 		mov ecx, esi
  2519 00002574 8B3D[AF270000]      <2> 		mov edi, [firstesirdpr]
  2520 0000257A 29F9                <2> 		sub ecx, edi
  2521 0000257C C3                  <2> 		ret
  2522                              <2> 	
  2523                              <2> 	clearbuftxt2:
  2524 0000257D 30C0                <2> 		xor al, al
  2525 0000257F BF[98A50000]        <2> 		mov edi, buftxt2
  2526                              <2> 	clearbuftxt2lp:
  2527 00002584 8807                <2> 		mov [edi], al
  2528 00002586 47                  <2> 		inc edi
  2529 00002587 81FF[A2A90000]      <2> 		cmp edi, buftxt
  2530 0000258D 75F5                <2> 		jne clearbuftxt2lp
  2531 0000258F C3                  <2> 		ret
  2532                              <2> 	
  2533                              <2> 	rdprintb2:
  2534 00002590 E8F2040000          <2> 		call termcopy
  2535 00002595 E9D5FEFFFF          <2> 		jmp rdprintb
  2536                              <2> 		
  2537                              <2> 	rdprhome:
  2538 0000259A 3B35[B5270000]      <2> 		cmp esi, [buftxtloc]
  2539 000025A0 0F84EAFFFFFF        <2> 		je near rdprintb2
  2540 000025A6 BF[98A50000]        <2> 		mov edi, buftxt2
  2541 000025AB 8A07                <2> 		mov al, [edi]
  2542 000025AD E846000000          <2> 		call shiftbuftxt2
  2543 000025B2 E877020000          <2> 		call prcharq
  2544 000025B7 EBE1                <2> 		jmp rdprhome
  2545                              <2> 		
  2546                              <2> 	rdprend:
  2547 000025B9 BF[98A50000]        <2> 		mov edi, buftxt2
  2548 000025BE 8A07                <2> 		mov al, [edi]
  2549 000025C0 3C00                <2> 		cmp al, 0
  2550 000025C2 0F84C8FFFFFF        <2> 		je near rdprintb2
  2551 000025C8 8806                <2> 		mov [esi], al
  2552 000025CA E866000000          <2> 		call shiftbuftxt2lft
  2553 000025CF E85A020000          <2> 		call prcharq
  2554 000025D4 EBE3                <2> 		jmp rdprend
  2555                              <2> 	
  2556                              <2> 	rdprleft:
  2557 000025D6 3B35[B5270000]      <2> 		cmp esi, [buftxtloc]
  2558 000025DC 0F848DFEFFFF        <2> 		je near rdprintb
  2559 000025E2 BF[98A50000]        <2> 		mov edi, buftxt2
  2560 000025E7 8A07                <2> 		mov al, [edi]
  2561 000025E9 E80A000000          <2> 		call shiftbuftxt2
  2562 000025EE E82A020000          <2> 		call prcharint
  2563 000025F3 E977FEFFFF          <2> 		jmp rdprintb
  2564                              <2> 	shiftbuftxt2:
  2565 000025F8 3C00                <2> 		cmp al, 0
  2566 000025FA 7409                <2> 		je noshiftbuftxt2
  2567 000025FC 47                  <2> 		inc edi
  2568 000025FD 8A27                <2> 		mov ah, [edi]
  2569 000025FF 8807                <2> 		mov [edi], al
  2570 00002601 88E0                <2> 		mov al, ah
  2571 00002603 EBF3                <2> 		jmp shiftbuftxt2
  2572                              <2> 	noshiftbuftxt2:
  2573 00002605 BF[98A50000]        <2> 		mov edi, buftxt2
  2574 0000260A 4E                  <2> 		dec esi
  2575 0000260B 8A06                <2> 		mov al, [esi]
  2576 0000260D 8807                <2> 		mov [edi], al
  2577 0000260F C60600              <2> 		mov byte [esi], 0
  2578 00002612 B008                <2> 		mov al, 8
  2579 00002614 C3                  <2> 		ret
  2580                              <2> 		
  2581                              <2> 	rdprright:
  2582 00002615 BF[98A50000]        <2> 		mov edi, buftxt2
  2583 0000261A 8A07                <2> 		mov al, [edi]
  2584 0000261C 3C00                <2> 		cmp al, 0
  2585 0000261E 0F844BFEFFFF        <2> 		je near rdprintb
  2586 00002624 8806                <2> 		mov [esi], al
  2587 00002626 E80A000000          <2> 		call shiftbuftxt2lft
  2588 0000262B E8ED010000          <2> 		call prcharint
  2589 00002630 E93AFEFFFF          <2> 		jmp rdprintb
  2590                              <2> 	shiftbuftxt2lft:
  2591 00002635 3C00                <2> 		cmp al, 0
  2592 00002637 7408                <2> 		je noshiftbuftxt2lft
  2593 00002639 47                  <2> 		inc edi
  2594 0000263A 8A07                <2> 		mov al, [edi]
  2595 0000263C 8847FF              <2> 		mov [edi - 1], al
  2596 0000263F EBF4                <2> 		jmp shiftbuftxt2lft
  2597                              <2> 	noshiftbuftxt2lft:
  2598 00002641 8A06                <2> 		mov al, [esi]
  2599 00002643 46                  <2> 		inc esi
  2600 00002644 8A1D[AE270000]      <2> 		mov bl, [modkeyrdpr]
  2601 0000264A C3                  <2> 		ret
  2602                              <2> 		
  2603                              <2> 	rdprdownbck:
  2604 0000264B FECC                <2> 		dec ah
  2605 0000264D 8825[B3270000]      <2> 		mov [commandedit], ah
  2606 00002653 E83A000000          <2> 		call rdprbckspc
  2607 00002658 E912FEFFFF          <2> 		jmp rdprintb
  2608                              <2> 	
  2609                              <2> 	rdprdown:
  2610 0000265D 8A25[B3270000]      <2> 		mov ah, [commandedit]
  2611 00002663 80FC01              <2> 		cmp ah, 1
  2612 00002666 0F8603FEFFFF        <2> 		jbe near rdprintb
  2613 0000266C 80FC02              <2> 		cmp ah, 2
  2614 0000266F 74DA                <2> 		je rdprdownbck
  2615 00002671 80EC02              <2> 		sub ah, 2
  2616 00002674 8825[B3270000]      <2> 		mov [commandedit], ah
  2617                              <2> 		
  2618                              <2> 	rdprup:
  2619 0000267A 30C0                <2> 		xor al, al
  2620 0000267C 3805[B3270000]      <2> 		cmp [commandedit], al
  2621 00002682 0F84E7FDFFFF        <2> 		je near rdprintb
  2622 00002688 E805000000          <2> 		call rdprbckspc
  2623 0000268D E941000000          <2> 		jmp getcurrentcommandstr
  2624                              <2> 	rdprbckspc:
  2625 00002692 3B35[B5270000]      <2> 		cmp esi, [buftxtloc]
  2626 00002698 742B                <2> 		je nordprupbck
  2627                              <2> 	rdprupbckspclp:
  2628 0000269A B008                <2> 		mov al, 8
  2629 0000269C 8A1D[AE270000]      <2> 		mov bl, [modkeyrdpr]
  2630 000026A2 E887010000          <2> 		call prcharq
  2631 000026A7 B020                <2> 		mov al, " "
  2632 000026A9 E880010000          <2> 		call prcharq
  2633 000026AE B008                <2> 		mov al, 8
  2634 000026B0 E879010000          <2> 		call prcharq
  2635 000026B5 4E                  <2> 		dec esi
  2636 000026B6 3B35[B5270000]      <2> 		cmp esi, [buftxtloc]
  2637 000026BC 7402                <2> 		je nordprupbck2
  2638 000026BE EBDA                <2> 		jmp rdprupbckspclp
  2639                              <2> 	nordprupbck2:
  2640 000026C0 E8C2030000          <2> 		call termcopy
  2641                              <2> 	nordprupbck:
  2642 000026C5 8B3D[3B500100]      <2> 		mov edi, [currentcommandpos]
  2643 000026CB 81C7[3F500100]      <2> 		add edi, commandbuf
  2644 000026D1 4F                  <2> 		dec edi
  2645 000026D2 C3                  <2> 		ret
  2646                              <2> 	getcurrentcommandstr:
  2647 000026D3 8A25[B3270000]      <2> 		mov ah, [commandedit]
  2648 000026D9 FE05[B3270000]      <2> 		inc byte [commandedit]
  2649                              <2> 	getccmdlp:
  2650 000026DF 4F                  <2> 		dec edi
  2651 000026E0 8A07                <2> 		mov al, [edi]
  2652 000026E2 81FF[3F500100]      <2> 		cmp edi, commandbuf
  2653 000026E8 7231                <2> 		jb getcmdresetcommandbuf
  2654 000026EA 81EF[3F500100]      <2> 		sub edi, commandbuf
  2655 000026F0 3B3D[3B500100]      <2> 		cmp edi, [currentcommandpos]
  2656 000026F6 0F8473FDFFFF        <2> 		je near rdprintb
  2657 000026FC 81C7[3F500100]      <2> 		add edi, commandbuf
  2658 00002702 3C00                <2> 		cmp al, 0
  2659 00002704 75D9                <2> 		jne getccmdlp
  2660 00002706 FECC                <2> 		dec ah
  2661 00002708 80FC00              <2> 		cmp ah, 0
  2662 0000270B 77D2                <2> 		ja getccmdlp
  2663 0000270D 47                  <2> 		inc edi
  2664 0000270E 81FF[3F600100]      <2> 		cmp edi, commandbufend
  2665 00002714 770D                <2> 		ja fixcmdbufb4morerdpr
  2666 00002716 E915000000          <2> 		jmp morerdprup
  2667                              <2> 	getcmdresetcommandbuf:
  2668 0000271B BF[3F600100]        <2> 		mov edi, commandbufend
  2669 00002720 47                  <2> 		inc edi
  2670 00002721 EBBC                <2> 		jmp getccmdlp
  2671                              <2> 	fixcmdbufb4morerdpr:
  2672 00002723 4F                  <2> 		dec edi
  2673 00002724 81EF[3F600100]      <2> 		sub edi, commandbufend
  2674 0000272A 81C7[3F500100]      <2> 		add edi, commandbuf
  2675                              <2> 	morerdprup:
  2676 00002730 8A07                <2> 		mov al, [edi]
  2677 00002732 47                  <2> 		inc edi
  2678 00002733 81EF[3F500100]      <2> 		sub edi, commandbuf
  2679 00002739 3C00                <2> 		cmp al, 0
  2680 0000273B 0F844FFEFFFF        <2> 		je near rdprintb2
  2681 00002741 3B3D[3B500100]      <2> 		cmp edi, [currentcommandpos]
  2682 00002747 0F8343FEFFFF        <2> 		jae near rdprintb2
  2683 0000274D 81C7[3F500100]      <2> 		add edi, commandbuf
  2684 00002753 8806                <2> 		mov [esi], al
  2685 00002755 46                  <2> 		inc esi
  2686 00002756 57                  <2> 		push edi
  2687 00002757 8A1D[AE270000]      <2> 		mov bl, [modkeyrdpr]
  2688 0000275D E8CC000000          <2> 		call prcharq
  2689 00002762 5F                  <2> 		pop edi
  2690 00002763 81FF[3F600100]      <2> 		cmp edi, commandbufend
  2691 00002769 76C5                <2> 		jbe morerdprup
  2692 0000276B BF[3F500100]        <2> 		mov edi, commandbuf
  2693 00002770 EBBE                <2> 		jmp morerdprup
  2694                              <2> 		
  2695                              <2> 	rdprdel:
  2696 00002772 BF[98A50000]        <2> 		mov edi, buftxt2
  2697 00002777 8A07                <2> 		mov al, [edi]
  2698 00002779 3C00                <2> 		cmp al, 0
  2699 0000277B 0F84EEFCFFFF        <2> 		je near rdprintb
  2700 00002781 8806                <2> 		mov [esi], al
  2701 00002783 E8ADFEFFFF          <2> 		call shiftbuftxt2lft
  2702 00002788 E8A1000000          <2> 		call prcharq
  2703                              <2> 	rdprbscheck:
  2704 0000278D 3B35[AF270000]      <2> 		cmp esi, [firstesirdpr]
  2705 00002793 7705                <2> 		ja goodbscheck
  2706 00002795 E9D5FCFFFF          <2> 		jmp rdprintb
  2707                              <2> 	goodbscheck:
  2708 0000279A 4E                  <2> 		dec esi
  2709 0000279B C60600              <2> 		mov byte [esi], 0
  2710 0000279E 8A1D[AE270000]      <2> 		mov bl, [modkeyrdpr]
  2711 000027A4 B008                <2> 		mov al, 8
  2712 000027A6 E929FDFFFF          <2> 		jmp bscheckequal
  2713                              <2> 		
  2714 000027AB 0000                <2> axcache dw 0
  2715 000027AD 00                  <2> endkeyrdpr db 0
  2716 000027AE 00                  <2> modkeyrdpr db 0
  2717 000027AF 00000000            <2> firstesirdpr dd 0
  2718 000027B3 00                  <2> commandedit db 0
  2719 000027B4 00                  <2> txtmask db 0
  2720 000027B5 00000000            <2> buftxtloc dd 0
  2721 000027B9 00000000            <2> endbufferrdpr dd 0
  2722 000027BD 082000              <2> backcursor db 8," ",0
  2723                              <1> intx5:
  2724                              <1> 	%include 'source/interrupts/5-readchar.asm'
  2725 000027C0 E807000000          <2> 	call rdcharint
  2726 000027C5 E92CDFFFFF          <2> 	jmp timerinterrupt
  2727                              <2> 	
  2728                              <2> getchar:
  2729 000027CA 30C0                <2> 	xor al, al
  2730                              <2> 	rdcharint:		;;get char, if al is 0, wait for key
  2731 000027CC C605[12280000]01    <2> 		mov byte [trans], 1
  2732 000027D3 3C00                <2> 		cmp al, 0
  2733 000027D5 7507                <2> 		jne transcheck
  2734 000027D7 C605[12280000]00    <2> 		mov byte [trans], 0
  2735                              <2> 	transcheck:
  2736 000027DE E8042C0000          <2> 		call getkey
  2737 000027E3 8A3D[12280000]      <2> 		mov bh, [trans]
  2738 000027E9 66A1[10280000]      <2> 		mov ax, [lastkey]
  2739 000027EF 80FC1C              <2> 		cmp ah, 1Ch
  2740 000027F2 7419                <2> 		je rdenter
  2741 000027F4 803D[C7530000]E0    <2> 		cmp byte [specialkey], 0xE0
  2742 000027FB 7504                <2> 		jne nospecialtrans
  2743 000027FD 88C3                <2> 		mov bl, al
  2744 000027FF 30C0                <2> 		xor al, al
  2745                              <2> 	nospecialtrans:
  2746 00002801 08C7                <2> 		or bh, al
  2747 00002803 80FF00              <2> 		cmp bh, 0
  2748 00002806 74D6                <2> 		je transcheck
  2749 00002808 E902000000          <2> 		jmp rdend
  2750                              <2> 	rdenter:
  2751 0000280D B00A                <2> 		mov al, 10
  2752                              <2> 	rdend:
  2753 0000280F C3                  <2> 		ret
  2754                              <2> 		
  2755 00002810 0000                <2> lastkey db 0,0
  2756 00002812 00                  <2> trans db 0
  2757                              <1> intx6:
  2758                              <1> 	%include 'source/interrupts/6-prntchar.asm'
  2759 00002813 E805000000          <2> call prcharint
  2760 00002818 E9D9DEFFFF          <2> jmp timerinterrupt
  2761                              <2> 	
  2762                              <2> prcharint:	;;print char, char in al, modifier in bl, if bh = bl then termcopy will not happen, will run videobufcopy if called as is
  2763 0000281D 38FB                <2> 	cmp bl, bh
  2764 0000281F 740D                <2> 	je prcharq
  2765 00002821 E808000000          <2> 	call prcharq
  2766 00002826 E85C020000          <2> 	call termcopy
  2767 0000282B C3                  <2> 	ret
  2768 0000282C 00                  <2> termguion db 0
  2769 0000282D 00                  <2> termcopyon db 0
  2770                              <2> prcharq:
  2771 0000282E 88DC                <2> 	mov ah, bl
  2772 00002830 66A3[F2290000]      <2> 	mov [charbuf], ax
  2773 00002836 31DB                <2> 	xor ebx, ebx
  2774 00002838 668B1D[EC290000]    <2> 	mov bx, [videobufpos]
  2775 0000283F BF[B7AD0000]        <2> 	mov edi, videobuf
  2776 00002844 01DF                <2> 	add edi, ebx
  2777 00002846 66A1[852A0000]      <2> 	mov ax, [removedvideo]
  2778 0000284C 668907              <2> 	mov [edi], ax
  2779 0000284F 66A1[F2290000]      <2> 	mov ax, [charbuf]
  2780 00002855 31D2                <2> 	xor edx, edx
  2781 00002857 668B15[EE290000]    <2> 	mov dx, [charpos]
  2782 0000285E 31C9                <2> 	xor ecx, ecx
  2783 00002860 668B0D[F0290000]    <2> 	mov cx, [charxy]
  2784 00002867 3C09                <2> 	cmp al, 9
  2785 00002869 0F8463000000        <2> 	je near prtab
  2786 0000286F 3C0D                <2> 	cmp al, 13		;I am phasing this out-it is used by windows but not unix based systems
  2787 00002871 0F848B000000        <2> 	je near prcr
  2788 00002877 3C0A                <2> 	cmp al, 10
  2789 00002879 0F84B7000000        <2> 	je near prnlcr
  2790 0000287F 3C08                <2> 	cmp al, 8
  2791 00002881 0F848F000000        <2> 	je near prbs
  2792 00002887 3CFF                <2> 	cmp al, 255		;;null character
  2793 00002889 0F841B000000        <2> 	je near donescr
  2794 0000288F 668907              <2> 	mov [edi], ax
  2795 00002892 81C702000000        <2> 	add edi, 2
  2796 00002898 FEC2                <2> 	inc dl
  2797                              <2> donecrnl:
  2798 0000289A 38CA                <2> 	cmp dl, cl
  2799 0000289C 0F83B9000000        <2> 	jae near preol
  2800                              <2> doneeol:
  2801 000028A2 38EE                <2> 	cmp dh, ch
  2802 000028A4 0F83CF000000        <2> 	jae near prscr	
  2803                              <2> donescr:
  2804 000028AA 89FB                <2> 	mov ebx, edi
  2805 000028AC 668B07              <2> 	mov ax, [edi]
  2806 000028AF 66A3[852A0000]      <2> 	mov [removedvideo], ax
  2807 000028B5 81EB[B7AD0000]      <2> 	sub ebx, videobuf
  2808 000028BB 66891D[EC290000]    <2> 	mov [videobufpos], bx
  2809 000028C2 668915[EE290000]    <2> 	mov [charpos], dx
  2810 000028C9 66A1[F2290000]      <2> 	mov ax, [charbuf]
  2811 000028CF 88E3                <2> 	mov bl, ah
  2812 000028D1 C3                  <2> 	ret
  2813                              <2> 	
  2814                              <2> 	prtab:
  2815 000028D2 31DB                <2> 		xor ebx, ebx
  2816 000028D4 668B1D[EA290000]    <2> 		mov bx, [linebeginpos]
  2817 000028DB 81EF[B7AD0000]      <2> 		sub edi, videobuf
  2818 000028E1 29DF                <2> 		sub edi, ebx
  2819 000028E3 C1EF04              <2> 		shr edi, 4
  2820 000028E6 C1E704              <2> 		shl edi, 4
  2821 000028E9 81C710000000        <2> 		add edi, 16
  2822 000028EF C0EA03              <2> 		shr dl, 3
  2823 000028F2 C0E203              <2> 		shl dl, 3
  2824 000028F5 80C208              <2> 		add dl, 8
  2825 000028F8 81C7[B7AD0000]      <2> 		add edi, videobuf
  2826 000028FE 01DF                <2> 		add edi, ebx
  2827 00002900 EB98                <2> 		jmp donecrnl
  2828                              <2> 	
  2829                              <2> 	prcr:
  2830 00002902 30D2                <2> 		xor dl, dl
  2831 00002904 31DB                <2> 		xor ebx, ebx
  2832 00002906 BF[B7AD0000]        <2> 		mov edi, videobuf
  2833 0000290B 668B1D[EA290000]    <2> 		mov bx, [linebeginpos]
  2834 00002912 01DF                <2> 		add edi, ebx
  2835 00002914 EB84                <2> 		jmp donecrnl
  2836                              <2> 			
  2837                              <2> 	prbs:
  2838 00002916 80FA00              <2> 		cmp dl, 0
  2839 00002919 7410                <2> 		je prbackline
  2840                              <2> 	prnobmr:
  2841 0000291B FECA                <2> 		dec dl
  2842 0000291D 6631C0              <2> 		xor ax, ax
  2843 00002920 81EF02000000        <2> 		sub edi, 2
  2844 00002926 E96FFFFFFF          <2> 		jmp donecrnl
  2845                              <2> 	prbackline:
  2846 0000292B 88CA                <2> 		mov dl, cl
  2847 0000292D 80FE00              <2> 		cmp dh, 0
  2848 00002930 74E9                <2> 		je prnobmr
  2849 00002932 FECE                <2> 		dec dh
  2850 00002934 EBE5                <2> 		jmp prnobmr
  2851                              <2> 		
  2852                              <2> 	prnlcr:
  2853 00002936 FEC6                <2> 		inc dh
  2854 00002938 31DB                <2> 		xor ebx, ebx
  2855 0000293A 30D2                <2> 		xor dl, dl
  2856 0000293C 88CB                <2> 		mov bl, cl
  2857 0000293E 66D1E3              <2> 		shl bx, 1
  2858 00002941 BF[B7AD0000]        <2> 		mov edi, videobuf
  2859 00002946 66031D[EA290000]    <2> 		add bx, [linebeginpos]
  2860 0000294D 66891D[EA290000]    <2> 		mov [linebeginpos], bx
  2861 00002954 01DF                <2> 		add edi, ebx
  2862 00002956 E93FFFFFFF          <2> 		jmp donecrnl
  2863                              <2> 		
  2864                              <2> 	preol:
  2865 0000295B 30D2                <2> 		xor dl, dl
  2866 0000295D FEC6                <2> 		inc dh
  2867 0000295F 31DB                <2> 		xor ebx, ebx
  2868 00002961 88CB                <2> 		mov bl, cl
  2869 00002963 66D1E3              <2> 		shl bx, 1
  2870 00002966 66031D[EA290000]    <2> 		add bx, [linebeginpos]
  2871 0000296D 66891D[EA290000]    <2> 		mov [linebeginpos], bx
  2872 00002974 E929FFFFFF          <2> 		jmp doneeol
  2873                              <2> 	prscr:
  2874 00002979 FECE                <2> 		dec dh
  2875 0000297B BF[B7AD0000]        <2> 		mov edi, videobuf
  2876 00002980 31DB                <2> 		xor ebx, ebx
  2877 00002982 88CB                <2> 		mov bl, cl
  2878 00002984 66D1E3              <2> 		shl bx, 1
  2879 00002987 01FB                <2> 		add ebx, edi
  2880                              <2> 	intscrollloop:
  2881 00002989 668B03              <2> 		mov ax, [ebx]
  2882 0000298C 668907              <2> 		mov [edi], ax
  2883 0000298F 81C702000000        <2> 		add edi, 2
  2884 00002995 81C302000000        <2> 		add ebx, 2
  2885 0000299B FEC9                <2> 		dec cl
  2886 0000299D 80F900              <2> 		cmp cl, 0
  2887 000029A0 75E7                <2> 		jne intscrollloop
  2888 000029A2 8A0D[F0290000]      <2> 		mov cl, [charxy]
  2889 000029A8 FECD                <2> 		dec ch
  2890 000029AA 80FD01              <2> 		cmp ch, 1
  2891 000029AD 77DA                <2> 		ja intscrollloop
  2892 000029AF 6631C0              <2> 		xor ax, ax
  2893 000029B2 81EF[B7AD0000]      <2> 		sub edi, videobuf
  2894 000029B8 66893D[EA290000]    <2> 		mov [linebeginpos], di
  2895 000029BF 81C7[B7AD0000]      <2> 		add edi, videobuf
  2896 000029C5 89FB                <2> 		mov ebx, edi
  2897                              <2> 	intloopclear:
  2898 000029C7 668903              <2> 		mov [ebx], ax
  2899 000029CA 81C302000000        <2> 		add ebx, 2
  2900 000029D0 FEC9                <2> 		dec cl
  2901 000029D2 80F900              <2> 		cmp cl, 0
  2902 000029D5 75F0                <2> 		jne intloopclear
  2903 000029D7 FECD                <2> 		dec ch
  2904 000029D9 80FD00              <2> 		cmp ch, 0
  2905 000029DC 75E9                <2> 		jne intloopclear
  2906 000029DE 668B0D[F0290000]    <2> 		mov cx, [charxy]
  2907 000029E5 E9C0FEFFFF          <2> 		jmp donescr
  2908                              <2> 		
  2909 000029EA 0000                <2> linebeginpos dw 0
  2910 000029EC 0000                <2> videobufpos: dw 0
  2911 000029EE 0000                <2> charpos db 0,0
  2912 000029F0 501E                <2> charxy db 80,30
  2913 000029F2 0000                <2> charbuf dw 0
  2914                              <1> intx7:
  2915                              <1> 	%include 'source/interrupts/7-openfile.asm'
  2916 000029F4 E836480000          <2> 	call loadfile
  2917 000029F9 E9F8DCFFFF          <2> 	jmp timerinterrupt
  2918                              <1> intx9:
  2919                              <1> 	%include 'source/interrupts/9-num2str.asm'
  2920 000029FE 3C00                <2> 	cmp al, 0
  2921 00002A00 750A                <2> 	jne num2strb
  2922 00002A02 E81C0A0000          <2> 	call showdec
  2923 00002A07 E9EADCFFFF          <2> 	jmp timerinterrupt
  2924                              <2> num2strb:
  2925 00002A0C E85B090000          <2> 	call showhex
  2926 00002A11 E9E0DCFFFF          <2> 	jmp timerinterrupt
  2927                              <1> intx10:
  2928                              <1> 	%include 'source/interrupts/10-str2num.asm'
  2929 00002A16 E8EA0A0000          <2> 	call cnvrttxt	;the string goes into esi, number into ecx
  2930 00002A1B CF                  <2> 	iret
  2931                              <2> 	
  2932                              <1> intx11:
  2933                              <1> 	%include 'source/interrupts/11-forkthread.asm'
  2934 00002A1C E8194D0000          <2> 	call threadfork
  2935 00002A21 CF                  <2> 	iret
  2936                              <1> intx12:
  2937                              <1> 	%include 'source/interrupts/12-gettime.asm'
  2938 00002A22 A1[96060000]        <2> 	mov eax, [timeseconds]
  2939 00002A27 8B1D[9A060000]      <2> 	mov ebx, [timenanoseconds]
  2940 00002A2D 89D9                <2> 	mov ecx, ebx
  2941 00002A2F C1E90A              <2> 	shr ecx, 10	;this is in microseconds
  2942 00002A32 CF                  <2> 	iret
  2943                              <2> 	
  2944                              <1> intx13:
  2945                              <1> 	%include 'source/interrupts/13-settime.asm'
  2946 00002A33 A3[96060000]        <2> 	mov [timeseconds], eax
  2947 00002A38 891D[9A060000]      <2> 	mov [timenanoseconds], ebx
  2948 00002A3E CF                  <2> 	iret
  2949                              <2> 	
  2950                              <1> intx14:
  2951                              <1> 	%include 'source/interrupts/14-runcmd.asm'
  2952 00002A3F BF[A2A90000]        <2> 	mov edi, buftxt
  2953                              <2> cpccmd:
  2954 00002A44 8A06                <2> 	mov al, [esi]
  2955 00002A46 8807                <2> 	mov [edi], al
  2956 00002A48 46                  <2> 	inc esi
  2957 00002A49 47                  <2> 	inc edi
  2958 00002A4A E2F8                <2> 	loop cpccmd
  2959 00002A4C E9D7050000          <2> 	jmp run
  2960                              <1> intx15:
  2961                              <1> 	%include 'source/interrupts/15-proginfo.asm'
  2962 00002A51 BB[98950000]        <2> 	mov ebx, variables
  2963 00002A56 8B35[06310000]      <2> 	mov esi, [currentcommandloc]
  2964 00002A5C 89F7                <2> 	mov edi, esi
  2965 00002A5E 31C9                <2> 	xor ecx, ecx
  2966                              <2> getcommandzeroes:
  2967 00002A60 8A07                <2> 	mov al, [edi]
  2968 00002A62 47                  <2> 	inc edi
  2969 00002A63 3C3B                <2> 	cmp al, ';'
  2970 00002A65 740B                <2> 	je nomorezeroes
  2971 00002A67 3C00                <2> 	cmp al, 0
  2972 00002A69 7407                <2> 	je nomorezeroes
  2973 00002A6B 3C20                <2> 	cmp al, ' '
  2974 00002A6D 75F1                <2> 	jne getcommandzeroes
  2975 00002A6F 41                  <2> 	inc ecx
  2976 00002A70 EBEE                <2> 	jmp getcommandzeroes
  2977                              <2> nomorezeroes:
  2978 00002A72 41                  <2> 	inc ecx
  2979 00002A73 4F                  <2> 	dec edi
  2980 00002A74 8B1D[24950000]      <2> 	mov ebx, [uid]
  2981 00002A7A 8B15[27790000]      <2> 	mov edx, [currentthread]
  2982 00002A80 CF                  <2> 	iret
  2983                              <2> 	
  2984                              <1> 		
  2985 00002A81 00000000            <1> 	termcursorpos dd 0
  2986 00002A85 0000                <1> 	removedvideo dw 0
  2987                              <1> termcopy:	
  2988 00002A87 60                  <1> 	pusha
  2989 00002A88 BF[B7AD0000]        <1> 	mov edi, videobuf
  2990 00002A8D 31DB                <1> 	xor ebx, ebx
  2991 00002A8F 668B1D[EC290000]    <1> 	mov bx, [videobufpos]
  2992 00002A96 01DF                <1> 	add edi, ebx
  2993 00002A98 893D[812A0000]      <1> 	mov [termcursorpos], edi
  2994 00002A9E E8CB000000          <1> 	call switchtermcursor
  2995 00002AA3 C605[F9580000]00    <1> 	mov byte [mouseselecton], 0
  2996 00002AAA C605[2D280000]01    <1> 	mov byte [termcopyon], 1
  2997 00002AB1 803D[AD8C0000]00    <1> 	cmp byte [guion], 0
  2998 00002AB8 0F8412000000        <1> 	je near nowincopy
  2999 00002ABE 803D[2C280000]01    <1> 	cmp byte [termguion], 1
  3000 00002AC5 0F84473A0000        <1> 	je near windowvideocopy
  3001 00002ACB E997000000          <1> 	jmp nocopytermatall
  3002                              <1> nowincopy:
  3003 00002AD0 BE00000A00          <1> 	mov esi, 0xA0000
  3004 00002AD5 A1[83060000]        <1> 	mov eax, [basecache]
  3005 00002ADA C1E004              <1> 	shl eax, 4
  3006 00002ADD 29C6                <1> 	sub esi, eax
  3007 00002ADF BF[B7AD0000]        <1> 	mov edi, videobuf
  3008 00002AE4 31C9                <1> 	xor ecx, ecx
  3009 00002AE6 668B0D[F0290000]    <1> 	mov cx, [charxy]
  3010                              <1> nowincopy2:
  3011 00002AED 668B07              <1> 	mov ax, [edi]
  3012 00002AF0 81C740510000        <1> 	add edi, (videobuf2 - videobuf)
  3013 00002AF6 668B1F              <1> 	mov bx, [edi]
  3014 00002AF9 668907              <1> 	mov [edi], ax
  3015 00002AFC 81EF40510000        <1> 	sub edi, (videobuf2 - videobuf)
  3016 00002B02 47                  <1> 	inc edi
  3017 00002B03 6639D8              <1> 	cmp ax, bx
  3018 00002B06 743E                <1> 	je nopresentwinfont
  3019 00002B08 4F                  <1> 	dec edi
  3020 00002B09 BB[9B790000]        <1> 	mov ebx, fonts
  3021 00002B0E 31C0                <1> 	xor eax, eax
  3022 00002B10 8A07                <1> 	mov al, [edi]
  3023 00002B12 C1E004              <1> 	shl eax, 4
  3024 00002B15 01C3                <1> 	add ebx, eax
  3025 00002B17 47                  <1> 	inc edi
  3026 00002B18 8A27                <1> 	mov ah, [edi]
  3027 00002B1A 31D2                <1> 	xor edx, edx
  3028 00002B1C 8A15[F0290000]      <1> 	mov dl, [charxy]
  3029 00002B22 C1C110              <1> 	rol ecx, 16
  3030 00002B25 B110                <1> 	mov cl, 16
  3031                              <1> nowinfont:
  3032 00002B27 8A03                <1> 	mov al, [ebx]
  3033 00002B29 D0C8                <1> 	ror al, 1
  3034 00002B2B 80FC07              <1> 	cmp ah, 7
  3035 00002B2E 7602                <1> 	jbe notnotfont
  3036 00002B30 F6D0                <1> 	not al
  3037                              <1> notnotfont:
  3038 00002B32 8806                <1> 	mov [esi], al
  3039 00002B34 01D6                <1> 	add esi, edx
  3040 00002B36 43                  <1> 	inc ebx
  3041 00002B37 FEC9                <1> 	dec cl
  3042 00002B39 80F900              <1> 	cmp cl, 0
  3043 00002B3C 75E9                <1> 	jne nowinfont
  3044 00002B3E C1E204              <1> 	shl edx, 4
  3045 00002B41 29D6                <1> 	sub esi, edx
  3046 00002B43 C1C110              <1> 	rol ecx, 16
  3047                              <1> nopresentwinfont:
  3048 00002B46 47                  <1> 	inc edi
  3049 00002B47 46                  <1> 	inc esi
  3050 00002B48 FEC9                <1> 	dec cl
  3051 00002B4A 80F900              <1> 	cmp cl, 0
  3052 00002B4D 759E                <1> 	jne nowincopy2
  3053 00002B4F 8A0D[F0290000]      <1> 	mov cl, [charxy]
  3054 00002B55 31D2                <1> 	xor edx, edx
  3055 00002B57 88CA                <1> 	mov dl, cl
  3056 00002B59 29D6                <1> 	sub esi, edx
  3057 00002B5B C1E204              <1> 	shl edx, 4
  3058 00002B5E 01D6                <1> 	add esi, edx
  3059 00002B60 FECD                <1> 	dec ch
  3060 00002B62 80FD00              <1> 	cmp ch, 0
  3061 00002B65 7586                <1> 	jne nowincopy2
  3062                              <1> nocopytermatall:
  3063 00002B67 E802000000          <1> 	call switchtermcursor
  3064 00002B6C 61                  <1> 	popa
  3065 00002B6D C3                  <1> 	ret
  3066                              <1> 	
  3067                              <1> switchtermcursor:
  3068 00002B6E 8B3D[812A0000]      <1> 	mov edi, [termcursorpos]
  3069 00002B74 8A4701              <1> 	mov al, [edi + 1]
  3070 00002B77 8A27                <1> 	mov ah, [edi]
  3071 00002B79 3C07                <1> 	cmp al, 7
  3072 00002B7B 7607                <1> 	jbe movlargecursorterm
  3073 00002B7D B007                <1> 	mov al, 7
  3074 00002B7F E902000000          <1> 	jmp movedcursorterm
  3075                              <1> movlargecursorterm:
  3076 00002B84 B0F0                <1> 	mov al, 0xF0
  3077                              <1> movedcursorterm:
  3078 00002B86 884701              <1> 	mov [edi + 1], al
  3079 00002B89 80FC00              <1> 	cmp ah, 0
  3080 00002B8C 7504                <1> 	jne fixednocursorterm
  3081 00002B8E B420                <1> 	mov ah, " "
  3082 00002B90 8827                <1> 	mov [edi], ah
  3083                              <1> fixednocursorterm:
  3084 00002B92 C3                  <1> 	ret
  3085                                      %include 'source/dosints.asm'
  3086                              <1> int20h:
  3087 00002B93 66B8004C            <1> mov ax, 0x4C00
  3088                              <1> int21h:
  3089                              <1> dostosolleros:
  3090 00002B97 6650                <1> 	push ax
  3091 00002B99 66B83000            <1> 	mov ax, NEW_DATA_SEL
  3092 00002B9D 8ED8                <1> 	mov ds, ax
  3093 00002B9F 8EC0                <1> 	mov es, ax
  3094 00002BA1 8EE0                <1> 	mov fs, ax
  3095 00002BA3 66B82000            <1> 	mov ax, SYS_DATA_SEL
  3096 00002BA7 8EE8                <1> 	mov gs, ax
  3097 00002BA9 6658                <1> 	pop ax
  3098 00002BAB 9C                  <1> 	pushf
  3099 00002BAC 60                  <1> 	pusha
  3100 00002BAD 80FC01              <1> 	cmp ah, 1
  3101 00002BB0 0F8449000000        <1> 	je near dosgchar
  3102 00002BB6 80FC02              <1> 	cmp ah, 2
  3103 00002BB9 0F8447000000        <1> 	je near doswchar
  3104 00002BBF 80FC09              <1> 	cmp ah, 9
  3105 00002BC2 0F8449000000        <1> 	je near dosprintstr
  3106 00002BC8 80FC0A              <1> 	cmp ah, 0xA
  3107 00002BCB 0F8456000000        <1> 	je near dosgetstr
  3108 00002BD1 80FC2B              <1> 	cmp ah, 0x2B
  3109 00002BD4 0F8492000000        <1> 	je near dosgetdate
  3110 00002BDA 80FC2C              <1> 	cmp ah, 0x2C
  3111 00002BDD 0F84AC000000        <1> 	je near dosgettime
  3112 00002BE3 80FC4C              <1> 	cmp ah, 0x4C
  3113 00002BE6 0F84C1000000        <1> 	je near dosexit
  3114                              <1> backtodos:
  3115 00002BEC 61                  <1> 	popa
  3116 00002BED 9D                  <1> 	popf
  3117 00002BEE 6650                <1> 	push ax
  3118 00002BF0 66B85000            <1> 	mov ax, DOS_DATA_SEL
  3119 00002BF4 8ED8                <1> 	mov ds, ax
  3120 00002BF6 8EC0                <1> 	mov es, ax
  3121 00002BF8 8EE0                <1> 	mov fs, ax
  3122 00002BFA 8EE8                <1> 	mov gs, ax
  3123 00002BFC 6658                <1> 	pop ax
  3124 00002BFE CF                  <1> 	iret
  3125                              <1> 
  3126                              <1> dosgchar:
  3127 00002BFF E8C6FBFFFF          <1> 	call getchar
  3128 00002C04 EBE6                <1> 	jmp backtodos
  3129                              <1> 	
  3130                              <1> doswchar:
  3131 00002C06 88D0                <1> 	mov al, dl
  3132 00002C08 B307                <1> 	mov bl, 7
  3133 00002C0A E80EFCFFFF          <1> 	call prcharint
  3134 00002C0F EBDB                <1> 	jmp backtodos
  3135                              <1> 	
  3136                              <1> dosprintstr:
  3137 00002C11 31F6                <1> 	xor esi, esi
  3138 00002C13 6689D6              <1> 	mov si, dx
  3139 00002C16 81C600004000        <1> 	add esi, dosprogloc
  3140 00002C1C B024                <1> 	mov al, "$"
  3141 00002C1E B307                <1> 	mov bl, 7
  3142 00002C20 E82CF7FFFF          <1> 	call printint
  3143 00002C25 EBC5                <1> 	jmp backtodos
  3144                              <1> 	
  3145                              <1> dosgetstr:
  3146 00002C27 31F6                <1> 	xor esi, esi
  3147 00002C29 6689D6              <1> 	mov si, dx
  3148 00002C2C 81C600004000        <1> 	add esi, dosprogloc
  3149 00002C32 B900000000          <1> 	mov ecx, 0
  3150 00002C37 8A0E                <1> 	mov cl, [esi]
  3151 00002C39 81C603000000        <1> 	add esi, 3
  3152 00002C3F 89F7                <1> 	mov edi, esi
  3153 00002C41 8935[682C0000]      <1> 	mov [stringstart], esi
  3154 00002C47 01CF                <1> 	add edi, ecx
  3155 00002C49 B00A                <1> 	mov al, 10
  3156 00002C4B B307                <1> 	mov bl, 7
  3157 00002C4D E800F8FFFF          <1> 	call rdprint
  3158 00002C52 89F1                <1> 	mov ecx, esi
  3159 00002C54 2B0D[682C0000]      <1> 	sub ecx, [stringstart]
  3160 00002C5A 8B35[682C0000]      <1> 	mov esi, [stringstart]
  3161 00002C60 884EFF              <1> 	mov [esi - 1], cl
  3162 00002C63 884EFE              <1> 	mov [esi - 2], cl
  3163 00002C66 EB84                <1> 	jmp backtodos
  3164 00002C68 00000000            <1> stringstart dd 0
  3165                              <1> 
  3166                              <1> dosgetdate:
  3167 00002C6C E8001D0000          <1> 	call time
  3168 00002C71 8A0D[394B0000]      <1> 	mov cl, [RTCtimeYear]
  3169 00002C77 B500                <1> 	mov ch, 0
  3170 00002C79 6681C1D007          <1> 	add cx, 2000
  3171 00002C7E 8A35[384B0000]      <1> 	mov dh, [RTCtimeMonth]
  3172 00002C84 8A15[374B0000]      <1> 	mov dl, [RTCtimeDay]
  3173 00002C8A E95DFFFFFF          <1> 	jmp backtodos
  3174                              <1> 
  3175                              <1> dosgettime:
  3176 00002C8F E8DD1C0000          <1> 	call time
  3177 00002C94 8A2D[364B0000]      <1> 	mov ch, [RTCtimeHour]
  3178 00002C9A 8A0D[354B0000]      <1> 	mov cl, [RTCtimeMinute]
  3179 00002CA0 8A35[344B0000]      <1> 	mov dh, [RTCtimeSecond]
  3180 00002CA6 B200                <1> 	mov dl, 0
  3181 00002CA8 E93FFFFFFF          <1> 	jmp backtodos
  3182                              <1> 	
  3183                              <1> dosexit:
  3184 00002CAD 61                  <1> 	popa
  3185 00002CAE 3C00                <1> 	cmp al, 0
  3186 00002CB0 0F8528F6FFFF        <1> 	jne near warnexitstatus
  3187 00002CB6 E9A1010000          <1> 	jmp nwcmd
  3188                                      %include 'source/solleros.asm'
  3189                              <1> 	;SOLLEROS.ASM
  3190                              <1> os:
  3191                              <1> setdefenv:
  3192 00002CBB E80EF7FFFF          <1> 	call clear
  3193                              <1> bootfilecheck:
  3194 00002CC0 803D[28950000]01    <1> 	cmp byte [ranboot], 1
  3195 00002CC7 0F8427000000        <1> 	je near nobootfile
  3196 00002CCD C605[28950000]01    <1> 	mov byte [ranboot], 1
  3197 00002CD4 BF[30790000]        <1> 	mov edi, bootfilename
  3198 00002CD9 BE00004000          <1> 	mov esi, 0x400000
  3199 00002CDE E84C450000          <1> 	call loadfile
  3200 00002CE3 81FA94010000        <1> 	cmp edx, 404
  3201 00002CE9 0F8405000000        <1> 	je near nobootfile
  3202 00002CEF E8A40D0000          <1> 	call progbatchfound
  3203                              <1> nobootfile:	
  3204                              <1> 
  3205 00002CF4 BE[00000000]        <1> 	mov esi, signature
  3206                              <1> .sigcopyloop:	;this prevents an odd error
  3207 00002CF9 658A06              <1> 	mov al, [gs:esi]
  3208 00002CFC 8806                <1> 	mov [esi], al
  3209 00002CFE 46                  <1> 	inc esi
  3210 00002CFF 81FE[1A000000]      <1> 	cmp esi, signatureend
  3211 00002D05 72F2                <1> 	jb .sigcopyloop
  3212 00002D07 BE[00000000]        <1> 	mov esi, signature
  3213 00002D0C E839F6FFFF          <1> 	call print
  3214 00002D11 8B0D[16000000]      <1> 	mov ecx, [signatureend - 4]
  3215 00002D17 E807070000          <1> 	call showdec
  3216 00002D1C BE[76790000]        <1> 	mov esi, line
  3217 00002D21 E824F6FFFF          <1> 	call print
  3218 00002D26 BE[50790000]        <1> 	mov esi, userask
  3219 00002D2B E81AF6FFFF          <1> 	call print
  3220                              <1> usercheck:
  3221 00002D30 BE[A2A90000]        <1> 	mov esi, buftxt
  3222 00002D35 BF[A2AD0000]        <1> 	mov edi, buftxtend
  3223 00002D3A B00A                <1> 	mov al, 10
  3224 00002D3C E811F7FFFF          <1> 	call rdprint
  3225 00002D41 56                  <1> 	push esi
  3226 00002D42 BE[5A790000]        <1> 	mov esi, pwdask
  3227 00002D47 E8FEF5FFFF          <1> 	call print
  3228 00002D4C 5E                  <1> 	pop esi
  3229 00002D4D 46                  <1> 	inc esi
  3230 00002D4E 8935[312E0000]      <1> 	mov [esipass], esi
  3231                              <1> passcheck:
  3232 00002D54 E871FAFFFF          <1> 	call getchar
  3233 00002D59 3C0A                <1> 	cmp al, 10
  3234 00002D5B 0F8436000000        <1> 	je near gotpass
  3235 00002D61 3C08                <1> 	cmp al, 8
  3236 00002D63 0F8410000000        <1> 	je near backpass
  3237 00002D69 8806                <1> 	mov [esi], al
  3238 00002D6B 46                  <1> 	inc esi
  3239 00002D6C B02A                <1> 	mov al, '*'
  3240 00002D6E E8AAFAFFFF          <1> 	call prcharint
  3241 00002D73 EBDF                <1> 	jmp passcheck
  3242 00002D75 08200800            <1> backcursor2 db 8," ",8,0
  3243                              <1> backpass:
  3244 00002D79 3B35[312E0000]      <1> 	cmp esi, [esipass]
  3245 00002D7F 0F84CFFFFFFF        <1> 	je near passcheck
  3246 00002D85 4E                  <1> 	dec esi
  3247 00002D86 C60600              <1> 	mov byte [esi], 0
  3248 00002D89 56                  <1> 	push esi
  3249 00002D8A BE[752D0000]        <1> 	mov esi, backcursor2
  3250 00002D8F E8B6F5FFFF          <1> 	call print
  3251 00002D94 5E                  <1> 	pop esi
  3252 00002D95 EBBD                <1> 	jmp passcheck
  3253                              <1> gotpass:
  3254 00002D97 30C0                <1> 	xor al, al
  3255 00002D99 31C9                <1> 	xor ecx, ecx
  3256 00002D9B 8806                <1> 	mov [esi], al
  3257 00002D9D BB[78790000]        <1> 	mov ebx, userlst
  3258                              <1> userfind:
  3259 00002DA2 BE[A2A90000]        <1> 	mov esi, buftxt
  3260 00002DA7 8A06                <1> 	mov al, [esi]
  3261 00002DA9 3C00                <1> 	cmp al, 0
  3262 00002DAB 0F840AFFFFFF        <1> 	je near os
  3263 00002DB1 891D[352E0000]      <1> 	mov [usercache], ebx
  3264 00002DB7 E84E030000          <1> 	call tester
  3265 00002DBC 3C01                <1> 	cmp al, 1
  3266 00002DBE 7416                <1> 	je pwdtest
  3267 00002DC0 41                  <1> 	inc ecx
  3268                              <1> nxtuser:
  3269 00002DC1 8A03                <1> 	mov al, [ebx]
  3270 00002DC3 43                  <1> 	inc ebx
  3271 00002DC4 3C00                <1> 	cmp al, 0
  3272 00002DC6 75F9                <1> 	jne nxtuser
  3273 00002DC8 81FB[9B790000]      <1> 	cmp ebx, userlstend
  3274 00002DCE 0F83E7FEFFFF        <1> 	jae near os
  3275 00002DD4 EBCC                <1> 	jmp userfind
  3276                              <1> pwdtest:
  3277 00002DD6 46                  <1> 	inc esi
  3278 00002DD7 43                  <1> 	inc ebx
  3279 00002DD8 E82D030000          <1> 	call tester
  3280 00002DDD 3C01                <1> 	cmp al, 1
  3281 00002DDF 7402                <1> 	je pwdrgt
  3282 00002DE1 EBDE                <1> 	jmp nxtuser
  3283                              <1> pwdrgt:
  3284 00002DE3 D1E9                <1> 	shr ecx, 1
  3285 00002DE5 890D[24950000]      <1> 	mov [uid], ecx
  3286 00002DEB E8DEF5FFFF          <1> 	call clear
  3287 00002DF0 66B90002            <1> 	mov cx, 200h
  3288 00002DF4 BE[A2A90000]        <1> 	mov esi, buftxt
  3289 00002DF9 8935[06310000]      <1> 	mov [currentcommandloc], esi
  3290 00002DFF E825000000          <1> 	call bufclr
  3291                              <1> clearolddata:
  3292 00002E04 31C0                <1> 	xor eax, eax
  3293 00002E06 A2[29950000]        <1> 	mov [IFON], al
  3294 00002E0B A2[2A950000]        <1> 	mov [IFTRUE], al
  3295 00002E10 A2[92950000]        <1> 	mov [BATCHISON], al
  3296 00002E15 A3[8E950000]        <1> 	mov [BATCHPOS], eax
  3297 00002E1A A2[93950000]        <1> 	mov [LOOPON], al
  3298 00002E1F A3[94950000]        <1> 	mov [LOOPPOS], eax
  3299 00002E24 E933000000          <1> 	jmp nwcmd
  3300                              <1> bufclr:	
  3301 00002E29 30C0                <1> 	xor al, al
  3302 00002E2B 8806                <1> 	mov [esi], al
  3303 00002E2D 46                  <1> 	inc esi
  3304 00002E2E E2F9                <1> 	loop bufclr
  3305 00002E30 C3                  <1> 	ret
  3306                              <1> 
  3307 00002E31 00000000            <1> esipass dd 0
  3308 00002E35 [78790000]          <1> usercache dd userlst
  3309                              <1> 	
  3310                              <1> buftxtclear:
  3311 00002E39 30C0                <1> 	xor al, al
  3312 00002E3B BE[A2A90000]        <1> 	mov esi, buftxt
  3313 00002E40 81FE[A2AD0000]      <1> clearbuftxt: cmp esi, buf2
  3314 00002E46 730E                <1> 	jae retbufclr
  3315 00002E48 8806                <1> 	mov [esi], al
  3316 00002E4A 46                  <1> 	inc esi
  3317 00002E4B EBF3                <1> 	jmp clearbuftxt
  3318                              <1> 
  3319 00002E4D 39DE                <1> clearitbuf: cmp esi, ebx
  3320 00002E4F 7305                <1> 	jae retbufclr
  3321 00002E51 8806                <1> 	mov [esi], al
  3322 00002E53 46                  <1> 	inc esi
  3323 00002E54 EBF7                <1> 	jmp clearitbuf
  3324 00002E56 C3                  <1> retbufclr: ret
  3325                              <1> 
  3326 00002E57 E900000000          <1> full:	jmp nwcmd
  3327                              <1> 
  3328                              <1> shush:	;SollerOS Hardly Unix-compatible Shell
  3329                              <1> nwcmd:
  3330 00002E5C FB                  <1> 	sti
  3331 00002E5D 31C0                <1> 	xor eax, eax
  3332 00002E5F 3905[20300000]      <1> 	cmp [nextcommandloc], eax
  3333 00002E65 7411                <1> 	je nomultiplecommand
  3334 00002E67 8B35[20300000]      <1> 	mov esi, [nextcommandloc]
  3335 00002E6D 8935[24300000]      <1> 	mov [thiscommandloc], esi
  3336 00002E73 E9B5010000          <1> 	jmp fixvariables
  3337                              <1> nomultiplecommand:
  3338 00002E78 A3[24300000]        <1> 	mov [thiscommandloc], eax
  3339 00002E7D 3805[31730000]      <1> 	cmp [threadson], al
  3340 00002E83 7405                <1> 	je noclinwcmd
  3341 00002E85 A2[31730000]        <1> 	mov [threadson], al
  3342                              <1> noclinwcmd:
  3343 00002E8A B001                <1> 	mov al, 1
  3344 00002E8C 3805[92950000]      <1> 	cmp [BATCHISON], al
  3345 00002E92 7501                <1> 	jne cancel
  3346 00002E94 C3                  <1> 	ret
  3347 00002E95 30C0                <1> cancel:	xor al, al
  3348 00002E97 A2[29950000]        <1> 	mov [IFON], al
  3349 00002E9C A2[92950000]        <1> 	mov [BATCHISON], al
  3350 00002EA1 B05B                <1> 	mov al, '['
  3351 00002EA3 B406                <1> 	mov ah, 6
  3352 00002EA5 66BB0700            <1> 	mov bx, 7
  3353 00002EA9 E880F9FFFF          <1> 	call prcharq
  3354 00002EAE 8B35[352E0000]      <1> 	mov esi, [usercache]
  3355 00002EB4 E87FF4FFFF          <1> 	call printquiet
  3356 00002EB9 BE[64790000]        <1> 	mov esi, computer
  3357 00002EBE E875F4FFFF          <1> 	call printquiet
  3358 00002EC3 BE[6E790000]        <1> 	mov esi, location
  3359 00002EC8 E86BF4FFFF          <1> 	call printquiet
  3360 00002ECD BE[71790000]        <1> 	mov esi, endprompt
  3361 00002ED2 E873F4FFFF          <1> 	call print
  3362 00002ED7 E85DFFFFFF          <1> 	call buftxtclear
  3363 00002EDC BE[A2A90000]        <1> 	mov esi, buftxt
  3364 00002EE1 C605[B3270000]01    <1> 	mov byte [commandedit], 1
  3365 00002EE8 B00A                <1> 	mov al, 10
  3366 00002EEA 66BB0700            <1> 	mov bx, 7
  3367 00002EEE BF[A2AD0000]        <1> 	mov edi, buftxtend
  3368 00002EF3 E85AF5FFFF          <1> 	call rdprint
  3369 00002EF8 C605[B3270000]00    <1> 	mov byte [commandedit], 0
  3370 00002EFF 803D[A2A90000]00    <1> 	cmp byte [buftxt], 0
  3371 00002F06 0F8450FFFFFF        <1> 	je near nwcmd
  3372 00002F0C 8B35[3B500100]      <1> gotcmd:	mov esi, [currentcommandpos]
  3373 00002F12 8935[37500100]      <1> 	mov [lastcommandpos], esi
  3374 00002F18 BF[A2A90000]        <1> 	mov edi, buftxt
  3375 00002F1D 81C6[3F500100]      <1> 	add esi, commandbuf
  3376 00002F23 81FE[3F600100]      <1> 	cmp esi, commandbufend
  3377 00002F29 7605                <1> 	jbe copycommand
  3378 00002F2B BE[3F500100]        <1> 	mov esi, commandbuf
  3379                              <1> copycommand:
  3380 00002F30 8A07                <1> 	mov al, [edi]
  3381 00002F32 8806                <1> 	mov [esi], al
  3382 00002F34 47                  <1> 	inc edi
  3383 00002F35 46                  <1> 	inc esi
  3384 00002F36 3C00                <1> 	cmp al, 0
  3385 00002F38 740F                <1> 	je donecopy
  3386 00002F3A 81FE[3F600100]      <1> 	cmp esi, commandbufend
  3387 00002F40 76EE                <1> 	jbe copycommand
  3388 00002F42 BE[3F500100]        <1> 	mov esi, commandbuf
  3389 00002F47 EBE7                <1> 	jmp copycommand
  3390                              <1> donecopy:
  3391 00002F49 81EE[3F500100]      <1> 	sub esi, commandbuf
  3392 00002F4F 8935[3B500100]      <1> 	mov [currentcommandpos], esi
  3393 00002F55 E9CE000000          <1> 	jmp run
  3394                              <1> 
  3395 00002F5A E8DAFEFFFF          <1> input:	call buftxtclear
  3396 00002F5F BE[A2A90000]        <1> 	mov esi, buftxt		;puts input into buftxt AND onto screen
  3397 00002F64 BF[A2AD0000]        <1> 	mov edi, buftxtend
  3398 00002F69 B00A                <1> stdin:	mov al, 10
  3399 00002F6B B307                <1> 	mov bl, 7
  3400 00002F6D E8E0F4FFFF          <1> 	call rdprint
  3401 00002F72 C3                  <1> 	ret
  3402                              <1> 
  3403                              <1> replacevariable:
  3404 00002F73 8A4601              <1> 	mov al, [esi + 1]
  3405 00002F76 C64601FF            <1> 	mov byte [esi + 1], 255
  3406 00002F7A 3C24                <1> 	cmp al, "$"
  3407 00002F7C 0F84AB000000        <1> 	je near fixvariables
  3408 00002F82 884601              <1> 	mov [esi + 1], al
  3409 00002F85 56                  <1> 	push esi
  3410 00002F86 81EE[A2A90000]      <1> 	sub esi, buftxt
  3411 00002F8C 89F7                <1> 	mov edi, esi
  3412 00002F8E 81C6[A2A90000]      <1> 	add esi, buftxt
  3413 00002F94 47                  <1> 	inc edi
  3414 00002F95 BB[98950000]        <1> 	mov ebx, variables
  3415 00002F9A E87C100000          <1> 	call nxtvrech
  3416 00002F9F 89F7                <1> 	mov edi, esi
  3417 00002FA1 31DB                <1> 	xor ebx, ebx
  3418 00002FA3 4E                  <1> 	dec esi
  3419                              <1> findvarname:
  3420 00002FA4 4E                  <1> 	dec esi
  3421 00002FA5 8A06                <1> 	mov al, [esi]
  3422 00002FA7 43                  <1> 	inc ebx
  3423 00002FA8 3C04                <1> 	cmp al, 4
  3424 00002FAA 75F8                <1> 	jne findvarname
  3425 00002FAC 5E                  <1> 	pop esi
  3426                              <1> replacevarloop:
  3427 00002FAD 8A07                <1> 	mov al, [edi]
  3428 00002FAF 81FB00000000        <1> 	cmp ebx, 0
  3429 00002FB5 0F841E000000        <1> 	je near expandbuftxt
  3430 00002FBB 3C00                <1> 	cmp al, 0
  3431 00002FBD 0F8407000000        <1> 	je near compressbuftxt
  3432 00002FC3 8806                <1> 	mov [esi], al
  3433 00002FC5 4B                  <1> 	dec ebx
  3434 00002FC6 46                  <1> 	inc esi
  3435 00002FC7 47                  <1> 	inc edi
  3436 00002FC8 EBE3                <1> 	jmp replacevarloop
  3437                              <1> compressbuftxt:	
  3438 00002FCA 8A041E              <1> 	mov al, [esi + ebx]
  3439 00002FCD 8806                <1> 	mov [esi], al
  3440 00002FCF 46                  <1> 	inc esi
  3441 00002FD0 3C00                <1> 	cmp al, 0
  3442 00002FD2 75F6                <1> 	jne compressbuftxt
  3443 00002FD4 E954000000          <1> 	jmp fixvariables
  3444                              <1> expandbuftxt:
  3445 00002FD9 89F1                <1> 	mov ecx, esi
  3446 00002FDB 8A26                <1> 	mov ah, [esi]
  3447                              <1> expandbuftxtlp:
  3448 00002FDD 8A1E                <1> 	mov bl, [esi]
  3449 00002FDF 46                  <1> 	inc esi
  3450 00002FE0 8A3E                <1> 	mov bh, [esi]
  3451 00002FE2 8826                <1> 	mov [esi], ah
  3452 00002FE4 88FC                <1> 	mov ah, bh
  3453 00002FE6 80FB00              <1> 	cmp bl, 0
  3454 00002FE9 75F2                <1> 	jne expandbuftxtlp
  3455 00002FEB 89CE                <1> 	mov esi, ecx
  3456 00002FED 8806                <1> 	mov [esi], al
  3457 00002FEF 47                  <1> 	inc edi
  3458 00002FF0 8A07                <1> 	mov al, [edi]
  3459 00002FF2 3C00                <1> 	cmp al, 0
  3460 00002FF4 0F8433000000        <1> 	je near fixvariables
  3461 00002FFA 46                  <1> 	inc esi
  3462 00002FFB EBDC                <1> 	jmp expandbuftxt
  3463                              <1> multipleprogline:
  3464 00002FFD 30E4                <1> 	xor ah, ah
  3465 00002FFF 8826                <1> 	mov [esi], ah
  3466 00003001 46                  <1> 	inc esi
  3467 00003002 8935[20300000]      <1> 	mov [nextcommandloc], esi
  3468 00003008 E93E000000          <1> 	jmp donefixvariables
  3469                              <1> inlinecomment:	;if the following char is #, include a #, otherwise end the line
  3470 0000300D 46                  <1> 	inc esi
  3471 0000300E 8A06                <1> 	mov al, [esi]
  3472 00003010 C606FF              <1> 	mov byte [esi], 255
  3473 00003013 3C23                <1> 	cmp al, '#'
  3474 00003015 7416                <1> 	je fixvariables
  3475 00003017 4E                  <1> 	dec esi
  3476 00003018 C60600              <1> 	mov byte [esi], 0
  3477 0000301B E90D000000          <1> 	jmp fixvariables
  3478                              <1> 	
  3479 00003020 00000000            <1> nextcommandloc dd 0
  3480 00003024 00000000            <1> thiscommandloc dd 0	
  3481                              <1> run:
  3482 00003028 BE[A2A90000]        <1> 	mov esi, buftxt
  3483                              <1> fixvariables:
  3484 0000302D 46                  <1> 	inc esi
  3485 0000302E 8A06                <1> 	mov al, [esi]
  3486 00003030 3C23                <1> 	cmp al, '#'	;inline comment
  3487 00003032 74D9                <1> 	je inlinecomment
  3488 00003034 3C24                <1> 	cmp al, '$' ;variable
  3489 00003036 0F8437FFFFFF        <1> 	je near replacevariable
  3490 0000303C 3C3B                <1> 	cmp al, ';' ;program list
  3491 0000303E 74BD                <1> 	je multipleprogline
  3492 00003040 3C00                <1> 	cmp al, 0
  3493 00003042 75E9                <1> 	jne fixvariables
  3494 00003044 31C0                <1> 	xor eax, eax
  3495 00003046 A3[20300000]        <1> 	mov [nextcommandloc], eax
  3496                              <1> donefixvariables:
  3497 0000304B 803D[1D360000]00    <1> 	cmp byte [indexdone], 0
  3498 00003052 7505                <1> 	jne progtest
  3499 00003054 E82F050000          <1> 	call indexfiles
  3500                              <1> progtest:
  3501 00003059 31C0                <1> 	xor eax, eax
  3502 0000305B BB[24910000]        <1> 	mov ebx, fileindex
  3503 00003060 668B03              <1> prgnxt:	mov ax, [ebx]
  3504 00003063 B1FF                <1> 	mov cl, 255
  3505 00003065 B52C                <1> 	mov ch, 44
  3506 00003067 6639C8              <1> 	cmp ax, cx
  3507 0000306A 740B                <1> 	je fndprg
  3508 0000306C 43                  <1> 	inc ebx
  3509 0000306D 81FB[24950000]      <1> 	cmp ebx, fileindexend
  3510 00003073 7361                <1> 	jae prgnf
  3511 00003075 EBE9                <1> 	jmp prgnxt
  3512 00003077 81C302000000        <1> fndprg: add ebx, 2
  3513 0000307D 31C9                <1> 	xor ecx, ecx
  3514 0000307F BE[A2A90000]        <1> 	mov esi, buftxt
  3515 00003084 390D[24300000]      <1> 	cmp [thiscommandloc], ecx
  3516 0000308A 7406                <1> 	je noprgtstmultiple
  3517 0000308C 8B35[24300000]      <1> 	mov esi, [thiscommandloc]
  3518                              <1> noprgtstmultiple:
  3519 00003092 E8AE000000          <1> 	call cndtest
  3520 00003097 3C01                <1> 	cmp al, 1
  3521 00003099 7302                <1> 	jae prggood
  3522 0000309B EBC3                <1> 	jmp prgnxt
  3523 0000309D 81FB[24950000]      <1> prggood: cmp ebx, fileindexend
  3524 000030A3 735C                <1> 	jae prgdn
  3525 000030A5 31C0                <1> 	xor eax, eax
  3526 000030A7 BE[A2A90000]        <1> 	mov esi, buftxt
  3527 000030AC 3905[24300000]      <1> 	cmp [thiscommandloc], eax
  3528 000030B2 7406                <1> 	je noprggoodmul
  3529 000030B4 8B35[24300000]      <1> 	mov esi, [thiscommandloc]
  3530                              <1> noprggoodmul:
  3531 000030BA 8935[06310000]      <1> 	mov [currentcommandloc], esi
  3532 000030C0 81C303000000        <1> 	add ebx, 3
  3533 000030C6 8B3B                <1> 	mov edi, [ebx]
  3534 000030C8 C605[31730000]02    <1> 	mov byte [threadson], 2
  3535 000030CF FFD7                <1> 	call edi
  3536 000030D1 E986FDFFFF          <1> 	jmp nwcmd
  3537                              <1> prgnf:	
  3538 000030D6 8B35[06310000]      <1> 	mov esi, [currentcommandloc]
  3539 000030DC 8A06                <1> 	mov al, [esi]
  3540 000030DE 3C00                <1> 	cmp al, 0
  3541 000030E0 741F                <1> 	je prgdn
  3542 000030E2 BE[38790000]        <1> 	mov esi, notfound1
  3543 000030E7 E85EF2FFFF          <1> 	call print
  3544 000030EC 8B35[06310000]      <1> 	mov esi, [currentcommandloc]
  3545 000030F2 E853F2FFFF          <1> 	call print
  3546 000030F7 BE[42790000]        <1> 	mov esi, notfound2
  3547 000030FC E849F2FFFF          <1> 	call print
  3548 00003101 E956FDFFFF          <1> prgdn:	jmp nwcmd
  3549                              <1> 
  3550 00003106 00000000            <1> currentcommandloc dd 0
  3551                              <1> 
  3552                              <1> tester:			;si=user bx=prog returns 1 in al if true
  3553 0000310A 6631C0              <1> 	xor ax, ax
  3554 0000310D 8A06                <1> retest:	mov al, [esi]
  3555 0000310F 8A23                <1> 	mov ah, [ebx]
  3556 00003111 3C00                <1> 	cmp al, 0
  3557 00003113 7408                <1> 	je testtrue
  3558 00003115 38E0                <1> 	cmp al, ah
  3559 00003117 750C                <1> 	jne testfalse
  3560 00003119 43                  <1> 	inc ebx
  3561 0000311A 46                  <1> 	inc esi
  3562 0000311B EBF0                <1> 	jmp retest
  3563                              <1> testtrue:
  3564 0000311D 80FC00              <1> 	cmp ah, 0
  3565 00003120 7503                <1> 	jne testfalse
  3566 00003122 B001                <1> 	mov al, 1
  3567 00003124 C3                  <1> 	ret
  3568                              <1> testfalse:
  3569 00003125 30C0                <1> 	xor al, al
  3570 00003127 C3                  <1> 	ret
  3571                              <1> 
  3572                              <1> optest:			;si=user bx=prog returns 1 in al if true
  3573 00003128 30C0                <1> 	xor al, al
  3574                              <1> opretest:
  3575 0000312A 8A06                <1> 	mov al, [esi]
  3576 0000312C 8A23                <1> 	mov ah, [ebx]
  3577 0000312E 38E0                <1> 	cmp al, ah
  3578 00003130 7510                <1> 	jne optestfalse
  3579 00003132 80FC00              <1> 	cmp ah, 0
  3580 00003135 7404                <1> 	je optesttrue
  3581 00003137 43                  <1> 	inc ebx
  3582 00003138 46                  <1> 	inc esi
  3583 00003139 EBEF                <1> 	jmp opretest
  3584                              <1> optesttrue:
  3585 0000313B 3C00                <1> 	cmp al, 0
  3586 0000313D 7503                <1> 	jne optestfalse
  3587 0000313F B001                <1> 	mov al, 1
  3588 00003141 C3                  <1> 	ret
  3589                              <1> optestfalse:
  3590 00003142 30C0                <1> 	xor al, al
  3591 00003144 C3                  <1> 	ret
  3592                              <1> 
  3593                              <1> cndtest:			;si=user bx=prog cl=endchar returns 1 in al if true
  3594 00003145 30C0                <1> 	xor al, al
  3595 00003147 8A06                <1> cndretest:	mov al, [esi]
  3596 00003149 8A23                <1> 	mov ah, [ebx]
  3597 0000314B 38CC                <1> 	cmp ah, cl
  3598 0000314D 7408                <1> 	je cndtesttrue
  3599 0000314F 38E0                <1> 	cmp al, ah
  3600 00003151 750B                <1> 	jne cndtestfalse
  3601 00003153 43                  <1> 	inc ebx
  3602 00003154 46                  <1> 	inc esi
  3603 00003155 EBF0                <1> 	jmp cndretest
  3604                              <1> cndtesttrue:
  3605 00003157 38C8                <1> 	cmp al, cl
  3606 00003159 7506                <1> 	jne cndtestalmost
  3607 0000315B B001                <1> 	mov al, 1
  3608 0000315D C3                  <1> 	ret
  3609                              <1> cndtestfalse:
  3610 0000315E 30C0                <1> 	xor al, al
  3611 00003160 C3                  <1> 	ret
  3612                              <1> cndtestalmost:
  3613 00003161 B002                <1> 	mov al, 2
  3614 00003163 C3                  <1> 	ret
  3615                              <1> 	
  3616                              <1> array:				;arraystart in si, arrayend in bx, arrayseperator in cx
  3617                              <1> 		                ;ends if array seperator is found backwards after 0
  3618                              <1> 	arnxt:	      
  3619 00003164 88E8                <1> 		mov al, ch
  3620 00003166 88CC                <1> 		mov ah, cl        
  3621 00003168 663906              <1> 		cmp [esi], ax
  3622 0000316B 744D                <1> 		je ardn
  3623 0000316D 66390E              <1> 		cmp [esi], cx
  3624 00003170 7407                <1> 		je arfnd
  3625 00003172 46                  <1> 		inc esi
  3626 00003173 39DE                <1> 		cmp esi, ebx
  3627 00003175 7343                <1> 		jae ardn
  3628 00003177 EBEB                <1> 		jmp arnxt
  3629 00003179 81C602000000        <1> 	arfnd: add esi, 2
  3630 0000317F 891D[BB310000]      <1> 		mov [arbx], ebx
  3631 00003185 890D[BF310000]      <1> 		mov [arcx], ecx
  3632 0000318B E8BAF1FFFF          <1> 		call print
  3633 00003190 8935[C1310000]      <1> 		mov [arsi], esi
  3634 00003196 BE[76790000]        <1> 		mov esi, line
  3635 0000319B E8AAF1FFFF          <1> 		call print
  3636 000031A0 8B1D[BB310000]      <1> 		mov ebx, [arbx]
  3637 000031A6 668B0D[BF310000]    <1> 		mov cx, [arcx]
  3638 000031AD 8B35[C1310000]      <1> 		mov esi, [arsi]
  3639 000031B3 46                  <1> 		inc esi
  3640 000031B4 39DE                <1> 		cmp esi, ebx
  3641 000031B6 7302                <1> 		jae ardn
  3642 000031B8 EBAA                <1> 		jmp arnxt
  3643 000031BA C3                  <1> 	ardn:	ret
  3644 000031BB 00000000            <1> arbx:	dw 0,0
  3645 000031BF 0000                <1> arcx:	db 0,0
  3646 000031C1 00000000            <1> arsi:	dw 0,0
  3647                              <1> 
  3648                              <1> clearbuffer:
  3649 000031C5 BE[A2AD0000]        <1> 	mov esi, buf2
  3650 000031CA B030                <1> 	mov al, '0'
  3651 000031CC 81FE[B6AD0000]      <1> clearbuf: cmp esi, numbuf
  3652 000031D2 7305                <1> 	jae doneclearbuff
  3653 000031D4 8806                <1> 	mov [esi], al
  3654 000031D6 46                  <1> 	inc esi
  3655 000031D7 EBF3                <1> 	jmp clearbuf
  3656                              <1> doneclearbuff: 
  3657 000031D9 C3                  <1> 		ret
  3658                              <1> 
  3659                              <1> convert:
  3660 000031DA 4E                  <1> 	dec esi
  3661 000031DB 89F3                <1> 	mov ebx, esi		;place to convert into must be in esi, number to convert must be in ecx
  3662                              <1> cnvrt:
  3663 000031DD 89DE                <1> 	mov esi, ebx
  3664 000031DF 81EE09000000        <1> 	sub esi, 9
  3665 000031E5 81F900CA9A3B        <1> 	cmp ecx, 1000000000
  3666 000031EB 720A                <1> 	jb ten8
  3667 000031ED 81E900CA9A3B        <1> 	sub ecx, 1000000000
  3668 000031F3 FE06                <1> 	inc byte [esi]
  3669 000031F5 EBE6                <1> 	jmp cnvrt
  3670 000031F7 46                  <1> ten8:	inc esi
  3671 000031F8 81F900E1F505        <1> 	cmp ecx, 100000000
  3672 000031FE 720A                <1> 	jb ten7
  3673 00003200 81E900E1F505        <1> 	sub ecx, 100000000
  3674 00003206 FE06                <1> 	inc byte [esi]
  3675 00003208 EBD3                <1> 	jmp cnvrt
  3676 0000320A 46                  <1> ten7:	inc esi
  3677 0000320B 81F980969800        <1> 	cmp ecx, 10000000
  3678 00003211 720A                <1> 	jb ten6
  3679 00003213 81E980969800        <1> 	sub ecx, 10000000
  3680 00003219 FE06                <1> 	inc byte [esi]
  3681 0000321B EBC0                <1> 	jmp cnvrt
  3682 0000321D 46                  <1> ten6:	inc esi
  3683 0000321E 81F940420F00        <1> 	cmp ecx, 1000000
  3684 00003224 720A                <1> 	jb ten5
  3685 00003226 81E940420F00        <1> 	sub ecx, 1000000
  3686 0000322C FE06                <1> 	inc byte [esi]
  3687 0000322E EBAD                <1> 	jmp cnvrt
  3688 00003230 46                  <1> ten5:	inc esi
  3689 00003231 81F9A0860100        <1> 	cmp ecx, 100000
  3690 00003237 720A                <1> 	jb ten4
  3691 00003239 81E9A0860100        <1> 	sub ecx, 100000
  3692 0000323F FE06                <1> 	inc byte [esi]
  3693 00003241 EB9A                <1> 	jmp cnvrt
  3694 00003243 46                  <1> ten4:	inc esi
  3695 00003244 81F910270000        <1> 	cmp ecx, 10000
  3696 0000324A 720A                <1> 	jb ten3
  3697 0000324C 81E910270000        <1> 	sub ecx, 10000
  3698 00003252 FE06                <1> 	inc byte [esi]
  3699 00003254 EB87                <1> 	jmp cnvrt
  3700 00003256 46                  <1> ten3:	inc esi
  3701 00003257 81F9E8030000        <1> 	cmp ecx, 1000
  3702 0000325D 720D                <1> 	jb ten2
  3703 0000325F 81E9E8030000        <1> 	sub ecx, 1000
  3704 00003265 FE06                <1> 	inc byte [esi]
  3705 00003267 E971FFFFFF          <1> 	jmp cnvrt
  3706 0000326C 46                  <1> ten2:	inc esi
  3707 0000326D 81F964000000        <1> 	cmp ecx, 100
  3708 00003273 720D                <1> 	jb ten1
  3709 00003275 81E964000000        <1> 	sub ecx, 100
  3710 0000327B FE06                <1> 	inc byte [esi]
  3711 0000327D E95BFFFFFF          <1> 	jmp cnvrt
  3712 00003282 46                  <1> ten1:	inc esi
  3713 00003283 81F90A000000        <1> 	cmp ecx, 10
  3714 00003289 720D                <1> 	jb ten0
  3715 0000328B 81E90A000000        <1> 	sub ecx, 10
  3716 00003291 FE06                <1> 	inc byte [esi]
  3717 00003293 E945FFFFFF          <1> 	jmp cnvrt
  3718 00003298 46                  <1> ten0:	inc esi
  3719 00003299 81F901000000        <1> 	cmp ecx, 1
  3720 0000329F 720D                <1> 	jb tendn
  3721 000032A1 81E901000000        <1> 	sub ecx, 1
  3722 000032A7 FE06                <1> 	inc byte [esi]
  3723 000032A9 E92FFFFFFF          <1> 	jmp cnvrt
  3724                              <1> tendn:
  3725 000032AE C3                  <1> 	ret
  3726                              <1> 
  3727                              <1> 	
  3728                              <1> 
  3729 000032AF 00<rept>            <1> hexnumber times 8 db 0
  3730 000032B7 202000              <1> hexnumberend db "  ",0
  3731                              <1> 
  3732                              <1> 
  3733 000032BA 00000000            <1> sibuf dw 0,0
  3734 000032BE 00000000            <1> dibuf dw 0,0
  3735                              <1> 
  3736                              <1> converthex:
  3737                              <1> clearbufferhex:
  3738 000032C2 B030                <1> 	mov al, '0'
  3739 000032C4 8935[BA320000]      <1> 	mov [sibuf], esi
  3740 000032CA 893D[BE320000]      <1> 	mov [dibuf], edi
  3741 000032D0 39FE                <1> clearbufhex: cmp esi, edi
  3742 000032D2 7305                <1> 	jae doneclearbuffhex
  3743 000032D4 8806                <1> 	mov [esi], al
  3744 000032D6 46                  <1> 	inc esi
  3745 000032D7 EBF7                <1> 	jmp clearbufhex
  3746                              <1> doneclearbuffhex:
  3747 000032D9 8B35[BE320000]      <1> 	mov esi, [dibuf]
  3748 000032DF 89CA                <1> 	mov edx, ecx
  3749 000032E1 81FA00000000        <1> 	cmp edx, 0
  3750 000032E7 741F                <1> 	je donenxtephx
  3751                              <1> nxtexphx:	;0x10^x
  3752 000032E9 4E                  <1> 	dec esi
  3753 000032EA 89F7                <1> 	mov edi, esi		;;location of 0x10^x
  3754 000032EC 89D1                <1> 	mov ecx, edx
  3755 000032EE 81E10F000000        <1> 	and ecx, 0xF		;;just this digit
  3756 000032F4 E81C000000          <1> 	call cnvrtexphx		;;get this digit
  3757 000032F9 89FE                <1> 	mov esi, edi
  3758 000032FB C1EA04              <1> 	shr edx, 4		;;next digit
  3759 000032FE 81FA00000000        <1> 	cmp edx, 0
  3760 00003304 7402                <1> 	je donenxtephx
  3761 00003306 EBE1                <1> 	jmp nxtexphx
  3762                              <1> donenxtephx:
  3763 00003308 8B35[BA320000]      <1> 	mov esi, [sibuf]
  3764 0000330E 8B3D[BE320000]      <1> 	mov edi, [dibuf]
  3765 00003314 C3                  <1> 	ret
  3766                              <1> cnvrtexphx:			;;convert this number
  3767 00003315 89F3                <1> 	mov ebx, esi		;place to convert to must be in si, number to convert must be in cx
  3768 00003317 81F900000000        <1> 	cmp ecx, 0
  3769 0000331D 7429                <1> 	je zerohx
  3770 0000331F 8A06                <1> cnvrthx:  mov al, [esi]
  3771 00003321 3C39                <1> 	cmp al, '9'
  3772 00003323 741B                <1> 	je lettershx
  3773 00003325 3C46                <1> lttrhxdn: cmp al, 'F'
  3774 00003327 741F                <1> 	je zerohx
  3775 00003329 8A06                <1> 	mov al, [esi]
  3776 0000332B FEC0                <1> 	inc al
  3777 0000332D 8806                <1> 	mov [esi], al
  3778 0000332F 89DE                <1> 	mov esi, ebx
  3779 00003331 81E901000000        <1> cnvrtlphx: sub ecx, 1
  3780 00003337 81F900000000        <1> 	cmp ecx, 0
  3781 0000333D 75E0                <1> 	jne cnvrthx
  3782 0000333F C3                  <1> 	ret
  3783                              <1> lettershx:
  3784 00003340 B041                <1> 	mov al, 'A'
  3785 00003342 2C01                <1> 	sub al, 1
  3786 00003344 8806                <1> 	mov [esi], al
  3787 00003346 EBDD                <1> 	jmp lttrhxdn
  3788 00003348 B030                <1> zerohx:	mov al, '0'
  3789 0000334A 8806                <1> 	mov [esi], al
  3790 0000334C 4E                  <1> 	dec esi
  3791 0000334D 8A06                <1> 	mov al, [esi]
  3792 0000334F 3C46                <1> 	cmp al, 'F'
  3793 00003351 74F5                <1> 	je zerohx
  3794 00003353 41                  <1> 	inc ecx
  3795 00003354 EBDB                <1> 	jmp cnvrtlphx
  3796 00003356 00                  <1> smallhex db 0
  3797 00003357 01                  <1> firsthexshown db 1
  3798                              <1> showhexsmall:
  3799 00003358 C605[56330000]01    <1> 	mov byte [smallhex], 1
  3800 0000335F E808000000          <1> 	call showhex
  3801 00003364 C605[56330000]00    <1> 	mov byte [smallhex], 0
  3802 0000336B C3                  <1> 	ret
  3803                              <1> showhex:
  3804 0000336C 60                  <1> 	pusha
  3805 0000336D BE[AF320000]        <1> 	mov esi, hexnumber
  3806 00003372 BF[B7320000]        <1> 	mov edi, hexnumberend
  3807 00003377 E846FFFFFF          <1> 	call converthex
  3808 0000337C 803D[57330000]01    <1> 	cmp byte [firsthexshown], 1
  3809 00003383 7503                <1> 	jne showthathex
  3810 00003385 6631D2              <1> 	xor dx, dx
  3811                              <1> showthathex:
  3812 00003388 803D[57330000]03    <1> 	cmp byte [firsthexshown], 3
  3813 0000338F 750A                <1> 	jne nonewhexline
  3814 00003391 BE[76790000]        <1> 	mov esi, line
  3815 00003396 E8AFEFFFFF          <1> 	call print
  3816                              <1> nonewhexline:
  3817 0000339B 803D[57330000]04    <1> 	cmp byte [firsthexshown], 4
  3818 000033A2 7527                <1> 	jne notabfixhex
  3819 000033A4 B1A0                <1> 	mov cl, 160
  3820 000033A6 28D1                <1> 	sub cl, dl
  3821 000033A8 C0E905              <1> 	shr cl, 5
  3822 000033AB C0E105              <1> 	shl cl, 5
  3823 000033AE 80F900              <1> 	cmp cl, 0
  3824 000033B1 750F                <1> 	jne nonewlinetabfixhex
  3825 000033B3 BE[76790000]        <1> 	mov esi, line
  3826 000033B8 E88DEFFFFF          <1> 	call print
  3827 000033BD E909000000          <1> 	jmp notabfixhex
  3828                              <1> nonewlinetabfixhex:
  3829 000033C2 80C20F              <1> 	add dl, 15
  3830 000033C5 C0EA04              <1> 	shr dl, 4
  3831 000033C8 C0E204              <1> 	shl dl, 4
  3832                              <1> notabfixhex:
  3833 000033CB BE[AF320000]        <1> 	mov esi, hexnumber
  3834 000033D0 803D[56330000]01    <1> 	cmp byte [smallhex],1
  3835 000033D7 7506                <1> 	jne printnosmallhex
  3836 000033D9 81C606000000        <1> 	add esi, 6
  3837                              <1> printnosmallhex:
  3838 000033DF 803D[57330000]05    <1> 	cmp byte [firsthexshown], 5
  3839 000033E6 750A                <1> 	jne noquietprinthex
  3840 000033E8 E84BEFFFFF          <1> 	call printquiet
  3841 000033ED E905000000          <1> 	jmp donequiethex
  3842                              <1> noquietprinthex:
  3843 000033F2 E853EFFFFF          <1> 	call print
  3844                              <1> donequiethex:
  3845 000033F7 803D[57330000]02    <1> 	cmp byte [firsthexshown], 2
  3846 000033FE 750A                <1> 	jne hexshown
  3847 00003400 BE[76790000]        <1> 	mov esi, line
  3848 00003405 E840EFFFFF          <1> 	call print
  3849                              <1> hexshown:
  3850 0000340A C605[57330000]00    <1> 	mov byte [firsthexshown], 0
  3851 00003411 61                  <1> 	popa
  3852 00003412 C3                  <1> 	ret
  3853                              <1> 
  3854                              <1> 
  3855 00003413 303030303030303030- <1> decnumber db "00000000000000"
  3856 0000341C 3030303030          <1>
  3857 00003421 2000                <1> decnumberend: db " ",0
  3858                              <1> 
  3859                              <1> showdec: ;;same as showhex, just uses decimal conversion
  3860 00003423 60                  <1> 	pusha
  3861 00003424 BF[13340000]        <1> 	mov edi, decnumber
  3862 00003429 BE[21340000]        <1> 	mov esi, decnumberend
  3863                              <1> cleardecbuf:
  3864 0000342E C60730              <1> 	mov byte [edi], '0'
  3865 00003431 47                  <1> 	inc edi
  3866 00003432 39F7                <1> 	cmp edi, esi
  3867 00003434 72F8                <1> 	jb cleardecbuf
  3868 00003436 BF[13340000]        <1> 	mov edi, decnumber
  3869 0000343B E89AFDFFFF          <1> 	call convert
  3870 00003440 803D[57330000]01    <1> 	cmp byte [firsthexshown], 1
  3871 00003447 7503                <1> 	jne showthatdec
  3872 00003449 6631D2              <1> 	xor dx, dx
  3873                              <1> showthatdec:
  3874 0000344C 803D[57330000]03    <1> 	cmp byte [firsthexshown], 3
  3875 00003453 750A                <1> 	jne nonewdecline
  3876 00003455 BE[76790000]        <1> 	mov esi, line
  3877 0000345A E8EBEEFFFF          <1> 	call print
  3878                              <1> nonewdecline:
  3879 0000345F 803D[57330000]04    <1> 	cmp byte [firsthexshown], 4
  3880 00003466 7527                <1> 	jne notabfixdec
  3881 00003468 B1A0                <1> 	mov cl, 160
  3882 0000346A 28D1                <1> 	sub cl, dl
  3883 0000346C C0E905              <1> 	shr cl, 5
  3884 0000346F C0E105              <1> 	shl cl, 5
  3885 00003472 80F900              <1> 	cmp cl, 0
  3886 00003475 750F                <1> 	jne nonewlinetabfixdec
  3887 00003477 BE[76790000]        <1> 	mov esi, line
  3888 0000347C E8C9EEFFFF          <1> 	call print
  3889 00003481 E909000000          <1> 	jmp notabfixdec
  3890                              <1> nonewlinetabfixdec:
  3891 00003486 80C20F              <1> 	add dl, 15
  3892 00003489 C0EA04              <1> 	shr dl, 4
  3893 0000348C C0E204              <1> 	shl dl, 4
  3894                              <1> notabfixdec:
  3895 0000348F BE[13340000]        <1> 	mov esi, decnumber
  3896 00003494 4E                  <1> 	dec esi
  3897                              <1> sifind:
  3898 00003495 46                  <1> 	inc esi
  3899 00003496 803E30              <1> 	cmp byte [esi], '0'
  3900 00003499 74FA                <1> 	je sifind
  3901 0000349B E8AAEEFFFF          <1> 	call print
  3902 000034A0 803D[57330000]02    <1> 	cmp byte [firsthexshown], 2
  3903 000034A7 750A                <1> 	jne decshown
  3904 000034A9 BE[76790000]        <1> 	mov esi, line
  3905 000034AE E897EEFFFF          <1> 	call print
  3906                              <1> decshown:
  3907 000034B3 C605[57330000]00    <1> 	mov byte [firsthexshown], 0
  3908 000034BA 61                  <1> 	popa
  3909 000034BB C3                  <1> 	ret
  3910                              <1> 	
  3911                              <1> cnvrthextxt:
  3912 000034BC 31C9                <1> 	xor ecx, ecx
  3913 000034BE 31C0                <1> 	xor eax, eax
  3914 000034C0 31D2                <1> 	xor edx, edx
  3915 000034C2 31DB                <1> 	xor ebx, ebx
  3916 000034C4 4E                  <1> 	dec esi
  3917                              <1> .end:
  3918 000034C5 46                  <1> 	inc esi
  3919 000034C6 8A06                <1> 	mov al, [esi]
  3920 000034C8 3C00                <1> 	cmp al, 0
  3921 000034CA 75F9                <1> 	jne .end
  3922                              <1> .loop:
  3923 000034CC 4E                  <1> 	dec esi
  3924 000034CD 8A06                <1> 	mov al, [esi]
  3925 000034CF 3C41                <1> 	cmp al, "A"
  3926 000034D1 7328                <1> 	jae .char
  3927 000034D3 2C30                <1> 	sub al, 48
  3928 000034D5 3C10                <1> 	cmp al, 16
  3929 000034D7 7721                <1> 	ja .done
  3930                              <1> .donechar:
  3931 000034D9 81FA00000000        <1> 	cmp edx, 0
  3932 000034DF 740E                <1> 	je .noshl
  3933 000034E1 89D3                <1> 	mov ebx, edx
  3934                              <1> .shl:
  3935 000034E3 C1E004              <1> 	shl eax, 4
  3936 000034E6 4B                  <1> 	dec ebx
  3937 000034E7 81FB00000000        <1> 	cmp ebx, 0
  3938 000034ED 75F4                <1> 	jne .shl
  3939                              <1> .noshl:
  3940 000034EF 42                  <1> 	inc edx
  3941 000034F0 01C1                <1> 	add ecx, eax
  3942 000034F2 81FA08000000        <1> 	cmp edx, 8
  3943 000034F8 72D2                <1> 	jb .loop
  3944                              <1> .done:
  3945 000034FA C3                  <1> 	ret
  3946                              <1> .char:
  3947 000034FB 3C46                <1> 	cmp al, "F"
  3948 000034FD 77FB                <1> 	ja .done
  3949 000034FF 2C41                <1> 	sub al, "A"
  3950 00003501 040A                <1> 	add al, 0xA
  3951 00003503 EBD4                <1> 	jmp .donechar
  3952                              <1> 	
  3953                              <1> 	
  3954                              <1> cnvrttxt: 
  3955 00003505 31C9                <1> 	xor ecx, ecx
  3956 00003507 31C0                <1> 	xor eax, eax
  3957 00003509 31D2                <1> 	xor edx, edx
  3958 0000350B 31DB                <1> 	xor ebx, ebx
  3959 0000350D 4E                  <1> 	dec esi
  3960                              <1> cnvrtlptxt:
  3961 0000350E 46                  <1> 	inc esi
  3962 0000350F 8A06                <1> 	mov al, [esi]
  3963 00003511 3C00                <1> 	cmp al, 0
  3964 00003513 75F9                <1> 	jne cnvrtlptxt
  3965 00003515 4E                  <1> 	dec esi
  3966 00003516 8A06                <1> 	mov al, [esi]
  3967 00003518 3C2E                <1> 	cmp al, '.'
  3968 0000351A 7503                <1> 	jne nocnvrtdot
  3969 0000351C 46                  <1> 	inc esi
  3970 0000351D EBEF                <1> 	jmp cnvrtlptxt
  3971                              <1> nocnvrtdot:
  3972 0000351F 3C20                <1> 	cmp al, ' '
  3973 00003521 7404                <1> 	je zerotest
  3974 00003523 3C30                <1> 	cmp al, '0'
  3975 00003525 7504                <1> 	jne txtlp
  3976                              <1> zerotest: 
  3977 00003527 39FE                <1> 		cmp esi, edi
  3978 00003529 7458                <1> 		je donecnvrt
  3979                              <1> txtlp:	
  3980 0000352B 31C0                <1> 	xor eax, eax
  3981 0000352D 8A06                <1> 	mov al, [esi]
  3982 0000352F 3C3D                <1> 	cmp al, '='
  3983 00003531 7450                <1> 	je donecnvrt
  3984 00003533 3C30                <1> 	cmp al, 48
  3985 00003535 724C                <1> 	jb donecnvrt
  3986 00003537 3C23                <1> 	cmp al, '#'
  3987 00003539 7448                <1> 	je donecnvrt
  3988 0000353B 39FE                <1> 	cmp esi, edi
  3989 0000353D 7244                <1> 	jb donecnvrt
  3990 0000353F 81F900000000        <1> 	cmp ecx, 0
  3991 00003545 7708                <1> 	ja exp
  3992 00003547 2C30                <1> noexp:	sub al, 48
  3993 00003549 01C2                <1> 	add edx, eax
  3994 0000354B 4E                  <1> 	dec esi
  3995 0000354C 41                  <1> 	inc ecx
  3996 0000354D EBDC                <1> 	jmp txtlp
  3997 0000354F 81F900000000        <1> exp:	cmp ecx, 0
  3998 00003555 74F0                <1> 	je noexp
  3999 00003557 2C30                <1> 	sub al, 48
  4000 00003559 51                  <1> 	push ecx
  4001 0000355A 89C3                <1> expmul:	mov ebx, eax
  4002 0000355C 01D8                <1> 	add eax, ebx
  4003 0000355E 01D8                <1> 	add eax, ebx
  4004 00003560 01D8                <1> 	add eax, ebx
  4005 00003562 01D8                <1> 	add eax, ebx
  4006 00003564 01D8                <1> 	add eax, ebx
  4007 00003566 01D8                <1> 	add eax, ebx
  4008 00003568 01D8                <1> 	add eax, ebx
  4009 0000356A 01D8                <1> 	add eax, ebx
  4010 0000356C 01D8                <1> 	add eax, ebx
  4011 0000356E 81E901000000        <1> 	sub ecx, 1
  4012 00003574 81F900000000        <1> 	cmp ecx, 0
  4013 0000357A 77DE                <1> 	ja expmul
  4014 0000357C 01C2                <1> 	add edx, eax
  4015 0000357E 59                  <1> 	pop ecx
  4016 0000357F 4E                  <1> 	dec esi
  4017 00003580 41                  <1> 	inc ecx
  4018 00003581 EBA8                <1> 	jmp txtlp
  4019 00003583 89D1                <1> donecnvrt: mov ecx, edx
  4020 00003585 C3                  <1> 	ret
  4021                                      %include 'source/programs.asm'
  4022 00003586 FF2C                <1> filetypes db 255,44
  4023                              <1> progstart:		;programs start here
  4024                              <1> indexfiles:
  4025 00003588 BE[88350000]        <1> 	mov esi, progstart
  4026 0000358D BB[24910000]        <1> 	mov ebx, fileindex
  4027 00003592 BF[88350000]        <1> 	mov edi, progstart
  4028 00003597 81EF02000000        <1> 	sub edi, 2
  4029                              <1> indexloop:
  4030 0000359D 668B0E              <1> 	mov cx, [esi]
  4031                              <1> 	indexloop2:
  4032 000035A0 663B0F              <1> 		cmp cx, [edi]
  4033 000035A3 7424                <1> 		je indexloop2done
  4034 000035A5 81EF02000000        <1> 		sub edi, 2
  4035 000035AB 81FF[86350000]      <1> 		cmp edi, filetypes
  4036 000035B1 73ED                <1> 		jae indexloop2
  4037 000035B3 BF[88350000]        <1> 	mov edi, progstart
  4038 000035B8 81EF02000000        <1> 	sub edi, 2
  4039 000035BE 46                  <1> 	inc esi
  4040 000035BF 81FE[7B4C0000]      <1> 	cmp esi, batchprogend
  4041 000035C5 734E                <1> 	jae indexloopdone
  4042 000035C7 EBD4                <1> 	jmp indexloop
  4043                              <1> indexloop2done:
  4044 000035C9 66890B              <1> 	mov [ebx], cx
  4045 000035CC 81C302000000        <1> 	add ebx, 2
  4046 000035D2 81C602000000        <1> 	add esi, 2
  4047                              <1> 	nameindex:
  4048 000035D8 8A0E                <1> 		mov cl, [esi]
  4049 000035DA 80F900              <1> 		cmp cl, 0
  4050 000035DD 7406                <1> 		je nameindexdone
  4051 000035DF 880B                <1> 		mov [ebx], cl
  4052 000035E1 46                  <1> 		inc esi
  4053 000035E2 43                  <1> 		inc ebx
  4054 000035E3 EBF3                <1> 		jmp nameindex
  4055                              <1> 	nameindexdone:
  4056 000035E5 43                  <1> 		inc ebx
  4057 000035E6 66C7030000          <1> 		mov word [ebx], 0
  4058 000035EB 81C302000000        <1> 		add ebx, 2
  4059 000035F1 46                  <1> 		inc esi
  4060 000035F2 8933                <1> 		mov [ebx], esi
  4061 000035F4 81C304000000        <1> 		add ebx, 4
  4062 000035FA 66C7030000          <1> 		mov word [ebx], 0
  4063 000035FF 81C302000000        <1> 		add ebx, 2
  4064 00003605 81FB[24950000]      <1> 		cmp ebx, fileindexend
  4065 0000360B 7308                <1> 		jae indexloopdone
  4066 0000360D 81C601000000        <1> 		add esi, 1
  4067 00003613 EB88                <1> 		jmp indexloop
  4068 00003615 C605[1D360000]01    <1> indexloopdone: 	mov byte [indexdone], 1
  4069 0000361C C3                  <1> 		ret
  4070                              <1> 
  4071 0000361D 00                  <1> indexdone db 0
  4072                              <1> %include 'source/programs/_comment.asm' ;#
  4073 0000361E FF2C2300            <2> 	db 255,44,"#",0	;this lets you rem stuff
  4074 00003622 C3                  <2> 	ret 
  4075                              <1> %include 'source/programs/_math.asm' ;!
  4076 00003623 FF2C2100            <2> db 255,44,"!",0
  4077                              <2> 	num:	
  4078 00003627 E899FBFFFF          <2> 		call clearbuffer
  4079 0000362C C605[AD380000]00    <2> 		mov byte [decimal], 0
  4080 00003633 C605[AE380000]00    <2> 		mov byte [decimal2], 0
  4081 0000363A 8B35[06310000]      <2> 		mov esi, [currentcommandloc]
  4082 00003640 31C0                <2> 		xor eax, eax
  4083 00003642 31C9                <2> 		xor ecx, ecx
  4084 00003644 31DB                <2> 		xor ebx, ebx
  4085 00003646 8A06                <2> 	num2:	mov al, [esi]
  4086 00003648 3C2B                <2> 		cmp al, '+'
  4087 0000364A 741B                <2> 		je operatorfound
  4088 0000364C 3C2D                <2> 		cmp al, '-'
  4089 0000364E 7417                <2> 		je operatorfound
  4090 00003650 3C2A                <2> 		cmp al, '*'
  4091 00003652 7413                <2> 		je operatorfound
  4092 00003654 3C2F                <2> 		cmp al, '/'
  4093 00003656 740F                <2> 		je operatorfound
  4094 00003658 3C5E                <2> 		cmp al, '^'
  4095 0000365A 740B                <2> 		je operatorfound
  4096 0000365C 46                  <2> 		inc esi
  4097 0000365D 3C00                <2> 		cmp al, 0
  4098 0000365F 0F84F7F7FFFF        <2> 		je near nwcmd
  4099 00003665 EBDF                <2> 		jmp num2
  4100 00003667 50                  <2> 	operatorfound: push eax
  4101 00003668 30E4                <2> 		xor ah, ah
  4102 0000366A 8826                <2> 		mov [esi], ah
  4103 0000366C 89F7                <2> 		mov edi, esi
  4104 0000366E 46                  <2> 		inc esi
  4105 0000366F 8A06                <2> 		mov al, [esi]
  4106 00003671 3C25                <2> 		cmp al, '%'
  4107 00003673 0F8462000000        <2> 		je near resultnum1
  4108                              <2> 	varnum2: 
  4109 00003679 57                  <2> 		push edi
  4110 0000367A E8A4000000          <2> 		call checkdecimal
  4111 0000367F 5F                  <2> 		pop edi
  4112 00003680 E880FEFFFF          <2> 		call cnvrttxt
  4113                              <2> 	vrnm2:
  4114 00003685 89CB                <2> 		mov ebx, ecx
  4115 00003687 53                  <2> 		push ebx
  4116 00003688 E838FBFFFF          <2> 		call clearbuffer
  4117 0000368D 8B35[06310000]      <2> 		mov esi, [currentcommandloc]
  4118 00003693 89F7                <2> 		mov edi, esi
  4119 00003695 46                  <2> 		inc esi
  4120 00003696 8A06                <2> 		mov al, [esi]
  4121 00003698 3C25                <2> 		cmp al, '%'
  4122 0000369A 0F844F000000        <2> 		je near resultnum2
  4123                              <2> 	varnum4: 
  4124 000036A0 57                  <2> 		push edi
  4125 000036A1 E869000000          <2> 		call checkdecimal2
  4126 000036A6 5F                  <2> 		pop edi
  4127 000036A7 E859FEFFFF          <2> 		call cnvrttxt
  4128                              <2> 	vrnm4:
  4129 000036AC 5B                  <2> 		pop ebx
  4130 000036AD 58                  <2> 		pop eax
  4131 000036AE 3C2B                <2> 		cmp al, '+'
  4132 000036B0 0F849B000000        <2> 		je near plusnum
  4133 000036B6 3C2D                <2> 		cmp al, '-'
  4134 000036B8 0F849F000000        <2> 		je near subnum
  4135 000036BE 3C2A                <2> 		cmp al, '*'
  4136 000036C0 0F84A3000000        <2> 		je near mulnum
  4137 000036C6 3C2F                <2> 		cmp al, '/'
  4138 000036C8 0F84B1000000        <2> 		je near divnum
  4139 000036CE 3C5E                <2> 		cmp al, '^'
  4140 000036D0 0F84CE000000        <2> 		je near expnum
  4141 000036D6 E981F7FFFF          <2> 		jmp nwcmd
  4142                              <2> 	resultnum1:
  4143 000036DB 8A0D[AF380000]      <2> 		mov cl, [decimalresult]
  4144 000036E1 880D[AD380000]      <2> 		mov [decimal], cl
  4145 000036E7 8B0D[B0380000]      <2> 		mov ecx, [result]
  4146 000036ED EB96                <2> 		jmp vrnm2
  4147                              <2> 	resultnum2:
  4148 000036EF 8A0D[AD380000]      <2> 		mov cl, [decimal]
  4149 000036F5 880D[AE380000]      <2> 		mov [decimal2], cl
  4150 000036FB 8A0D[AF380000]      <2> 		mov cl, [decimalresult]
  4151 00003701 880D[AD380000]      <2> 		mov [decimal], cl
  4152 00003707 8B0D[B0380000]      <2> 		mov ecx, [result]
  4153 0000370D EB9D                <2> 		jmp vrnm4
  4154                              <2> 	checkdecimal2:
  4155 0000370F 8A25[AD380000]      <2> 		mov ah, [decimal]
  4156 00003715 8825[AE380000]      <2> 		mov [decimal2], ah
  4157 0000371B 30E4                <2> 		xor ah, ah
  4158 0000371D 8825[AD380000]      <2> 		mov [decimal], ah
  4159                              <2> 	checkdecimal:
  4160 00003723 89F7                <2> 		mov edi, esi
  4161                              <2> 	chkdec1:
  4162 00003725 8A07                <2> 		mov al, [edi]
  4163 00003727 3C2E                <2> 		cmp al, '.'
  4164 00003729 0F840B000000        <2> 		je near fnddec
  4165 0000372F 3C00                <2> 		cmp al, 0
  4166 00003731 0F8419000000        <2> 		je near nodecimal
  4167 00003737 47                  <2> 		inc edi
  4168 00003738 EBEB                <2> 		jmp chkdec1
  4169                              <2> 	fnddec:
  4170 0000373A 8A4701              <2> 		mov al, [edi + 1]
  4171 0000373D 8807                <2> 		mov [edi], al
  4172 0000373F 3C00                <2> 		cmp al, 0
  4173 00003741 0F8409000000        <2> 		je near nodecimal
  4174 00003747 FE05[AD380000]      <2> 		inc byte [decimal]
  4175 0000374D 47                  <2> 		inc edi
  4176 0000374E EBEA                <2> 		jmp fnddec
  4177                              <2> 	nodecimal:
  4178 00003750 C3                  <2> 		ret
  4179                              <2> 	plusnum:
  4180 00003751 E815010000          <2> 		call decaddfix
  4181 00003756 01D9                <2> 		add ecx, ebx
  4182 00003758 E98A000000          <2> 		jmp retnum
  4183                              <2> 	subnum:
  4184 0000375D E809010000          <2> 		call decaddfix
  4185 00003762 29D9                <2> 		sub ecx, ebx
  4186 00003764 E97E000000          <2> 		jmp retnum
  4187                              <2> 	mulnum:
  4188 00003769 A0[AE380000]        <2> 		mov al, [decimal2]
  4189 0000376E 0005[AD380000]      <2> 		add [decimal], al
  4190 00003774 89C8                <2> 		mov eax, ecx
  4191 00003776 F7E3                <2> 		mul ebx
  4192 00003778 89C1                <2> 		mov ecx, eax
  4193 0000377A E968000000          <2> 		jmp retnum
  4194                              <2> 	divnum:
  4195 0000377F E8E7000000          <2> 		call decaddfix
  4196 00003784 30C0                <2> 		xor al, al
  4197 00003786 A2[AD380000]        <2> 		mov [decimal], al
  4198 0000378B 31D2                <2> 		xor edx, edx
  4199 0000378D 89C8                <2> 		mov eax, ecx
  4200 0000378F 81FB00000000        <2> 		cmp ebx, 0
  4201 00003795 0F844C000000        <2> 		je near retnum
  4202 0000379B F7F3                <2> 		div ebx
  4203 0000379D 89C1                <2> 		mov ecx, eax
  4204 0000379F E943000000          <2> 		jmp retnum
  4205                              <2> 	expnum:
  4206 000037A4 8A15[AD380000]      <2> 		mov dl, [decimal]
  4207 000037AA 8815[AE380000]      <2> 		mov [decimal2], dl
  4208 000037B0 31D2                <2> 		xor edx, edx
  4209 000037B2 89C8                <2> 		mov eax, ecx
  4210 000037B4 89D9                <2> 		mov ecx, ebx
  4211 000037B6 89C3                <2> 		mov ebx, eax
  4212 000037B8 81F900000000        <2> 		cmp ecx, 0
  4213 000037BE 7422                <2> 		je noexpnum
  4214 000037C0 49                  <2> 		dec ecx
  4215 000037C1 81F900000000        <2> 		cmp ecx, 0
  4216 000037C7 7412                <2> 		je noexpnumlp
  4217 000037C9 F7E3                <2> 	expnumlp: mul ebx
  4218 000037CB 8A15[AE380000]      <2> 		mov dl, [decimal2]
  4219 000037D1 0015[AD380000]      <2> 		add [decimal], dl
  4220 000037D7 31D2                <2> 		xor edx, edx
  4221 000037D9 E2EE                <2> 		loop expnumlp
  4222                              <2> 	noexpnumlp:
  4223 000037DB 89C1                <2> 		mov ecx, eax
  4224 000037DD E905000000          <2> 		jmp retnum
  4225                              <2> 	noexpnum:
  4226 000037E2 B901000000          <2> 		mov ecx, 1
  4227                              <2> 	retnum: 
  4228 000037E7 BE[B6AD0000]        <2> 		mov esi, numbuf
  4229 000037EC 890D[B0380000]      <2> 		mov [result], ecx
  4230 000037F2 E8E3F9FFFF          <2> 		call convert
  4231 000037F7 BE[B6AD0000]        <2> 		mov esi, numbuf
  4232 000037FC 8A25[AD380000]      <2> 		mov ah, [decimal]
  4233 00003802 8825[AF380000]      <2> 		mov [decimalresult], ah
  4234 00003808 80FC00              <2> 		cmp ah, 0
  4235 0000380B 0F8425000000        <2> 		je near noputdecimal
  4236                              <2> 	putdecimal:
  4237 00003811 4E                  <2> 		dec esi
  4238 00003812 FECC                <2> 		dec ah
  4239 00003814 80FC00              <2> 		cmp ah, 0
  4240 00003817 0F87F4FFFFFF        <2> 		ja near putdecimal
  4241 0000381D 4E                  <2> 		dec esi
  4242 0000381E 8A06                <2> 		mov al, [esi]
  4243 00003820 C6062E              <2> 		mov byte [esi], '.'
  4244                              <2> 	decputloop:
  4245 00003823 4E                  <2> 		dec esi
  4246 00003824 8A26                <2> 		mov ah, [esi]
  4247 00003826 8806                <2> 		mov [esi], al
  4248 00003828 88E0                <2> 		mov al, ah
  4249 0000382A 81FE[A2AD0000]      <2> 		cmp esi, buf2
  4250 00003830 0F87EDFFFFFF        <2> 		ja near decputloop
  4251                              <2> 	noputdecimal:
  4252 00003836 BE[A2AD0000]        <2> 		mov esi, buf2
  4253 0000383B E809000000          <2> 		call chkadd
  4254 00003840 E917F6FFFF          <2> 		jmp nwcmd
  4255 00003845 00000000            <2> edxnumbuf dw 0,0
  4256 00003849 8A06                <2> 	chkadd: mov al, [esi]
  4257 0000384B 3C30                <2> 		cmp al, '0'
  4258 0000384D 750C                <2> 		jne dnadd
  4259 0000384F 46                  <2> 		inc esi
  4260 00003850 81FE[B6AD0000]      <2> 		cmp esi, numbuf
  4261 00003856 7402                <2> 		je dnaddm1
  4262 00003858 EBEF                <2> 		jmp chkadd
  4263 0000385A 4E                  <2> 	dnaddm1: dec esi
  4264 0000385B E8EAEAFFFF          <2> 	dnadd:	call print
  4265 00003860 BE[76790000]        <2> 		mov esi, line
  4266 00003865 E8E0EAFFFF          <2> 		call print
  4267 0000386A C3                  <2> 		ret
  4268                              <2> 		
  4269                              <2> 	decaddfix:
  4270 0000386B A0[AE380000]        <2> 		mov al, [decimal2]
  4271 00003870 8A25[AD380000]      <2> 		mov ah, [decimal]
  4272 00003876 38E0                <2> 		cmp al, ah
  4273 00003878 7432                <2> 		je gooddecadd
  4274 0000387A 38E0                <2> 		cmp al, ah
  4275 0000387C 721A                <2> 		jb lowdecadd
  4276                              <2> 	highdecadd:
  4277 0000387E FEC4                <2> 		inc ah
  4278 00003880 89CA                <2> 		mov edx, ecx
  4279 00003882 C1E103              <2> 		shl ecx, 3
  4280 00003885 01D1                <2> 		add ecx, edx
  4281 00003887 01D1                <2> 		add ecx, edx
  4282 00003889 38E0                <2> 		cmp al, ah
  4283 0000388B 77F1                <2> 		ja highdecadd
  4284 0000388D 8825[AD380000]      <2> 		mov [decimal], ah
  4285 00003893 E914000000          <2> 		jmp gooddecadd
  4286                              <2> 	lowdecadd:
  4287 00003898 FEC0                <2> 		inc al
  4288 0000389A 89DA                <2> 		mov edx, ebx
  4289 0000389C C1E303              <2> 		shl ebx, 3
  4290 0000389F 01D3                <2> 		add ebx, edx
  4291 000038A1 01D3                <2> 		add ebx, edx
  4292 000038A3 38E0                <2> 		cmp al, ah
  4293 000038A5 72F1                <2> 		jb lowdecadd
  4294 000038A7 A2[AD380000]        <2> 		mov [decimal], al
  4295                              <2> 	gooddecadd:
  4296 000038AC C3                  <2> 		ret
  4297                              <2> 		
  4298 000038AD 00                  <2> decimal db 0
  4299 000038AE 00                  <2> decimal2 db 0
  4300 000038AF 00                  <2> decimalresult db 0
  4301 000038B0 00000000            <2> result dd 0
  4302                              <1> %include 'source/programs/_variables.asm' ;% and $
  4303 000038B4 FF2C2500            <2> db 255,44,"%",0
  4304                              <2> 	ans:
  4305 000038B8 BE[A2AD0000]        <2> 		mov esi, buf2
  4306 000038BD E887FFFFFF          <2> 		call chkadd
  4307 000038C2 C3                  <2> 		ret
  4308                              <2> 		
  4309 000038C3 FF2C2400            <2> db 255,44,"$",0
  4310 000038C7 8B35[06310000]      <2> var: mov esi, [currentcommandloc]
  4311 000038CD BB[98950000]        <2> 	mov ebx, variables
  4312 000038D2 8A06                <2> lkeq:	mov al, [esi]
  4313 000038D4 3C3D                <2> 	cmp al, '='
  4314 000038D6 741B                <2> 	je eqfnd	;is there an '=' sign?
  4315 000038D8 3C00                <2> 	cmp al, 0
  4316 000038DA 7403                <2> 	je echovars
  4317 000038DC 46                  <2> 	inc esi
  4318 000038DD EBF3                <2> 	jmp lkeq
  4319 000038DF BE[98950000]        <2> echovars: mov esi, variables
  4320 000038E4 BB[98A50000]        <2> 	mov ebx, varend
  4321 000038E9 B105                <2> 	mov cl, 5
  4322 000038EB B504                <2> 	mov ch, 4
  4323 000038ED E872F8FFFF          <2> 	call array
  4324 000038F2 C3                  <2> 	ret
  4325 000038F3 46                  <2> eqfnd:	inc esi
  4326 000038F4 8A06                <2> 	mov al, [esi]
  4327 000038F6 3C00                <2> 	cmp al, 0
  4328 000038F8 7410                <2> 	je readvar
  4329 000038FA 8B35[06310000]      <2> 	mov esi, [currentcommandloc]
  4330 00003900 BB[98950000]        <2> 	mov ebx, variables
  4331 00003905 E919000000          <2> 	jmp seek
  4332                              <2> readvar:
  4333 0000390A B00A                <2> 	mov al, 10
  4334 0000390C 66BB0700            <2> 	mov bx, 7
  4335 00003910 C605[B3270000]00    <2> 	mov byte [commandedit], 0
  4336 00003917 BF[A2AD0000]        <2> 	mov edi, buftxtend
  4337 0000391C E831EBFFFF          <2> 	call rdprint
  4338 00003921 EBA4                <2> 	jmp var
  4339 00003923 668B03              <2> seek:	mov ax, [ebx]
  4340 00003926 B105                <2> 	mov cl, 5
  4341 00003928 B504                <2> 	mov ch, 4
  4342 0000392A 663D0000            <2> 	cmp ax, 0
  4343 0000392E 0F845B000000        <2> 	je near save
  4344 00003934 6639C8              <2> 	cmp ax, cx
  4345 00003937 7403                <2> 	je skfnd
  4346 00003939 43                  <2> 	inc ebx
  4347 0000393A EBE7                <2> 	jmp seek
  4348 0000393C 8B35[06310000]      <2> skfnd:	mov esi, [currentcommandloc]
  4349 00003942 46                  <2> 	inc esi
  4350 00003943 81C302000000        <2> 	add ebx, 2
  4351 00003949 89DF                <2> 	mov edi, ebx
  4352 0000394B B13D                <2> 	mov cl, '='
  4353 0000394D E8F3F7FFFF          <2> 	call cndtest
  4354 00003952 3C01                <2> 	cmp al, 1	
  4355 00003954 7418                <2> 	je varfnd
  4356 00003956 89FB                <2> 	mov ebx, edi
  4357 00003958 8B35[06310000]      <2> 	mov esi, [currentcommandloc]
  4358 0000395E 668B03              <2> 	mov ax, [ebx]
  4359 00003961 663D0000            <2> 	cmp ax, 0
  4360 00003965 0F8424000000        <2> 	je near save
  4361 0000396B 43                  <2> 	inc ebx
  4362 0000396C EBB5                <2> 	jmp seek
  4363 0000396E 8A03                <2> varfnd:	mov al, [ebx]
  4364 00003970 3C04                <2> 	cmp al, 4
  4365 00003972 7404                <2> 	je save2
  4366 00003974 4B                  <2> 	dec ebx
  4367 00003975 4E                  <2> 	dec esi
  4368 00003976 EBF6                <2> 	jmp varfnd
  4369 00003978 4B                  <2> save2:	dec ebx
  4370 00003979 4E                  <2> 	dec esi
  4371 0000397A 8A03                <2> 	mov al, [ebx]
  4372 0000397C 3C05                <2> 	cmp al, 5
  4373 0000397E 7402                <2> 	je remove
  4374 00003980 EBEC                <2> 	jmp varfnd
  4375 00003982 8A03                <2> remove: mov al, [ebx]
  4376 00003984 3C00                <2> 	cmp al, 0
  4377 00003986 749B                <2> 	je seek
  4378 00003988 30C0                <2> 	xor al, al
  4379 0000398A 8803                <2> 	mov [ebx], al
  4380 0000398C 43                  <2> 	inc ebx
  4381 0000398D EBF3                <2> 	jmp remove	;do not need for now-need defragmentation
  4382 0000398F 8B35[06310000]      <2> save:	mov esi, [currentcommandloc]
  4383 00003995 43                  <2> 	inc ebx
  4384 00003996 B005                <2> 	mov al, 5
  4385 00003998 B404                <2> 	mov ah, 4
  4386 0000399A 668903              <2> 	mov [ebx], ax
  4387 0000399D 43                  <2> 	inc ebx
  4388 0000399E 43                  <2> svhere:	inc ebx
  4389 0000399F 46                  <2> 	inc esi
  4390 000039A0 8A06                <2> 	mov al, [esi]
  4391 000039A2 3C00                <2> 	cmp al, 0
  4392 000039A4 0F844A000000        <2> 	je near svdone
  4393 000039AA 3C25                <2> 	cmp al, '%'
  4394 000039AC 7404                <2> 	je ans2
  4395 000039AE 8803                <2> 	mov [ebx], al	
  4396 000039B0 EBEC                <2> 	jmp svhere
  4397 000039B2 56                  <2> ans2:	push esi
  4398 000039B3 BE[A2AD0000]        <2> 	mov esi, buf2
  4399 000039B8 E823000000          <2> 	call ansfnd
  4400 000039BD E803000000          <2> 	call anscp
  4401 000039C2 5E                  <2> 	pop esi
  4402 000039C3 EBD9                <2> 	jmp svhere
  4403 000039C5 8A06                <2> anscp:	mov al, [esi]
  4404 000039C7 8803                <2> 	mov [ebx], al
  4405 000039C9 81FE[B6AD0000]      <2> 	cmp esi, numbuf
  4406 000039CF 74CD                <2> 	je svhere
  4407 000039D1 3C00                <2> 	cmp al, 0
  4408 000039D3 74C9                <2> 	je svhere
  4409 000039D5 43                  <2> 	inc ebx
  4410 000039D6 46                  <2> 	inc esi
  4411 000039D7 EBEC                <2> 	jmp anscp
  4412 000039D9 5E                  <2> ansnf:	pop esi
  4413 000039DA 8A06                <2> 	mov al, [esi]
  4414 000039DC 8803                <2> 	mov [ebx], al
  4415 000039DE EBBE                <2> 	jmp svhere
  4416 000039E0 46                  <2> ansfnd:	inc esi
  4417 000039E1 81FE[B5AD0000]      <2> 	cmp esi, numbuf - 1
  4418 000039E7 740A                <2> 	je fndans
  4419 000039E9 8A06                <2> 	mov al, [esi]
  4420 000039EB 3C00                <2> 	cmp al, 0
  4421 000039ED 74EA                <2> 	je ansnf
  4422 000039EF 3C30                <2> 	cmp al, '0'
  4423 000039F1 74ED                <2> 	je ansfnd
  4424                              <2> fndans:
  4425 000039F3 C3                  <2> 	ret
  4426 000039F4 30C0                <2> svdone:	xor al, al
  4427 000039F6 8803                <2> 	mov [ebx], al
  4428 000039F8 C3                  <2> 	ret
  4429                              <1> %include 'source/programs/_run.asm' ;./
  4430                              <2> 
  4431 000039F9 7F454C46            <2> 	elfstart db 0x7F,"ELF"
  4432 000039FD FF2C2E2F00          <2> 	db 255,44,"./",0
  4433                              <2> rundiskprog:
  4434 00003A02 8B3D[06310000]      <2> 	mov edi, [currentcommandloc]
  4435 00003A08 81C702000000        <2> 	add edi, 2
  4436 00003A0E BE00004000          <2> 	mov esi, 0x400000
  4437 00003A13 E817380000          <2> 	call loadfile
  4438 00003A18 81FA94010000        <2> 	cmp edx, 404
  4439 00003A1E 7452                <2> 	je noprogfound
  4440 00003A20 BB00004000          <2> 	mov ebx, 0x400000
  4441 00003A25 A1[F9390000]        <2> 	mov eax, [elfstart]
  4442 00003A2A 3903                <2> 	cmp [ebx], eax
  4443 00003A2C 0F842B000000        <2> 	je near runelf
  4444 00003A32 66813B4558          <2> 	cmp word [ebx], "EX"
  4445 00003A37 755F                <2> 	jne progbatchfound
  4446 00003A39 81C302000000        <2> 	add ebx, 2
  4447 00003A3F 8B3D[06310000]      <2> 	mov edi, [currentcommandloc]
  4448 00003A45 81C702000000        <2> 	add edi, 2
  4449                              <2> findspaceprog:
  4450 00003A4B 8A07                <2> 	mov al, [edi]
  4451 00003A4D 47                  <2> 	inc edi
  4452 00003A4E 3C20                <2> 	cmp al, " "
  4453 00003A50 75F9                <2> 	jne findspaceprog
  4454                              <2> findnonspaceprog:
  4455 00003A52 8A07                <2> 	mov al, [edi]
  4456 00003A54 47                  <2> 	inc edi
  4457 00003A55 3C20                <2> 	cmp al, " "
  4458 00003A57 74F9                <2> 	je findnonspaceprog
  4459 00003A59 4F                  <2> 	dec edi
  4460 00003A5A FFD3                <2> 	call ebx
  4461 00003A5C C3                  <2> 	ret
  4462                              <2> runelf:
  4463 00003A5D 8B3D[06310000]      <2> 	mov edi, [currentcommandloc]
  4464 00003A63 81C702000000        <2> 	add edi, 2
  4465 00003A69 81C380000000        <2> 	add ebx, 0x80
  4466 00003A6F FFD3                <2> 	call ebx
  4467 00003A71 C3                  <2> 	ret
  4468                              <2> noprogfound:
  4469 00003A72 BE[38790000]        <2> 	mov esi, notfound1
  4470 00003A77 E8CEE8FFFF          <2> 	call print
  4471 00003A7C 8B35[06310000]      <2> 	mov esi, [currentcommandloc]
  4472 00003A82 81C602000000        <2> 	add esi, 2
  4473 00003A88 E8BDE8FFFF          <2> 	call print
  4474 00003A8D BE[42790000]        <2> 	mov esi, notfound2
  4475 00003A92 E8B3E8FFFF          <2> 	call print
  4476 00003A97 C3                  <2> 	ret
  4477                              <2> progbatchfound:
  4478 00003A98 BF00004000          <2> 		mov edi, 0x400000
  4479 00003A9D C605[92950000]01    <2> 		mov byte [BATCHISON], 1
  4480                              <2> 	batchrunloop:
  4481 00003AA4 E890F3FFFF          <2> 		call buftxtclear
  4482 00003AA9 BE[A2A90000]        <2> 		mov esi, buftxt
  4483 00003AAE 8935[06310000]      <2> 		mov [currentcommandloc], esi
  4484                              <2> 	batchrunloop2:
  4485 00003AB4 B10A                <2> 		mov cl, 10
  4486 00003AB6 B50D                <2> 		mov ch, 13
  4487 00003AB8 380F                <2> 		cmp [edi], cl
  4488 00003ABA 0F8419000000        <2> 		je near nxtbatchrunline
  4489 00003AC0 382F                <2> 		cmp [edi], ch
  4490 00003AC2 0F8411000000        <2> 		je near nxtbatchrunline
  4491 00003AC8 803F00              <2> 		cmp byte [edi], 0
  4492 00003ACB 0F8408000000        <2> 		je near nxtbatchrunline
  4493 00003AD1 8A07                <2> 		mov al, [edi]
  4494 00003AD3 8806                <2> 		mov [esi], al
  4495 00003AD5 46                  <2> 		inc esi
  4496 00003AD6 47                  <2> 		inc edi
  4497 00003AD7 EBDB                <2> 		jmp batchrunloop2
  4498                              <2> 	nxtbatchrunline:
  4499 00003AD9 47                  <2> 		inc edi
  4500 00003ADA 380F                <2> 		cmp [edi], cl
  4501 00003ADC 74FB                <2> 		je nxtbatchrunline
  4502 00003ADE 382F                <2> 		cmp [edi], ch
  4503 00003AE0 74F7                <2> 		je nxtbatchrunline
  4504 00003AE2 893D[403B0000]      <2> 		mov [batchedi], edi
  4505 00003AE8 893D[8E950000]      <2> 		mov [BATCHPOS], edi
  4506 00003AEE C60600              <2> 		mov byte [esi], 0
  4507 00003AF1 BE[A2A90000]        <2> 		mov esi, buftxt
  4508 00003AF6 803E00              <2> 		cmp byte [esi], 0
  4509 00003AF9 0F8439000000        <2> 		je near nobatchfoundrun
  4510 00003AFF 31DB                <2> 		xor ebx, ebx
  4511 00003B01 8A1D[29950000]      <2> 		mov bl, [IFON]
  4512 00003B07 80FB00              <2> 		cmp bl, 0
  4513 00003B0A 0F8534000000        <2> 		jne near iftestbatch
  4514                              <2> 	doneiftest:
  4515 00003B10 803D[163C0000]00    <2> 		cmp byte [runnextline], 0
  4516 00003B17 0F8405000000        <2> 		je near noruniftest
  4517 00003B1D E806F5FFFF          <2> 		call run
  4518                              <2> 	noruniftest:
  4519 00003B22 C605[163C0000]01    <2> 		mov byte [runnextline], 1
  4520 00003B29 8B3D[403B0000]      <2> 		mov edi, [batchedi]
  4521 00003B2F 803F00              <2> 		cmp byte [edi], 0
  4522 00003B32 0F856CFFFFFF        <2> 		jne near batchrunloop
  4523                              <2> 	nobatchfoundrun:
  4524 00003B38 C605[92950000]00    <2> 		mov byte [BATCHISON], 0
  4525 00003B3F C3                  <2> 		ret
  4526                              <2> 	
  4527 00003B40 00000000            <2> batchedi dd 0	
  4528                              <2> 	
  4529                              <2> 	iftestbatch:
  4530 00003B44 BE[2A950000]        <2> 		mov esi, IFTRUE
  4531 00003B49 01DE                <2> 		add esi, ebx
  4532 00003B4B 803E00              <2> 		cmp byte [esi], 0
  4533 00003B4E 0F85BCFFFFFF        <2> 		jne near doneiftest
  4534 00003B54 881D[173C0000]      <2> 		mov [iffalsebuf], bl
  4535 00003B5A 803D[93950000]01    <2> 		cmp byte [LOOPON], 1
  4536 00003B61 0F8513000000        <2> 		jne near fifindbatch
  4537 00003B67 E938FFFFFF          <2> 		jmp batchrunloop
  4538                              <2> 	elsetestbatch:
  4539 00003B6C C60601              <2> 		mov byte [esi], 1
  4540 00003B6F 81C705000000        <2> 		add edi, 5
  4541 00003B75 E92AFFFFFF          <2> 		jmp batchrunloop
  4542                              <2> 	fifindbatch:
  4543 00003B7A 66B96966            <2> 		mov cx, "if"
  4544 00003B7E 66B86669            <2> 		mov ax, "fi"
  4545 00003B82 663907              <2> 		cmp [edi], ax
  4546 00003B85 0F8424000000        <2> 		je near fifoundbatch
  4547 00003B8B 66390F              <2> 		cmp [edi], cx
  4548 00003B8E 0F8465000000        <2> 		je near iffoundbatch
  4549 00003B94 803F00              <2> 		cmp byte [edi], 0
  4550 00003B97 0F8412000000        <2> 		je near fifoundbatch
  4551 00003B9D B8656C7365          <2> 		mov eax, "else"
  4552 00003BA2 3907                <2> 		cmp [edi], eax
  4553 00003BA4 0F84C2FFFFFF        <2> 		je near elsetestbatch
  4554 00003BAA E973FFFFFF          <2> 		jmp noruniftest
  4555                              <2> 	fifoundbatch:
  4556 00003BAF 81C702000000        <2> 		add edi, 2
  4557 00003BB5 B00A                <2> 		mov al, 10
  4558 00003BB7 3807                <2> 		cmp [edi], al
  4559 00003BB9 0F840B000000        <2> 		je near goodfibatch
  4560 00003BBF 803F00              <2> 		cmp byte [edi], 0
  4561 00003BC2 0F8470FFFFFF        <2> 		je near nobatchfoundrun
  4562 00003BC8 EBB0                <2> 		jmp fifindbatch
  4563                              <2> 	goodfibatch:
  4564 00003BCA B001                <2> 		mov al, 1
  4565 00003BCC 2805[29950000]      <2> 		sub [IFON], al 
  4566 00003BD2 A0[29950000]        <2> 		mov al, [IFON]
  4567 00003BD7 8A1D[173C0000]      <2> 		mov bl, [iffalsebuf]
  4568 00003BDD 38D8                <2> 		cmp al, bl
  4569 00003BDF 7799                <2> 		ja fifindbatch
  4570 00003BE1 8B35[06310000]      <2> 		mov esi, [currentcommandloc]
  4571 00003BE7 81EF02000000        <2> 		sub edi, 2
  4572 00003BED C605[163C0000]00    <2> 		mov byte [runnextline], 0
  4573 00003BF4 E9ABFEFFFF          <2> 		jmp batchrunloop
  4574                              <2> 	iffoundbatch:
  4575 00003BF9 B020                <2> 		mov al, ' '
  4576 00003BFB 81C702000000        <2> 		add edi, 2
  4577 00003C01 3807                <2> 		cmp [edi], al
  4578 00003C03 0F8571FFFFFF        <2> 		jne near fifindbatch
  4579 00003C09 B001                <2> 		mov al, 1
  4580 00003C0B 0005[29950000]      <2> 		add [IFON], al
  4581 00003C11 E964FFFFFF          <2> 		jmp fifindbatch
  4582                              <2> 		
  4583                              <2> 		
  4584 00003C16 01                  <2> runnextline db 1
  4585 00003C17 00                  <2> iffalsebuf db 0
  4586                              <2> 
  4587 00003C18 C3                  <2> notbatch: ret 
  4588                              <1> 
  4589                              <1> %include 'source/programs/arp.asm'
  4590 00003C19 FF2C61727000        <2> db 255,44,"arp",0	;if only this worked
  4591 00003C1F E899320000          <2> 	call arptest
  4592 00003C24 C3                  <2> 	ret
  4593                              <2> 	
  4594                              <1> %include 'source/programs/batch.asm'
  4595 00003C25 FF2C626174636800    <2> db 255,44,"batch",0
  4596                              <2> 	batchst: 
  4597 00003C2D 8B3D[06310000]      <2> 		mov edi, [currentcommandloc]
  4598 00003C33 81C706000000        <2> 		add edi, 6
  4599 00003C39 803F00              <2> 		cmp byte [edi], 0
  4600 00003C3C 0F846D000000        <2> 		je near nonamefound
  4601 00003C42 BE00004000          <2> 		mov esi, 0x400000
  4602 00003C47 E8E3350000          <2> 		call loadfile
  4603 00003C4C 89D0                <2> 		mov eax, edx
  4604 00003C4E 3D94010000          <2> 		cmp eax, 404
  4605 00003C53 7465                <2> 		je goodbatchname
  4606 00003C55 BE[603C0000]        <2> 		mov esi, badbatchname
  4607 00003C5A E8EBE6FFFF          <2> 		call print
  4608 00003C5F C3                  <2> 		ret
  4609 00003C60 546869732066696C65- <2> 		badbatchname db "This file already exists!",10,0
  4610 00003C69 20616C726561647920- <2>
  4611 00003C72 657869737473210A00  <2>
  4612 00003C7B 596F75206861766520- <2> 		namenotfoundbatch db "You have to type a name after the command.",10,0
  4613 00003C84 746F20747970652061- <2>
  4614 00003C8D 206E616D6520616674- <2>
  4615 00003C96 65722074686520636F- <2>
  4616 00003C9F 6D6D616E642E0A00    <2>
  4617 00003CA7 00000000            <2> 		esicache3 dd 0
  4618 00003CAB 00000000            <2> 		esicache2 dd 0
  4619                              <2> 	nonamefound:
  4620 00003CAF BE[7B3C0000]        <2> 		mov esi, namenotfoundbatch
  4621 00003CB4 E891E6FFFF          <2> 		call print
  4622 00003CB9 C3                  <2> 		ret
  4623                              <2> 	goodbatchname:
  4624 00003CBA BE00004000          <2> 		mov esi, 0x400000
  4625                              <2> 	batchcreate:
  4626 00003CBF 8935[A73C0000]      <2> 		mov [esicache3], esi
  4627 00003CC5 BF00008000          <2> 		mov edi, 0x800000
  4628 00003CCA B00A                <2> 		mov al, 10
  4629 00003CCC B307                <2> 		mov bl, 7
  4630 00003CCE B404                <2> 		mov ah, 4
  4631 00003CD0 CD30                <2> 		int 30h
  4632 00003CD2 8935[AB3C0000]      <2> 		mov [esicache2], esi
  4633 00003CD8 8A0E                <2> 		mov cl, [esi]
  4634 00003CDA 8B35[A73C0000]      <2> 		mov esi, [esicache3]
  4635 00003CE0 BB[143D0000]        <2> 		mov ebx, exitword
  4636 00003CE5 E85BF4FFFF          <2> 		call cndtest
  4637 00003CEA 3C01                <2> 		cmp al, 1
  4638 00003CEC 7411                <2> 		je endbatchcreate
  4639 00003CEE 3C02                <2> 		cmp al, 2
  4640 00003CF0 740D                <2> 		je endbatchcreate
  4641 00003CF2 8B35[AB3C0000]      <2> 		mov esi, [esicache2]
  4642 00003CF8 B00A                <2> 		mov al, 10
  4643 00003CFA 8806                <2> 		mov [esi], al
  4644 00003CFC 46                  <2> 		inc esi
  4645 00003CFD EBC0                <2> 		jmp batchcreate
  4646                              <2> 	endbatchcreate:
  4647 00003CFF 8B35[A73C0000]      <2> 		mov esi, [esicache3]
  4648 00003D05 31C0                <2> 		xor eax, eax
  4649 00003D07 8806                <2> 		mov [esi], al
  4650 00003D09 BE00004000          <2> 		mov esi, 0x400000
  4651 00003D0E E837E6FFFF          <2> 		call print
  4652 00003D13 C3                  <2> 		ret
  4653                              <2> 	
  4654 00003D14 5C7800              <2> 	exitword db "\x",0
  4655 00003D17 54797065205C782074- <2> 	wordmsg db "Type \x to exit.",10,0
  4656 00003D20 6F20657869742E0A00  <2>
  4657                              <1> %include 'source/programs/beep.asm'
  4658 00003D29 FF2C6265657000      <2> 	db 255,44,"beep",0
  4659 00003D30 B8[553D0000]        <2> 	mov eax, beepstart
  4660 00003D35 A3[A5060000]        <2> 	mov [soundpos], eax
  4661 00003D3A B8[593D0000]        <2> 	mov eax, beepend
  4662 00003D3F A3[A9060000]        <2> 	mov [soundendpos], eax
  4663 00003D44 C605[A2060000]01    <2> 	mov byte [soundon], 1
  4664                              <2> waitforsoundendbeep:
  4665 00003D4B A0[A2060000]        <2> 	mov al, [soundon]
  4666 00003D50 3C00                <2> 	cmp al, 0
  4667 00003D52 75F7                <2> 	jne waitforsoundendbeep
  4668 00003D54 C3                  <2> 	ret
  4669                              <2> 	
  4670                              <2> beepstart:
  4671 00003D55 3200D111            <2> 	dw 50, 4561
  4672                              <2> beepend:
  4673                              <1> %include 'source/programs/charmap.asm'
  4674 00003D59 FF2C636861727300    <2> db 255,44,"chars",0
  4675 00003D61 66BB0700            <2> 	mov bx, 7
  4676 00003D65 B020                <2> 	mov al, " "
  4677 00003D67 E8C2EAFFFF          <2> 	call prcharq
  4678 00003D6C E8BDEAFFFF          <2> 	call prcharq
  4679 00003D71 E8B8EAFFFF          <2> 	call prcharq
  4680 00003D76 E8B3EAFFFF          <2> 	call prcharq
  4681 00003D7B B030                <2> 	mov al, "0"
  4682                              <2> charmapnumprnt:
  4683 00003D7D E8ACEAFFFF          <2> 	call prcharq
  4684 00003D82 FEC0                <2> 	inc al
  4685 00003D84 6650                <2> 	push ax
  4686 00003D86 B020                <2> 	mov al, " "
  4687 00003D88 E8A1EAFFFF          <2> 	call prcharq
  4688 00003D8D 6658                <2> 	pop ax
  4689 00003D8F 3C39                <2> 	cmp al, "9"
  4690 00003D91 76EA                <2> 	jbe charmapnumprnt
  4691 00003D93 B041                <2> 	mov al, "A"
  4692                              <2> charmapnumprnt2:
  4693 00003D95 E894EAFFFF          <2> 	call prcharq
  4694 00003D9A FEC0                <2> 	inc al
  4695 00003D9C 6650                <2> 	push ax
  4696 00003D9E B020                <2> 	mov al, " "
  4697 00003DA0 E889EAFFFF          <2> 	call prcharq
  4698 00003DA5 6658                <2> 	pop ax
  4699 00003DA7 3C47                <2> 	cmp al, "G"
  4700 00003DA9 72EA                <2> 	jb charmapnumprnt2
  4701                              <2> 	
  4702 00003DAB BE[76790000]        <2> 	mov esi, line
  4703 00003DB0 E883E5FFFF          <2> 	call printquiet
  4704 00003DB5 6631C0              <2> 	xor ax, ax
  4705 00003DB8 88C1                <2> 	mov cl, al
  4706 00003DBA E899F5FFFF          <2> 	call showhexsmall
  4707 00003DBF E955000000          <2> 	jmp charmapnocopy ;the first char is 0 which is unprintable
  4708                              <2> charmapcopy:
  4709 00003DC4 FEC0                <2> 	inc al
  4710 00003DC6 6650                <2> 	push ax
  4711 00003DC8 3C08                <2> 	cmp al, 8
  4712 00003DCA 744D                <2> 	je charmapnocopy
  4713 00003DCC 3C09                <2> 	cmp al, 9
  4714 00003DCE 7449                <2> 	je charmapnocopy
  4715 00003DD0 3C0A                <2> 	cmp al, 10
  4716 00003DD2 7445                <2> 	je charmapnocopy
  4717 00003DD4 3C0D                <2> 	cmp al, 13
  4718 00003DD6 7441                <2> 	je charmapnocopy
  4719 00003DD8 3CFF                <2> 	cmp al, 255
  4720 00003DDA 743D                <2> 	je charmapnocopy
  4721 00003DDC 3C00                <2> 	cmp al, 0
  4722 00003DDE 7434                <2> 	je nomorecharmap
  4723 00003DE0 E849EAFFFF          <2> 	call prcharq
  4724 00003DE5 B020                <2> 	mov al, " "
  4725 00003DE7 E842EAFFFF          <2> 	call prcharq
  4726 00003DEC 6658                <2> 	pop ax
  4727                              <2> charmapcopycheck:
  4728 00003DEE FEC4                <2> 	inc ah
  4729 00003DF0 80FC10              <2> 	cmp ah, 16
  4730 00003DF3 72CF                <2> 	jb charmapcopy
  4731 00003DF5 6650                <2> 	push ax
  4732 00003DF7 BE[76790000]        <2> 	mov esi, line
  4733 00003DFC E837E5FFFF          <2> 	call printquiet
  4734 00003E01 6658                <2> 	pop ax
  4735 00003E03 3CFF                <2> 	cmp al, 255
  4736 00003E05 740D                <2> 	je nomorecharmap
  4737 00003E07 88C1                <2> 	mov cl, al
  4738 00003E09 FEC1                <2> 	inc cl
  4739 00003E0B E848F5FFFF          <2> 	call showhexsmall
  4740 00003E10 30E4                <2> 	xor ah, ah
  4741 00003E12 EBB0                <2> 	jmp charmapcopy
  4742                              <2> nomorecharmap:
  4743 00003E14 E943F0FFFF          <2> 	jmp nwcmd
  4744                              <2> charmapnocopy:
  4745 00003E19 6650                <2> 	push ax
  4746 00003E1B B020                <2> 	mov al, " "
  4747 00003E1D E80CEAFFFF          <2> 	call prcharq
  4748 00003E22 E807EAFFFF          <2> 	call prcharq
  4749 00003E27 6658                <2> 	pop ax
  4750 00003E29 EBC3                <2> 	jmp charmapcopycheck
  4751                              <1> %include 'source/programs/clear.asm'
  4752 00003E2B FF2C636C65617200    <2> db 255,44,"clear",0
  4753 00003E33 E896E5FFFF          <2> 		call clear
  4754 00003E38 C3                  <2> 		ret 
  4755                              <1> %include 'source/programs/cpuid.asm'
  4756 00003E39 FF2C637075696400    <2> db 255,44,"cpuid",0
  4757 00003E41 31C0                <2> 	xor eax, eax
  4758 00003E43 0FA2                <2> 	cpuid
  4759 00003E45 891D[963E0000]      <2> 	mov [cpuidbuf], ebx
  4760 00003E4B 8915[9A3E0000]      <2> 	mov [cpuidbuf + 4], edx
  4761 00003E51 890D[9E3E0000]      <2> 	mov [cpuidbuf + 8], ecx
  4762 00003E57 BE[963E0000]        <2> 	mov esi, cpuidbuf
  4763 00003E5C E8E9E4FFFF          <2> 	call print
  4764 00003E61 BE[76790000]        <2> 	mov esi, line
  4765 00003E66 E8DFE4FFFF          <2> 	call print
  4766 00003E6B B801000000          <2> 	mov eax, 1
  4767 00003E70 0FA2                <2> 	cpuid
  4768 00003E72 89C1                <2> 	mov ecx, eax
  4769 00003E74 C605[57330000]02    <2> 	mov byte [firsthexshown], 2
  4770 00003E7B E8ECF4FFFF          <2> 	call showhex
  4771 00003E80 B808000080          <2> 	mov eax, 0x80000008
  4772 00003E85 0FA2                <2> 	cpuid
  4773 00003E87 89C1                <2> 	mov ecx, eax
  4774 00003E89 C605[57330000]02    <2> 	mov byte [firsthexshown], 2
  4775 00003E90 E8D7F4FFFF          <2> 	call showhex
  4776 00003E95 C3                  <2> 	ret
  4777                              <2> 	
  4778 00003E96 00<rept>            <2> cpuidbuf times 13 db 0
  4779                              <2> cpuidvendorend:
  4780                              <1> %include 'source/programs/dos.asm'
  4781 00003EA3 FF2C646F7300        <2> db 255,44,"dos",0
  4782                              <2> rundosprog:
  4783 00003EA9 8B3D[06310000]      <2> 	mov edi, [currentcommandloc]
  4784 00003EAF 81C704000000        <2> 	add edi, 4
  4785 00003EB5 BE00014000          <2> 	mov esi,  0x100 + dosprogloc	;this should be the beginning of memory
  4786 00003EBA E870330000          <2> 	call loadfile
  4787 00003EBF BF[A2A90000]        <2> 	mov edi, buftxt
  4788 00003EC4 81C704000000        <2> 	add edi, 4
  4789 00003ECA 81FA94010000        <2> 	cmp edx, 404
  4790 00003ED0 0F844B000000        <2> 	je near dosnoprogfound
  4791 00003ED6 BB81004000          <2> 	mov ebx, 0x81 + dosprogloc
  4792 00003EDB 31C9                <2> 	xor ecx, ecx
  4793                              <2> finddosparams:
  4794 00003EDD 47                  <2> 	inc edi
  4795 00003EDE 8A07                <2> 	mov al, [edi]
  4796 00003EE0 3C20                <2> 	cmp al, " "
  4797 00003EE2 75F9                <2> 	jne finddosparams
  4798                              <2> copydosparams:
  4799 00003EE4 8A07                <2> 	mov al, [edi]
  4800 00003EE6 8803                <2> 	mov [ebx], al
  4801 00003EE8 43                  <2> 	inc ebx
  4802 00003EE9 47                  <2> 	inc edi
  4803 00003EEA 41                  <2> 	inc ecx
  4804 00003EEB 81FB00014000        <2> 	cmp ebx, 0x100 + dosprogloc
  4805 00003EF1 7304                <2> 	jae nomoredosparams
  4806 00003EF3 3C00                <2> 	cmp al, 0
  4807 00003EF5 75ED                <2> 	jne copydosparams
  4808                              <2> nomoredosparams:
  4809 00003EF7 880D80004000        <2> 	mov [0x80 + dosprogloc], cl
  4810 00003EFD 66B85000            <2> 	mov ax, DOS_DATA_SEL
  4811 00003F01 8ED8                <2> 	mov ds, ax
  4812 00003F03 8EC0                <2> 	mov es, ax
  4813 00003F05 8EE0                <2> 	mov fs, ax
  4814 00003F07 8EE8                <2> 	mov gs, ax
  4815 00003F09 31C0                <2> 	xor eax, eax
  4816 00003F0B 31DB                <2> 	xor ebx, ebx
  4817 00003F0D 31C9                <2> 	xor ecx, ecx
  4818 00003F0F 31D2                <2> 	xor edx, edx
  4819 00003F11 31FF                <2> 	xor edi, edi
  4820 00003F13 31F6                <2> 	xor esi, esi
  4821 00003F15 9A000100004800      <2> 	call DOS_CODE_SEL:0x100
  4822 00003F1C E93BEFFFFF          <2> 	jmp nwcmd
  4823                              <2> dosnoprogfound:
  4824 00003F21 BE[38790000]        <2> 	mov esi, notfound1
  4825 00003F26 E81FE4FFFF          <2> 	call print
  4826 00003F2B 8B35[06310000]      <2> 	mov esi, [currentcommandloc]
  4827 00003F31 81C604000000        <2> 	add esi, 4
  4828 00003F37 E80EE4FFFF          <2> 	call print
  4829 00003F3C BE[42790000]        <2> 	mov esi, notfound2
  4830 00003F41 E804E4FFFF          <2> 	call print
  4831 00003F46 E911EFFFFF          <2> 	jmp nwcmd
  4832                              <1> %include 'source/programs/dump.asm'
  4833 00003F4B FF2C64756D7000      <2> db 255,44,"dump",0
  4834 00003F52 8B35[06310000]      <2> 	mov esi, [currentcommandloc]
  4835 00003F58 81C605000000        <2> 	add esi, 5
  4836 00003F5E 31C9                <2> 	xor ecx, ecx
  4837 00003F60 66B83078            <2> 	mov ax, "0x"
  4838 00003F64 663906              <2> 	cmp [esi], ax
  4839 00003F67 740A                <2> 	je dumphexin
  4840 00003F69 E897F5FFFF          <2> 	call cnvrttxt
  4841 00003F6E E910000000          <2> 	jmp dumphexnow
  4842                              <2> dumphexin:
  4843 00003F73 81C602000000        <2> 	add esi, 2
  4844 00003F79 E83EF5FFFF          <2> 	call cnvrthextxt
  4845 00003F7E E900000000          <2> 	jmp dumphexnow
  4846                              <2> dumphexnow:
  4847 00003F83 89CF                <2> 	mov edi, ecx
  4848 00003F85 89FE                <2> 	mov esi, edi
  4849 00003F87 81C680030000        <2> 	add esi, 896
  4850                              <2> dumphexloop:
  4851 00003F8D 8B0F                <2> 	mov ecx, [edi]
  4852 00003F8F C605[57330000]05    <2> 	mov byte [firsthexshown],5
  4853 00003F96 E8D1F3FFFF          <2> 	call showhex
  4854 00003F9B 81C704000000        <2> 	add edi, 4
  4855 00003FA1 39F7                <2> 	cmp edi, esi
  4856 00003FA3 72E8                <2> 	jb dumphexloop
  4857 00003FA5 E8DDEAFFFF          <2> 	call termcopy
  4858 00003FAA C3                  <2> 	ret 
  4859                              <1> %include 'source/programs/echo.asm'
  4860                              <2> 
  4861 00003FAB FF2C6563686F00      <2> db 255,44,"echo",0
  4862                              <2> 	echoprog:
  4863 00003FB2 8B35[06310000]      <2> 		mov esi, [currentcommandloc]
  4864 00003FB8 81C605000000        <2> 		add esi, 5
  4865 00003FBE 8A06                <2> 		mov al, [esi]
  4866 00003FC0 E885E3FFFF          <2> 		call print
  4867 00003FC5 BE[76790000]        <2> 		mov esi, line
  4868 00003FCA E87BE3FFFF          <2> 		call print
  4869 00003FCF C3                  <2> 		ret
  4870 00003FD0 BB[98950000]        <2> 	echovr:	mov ebx, variables
  4871 00003FD5 BF06000000          <2> 		mov edi, 6
  4872 00003FDA E83C000000          <2> 		call nxtvrech
  4873 00003FDF E954000000          <2> 		jmp prntvr2
  4874 00003FE4 B13D                <2> 	echvar:	mov cl, '='
  4875 00003FE6 43                  <2> 		inc ebx
  4876 00003FE7 8A03                <2> 		mov al, [ebx]
  4877 00003FE9 3C00                <2> 		cmp al, 0
  4878 00003FEB 742E                <2> 		je nxtvrech
  4879 00003FED 3C3D                <2> 		cmp al, '='
  4880 00003FEF 7422                <2> 		je nxtvrechb1
  4881 00003FF1 8B35[06310000]      <2> 		mov esi, [currentcommandloc]
  4882 00003FF7 01FE                <2> 		add esi, edi
  4883 00003FF9 E847F1FFFF          <2> 		call cndtest
  4884 00003FFE 3C02                <2> 		cmp al, 2
  4885 00004000 7432                <2> 		je prntvr
  4886 00004002 3C01                <2> 		cmp al, 1
  4887 00004004 742E                <2> 		je prntvr
  4888 00004006 8B35[06310000]      <2> 		mov esi, [currentcommandloc]
  4889 0000400C 01FE                <2> 		add esi, edi
  4890 0000400E E908000000          <2> 		jmp nxtvrech
  4891                              <2> 	nxtvrechb1:
  4892 00004013 81EB02000000        <2> 		sub ebx, 2
  4893 00004019 EBC9                <2> 		jmp echvar
  4894 0000401B 8A03                <2> 	nxtvrech: mov al, [ebx]
  4895 0000401D 3C05                <2> 		cmp al, 5
  4896 0000401F 740A                <2> 		je nxtvrec2
  4897 00004021 43                  <2> 		inc ebx
  4898 00004022 81FB[98A50000]      <2> 		cmp ebx, varend
  4899 00004028 72F1                <2> 		jb nxtvrech
  4900 0000402A C3                  <2> 		ret
  4901 0000402B 43                  <2> 	nxtvrec2: inc ebx
  4902 0000402C 8A03                <2> 		mov al, [ebx]
  4903 0000402E 3C04                <2> 		cmp al, 4
  4904 00004030 74B2                <2> 		je echvar
  4905 00004032 EBE7                <2> 		jmp nxtvrech
  4906 00004034 43                  <2> 	prntvr: inc ebx
  4907 00004035 89DE                <2> 		mov esi, ebx
  4908 00004037 C3                  <2> 		ret
  4909 00004038 E80DE3FFFF          <2> 	prntvr2: call print
  4910 0000403D BE[76790000]        <2> 		mov esi, line
  4911 00004042 E803E3FFFF          <2> 		call print
  4912 00004047 C3                  <2> 		ret 
  4913                              <1> %include 'source/programs/else.asm'
  4914 00004048 FF2C656C736500      <2> 	db 255,44,"else",0
  4915 0000404F 31C0                <2> elsecmd:	xor eax, eax
  4916 00004051 3805[92950000]      <2> 	cmp [BATCHISON], al
  4917 00004057 0F84BBFBFFFF        <2> 	je near notbatch
  4918 0000405D A0[29950000]        <2> 	mov al, [IFON]
  4919 00004062 BE[2A950000]        <2> 	mov esi, IFTRUE
  4920 00004067 01C6                <2> 	add esi, eax
  4921 00004069 8A06                <2> 	mov al, [esi]
  4922 0000406B 3401                <2> 	xor al, 1
  4923 0000406D 8806                <2> 	mov [esi], al
  4924 0000406F C3                  <2> 	ret 
  4925                              <1> %include 'source/programs/fi.asm'
  4926 00004070 FF2C666900          <2> 	db 255,44,"fi",0
  4927 00004075 30C0                <2> 	xor al, al
  4928 00004077 3805[92950000]      <2> 	cmp [BATCHISON], al
  4929 0000407D 0F8495FBFFFF        <2> 	je near notbatch
  4930 00004083 B001                <2> fi:	mov al, 1
  4931 00004085 2805[29950000]      <2> 	sub [IFON],al
  4932 0000408B C3                  <2> 	ret 
  4933                              <1> %include 'source/programs/gui.asm'
  4934 0000408C FF2C67756900        <2> db 255,44,"gui",0
  4935                              <2> guiswitcher:
  4936 00004092 8B35[06310000]      <2> 	mov esi, [currentcommandloc]
  4937 00004098 81C604000000        <2> 	add esi, 4
  4938 0000409E 31C9                <2> 	xor ecx, ecx
  4939 000040A0 803E00              <2> 	cmp byte [esi], 0
  4940 000040A3 7405                <2> 	je .nomodepref
  4941 000040A5 E812F4FFFF          <2> 	call cnvrthextxt ;switches arg on cline to vesa mode in ecx
  4942                              <2> .nomodepref:
  4943 000040AA 51                  <2> 	push ecx
  4944 000040AB E81EE3FFFF          <2> 	call clear
  4945 000040B0 59                  <2> 	pop ecx
  4946 000040B1 66BB[4300]          <2> 	mov bx, guiswitch
  4947 000040B5 66891D[2B110000]    <2> 	mov [realmodeptr], bx
  4948 000040BC BB[CC400000]        <2> 	mov ebx, guiswitchret
  4949 000040C1 891D[27110000]      <2> 	mov [realmodereturn], ebx
  4950 000040C7 E963CFFFFF          <2> 	jmp realmode
  4951                              <2> guiswitchret:
  4952 000040CC BF[AB890000]        <2> 	mov edi, VBEMODEBLOCK
  4953                              <2> .loop:
  4954 000040D1 658B07              <2> 	mov eax, [gs:edi]
  4955 000040D4 8907                <2> 	mov [edi], eax
  4956 000040D6 47                  <2> 	inc edi
  4957 000040D7 81FF[AE8C0000]      <2> 	cmp edi, VBEEND
  4958 000040DD 72F2                <2> 	jb .loop
  4959 000040DF A1[D38B0000]        <2> 	mov eax, [physbaseptr]
  4960 000040E4 2D00001000          <2> 	sub eax, 0x100000
  4961 000040E9 A3[D38B0000]        <2> 	mov [physbaseptr], eax
  4962 000040EE C605[2C280000]00    <2> 	mov byte [termguion], 0
  4963 000040F5 BE[248E0000]        <2> 	mov esi, graphicstable
  4964 000040FA 30C0                <2> 	xor al, al
  4965                              <2> .clear:
  4966 000040FC 8806                <2> 	mov [esi], al
  4967 000040FE 46                  <2> 	inc esi
  4968 000040FF 81FE[24900000]      <2> 	cmp esi, graphicstableend
  4969 00004105 72F5                <2> 	jb .clear
  4970 00004107 803D[AD8C0000]01    <2> 	cmp byte [guion], 1
  4971 0000410E 0F84B3160000        <2> 	je near gui
  4972 00004114 C3                  <2> 	ret
  4973                              <2> 	
  4974                              <1> %include 'source/programs/help.asm'
  4975 00004115 FF2C68656C7000      <2> db 255,44,"help",0
  4976                              <2> lscmd:	
  4977 0000411C B00D                <2> 		mov al, 13
  4978 0000411E E80BE7FFFF          <2> 		call prcharq
  4979 00004123 BE[88350000]        <2> 		mov esi, progstart
  4980 00004128 BB[7B4C0000]        <2> 		mov ebx, progend
  4981 0000412D BE[24910000]        <2> dir:	mov esi, fileindex
  4982 00004132 8A06                <2> 	dirnxt:	mov al, [esi]
  4983 00004134 30E4                <2> 		xor ah, ah
  4984 00004136 3CFF                <2> 		cmp al, 255
  4985 00004138 7415                <2> 		je dirfnd
  4986 0000413A 46                  <2> 		inc esi
  4987 0000413B 81FE[24950000]      <2> 		cmp esi,  fileindexend
  4988 00004141 7339                <2> 		jae dirdn
  4989 00004143 EBED                <2> 		jmp dirnxt
  4990                              <2> 	dirfnd3:
  4991 00004145 46                  <2> 		inc esi
  4992 00004146 81FE[24950000]      <2> 		cmp esi, fileindexend
  4993 0000414C 76E4                <2> 		jbe dirnxt
  4994 0000414E 4E                  <2> 		dec esi
  4995 0000414F 46                  <2> 	dirfnd:	inc esi
  4996 00004150 8A06                <2> 		mov al, [esi]
  4997 00004152 30E4                <2> 		xor ah, ah
  4998 00004154 3C2C                <2> 		cmp al, 44
  4999 00004156 740B                <2> 		je dirfnd2
  5000 00004158 46                  <2> 		inc esi
  5001 00004159 81FE[24950000]      <2> 		cmp esi,  fileindexend
  5002 0000415F 731B                <2> 		jae dirdn
  5003 00004161 EBCF                <2> 		jmp dirnxt
  5004 00004163 46                  <2> 	dirfnd2: inc esi
  5005 00004164 E8CFE1FFFF          <2> 		call printquiet
  5006 00004169 56                  <2> 		push esi
  5007 0000416A B009                <2> 		mov al, 9
  5008 0000416C E8BDE6FFFF          <2> 		call prcharq
  5009 00004171 5E                  <2> 		pop esi
  5010 00004172 81FE[24950000]      <2> 		cmp esi,  fileindexend
  5011 00004178 7302                <2> 		jae dirdn
  5012 0000417A EBB6                <2> 		jmp dirnxt
  5013 0000417C BE[76790000]        <2> 	dirdn:	mov esi, line
  5014 00004181 E8C4E1FFFF          <2> 			call print
  5015 00004186 C3                  <2> 			ret
  5016 00004187 00                  <2> currentdir db 0
  5017                              <1> %include 'source/programs/if.asm'
  5018 00004188 FF2C696600          <2> 	db 255,44,"if",0
  5019 0000418D 30C0                <2> ifcmd:	xor al, al
  5020 0000418F 3805[92950000]      <2> 	cmp [BATCHISON], al
  5021 00004195 0F847DFAFFFF        <2> 	je near notbatch
  5022 0000419B 8B1D[06310000]      <2> 	mov ebx, [currentcommandloc]
  5023 000041A1 81C303000000        <2> 	add ebx, 3
  5024 000041A7 89DE                <2> 	mov esi, ebx
  5025 000041A9 8A06                <2> chkeqsn: mov al, [esi]
  5026 000041AB 3C00                <2> 	cmp al, 0
  5027 000041AD 0F8465FAFFFF        <2> 	je near notbatch
  5028 000041B3 3C3D                <2> 	cmp al, '='
  5029 000041B5 0F8403000000        <2> 	je near chkeqdn
  5030 000041BB 46                  <2> 	inc esi
  5031 000041BC EBEB                <2> 	jmp chkeqsn
  5032 000041BE B000                <2> chkeqdn: mov al, 0 
  5033 000041C0 8806                <2> 	mov [esi], al
  5034 000041C2 46                  <2> 	inc esi
  5035 000041C3 E842EFFFFF          <2> 	call tester
  5036 000041C8 3C01                <2> 	cmp al, 1
  5037 000041CA 0F8405000000        <2> 	je near trueif
  5038 000041D0 E91C000000          <2> 	jmp falseif
  5039 000041D5 31C0                <2> trueif:	xor eax, eax
  5040 000041D7 A0[29950000]        <2> 	mov al, [IFON]
  5041 000041DC FEC0                <2> 	inc al
  5042 000041DE A2[29950000]        <2> 	mov [IFON], al
  5043 000041E3 30E4                <2> 	xor ah, ah
  5044 000041E5 BE[2A950000]        <2> 	mov esi, IFTRUE
  5045 000041EA 01C6                <2> 	add esi, eax
  5046 000041EC B401                <2> 	mov ah, 1
  5047 000041EE 8826                <2> 	mov [esi], ah
  5048 000041F0 C3                  <2> 	ret 
  5049 000041F1 31C0                <2> falseif: xor eax, eax
  5050 000041F3 A0[29950000]        <2> 	mov al, [IFON]
  5051 000041F8 FEC0                <2> 	inc al
  5052 000041FA A2[29950000]        <2> 	mov [IFON], al
  5053 000041FF 30E4                <2> 	xor ah, ah
  5054 00004201 BE[2A950000]        <2> 	mov esi, IFTRUE
  5055 00004206 01C6                <2> 	add esi, eax
  5056 00004208 30E4                <2> 	xor ah, ah
  5057 0000420A 8826                <2> 	mov [esi], ah
  5058 0000420C C3                  <2> 	ret 
  5059                              <1> %include 'source/programs/keycode.asm'
  5060 0000420D FF2C6B65797300      <2> db 255,44,"keys",0
  5061                              <2> keycode:
  5062 00004214 C605[12280000]00    <2> 	mov byte [trans], 0
  5063 0000421B C605[31730000]00    <2> 	mov byte [threadson], 0
  5064 00004222 E8C0110000          <2> 	call getkey
  5065 00004227 31C0                <2> 	xor eax, eax
  5066 00004229 31C9                <2> 	xor ecx, ecx
  5067 0000422B 8A0D[C7530000]      <2> 	mov cl, [specialkey]
  5068 00004231 80F900              <2> 	cmp cl, 0
  5069 00004234 0F8405000000        <2> 	je near nospecialkeycode
  5070 0000423A E819F1FFFF          <2> 	call showhexsmall
  5071                              <2> nospecialkeycode:
  5072 0000423F 66A1[10280000]      <2> 	mov ax, [lastkey]
  5073 00004245 88E1                <2> 	mov cl, ah
  5074 00004247 E80CF1FFFF          <2> 	call showhexsmall
  5075 0000424C 80FC01              <2> 	cmp ah, 1
  5076 0000424F 75C3                <2> 	jne keycode
  5077 00004251 C3                  <2> 	ret 
  5078                              <1> %include 'source/programs/logout.asm'
  5079 00004252 FF2C6C6F676F757400  <2> 	db 255,44,"logout",0
  5080 0000425B E95BEAFFFF          <2> 	jmp os
  5081                              <1> %include 'source/programs/loop.asm'
  5082 00004260 FF2C6C6F6F7000      <2> 	db 255,44,"loop",0
  5083 00004267 803D[93950000]00    <2> 	cmp byte [LOOPON], 0
  5084 0000426E 0F8501000000        <2> 	jne near filoop
  5085 00004274 C3                  <2> 	ret
  5086 00004275 8B35[94950000]      <2> filoop: mov esi, [LOOPPOS]
  5087 0000427B FE0D[29950000]      <2> 	dec byte [IFON]
  5088 00004281 C605[93950000]00    <2> 	mov byte [LOOPON], 0
  5089 00004288 8935[8E950000]      <2> 	mov [BATCHPOS], esi
  5090 0000428E 8935[403B0000]      <2> 	mov [batchedi], esi
  5091 00004294 C3                  <2> 	ret 
  5092                              <1> %include 'source/programs/ls.asm'
  5093 00004295 FF2C6C7300          <2> db 255,44,"ls",0
  5094 0000429A BE[AE8C0000]        <2> 		mov esi, diskfileindex
  5095                              <2> 	diskindexdir:
  5096 0000429F 803E5F              <2> 		cmp byte [esi], '_'
  5097 000042A2 7440                <2> 		je nextdiskindexdir
  5098 000042A4 E88FE0FFFF          <2> 		call printquiet
  5099 000042A9 56                  <2> 		push esi
  5100 000042AA BE[04430000]        <2> 		mov esi, disktab
  5101 000042AF E884E0FFFF          <2> 		call printquiet
  5102 000042B4 5E                  <2> 		pop esi
  5103 000042B5 8B4E05              <2> 		mov ecx, [esi + 5]
  5104 000042B8 C605[57330000]05    <2> 		mov byte [firsthexshown], 5
  5105 000042BF E85FF1FFFF          <2> 		call showdec
  5106 000042C4 56                  <2> 		push esi
  5107 000042C5 BE[76790000]        <2> 		mov esi, line
  5108 000042CA E869E0FFFF          <2> 		call printquiet
  5109 000042CF 5E                  <2> 		pop esi
  5110 000042D0 81C609000000        <2> 		add esi, 9
  5111 000042D6 81FE[248E0000]      <2> 		cmp esi, enddiskfileindex
  5112 000042DC 72C1                <2> 		jb diskindexdir
  5113 000042DE E8A4E7FFFF          <2> 		call termcopy
  5114 000042E3 C3                  <2> 		ret
  5115                              <2> 	nextdiskindexdir:
  5116 000042E4 46                  <2> 		inc esi
  5117 000042E5 803E00              <2> 		cmp byte [esi], 0
  5118 000042E8 75FA                <2> 		jne nextdiskindexdir
  5119 000042EA 81C609000000        <2> 		add esi, 9
  5120 000042F0 81FE[248E0000]      <2> 		cmp esi, enddiskfileindex
  5121 000042F6 72A7                <2> 		jb diskindexdir
  5122 000042F8 E88AE7FFFF          <2> 		call termcopy
  5123 000042FD C3                  <2> 		ret
  5124                              <2> 		
  5125 000042FE 4469736B2000        <2> 		diskmsg db "Disk ",0
  5126 00004304 0D09090900          <2> 		disktab db 13,9,9,9,0
  5127                              <1> %include 'source/programs/memory.asm'
  5128 00004309 FF2C6D656D6F727900  <2> db 255,44,"memory",0
  5129 00004312 BE[73020000]        <2> 	mov esi, memlistbuf
  5130 00004317 31FF                <2> 	xor edi, edi
  5131 00004319 668B3D[B3040000]    <2> 	mov di, [memlistend]
  5132 00004320 01F7                <2> 	add edi, esi
  5133                              <2> printmemmap:
  5134 00004322 8B0E                <2> 	mov ecx, [esi]
  5135 00004324 E843F0FFFF          <2> 	call showhex
  5136 00004329 81C608000000        <2> 	add esi, 8
  5137 0000432F 8B0E                <2> 	mov ecx, [esi]
  5138 00004331 E836F0FFFF          <2> 	call showhex
  5139 00004336 81C608000000        <2> 	add esi, 8
  5140 0000433C 8B0E                <2> 	mov ecx, [esi]
  5141 0000433E E829F0FFFF          <2> 	call showhex
  5142 00004343 81C608000000        <2> 	add esi, 8
  5143 00004349 57                  <2> 	push edi
  5144 0000434A 56                  <2> 	push esi
  5145 0000434B BE[76790000]        <2> 	mov esi, line
  5146 00004350 E8F5DFFFFF          <2> 	call print
  5147 00004355 5E                  <2> 	pop esi
  5148 00004356 5F                  <2> 	pop edi
  5149 00004357 39FE                <2> 	cmp esi, edi
  5150 00004359 72C7                <2> 	jb printmemmap
  5151 0000435B C3                  <2> 	ret
  5152                              <2> 	
  5153                              <1> %include 'source/programs/pci.asm'
  5154 0000435C FF2C70636900        <2> db 255,44,"pci",0
  5155 00004362 E85B2C0000          <2> 	call pcidump
  5156 00004367 C3                  <2> 	ret 
  5157                              <1> %include 'source/programs/play.asm'
  5158 00004368 FF2C706C617900      <2> db 255,44,"play",0
  5159 0000436F E801000000          <2> 	call playsync
  5160 00004374 C3                  <2> 	ret
  5161                              <2> playsync:
  5162 00004375 8B3D[06310000]      <2> 	mov edi, [currentcommandloc]
  5163 0000437B 81C705000000        <2> 	add edi, 5
  5164 00004381 BE00004000          <2> 	mov esi, 0x400000
  5165 00004386 E8A42E0000          <2> 	call loadfile
  5166 0000438B 81FA94010000        <2> 	cmp edx, 404
  5167 00004391 7448                <2> 	je nosoundfound
  5168 00004393 BB00004000          <2> 	mov ebx, 0x400000
  5169 00004398 817B0857415645      <2> 	cmp dword [ebx + 8], "WAVE"
  5170 0000439F 0F84B8000000        <2> 	je near wave_player
  5171 000043A5 66813B534E          <2> 	cmp word [ebx], "SN"
  5172 000043AA 752F                <2> 	jne nosoundfound
  5173 000043AC 81C306000000        <2> 	add ebx, 6
  5174 000043B2 891D[A5060000]      <2> 	mov [soundpos], ebx
  5175 000043B8 035BFC              <2> 	add ebx, [ebx - 4]
  5176 000043BB 891D[A9060000]      <2> 	mov [soundendpos], ebx
  5177 000043C1 66C705[A3060000]00- <2> 	mov word [soundrepititions], 0
  5178 000043C9 00                  <2>
  5179 000043CA C605[A2060000]01    <2> 	mov byte [soundon], 1
  5180                              <2> waitforsoundendplay:
  5181 000043D1 A0[A2060000]        <2> 	mov al, [soundon]
  5182 000043D6 3C00                <2> 	cmp al, 0
  5183 000043D8 75F7                <2> 	jne waitforsoundendplay
  5184 000043DA C3                  <2> 	ret
  5185                              <2> nosoundfound:
  5186 000043DB BE[01440000]        <2> 	mov esi, notfoundsound
  5187 000043E0 E865DFFFFF          <2> 	call print
  5188 000043E5 8B35[06310000]      <2> 	mov esi, [currentcommandloc]
  5189 000043EB 81C605000000        <2> 	add esi, 5
  5190 000043F1 E854DFFFFF          <2> 	call print
  5191 000043F6 BE[42790000]        <2> 	mov esi, notfound2
  5192 000043FB E84ADFFFFF          <2> 	call print
  5193 00004400 C3                  <2> 	ret
  5194 00004401 536F756E64202200    <2> notfoundsound db "Sound ",34,0
  5195                              <2> 
  5196                              <2> sbplay:
  5197 00004409 BE00004000          <2> 		mov esi, 0x400000
  5198 0000440E 89F3                <2> 		mov ebx, esi
  5199 00004410 81C62C000000        <2> 		add esi, 44
  5200 00004416 29F7                <2> 		sub edi, esi
  5201 00004418 66893D[F74E0000]    <2> 		mov [Length1], di
  5202 0000441F C1EF10              <2> 		shr edi, 16
  5203 00004422 66893D[F54E0000]    <2> 		mov [Length0], di
  5204 00004429 8B4B18              <2> 		mov ecx, [ebx + 24]
  5205 0000442C 890D[024F0000]      <2> 		mov [Freq], ecx
  5206 00004432 31C0                <2> 		xor eax, eax
  5207 00004434 BA00004000          <2> 		mov	edx, 0x400000 ;location of sound
  5208 00004439 81C200080000        <2> 		add edx, 2048
  5209 0000443F 01D0                <2> 		add	eax,edx
  5210 00004441 31DB                <2> 		xor ebx, ebx
  5211 00004443 668B1D[F74E0000]    <2> 		mov bx, [Length1]
  5212 0000444A 01C3                <2> 		add ebx, eax
  5213 0000444C 891D[F94E0000]      <2> 		mov [NextMemLoc], ebx
  5214 00004452 A3[FD4E0000]        <2> 		mov	[MemLoc],eax
  5215 00004457 E873090000          <2> 		call DMAPlay
  5216 0000445C C3                  <2> 		ret
  5217                              <2> 
  5218                              <2> wave_player:
  5219 0000445D 803D[074F0000]01    <2> 	cmp byte [SoundBlaster], 1
  5220 00004464 0F849FFFFFFF        <2> 	je near sbplay
  5221 0000446A BE00004000          <2> 	mov esi, 0x400000
  5222 0000446F 8B4E18              <2> 	mov ecx, [esi + 24]
  5223 00004472 66890D[AD060000]    <2> 	mov [WAVSamplingRate], cx
  5224 00004479 29F7                <2> 	sub edi, esi
  5225 0000447B 81EF2C000000        <2> 	sub edi, 44
  5226 00004481 893D[AF060000]      <2> 	mov [WAVFileSize], edi
  5227                              <2> 	;MASK ALL INTS EXCEPT IRQ 0
  5228 00004487 B0FE                <2> 	mov al, 0xFE
  5229 00004489 E621                <2> 	out 0x21, al
  5230 0000448B FEC0                <2> 	inc al
  5231 0000448D E6A1                <2> 	out 0xA1, al
  5232 0000448F B020                <2> 	mov al, 0x20
  5233 00004491 E6A0                <2> 	out 0xA0, al
  5234 00004493 E620                <2> 	out 0x20, al
  5235                              <2> 	;SET PIT DIVISOR
  5236 00004495 31D2                <2> 	xor edx, edx
  5237 00004497 8B4E18              <2> 	mov ecx, [esi + 24]
  5238 0000449A B8DE341200          <2> 	mov eax, 1193182
  5239 0000449F F7F1                <2> 	div ecx ;al should be the proper sample divisor
  5240 000044A1 E640                <2> 	out 0x40, al
  5241 000044A3 66C1C008            <2> 	rol ax, 8
  5242 000044A7 E640                <2> 	out 0x40, al
  5243                              <2> 	;GET WAVEDIV
  5244 000044A9 668B1D[AD060000]    <2> 	mov bx, [WAVSamplingRate]
  5245 000044B0 66B8DD34            <2> 	mov ax,0x34dd	; The sound lasts until NoSound is called
  5246 000044B4 66BA1200            <2> 	mov dx,0x0012             
  5247 000044B8 66F7F3              <2> 	div bx               
  5248 000044BB 66A3[444D0000]      <2> 	mov [WAVEDIV],ax
  5249                              <2> 	;PLAY WAVE
  5250 000044C1 81C62C000000        <2> 	add esi, 44
  5251 000044C7 0335[87060000]      <2> 	add esi, [newcodecache]
  5252 000044CD E81D000000          <2> 	call PlayWAV
  5253                              <2> 	;UNMASK ALL INTS
  5254 000044D2 30C0                <2> 	xor al, al
  5255 000044D4 E621                <2> 	out 0x21, al
  5256 000044D6 30C0                <2> 	xor al, al
  5257 000044D8 E6A1                <2> 	out 0xA1, al
  5258 000044DA B020                <2> 	mov al, 0x20
  5259 000044DC E6A0                <2> 	out 0xA0, al
  5260 000044DE E620                <2> 	out 0x20, al
  5261                              <2> 	;RESET PIT DIVISOR
  5262 000044E0 66A1[94060000]      <2> 	mov ax, [pitdiv]
  5263 000044E6 E640                <2> 	out 0x40, al
  5264 000044E8 66C1C008            <2> 	rol ax, 8
  5265 000044EC E640                <2> 	out 0x40, al
  5266 000044EE C3                  <2> 	ret
  5267                              <2> 	
  5268                              <2> PlayWAV:
  5269 000044EF 8B0D[AF060000]      <2>    mov ecx,[WAVFileSize]                         ;Sets the loop point
  5270 000044F5 C605[B3060000]01    <2>    mov byte [EnableDigitized],1	;Tells the irq0 handler to process the routines
  5271                              <2> Play_Repeat:
  5272 000044FC 8A06                <2>    mov al, [esi]	;Loads a byte from ESI to AL
  5273 000044FE F4                  <2>    hlt	;Wait for IRQ to fire
  5274 000044FF E2FB                <2>    loop Play_Repeat	;and the whole procedure is looped ECX times
  5275 00004501 C605[B3060000]00    <2>    mov byte [EnableDigitized],0	;Tells the irq0 handler to disable the digitized functions
  5276 00004508 E857080000          <2>    call Sound_Off	;Turn the speaker off just in case
  5277 0000450D C3                  <2>    ret
  5278                              <2>    
  5279                              <1> %include 'source/programs/reboot.asm'
  5280 0000450E FF2C7265626F6F7400  <2> 	db 255,44,"reboot",0
  5281 00004517 0F011D[21450000]    <2> 		lidt [idtreboot]
  5282 0000451E CD00                <2> 		int 0
  5283 00004520 F4                  <2> 		hlt
  5284                              <2> 	
  5285 00004521 0000                <2> 	idtreboot dw 0
  5286 00004523 00000000            <2> 			  dd 0
  5287                              <2> 
  5288                              <2> 	coldboot:
  5289 00004527 66B84000            <2> 		MOV AX, 0040h
  5290 0000452B 8EC0                <2> 		MOV ES, AX
  5291 0000452D 2666C7057200000000- <2> 		MOV WORD [ES:00072h], 0h
  5292 00004536 00                  <2>
  5293 00004537 EA00000000FFFF      <2> 		JMP 0FFFFh:0000h
  5294 0000453E CF                  <2> 		IRET
  5295                              <2> 
  5296                              <2> 	warmboot:
  5297 0000453F 66B84000            <2> 		MOV AX, 0040h
  5298 00004543 8EC0                <2> 		MOV ES, AX
  5299 00004545 2666C7057200000034- <2> 		MOV WORD [ES:00072h], 01234h
  5300 0000454E 12                  <2>
  5301 0000454F EA00000000FFFF      <2> 		JMP 0FFFFh:0000h
  5302 00004556 CF                  <2> 		IRET
  5303                              <2> 		
  5304                              <1> %include 'source/programs/reg.asm'
  5305 00004557 FF2C72656700        <2> db 255,44,"reg",0
  5306 0000455D CD03                <2> 	int 3
  5307 0000455F C3                  <2> 	ret 
  5308                              <1> %include 'source/programs/rmode.asm'
  5309 00004560 FF2C726D6F646500    <2> db 255,44,"rmode",0
  5310 00004568 66BB[8345]          <2> 	mov bx, rmodetest
  5311 0000456C 66891D[2B110000]    <2> 	mov [realmodeptr], bx
  5312 00004573 BB[1B4C0000]        <2> 	mov ebx, waitkey
  5313 00004578 891D[27110000]      <2> 	mov [realmodereturn], ebx
  5314 0000457E E9ACCAFFFF          <2> 	jmp realmode
  5315                              <2> [BITS 16]
  5316                              <2> rmodetest:
  5317 00004583 BE[9545]            <2> 	mov si, rmodestr
  5318 00004586 31DB                <2> 	xor bx, bx
  5319                              <2> rmodeprnt:
  5320 00004588 AC                  <2> 	lodsb
  5321 00004589 08C0                <2> 	or al, al
  5322 0000458B 7407                <2> 	jz .done
  5323 0000458D B40E                <2> 	mov ah, 0xE
  5324 0000458F 43                  <2> 	inc bx
  5325 00004590 CD10                <2> 	int 0x10
  5326 00004592 EBF4                <2> 	jmp rmodeprnt
  5327 00004594 C3                  <2> .done: ret
  5328                              <2> 
  5329 00004595 48656C6C6F2066726F- <2> rmodestr db "Hello from real mode!",10,13,"Goodbye!",10,13,0
  5330 0000459E 6D207265616C206D6F- <2>
  5331 000045A7 6465210A0D476F6F64- <2>
  5332 000045B0 627965210A0D00      <2>
  5333                              <2> [BITS 32]
  5334                              <1> %include 'source/programs/show.asm'
  5335 000045B7 FF2C73686F7700      <2> db 255,44,"show",0
  5336 000045BE 8B3D[06310000]      <2> 		mov edi, [currentcommandloc]
  5337 000045C4 81C705000000        <2> 		add edi, 5
  5338 000045CA BE00004000          <2> 		mov esi, 0x400000
  5339 000045CF E85B2C0000          <2> 		call loadfile
  5340 000045D4 81FA94010000        <2> 		cmp edx, 404
  5341 000045DA 0F849E000000        <2> 		je near filenotfound
  5342 000045E0 BE00004000          <2> 		mov esi, 0x400000
  5343 000045E5 66813E424D          <2> 		cmp word [esi], "BM"
  5344 000045EA 7410                <2> 		je bmpfound
  5345 000045EC E859DDFFFF          <2> 		call print
  5346 000045F1 BE[76790000]        <2> 		mov esi, line
  5347 000045F6 E84FDDFFFF          <2> 		call print
  5348 000045FB C3                  <2> 		ret
  5349                              <2> bmpfound:
  5350 000045FC 803D[AD8C0000]00    <2> 		cmp byte [guion], 0
  5351 00004603 0F8443000000        <2> 		je near noguibmp
  5352 00004609 BE00004000          <2> 		mov esi, 0x400000
  5353 0000460E 31C9                <2> 		xor ecx, ecx
  5354 00004610 31D2                <2> 		xor edx, edx
  5355 00004612 31C0                <2> 		xor eax, eax
  5356 00004614 31DB                <2> 		xor ebx, ebx
  5357 00004616 E804240000          <2> 		call showbmp
  5358 0000461B 30C0                <2> 		xor al, al
  5359 0000461D B405                <2> 		mov ah, 5
  5360 0000461F CD30                <2> 		int 30h
  5361 00004621 E862110000          <2> 		call guiclear
  5362 00004626 E8CF120000          <2> 		call clearmousecursor
  5363 0000462B E82F190000          <2> 		call reloadallgraphics
  5364 00004630 8B35[06310000]      <2> 		mov esi, [currentcommandloc]
  5365 00004636 81C605000000        <2> 		add esi, 5
  5366 0000463C E809DDFFFF          <2> 		call print
  5367 00004641 BE[D3460000]        <2> 		mov esi, loadedbmpmsg
  5368 00004646 E8FFDCFFFF          <2> 		call print
  5369 0000464B C3                  <2> 		ret
  5370                              <2> noguibmp:
  5371 0000464C BE[57460000]        <2> 		mov esi, warnguibmp
  5372 00004651 E8F4DCFFFF          <2> 		call print
  5373 00004656 C3                  <2> 		ret
  5374 00004657 546869732063616E20- <2> warnguibmp db "This can not be done without the gui.",10,0
  5375 00004660 6E6F7420626520646F- <2>
  5376 00004669 6E6520776974686F75- <2>
  5377 00004672 742074686520677569- <2>
  5378 0000467B 2E0A00              <2>
  5379                              <2> 
  5380                              <2> filenotfound:
  5381 0000467E BE[B1460000]        <2> 		mov esi, filenf
  5382 00004683 E8C2DCFFFF          <2> 		call print
  5383 00004688 8B35[06310000]      <2> 		mov esi, [currentcommandloc]
  5384                              <2> findfilenotfoundzero:
  5385 0000468E 8A06                <2> 		mov al, [esi]
  5386 00004690 46                  <2> 		inc esi
  5387 00004691 3C00                <2> 		cmp al, 0
  5388 00004693 7411                <2> 		je nofilenamenotfound
  5389 00004695 81FE[A2AD0000]      <2> 		cmp esi, buftxtend
  5390 0000469B 7309                <2> 		jae nofilenamenotfound
  5391 0000469D 3C20                <2> 		cmp al, " "
  5392 0000469F 75ED                <2> 		jne findfilenotfoundzero
  5393 000046A1 E8A4DCFFFF          <2> 		call print
  5394                              <2> nofilenamenotfound:
  5395 000046A6 BE[BC460000]        <2> 		mov esi, filenf2
  5396 000046AB E89ADCFFFF          <2> 		call print
  5397 000046B0 C3                  <2> 		ret
  5398 000046B1 5468652066696C6520- <2> filenf db "The file ",34,0
  5399 000046BA 2200                <2>
  5400 000046BC 2220636F756C64206E- <2> filenf2 db 34," could not be found.",10,0
  5401 000046C5 6F7420626520666F75- <2>
  5402 000046CE 6E642E0A00          <2>
  5403                              <2> 		
  5404 000046D3 206C6F616465642E0A- <2> loadedbmpmsg db " loaded.",10,0
  5405 000046DC 00                  <2>
  5406                              <1> %include 'source/programs/shush.asm'
  5407 000046DD FF2C736875736800    <2> db 255,44,"shush",0
  5408 000046E5 BE[F0460000]        <2> 	mov esi, shushmsg
  5409 000046EA E85BDCFFFF          <2> 	call print
  5410 000046EF C3                  <2> 	ret
  5411 000046F0 57656C636F6D652074- <2> 	shushmsg db "Welcome to the SollerOS Hardly Unix-Compatible Shell!",10,0
  5412 000046F9 6F2074686520536F6C- <2>
  5413 00004702 6C65724F5320486172- <2>
  5414 0000470B 646C7920556E69782D- <2>
  5415 00004714 436F6D70617469626C- <2>
  5416 0000471D 65205368656C6C210A- <2>
  5417 00004726 00                  <2>
  5418                              <1> %include 'source/programs/stop.asm'
  5419 00004727 FF2C73746F7000      <2> 	db 255,44,"stop",0
  5420 0000472E 30C0                <2> stop:	xor al, al
  5421 00004730 A2[92950000]        <2> 	mov [BATCHISON], al
  5422 00004735 A2[29950000]        <2> 	mov [IFON], al
  5423 0000473A A2[2A950000]        <2> 	mov [IFTRUE], al
  5424 0000473F A2[93950000]        <2> 	mov [LOOPON], al
  5425 00004744 C3                  <2> 	ret 
  5426                              <1> %include 'source/programs/system.asm'
  5427 00004745 FF2C73797374656D00  <2> 	db 255,44,"system",0
  5428 0000474E BE[08480000]        <2> 	mov esi, systeminfomsg
  5429 00004753 E8E0DBFFFF          <2> 	call printquiet
  5430 00004758 B9[AE8C0000]        <2> 	mov ecx, osend
  5431 0000475D C1E90A              <2> 	shr ecx, 10
  5432 00004760 E8BEECFFFF          <2> 	call showdec
  5433 00004765 BE[1D480000]        <2> 	mov esi, diskbytemsg
  5434 0000476A E8C9DBFFFF          <2> 	call printquiet
  5435 0000476F B9[AE8C0000]        <2> 	mov ecx, osend
  5436 00004774 81C1[3F600100]      <2> 	add ecx, commandbufend
  5437 0000477A 81E9[248E0000]      <2> 	sub ecx, bssstart	;add the extra buffer space
  5438 00004780 C1E90A              <2> 	shr ecx, 10
  5439 00004783 E89BECFFFF          <2> 	call showdec
  5440 00004788 BE[31480000]        <2> 	mov esi, membytemsg
  5441 0000478D E8A6DBFFFF          <2> 	call printquiet
  5442                              <2> getcpuspeed:
  5443 00004792 B8FE000000          <2> 	mov eax, 0xFE
  5444 00004797 E621                <2> 	out 0x21, al ;mask off all but timer interrupt
  5445 00004799 B020                <2> 	mov al, 0x20
  5446 0000479B E620                <2> 	out 0x20, al
  5447 0000479D 31C0                <2> 	xor eax, eax
  5448 0000479F F4                  <2> 	hlt
  5449 000047A0 C605[8B060000]01    <2> 	mov byte [testingcpuspeed], 1
  5450                              <2> cpuspeedloop:	;wait until next timer interrupt, then inc eax until the next
  5451 000047A7 40                  <2> 	inc eax
  5452 000047A8 EBFD                <2> 	jmp cpuspeedloop
  5453                              <2> cpuspeedloopend:
  5454 000047AA 31C0                <2> 	xor eax, eax
  5455 000047AC E621                <2> 	out 0x21, al
  5456 000047AE B020                <2> 	mov al, 0x20
  5457 000047B0 E620                <2> 	out 0x20, al
  5458 000047B2 31D2                <2> 	xor edx, edx
  5459 000047B4 31C0                <2> 	xor eax, eax
  5460 000047B6 A1[8C060000]        <2> 	mov eax, [cpuspeedperint]
  5461 000047BB 8B1D[9E060000]      <2> 	mov ebx, [timeinterval]
  5462 000047C1 C1EB0A              <2> 	shr ebx, 10 ;divide the interval by 1024
  5463 000047C4 F7F3                <2> 	div ebx	;quotient in eax, remainder in edx
  5464 000047C6 89C1                <2> 	mov ecx, eax
  5465 000047C8 E856ECFFFF          <2> 	call showdec
  5466 000047CD BE[73480000]        <2> 	mov esi, cpuspeedmsg
  5467 000047D2 E861DBFFFF          <2> 	call printquiet
  5468 000047D7 8B0D[90060000]      <2> 	mov ecx, [memoryspace]
  5469 000047DD C1E914              <2> 	shr ecx, 20
  5470 000047E0 41                  <2> 	inc ecx	;the reading is one MB behind
  5471 000047E1 E83DECFFFF          <2> 	call showdec
  5472 000047E6 BE[79480000]        <2> 	mov esi, memoryspacemsg
  5473 000047EB E85ADBFFFF          <2> 	call print
  5474 000047F0 803D[074F0000]00    <2> 	cmp byte [SoundBlaster], 0
  5475 000047F7 0F845FE6FFFF        <2> 	je near nwcmd
  5476 000047FD BE[5B480000]        <2> 	mov esi, soundblastermsg
  5477 00004802 E843DBFFFF          <2> 	call print
  5478 00004807 C3                  <2> 	ret
  5479                              <2> 
  5480 00004808 4B65726E656C20496E- <2> systeminfomsg db "Kernel Information:",10,0
  5481 00004811 666F726D6174696F6E- <2>
  5482 0000481A 3A0A00              <2>
  5483 0000481D 4B42204469736B2053- <2> diskbytemsg db "KB Disk Space Used",10,0
  5484 00004826 706163652055736564- <2>
  5485 0000482F 0A00                <2>
  5486 00004831 4B42204D656D6F7279- <2> membytemsg db "KB Memory Space Used",10,"System Information:",10,0
  5487 0000483A 205370616365205573- <2>
  5488 00004843 65640A53797374656D- <2>
  5489 0000484C 20496E666F726D6174- <2>
  5490 00004855 696F6E3A0A00        <2>
  5491 0000485B 536F756E64626C6173- <2> soundblastermsg db "Soundblaster Detected.",10,0
  5492 00004864 746572204465746563- <2>
  5493 0000486D 7465642E0A00        <2>
  5494 00004873 4D4950530A00        <2> cpuspeedmsg db "MIPS",10,0
  5495 00004879 4D42204D656D6F7279- <2> memoryspacemsg db "MB Memory Space Free",10,0
  5496 00004882 205370616365204672- <2>
  5497 0000488B 65650A00            <2>
  5498                              <1> %include 'source/programs/thread.asm'
  5499 0000488F FF2C74687265616400  <2> db 255,44,"thread",0
  5500 00004898 E96D2A0000          <2> 	jmp threadstarttest
  5501                              <1> %include 'source/programs/time.asm'
  5502 0000489D 082E30303030303030- <2> timenscache db 8,".000000000"
  5503 000048A6 3030                <2>
  5504 000048A8 200A00              <2> timenscacheend: db " ",10,0
  5505 000048AB 00                  <2> istimeset db 0
  5506 000048AC 456E74657220746865- <2> settimemsg db "Enter the current UNIX time:",10,0
  5507 000048B5 2063757272656E7420- <2>
  5508 000048BE 554E49582074696D65- <2>
  5509 000048C7 3A0A00              <2>
  5510 000048CA 00<rept>            <2> timeinputbuffer times 12 db 0
  5511 000048D6 00                  <2> timeinputbend: db 0
  5512                              <2> 
  5513 000048D7 FF2C74696D6500      <2> db 255,44,"time",0
  5514 000048DE 803D[AB480000]00    <2> 	cmp byte [istimeset], 0
  5515 000048E5 753A                <2> 	jne timeisset
  5516 000048E7 BE[AC480000]        <2> 	mov esi, settimemsg
  5517 000048EC E859DAFFFF          <2> 	call print
  5518 000048F1 BE[CA480000]        <2> 	mov esi, timeinputbuffer
  5519 000048F6 BF[D6480000]        <2> 	mov edi, timeinputbend
  5520 000048FB E84EDBFFFF          <2> 	call readline
  5521 00004900 BE[CA480000]        <2> 	mov esi, timeinputbuffer
  5522 00004905 31FF                <2> 	xor edi, edi
  5523 00004907 E8F9EBFFFF          <2> 	call cnvrttxt
  5524 0000490C 890D[96060000]      <2> 	mov [timeseconds], ecx
  5525 00004912 31C9                <2> 	xor ecx, ecx
  5526 00004914 890D[9A060000]      <2> 	mov [timenanoseconds], ecx
  5527 0000491A C605[AB480000]01    <2> 	mov byte [istimeset], 1
  5528                              <2> timeisset:
  5529 00004921 8B0D[96060000]      <2> 	mov ecx, [timeseconds]
  5530 00004927 E8F7EAFFFF          <2> 	call showdec
  5531                              <2> 	
  5532 0000492C 8B0D[9A060000]      <2> 	mov ecx, [timenanoseconds]
  5533 00004932 BE[9D480000]        <2> 	mov esi, timenscache
  5534 00004937 C7460230303030      <2> 	mov dword [esi+ 2], "0000"
  5535 0000493E C7460630303030      <2> 	mov dword [esi + 6], "0000"
  5536 00004945 C6460A30            <2> 	mov byte [esi + 10], "0"
  5537 00004949 BE[A8480000]        <2> 	mov esi, timenscacheend
  5538 0000494E E887E8FFFF          <2> 	call convert
  5539 00004953 BE[9D480000]        <2> 	mov esi, timenscache
  5540 00004958 E8EDD9FFFF          <2> 	call print
  5541                              <2> 	
  5542 0000495D E80F000000          <2> 	call time
  5543 00004962 BE[3D4B0000]        <2> 	mov esi, timeshow
  5544 00004967 E8DED9FFFF          <2> 	call print
  5545 0000496C E9BC000000          <2> 	jmp findday
  5546                              <2> time:
  5547 00004971 E84F010000          <2> 	call tstackput1
  5548 00004976 B00A                <2> 	mov al,10			;Get RTC register A
  5549 00004978 E879010000          <2> 	call tget1
  5550 0000497D A880                <2> 	test al,0x80			;Is update in progress?
  5551 0000497F 75F0                <2> 	jne time				; yes, wait
  5552                              <2> 
  5553 00004981 B000                <2> 	mov al,0			;Get seconds (00 to 59)
  5554 00004983 E86E010000          <2> 	call tget1
  5555 00004988 A2[344B0000]        <2> 	mov [RTCtimeSecond],al
  5556                              <2> 
  5557 0000498D B002                <2> 	mov al,0x02			;Get minutes (00 to 59)
  5558 0000498F E862010000          <2> 	call tget1
  5559 00004994 A2[354B0000]        <2> 	mov [RTCtimeMinute],al
  5560                              <2> 
  5561 00004999 B004                <2> 	mov al,0x04			;Get hours (see notes)
  5562 0000499B E856010000          <2> 	call tget1
  5563 000049A0 A2[364B0000]        <2> 	mov [RTCtimeHour],al
  5564                              <2> 
  5565 000049A5 B007                <2> 	mov al,0x07			;Get day of month (01 to 31)
  5566 000049A7 E84A010000          <2> 	call tget1
  5567 000049AC A2[374B0000]        <2> 	mov [RTCtimeDay],al
  5568                              <2> 
  5569 000049B1 B008                <2> 	mov al,0x08			;Get month (01 to 12)
  5570 000049B3 E83E010000          <2> 	call tget1
  5571 000049B8 A2[384B0000]        <2> 	mov [RTCtimeMonth],al
  5572                              <2> 
  5573 000049BD B009                <2> 	mov al,0x09			;Get year (00 to 99)
  5574 000049BF E832010000          <2> 	call tget1
  5575 000049C4 A2[394B0000]        <2> 	mov [RTCtimeYear],al
  5576                              <2> 	
  5577 000049C9 BE[3D4B0000]        <2> 	mov esi, timeshow
  5578 000049CE 8A2D[364B0000]      <2> 	mov ch, [RTCtimeHour]
  5579 000049D4 E828010000          <2> 	call tput1
  5580 000049D9 8A2D[354B0000]      <2> 	mov ch, [RTCtimeMinute]
  5581 000049DF E81D010000          <2> 	call tput1
  5582 000049E4 8A2D[344B0000]      <2> 	mov ch, [RTCtimeSecond]
  5583 000049EA E812010000          <2> 	call tput1
  5584 000049EF BE[464B0000]        <2> 	mov esi, dateshow
  5585 000049F4 8A2D[384B0000]      <2> 	mov ch, [RTCtimeMonth]
  5586 000049FA E802010000          <2> 	call tput1
  5587 000049FF 8A2D[374B0000]      <2> 	mov ch, [RTCtimeDay]
  5588 00004A05 E8F7000000          <2> 	call tput1
  5589 00004A0A B520                <2> 	mov ch, 0x20
  5590 00004A0C E8F0000000          <2> 	call tput1
  5591 00004A11 4E                  <2> 	dec esi
  5592 00004A12 8A2D[394B0000]      <2> 	mov ch, [RTCtimeYear]
  5593 00004A18 E8E4000000          <2> 	call tput1
  5594 00004A1D E8BD000000          <2> 	call tstackget1
  5595 00004A22 C3                  <2> 	ret
  5596 00004A23 BE[3D4B0000]        <2> 	mov esi, timeshow
  5597 00004A28 E81DD9FFFF          <2> 	call print
  5598                              <2> ;;get day of week
  5599                              <2> ;;add these:
  5600                              <2> ;;century value
  5601                              <2> ;;last 2 digits of year
  5602                              <2> ;;last 2 digits of year right shifted twice
  5603                              <2> ;;month table value
  5604                              <2> ;;day of the month
  5605                              <2> ;;divide these by 7
  5606                              <2> ;;the remainder is the day
  5607                              <2> findday:
  5608 00004A2D 31C0                <2> 	xor eax, eax
  5609                              <2> ;;first convert the values from BCD to hex
  5610 00004A2F A0[374B0000]        <2> 	mov al, [RTCtimeDay]
  5611 00004A34 E873000000          <2> 	call converttohex
  5612 00004A39 8825[3A4B0000]      <2> 	mov [dayhex], ah
  5613 00004A3F A0[384B0000]        <2> 	mov al, [RTCtimeMonth]
  5614 00004A44 E863000000          <2> 	call converttohex
  5615 00004A49 8825[3B4B0000]      <2> 	mov [monthhex], ah
  5616 00004A4F A0[394B0000]        <2> 	mov al, [RTCtimeYear]
  5617 00004A54 E853000000          <2> 	call converttohex
  5618 00004A59 8825[3C4B0000]      <2> 	mov [yearhex], ah
  5619 00004A5F 31C0                <2> 	xor eax, eax
  5620 00004A61 A0[3C4B0000]        <2> 	mov al, [yearhex]
  5621 00004A66 C0E802              <2> 	shr al, 2
  5622 00004A69 0205[3C4B0000]      <2> 	add al, [yearhex]
  5623 00004A6F 0506000000          <2> 	add eax, 6
  5624 00004A74 31DB                <2> 	xor ebx, ebx
  5625 00004A76 8A1D[3B4B0000]      <2> 	mov bl, [monthhex]
  5626 00004A7C FECB                <2> 	dec bl
  5627 00004A7E 81C3[5B4B0000]      <2> 	add ebx, month
  5628 00004A84 31C9                <2> 	xor ecx, ecx
  5629 00004A86 8A0B                <2> 	mov cl, [ebx]
  5630 00004A88 01C8                <2> 	add eax, ecx
  5631 00004A8A 8A0D[3A4B0000]      <2> 	mov cl, [dayhex]
  5632 00004A90 01C8                <2> 	add eax, ecx
  5633 00004A92 66BB0700            <2> 	mov bx, 7
  5634 00004A96 31D2                <2> 	xor edx, edx
  5635 00004A98 66F7F3              <2> 	div bx
  5636 00004A9B C1E202              <2> 	shl edx, 2
  5637 00004A9E 81C2[674B0000]      <2> 	add edx, day
  5638 00004AA4 8B32                <2> 	mov esi, [edx]
  5639 00004AA6 E89FD8FFFF          <2> 	call print
  5640 00004AAB C3                  <2> 	ret
  5641                              <2> 	
  5642                              <2> converttohex:
  5643 00004AAC 88C4                <2> 	mov ah, al
  5644 00004AAE C0E804              <2> 	shr al, 4
  5645 00004AB1 C0E404              <2> 	shl ah, 4
  5646 00004AB4 C0EC04              <2> 	shr ah, 4
  5647 00004AB7 3C00                <2> 	cmp al, 0
  5648 00004AB9 7409                <2> 	je noconverttohex
  5649                              <2> converttohexlp:
  5650 00004ABB 80C40A              <2> 	add ah, 10
  5651 00004ABE FEC8                <2> 	dec al
  5652 00004AC0 3C00                <2> 	cmp al, 0
  5653 00004AC2 75F7                <2> 	jne converttohexlp
  5654                              <2> noconverttohex:
  5655 00004AC4 C3                  <2> 	ret
  5656                              <2> 	
  5657                              <2> tstackput1:
  5658 00004AC5 8935[304B0000]      <2> 	mov [tstack + 20], esi
  5659 00004ACB BE[1C4B0000]        <2> 	mov esi, tstack
  5660 00004AD0 8906                <2> 	mov [esi], eax
  5661 00004AD2 895E04              <2> 	mov [esi + 4], ebx
  5662 00004AD5 894E08              <2> 	mov [esi + 8], ecx
  5663 00004AD8 89560C              <2> 	mov [esi + 12], edx
  5664 00004ADB 897E10              <2> 	mov [esi + 16], edi
  5665 00004ADE C3                  <2> 	ret
  5666                              <2> 	
  5667                              <2> tstackget1:
  5668 00004ADF BE[1C4B0000]        <2> 	mov esi, tstack
  5669 00004AE4 8B06                <2> 	mov eax, [esi]
  5670 00004AE6 8B5E04              <2> 	mov ebx, [esi + 4]
  5671 00004AE9 8B4E08              <2> 	mov ecx, [esi + 8]
  5672 00004AEC 8B560C              <2> 	mov edx, [esi + 12]
  5673 00004AEF 8B7E10              <2> 	mov edi, [esi + 16]
  5674 00004AF2 8B7614              <2> 	mov esi, [esi + 20]
  5675 00004AF5 C3                  <2> 	ret
  5676                              <2> 	
  5677                              <2> tget1:
  5678 00004AF6 66BA7000            <2> 	mov dx, 0x70
  5679 00004AFA EE                  <2> 	out dx, al
  5680 00004AFB 6642                <2> 	inc dx
  5681 00004AFD EC                  <2> 	in al, dx
  5682 00004AFE 664A                <2> 	dec dx
  5683 00004B00 C3                  <2> 	ret
  5684                              <2> 	
  5685                              <2> tput1:
  5686 00004B01 66C1E904            <2> 	shr cx, 4
  5687 00004B05 B030                <2> 	mov al, 48
  5688 00004B07 00E8                <2> 	add al, ch
  5689 00004B09 8806                <2> 	mov [esi], al
  5690 00004B0B 46                  <2> 	inc esi
  5691 00004B0C B030                <2> 	mov al, 48
  5692 00004B0E C0E904              <2> 	shr cl, 4
  5693 00004B11 00C8                <2> 	add al, cl
  5694 00004B13 8806                <2> 	mov [esi], al
  5695 00004B15 81C602000000        <2> 	add esi, 2
  5696 00004B1B C3                  <2> 	ret
  5697                              <2> 		
  5698 00004B1C 000000000000000000- <2> 	tstack dd 0,0,0,0,0,0
  5699 00004B25 000000000000000000- <2>
  5700 00004B2E 000000000000        <2>
  5701 00004B34 00                  <2> 	RTCtimeSecond db 0
  5702 00004B35 00                  <2> 	RTCtimeMinute db 0
  5703 00004B36 00                  <2> 	RTCtimeHour db 0
  5704 00004B37 00                  <2> 	RTCtimeDay db 0
  5705 00004B38 00                  <2> 	RTCtimeMonth db 0
  5706 00004B39 00                  <2> 	RTCtimeYear db 0
  5707 00004B3A 00                  <2> 	dayhex db 0
  5708 00004B3B 00                  <2> 	monthhex db 0
  5709 00004B3C 00                  <2> 	yearhex db 0
  5710 00004B3D 30303A30303A30300A  <2> 	timeshow db "00:00:00",10
  5711 00004B46 30302D30302D303030- <2> 	dateshow db "00-00-0000",10,0
  5712 00004B4F 300A00              <2>
  5713                              <2> 	oldcentury:	;;from 1700 to 1900
  5714 00004B52 040200              <2> 	db 4,2,0
  5715                              <2> 	century:	;;from 2000 to 2500
  5716 00004B55 060402000604        <2> 	db 6,4,2,0,6,4
  5717                              <2> 	month:
  5718 00004B5B 000303060104060205- <2> 	db 0,3,3,6,1,4,6,2,5,0,3,5
  5719 00004B64 000305              <2>
  5720                              <2> 	day:
  5721 00004B67 [834B0000]          <2> 	dd sunday
  5722 00004B6B [8B4B0000]          <2> 	dd monday
  5723 00004B6F [934B0000]          <2> 	dd tuesday
  5724 00004B73 [9C4B0000]          <2> 	dd wednesday
  5725 00004B77 [A74B0000]          <2> 	dd thursday
  5726 00004B7B [B14B0000]          <2> 	dd friday
  5727 00004B7F [B94B0000]          <2> 	dd saturday
  5728                              <2> sunday:
  5729 00004B83 53756E6461790A00    <2> 	db "Sunday",10,0
  5730                              <2> monday:
  5731 00004B8B 4D6F6E6461790A00    <2> 	db "Monday",10,0
  5732                              <2> tuesday:
  5733 00004B93 547565736461790A00  <2> 	db "Tuesday",10,0
  5734                              <2> wednesday:
  5735 00004B9C 5765646E6573646179- <2> 	db "Wednesday",10,0
  5736 00004BA5 0A00                <2>
  5737                              <2> thursday:
  5738 00004BA7 54687572736461790A- <2> 	db "Thursday",10,0
  5739 00004BB0 00                  <2>
  5740                              <2> friday:
  5741 00004BB1 4672696461790A00    <2> 	db "Friday",10,0
  5742                              <2> saturday:
  5743 00004BB9 53617475726461790A- <2> 	db "Saturday",10,0
  5744 00004BC2 00                  <2>
  5745                              <1> %include 'source/programs/turnoff.asm'
  5746 00004BC3 FF2C7475726E6F6666- <2> 	db 255,44,"turnoff",0
  5747 00004BCC 00                  <2>
  5748 00004BCD 66BB[E84B]          <2> 			mov bx, shutdown
  5749 00004BD1 66891D[2B110000]    <2> 			mov [realmodeptr], bx
  5750 00004BD8 BB[124C0000]        <2> 			mov ebx, halt
  5751 00004BDD 891D[27110000]      <2> 			mov [realmodereturn], ebx
  5752 00004BE3 E947C4FFFF          <2> 			jmp realmode
  5753                              <2> 
  5754                              <2> [BITS 16]
  5755                              <2> 		shutdown:
  5756 00004BE8 B453                <2> 			mov ah, 0x53
  5757 00004BEA B004                <2> 			mov al, 4
  5758 00004BEC 31DB                <2> 			xor bx, bx
  5759 00004BEE CD15                <2> 			int 0x15
  5760                              <2> 			
  5761 00004BF0 B453                <2> 			mov ah, 0x53
  5762 00004BF2 B001                <2> 			mov al, 1
  5763 00004BF4 31DB                <2> 			xor bx, bx
  5764 00004BF6 CD15                <2> 			int 0x15
  5765                              <2> 			
  5766 00004BF8 B453                <2> 			mov ah, 0x53
  5767 00004BFA B008                <2> 			mov al, 8
  5768 00004BFC BB0100              <2> 			mov bx, 1
  5769 00004BFF B90100              <2> 			mov cx, 1
  5770 00004C02 CD15                <2> 			int 0x15
  5771                              <2> 			
  5772 00004C04 B453                <2> 			mov ah, 0x53
  5773 00004C06 B007                <2> 			mov al, 7
  5774 00004C08 BB0100              <2> 			mov bx, 1
  5775 00004C0B B90300              <2> 			mov cx, 3
  5776 00004C0E CD15                <2> 			int 0x15
  5777 00004C10 EBFE                <2> 			jmp $
  5778                              <2> 			[BITS 32]
  5779 00004C12 EBFE                <2> halt: jmp $
  5780                              <1> %include 'source/programs/wait.asm'
  5781 00004C14 FF2C7761697400      <2> db 255,44,"wait",0
  5782                              <2> waitkey:
  5783 00004C1B E8AADBFFFF          <2> 		call getchar
  5784 00004C20 C3                  <2> 		ret
  5785                              <1> %include 'source/programs/while.asm'
  5786 00004C21 FF2C7768696C6500    <2> db 255,44,"while",0
  5787 00004C29 30C0                <2> whilecmd:  xor al, al
  5788 00004C2B 3805[92950000]      <2> 	cmp [BATCHISON], al
  5789 00004C31 0F84E1EFFFFF        <2> 	je near notbatch
  5790 00004C37 8B35[8E950000]      <2> 	mov esi, [BATCHPOS]
  5791 00004C3D 81EE02000000        <2> 	sub esi, 2
  5792 00004C43 4E                  <2> whilefnd: dec esi
  5793 00004C44 8A06                <2> 	mov al, [esi]
  5794 00004C46 3C0A                <2> 	cmp al, 10
  5795 00004C48 0F840A000000        <2> 	je near whilefnd2
  5796 00004C4E 3C00                <2> 	cmp al, 0
  5797 00004C50 0F8402000000        <2> 	je near whilefnd2
  5798 00004C56 EBEB                <2> 	jmp whilefnd
  5799                              <2> whilefnd2:
  5800 00004C58 46                  <2> 	inc esi
  5801 00004C59 8935[94950000]      <2> 	mov [LOOPPOS], esi
  5802 00004C5F C605[93950000]01    <2> 	mov BYTE [LOOPON], 1
  5803 00004C66 BE[A2A90000]        <2> 	mov esi, buftxt
  5804 00004C6B BB[A2A90000]        <2> 	mov ebx, buftxt
  5805 00004C70 81C306000000        <2> 	add ebx, 6
  5806 00004C76 E92EF5FFFF          <2> 	jmp chkeqsn
  5807                              <1> progend:		;programs end here	
  5808                              <1> batchprogend:
  5809                                  	%include 'source/hardware.asm'
  5810                              <1> %include "source/drivers/sound/pcspkr.asm"
  5811                              <2> ;PC Speaker Drivers
  5812                              <2> PCSpeakerPWM:
  5813 00004C7B 3C90                <2> 	cmp al,0x90	;If the byte taken from the memory is less than 80h,
  5814                              <2> 				;turn off the speaker to prevent "unwanted" sounds,
  5815 00004C7D 720A                <2> 	jb TurnOffBeeper	;like: ASCII strings (e.g. "WAVEfmt" signature etc).
  5816 00004C7F E8C2000000          <2> 	call Sound_On
  5817 00004C84 E905000000          <2> 	jmp Sound_Done
  5818                              <2> TurnOffBeeper:
  5819 00004C89 E8D6000000          <2> 	call Sound_Off
  5820                              <2> Sound_Done:
  5821 00004C8E 46                  <2> 	inc esi	;Increment ESI to load the next byte
  5822 00004C8F E96FBAFFFF          <2> 	jmp keyinterrupt
  5823                              <2> 
  5824                              <2> PCSpeakerRAW:
  5825 00004C94 60                  <2> 	pusha
  5826                              <2> nosoundrep:
  5827 00004C95 8B35[A5060000]      <2> 	mov esi, [soundpos]
  5828 00004C9B 31C9                <2> 	xor ecx, ecx
  5829 00004C9D 668B0D[A3060000]    <2> 	mov cx, [soundrepititions]
  5830 00004CA4 6681F90000          <2> 	cmp cx, 0
  5831 00004CA9 0F8548000000        <2> 	jne near donesetpitch
  5832 00004CAF 668B0E              <2> 	mov cx, [esi]
  5833 00004CB2 668B5E02            <2> 	mov bx, [esi + 2]
  5834 00004CB6 66890D[A3060000]    <2> 	mov [soundrepititions], cx
  5835 00004CBD 81C604000000        <2> 	add esi, 4
  5836 00004CC3 8935[A5060000]      <2> 	mov [soundpos], esi
  5837 00004CC9 3B35[A9060000]      <2> 	cmp esi, [soundendpos]
  5838 00004CCF 7735                <2> 	ja stopsound
  5839 00004CD1 66813D[A3060000]00- <2> 	cmp word [soundrepititions], 0
  5840 00004CD9 00                  <2>
  5841 00004CDA 74B9                <2> 	je nosoundrep
  5842 00004CDC 6681FB0000          <2> 	cmp bx, 0
  5843 00004CE1 740F                <2> 	je nosoundplay
  5844 00004CE3 E840000000          <2> 	call setpitch
  5845 00004CE8 E849000000          <2> 	call startsound
  5846 00004CED E905000000          <2> 	jmp donesetpitch
  5847                              <2> nosoundplay:
  5848 00004CF2 E846000000          <2> 	call killsound
  5849                              <2> donesetpitch:
  5850 00004CF7 6649                <2> 	dec cx
  5851 00004CF9 66890D[A3060000]    <2> 	mov [soundrepititions], cx
  5852 00004D00 61                  <2> 	popa
  5853 00004D01 E9F0B9FFFF          <2> 	jmp timerinterrupt
  5854                              <2> stopsound:
  5855 00004D06 31C0                <2> 	xor eax, eax
  5856 00004D08 66A3[A3060000]      <2> 	mov [soundrepititions], ax
  5857 00004D0E A2[A2060000]        <2> 	mov [soundon], al
  5858 00004D13 A3[A5060000]        <2> 	mov [soundpos], eax
  5859 00004D18 A3[A9060000]        <2> 	mov [soundendpos], eax
  5860 00004D1D E81B000000          <2> 	call killsound
  5861 00004D22 61                  <2> 	popa
  5862 00004D23 E9CEB9FFFF          <2> 	jmp timerinterrupt
  5863                              <2> 
  5864                              <2> 
  5865                              <2> setpitch:
  5866 00004D28 B0B6                <2> 	mov al, 0xB6
  5867 00004D2A E643                <2> 	out 0x43, al
  5868 00004D2C 6689D8              <2> 	mov ax, bx
  5869 00004D2F E642                <2> 	out 0x42, al
  5870 00004D31 88E0                <2> 	mov al, ah
  5871 00004D33 E642                <2> 	out 0x42, al
  5872 00004D35 C3                  <2> 	ret
  5873                              <2> startsound:
  5874 00004D36 E461                <2> 	in al, 0x61
  5875 00004D38 0C03                <2> 	or al, 3
  5876 00004D3A E661                <2> 	out 0x61, al
  5877 00004D3C C3                  <2> 	ret
  5878                              <2> killsound:
  5879 00004D3D E461                <2> 	in al, 0x61
  5880 00004D3F 24FC                <2> 	and al, 0xFC
  5881 00004D41 E661                <2> 	out 0x61, al
  5882 00004D43 C3                  <2> 	ret
  5883                              <2> 	
  5884                              <2> ;this is code that I got from
  5885                              <2> ;http://forum.osdev.org/viewtopic.php?f=13&t=17293
  5886                              <2> ;that plays wave files
  5887 00004D44 0000                <2> WAVEDIV dw 0
  5888                              <2> 
  5889                              <2> Sound_On:	; A routine to make sounds with BX = frequency in Hz
  5890 00004D46 668B1D[444D0000]    <2>    mov bx, [WAVEDIV]
  5891 00004D4D E461                <2>    in al,0x61
  5892 00004D4F A803                <2>    test al,3
  5893 00004D51 7508                <2>    jnz A99               
  5894 00004D53 0C03                <2>    or al,3	;Turn on the speaker itself
  5895 00004D55 E661                <2>    out 0x61,al               
  5896 00004D57 B0B6                <2>    mov al,0xb6
  5897 00004D59 E643                <2>    out 0x43,al
  5898                              <2> A99:   
  5899 00004D5B 88D8                <2>    mov al,bl
  5900 00004D5D E642                <2>    out 0x42,al             
  5901 00004D5F 88F8                <2>    mov al,bh
  5902 00004D61 E642                <2>    out 0x42,al
  5903                              <2> Done1:
  5904 00004D63 C3                  <2>    ret
  5905                              <2> 
  5906                              <2> Sound_Off:
  5907 00004D64 E461                <2>    in al,0x61                 
  5908 00004D66 24FC                <2>    and al,11111100b                               ;Turn off the speaker
  5909 00004D68 E661                <2>    out 0x61,al
  5910 00004D6A C3                  <2>    ret
  5911                              <1> %include "source/drivers/sound/sblaster.asm"
  5912                              <2> ;Sound Blaster Drivers
  5913                              <2> sblaster:
  5914                              <2> .init:
  5915 00004D6B E842010000          <2> 		call ResetDSP			;If the system is Sound Blaster 16 compatible, reset the DSP
  5916 00004D70 A2[074F0000]        <2> 		mov [SoundBlaster], al	;if the reset worked, show an available card
  5917 00004D75 3C00                <2> 		cmp al, 0
  5918 00004D77 740E                <2> 		je .noinit
  5919 00004D79 B0D1                <2> 		mov	al,0D1h 		; turn speaker(s) on
  5920 00004D7B E866010000          <2> 		call WriteDSP
  5921 00004D80 B088                <2> 		mov	al,088h 		; Left = 8, Right = 8 (15-highest)
  5922 00004D82 E81C010000          <2> 		call MstrVol 		; L = Hi Nibble, R = Lo Nibble
  5923                              <2> .noinit:
  5924 00004D87 C3                  <2> 		ret
  5925                              <2> sblastercont: ;this function goes to the next available portion of a sound, if necessary
  5926 00004D88 66813D[F54E0000]00- <2> 	cmp word [Length0], 0
  5927 00004D90 00                  <2>
  5928 00004D91 0F842BBAFFFF        <2> 	je near handled2
  5929 00004D97 668B3D[F54E0000]    <2> 	mov di, [Length0]
  5930 00004D9E 664F                <2> 	dec di
  5931 00004DA0 66893D[F54E0000]    <2> 	mov [Length0], di
  5932 00004DA7 A1[F94E0000]        <2> 	mov eax, [NextMemLoc]
  5933 00004DAC A3[FD4E0000]        <2> 	mov [MemLoc], eax
  5934 00004DB1 31C9                <2> 	xor ecx, ecx
  5935 00004DB3 66B9FFFF            <2> 	mov cx, 0xFFFF
  5936 00004DB7 66890D[F74E0000]    <2> 	mov [Length1], cx
  5937 00004DBE 01C8                <2> 	add eax, ecx
  5938 00004DC0 A3[F94E0000]        <2> 	mov [NextMemLoc], eax
  5939 00004DC5 E805000000          <2> 	call DMAPlay
  5940 00004DCA E9F3B9FFFF          <2> 	jmp handled2 ;it is part of an interrupt routine
  5941                              <2> 
  5942                              <2> DMAPlay:    ;uses eax ebx edx
  5943 00004DCF 66FF0D[F74E0000]    <2> 		dec	word [Length1]
  5944 00004DD6 C605[014F0000]00    <2> 		mov	byte [Page1],00h
  5945                              <2> 
  5946 00004DDD B005                <2> 		mov	al,(Channel+4)
  5947 00004DDF 66BA0A00            <2> 		mov	dx,0Ah
  5948 00004DE3 EE                  <2> 		out	dx,al
  5949 00004DE4 30C0                <2> 		xor	al,al
  5950 00004DE6 66BA0C00            <2> 		mov	dx,0Ch
  5951 00004DEA EE                  <2> 		out	dx,al
  5952 00004DEB B049                <2> 		mov	al,ModeReg
  5953 00004DED 66BA0B00            <2> 		mov	dx,0Bh
  5954 00004DF1 EE                  <2> 		out	dx,al
  5955 00004DF2 A1[FD4E0000]        <2> 		mov	eax,[MemLoc]
  5956 00004DF7 66BA0200            <2> 		mov	dx,AddPort
  5957 00004DFB EE                  <2> 		out	dx,al
  5958 00004DFC 86C4                <2> 		xchg al,ah
  5959 00004DFE EE                  <2> 		out	dx,al
  5960 00004DFF A1[FD4E0000]        <2> 		mov	eax,[MemLoc]
  5961 00004E04 89C2                <2> 		mov	edx,eax
  5962 00004E06 2500000100          <2> 		and	eax,65536
  5963 00004E0B 7406                <2> 		jz	MemLocN1
  5964 00004E0D FE05[014F0000]      <2> 		inc	byte [Page1]
  5965                              <2> MemLocN1:
  5966 00004E13 89D0                <2> 		mov	eax,edx
  5967 00004E15 2500000200          <2> 		and	eax,131072
  5968 00004E1A 7407                <2> 		jz	MemLocN2
  5969 00004E1C 8005[014F0000]02    <2> 		add	byte [Page1],02
  5970                              <2> MemLocN2:
  5971 00004E23 89D0                <2> 		mov	eax,edx
  5972 00004E25 2500000400          <2> 		and	eax,262144
  5973 00004E2A 7407                <2> 		jz	MemLocN3
  5974 00004E2C 8005[014F0000]04    <2> 		add	byte [Page1],04
  5975                              <2> MemLocN3:
  5976 00004E33 89D0                <2> 		mov	eax,edx
  5977 00004E35 2500000800          <2> 		and	eax,524288
  5978 00004E3A 7407                <2> 		jz	MemLocN4
  5979 00004E3C 8005[014F0000]08    <2> 		add	byte [Page1],08
  5980                              <2> MemLocN4:
  5981 00004E43 66BA8300            <2> 		mov	dx,PgPort
  5982 00004E47 A0[014F0000]        <2> 		mov	al,[Page1]
  5983 00004E4C EE                  <2> 		out	dx,al
  5984 00004E4D 66BA0300            <2> 		mov	dx,LenPort
  5985 00004E51 66A1[F74E0000]      <2> 		mov	ax,[Length1]
  5986 00004E57 EE                  <2> 		out	dx,al
  5987 00004E58 86C4                <2> 		xchg al,ah
  5988 00004E5A EE                  <2> 		out	dx,al
  5989 00004E5B 66BA0A00            <2> 		mov	dx,0Ah
  5990 00004E5F B001                <2> 		mov	al,Channel
  5991 00004E61 EE                  <2> 		out	dx,al
  5992                              <2> 		
  5993 00004E62 B040                <2> 		mov	al,40h
  5994 00004E64 E87D000000          <2> 		call WriteDSP
  5995 00004E69 31D2                <2> 		xor	edx,edx
  5996 00004E6B B840420F00          <2> 		mov	eax,1000000
  5997 00004E70 8B1D[024F0000]      <2> 		mov	ebx,[Freq]
  5998 00004E76 F7F3                <2> 		div	ebx
  5999 00004E78 89C3                <2> 		mov	ebx,eax
  6000 00004E7A B800010000          <2> 		mov	eax,256
  6001 00004E7F 29D8                <2> 		sub	eax,ebx
  6002 00004E81 E860000000          <2> 		call WriteDSP
  6003 00004E86 A0[064F0000]        <2> 		mov	al,[WAVEMode]	;write the mode
  6004 00004E8B E856000000          <2> 		call WriteDSP
  6005 00004E90 66A1[F74E0000]      <2> 		mov	ax,[Length1]
  6006 00004E96 E84B000000          <2> 		call WriteDSP
  6007 00004E9B 86C4                <2> 		xchg al,ah
  6008 00004E9D E844000000          <2> 		call WriteDSP
  6009 00004EA2 C3                  <2> 		ret
  6010                              <2> 
  6011                              <2> MstrVol:    ;uses ax dx
  6012 00004EA3 6650                <2> 	   push ax
  6013 00004EA5 66BA2402            <2> 	   mov	dx,(BasePort+4)
  6014 00004EA9 B022                <2> 	   mov	al,22h
  6015 00004EAB EE                  <2> 	   out	dx,al
  6016 00004EAC 6658                <2> 	   pop	ax
  6017 00004EAE 6642                <2> 	   inc	dx
  6018 00004EB0 EE                  <2> 	   out	dx,al
  6019 00004EB1 C3                  <2> 	   ret
  6020                              <2> 	   
  6021                              <2> ResetDSP:   ; uses cx dx
  6022 00004EB2 66BA2602            <2> 			mov	dx,(BasePort+6)
  6023 00004EB6 B001                <2> 			mov	al,01
  6024 00004EB8 EE                  <2> 			out	dx,al
  6025 00004EB9 66B93200            <2> 			mov	cx,50
  6026 00004EBD EC                  <2> WaitIt1:	in	al,dx
  6027 00004EBE E2FD                <2> 			loop WaitIt1
  6028 00004EC0 30C0                <2> 			xor	al,al
  6029 00004EC2 EE                  <2> 			out	dx,al
  6030 00004EC3 66B93200            <2> 			mov	cx,50
  6031 00004EC7 EC                  <2> WaitIt2:	in	al,dx
  6032 00004EC8 E2FD                <2> 			loop WaitIt2
  6033 00004ECA B4FF                <2> 			mov	ah,0FFh 		; part of Return Code
  6034 00004ECC 66BA2E02            <2> 			mov	dx,(BasePort+14)
  6035 00004ED0 EC                  <2> 			in	al,dx
  6036 00004ED1 2480                <2> 			and	al,80h
  6037 00004ED3 3C80                <2> 			cmp	al,80h
  6038 00004ED5 750C                <2> 			jne	ResetErr
  6039 00004ED7 66BA2A02            <2> 			mov	dx,(BasePort+10)
  6040 00004EDB EC                  <2> 			in	al,dx
  6041 00004EDC 3CAA                <2> 			cmp	al,0AAh
  6042 00004EDE 7503                <2> 			jne	ResetErr
  6043 00004EE0 B001                <2> ResetOK:	mov al, 1		; return ax = 0 if reset ok
  6044 00004EE2 C3                  <2> 			ret
  6045 00004EE3 30C0                <2> ResetErr:	xor al, al
  6046 00004EE5 C3                  <2> 			ret
  6047                              <2> 
  6048                              <2> WriteDSP:   ;uses ax dx
  6049 00004EE6 6650                <2> 		push ax
  6050 00004EE8 66BA2C02            <2> 		mov	dx,(BasePort+12)
  6051 00004EEC EC                  <2> WaitIt:	in	al,dx
  6052 00004EED 2480                <2> 		and	al,80h
  6053 00004EEF 75FB                <2> 		jnz	WaitIt
  6054 00004EF1 6658                <2> 		pop	ax
  6055 00004EF3 EE                  <2> 		out	dx,al
  6056 00004EF4 C3                  <2> 		ret
  6057                              <2> 
  6058 00004EF5 0000                <2> Length0 dw	0
  6059 00004EF7 0000                <2> Length1	dw  0
  6060 00004EF9 00000000            <2> NextMemLoc dd 0
  6061 00004EFD 00000000            <2> MemLoc	dd  0
  6062 00004F01 00                  <2> Page1	db  0
  6063 00004F02 00000000            <2> Freq	dd	0
  6064 00004F06 14                  <2> WAVEMode db 14h
  6065                              <2> 
  6066                              <2> PgPort	equ 83h
  6067                              <2> AddPort	equ 02h
  6068                              <2> LenPort	equ 03h
  6069                              <2> ModeReg	equ 49h
  6070                              <2> Channel	equ 01h
  6071                              <2> BasePort	equ 220h
  6072 00004F07 00                  <2> SoundBlaster	db 0
  6073                              <1> %include "source/drivers/network/rtl8139.asm"
  6074                              <2> ;RTL8139 NIC DRIVER
  6075                              <2> rtl8139:
  6076                              <2> .RBSTART equ 0x30
  6077                              <2> .IMR equ 0x3C
  6078                              <2> .ISR equ 0x3E
  6079                              <2> .CMD equ 0x37
  6080                              <2> .RCR equ 0x44
  6081                              <2> .CONFIG1 equ 0x52
  6082                              <2> .TSD0 equ 0x10
  6083                              <2> .TSAD0 equ 0x20
  6084                              <2> .initcard:	;should find card, get mac, and initialize card
  6085 00004F08 31C0                <2> 	xor eax, eax
  6086 00004F0A A2[B36F0000]        <2> 	mov [pcifunction], al
  6087 00004F0F A2[B16F0000]        <2> 	mov [pcibus], al
  6088 00004F14 A2[B26F0000]        <2> 	mov [pcidevice], al
  6089 00004F19 B002                <2> 	mov al, 0x02 ;;type code
  6090 00004F1B A2[2E700000]        <2> 	mov [pcitype], al
  6091 00004F20 E891200000          <2> 	call getpciport
  6092                              <2> .initnic:	;Here i tried the rtl8139 interface, fuck it
  6093 00004F25 8915[C0500000]      <2> 	mov [basenicaddr], edx
  6094 00004F2B 89D1                <2> 	mov ecx, edx
  6095 00004F2D E83AE4FFFF          <2> 	call showhex	;for debugging, please remove
  6096 00004F32 BE[3F600100]        <2> 	mov esi, rbuffstart
  6097 00004F37 B900200000          <2> 	mov ecx, 8192
  6098 00004F3C 31C0                <2> 	xor eax, eax
  6099                              <2> .clearrbuff:		;clear receive buffer which starts at rbuffstart
  6100 00004F3E 8806                <2> 	mov [esi], al
  6101 00004F40 46                  <2> 	inc esi
  6102 00004F41 6649                <2> 	dec cx
  6103 00004F43 6681F90000          <2> 	cmp cx, 0
  6104 00004F48 75F4                <2> 	jne .clearrbuff
  6105                              <2> .findmac:
  6106 00004F4A 8B15[C0500000]      <2> 	mov edx, [basenicaddr]
  6107 00004F50 BF[C8500000]        <2> 	mov edi, sysmac
  6108 00004F55 B906000000          <2> 	mov ecx, 6
  6109                              <2> .macputloop:
  6110 00004F5A EC                  <2> 	in al, dx
  6111 00004F5B 8807                <2> 	mov [edi], al
  6112 00004F5D 47                  <2> 	inc edi
  6113 00004F5E 42                  <2> 	inc edx
  6114 00004F5F 49                  <2> 	dec ecx
  6115 00004F60 75F8                <2> 	jnz .macputloop
  6116 00004F62 B9[C8500000]        <2> 	mov ecx, sysmac
  6117 00004F67 E803010000          <2> 	call showmac
  6118                              <2> .resetnic:
  6119 00004F6C 8B15[C0500000]      <2> 	mov edx, [basenicaddr]
  6120 00004F72 81C252000000        <2> 	add edx, .CONFIG1
  6121 00004F78 30C0                <2> 	xor al, al
  6122 00004F7A EE                  <2> 	out dx, al	;WAKE UP!!!!
  6123 00004F7B 8B15[C0500000]      <2> 	mov edx, [basenicaddr]
  6124 00004F81 81C237000000        <2> 	add edx, .CMD
  6125 00004F87 B010                <2> 	mov al, 0x10
  6126 00004F89 EE                  <2> 	out dx, al	;Reset
  6127                              <2> .resetnicwait:
  6128 00004F8A 8B15[C0500000]      <2> 	mov edx, [basenicaddr]
  6129 00004F90 81C237000000        <2> 	add edx, .CMD
  6130 00004F96 EC                  <2> 	in al, dx
  6131 00004F97 2410                <2> 	and al, 0x10
  6132 00004F99 3C10                <2> 	cmp al, 0x10
  6133 00004F9B 0F84E9FFFFFF        <2> 	je near .resetnicwait
  6134 00004FA1 8B15[C0500000]      <2> 	mov edx, [basenicaddr]
  6135 00004FA7 81C230000000        <2> 	add edx, .RBSTART
  6136 00004FAD B8[3F600100]        <2> 	mov eax, rbuffstart
  6137 00004FB2 0500001000          <2> 	add eax, 0x100000 ;change virtual to physical address
  6138 00004FB7 EF                  <2> 	out dx, eax	;give nic receive buffer location
  6139 00004FB8 8B15[C0500000]      <2> 	mov edx, [basenicaddr]
  6140 00004FBE 81C23C000000        <2> 	add edx, .IMR
  6141 00004FC4 66ED                <2> 	in ax, dx
  6142 00004FC6 660D7FE0            <2> 	or ax, 0xE07F ;set all possible interrupts to enabled
  6143 00004FCA 66EF                <2> 	out dx, ax	;set TOK and ROK
  6144 00004FCC 8B15[C0500000]      <2> 	mov edx, [basenicaddr]
  6145 00004FD2 81C244000000        <2> 	add edx, .RCR
  6146 00004FD8 B80F000000          <2> 	mov eax, 0xf
  6147 00004FDD 0580000000          <2> 	add eax, 128 ;enable wrap option
  6148 00004FE2 EF                  <2> 	out dx, eax	;recieve packets from all matches
  6149 00004FE3 8B15[C0500000]      <2> 	mov edx, [basenicaddr]
  6150 00004FE9 81C237000000        <2> 	add edx, .CMD
  6151 00004FEF B00C                <2> 	mov al, 0x0C
  6152 00004FF1 EE                  <2> 	out dx, al	;use transmit and receive
  6153 00004FF2 C605[BF500000]01    <2> 	mov byte [nicconfig], 1
  6154 00004FF9 C3                  <2> 	ret
  6155                              <2> 	
  6156                              <2> .sendpacket:	;packet with beginning in edi and end in esi
  6157 00004FFA 56                  <2> 	push esi
  6158 00004FFB 57                  <2> 	push edi
  6159                              <2> .nic2:		;here come the low level drivers :(
  6160                              <2> 			;frame begins at esi, ends at edi
  6161                              <2>  			;0x0200 is the class code for ethernet cards
  6162 00004FFC 803D[BF500000]01    <2> 	cmp byte [nicconfig], 1
  6163 00005003 7405                <2> 	je .sendcachedata
  6164 00005005 E8FEFEFFFF          <2> 	call .initcard
  6165                              <2> .sendcachedata:
  6166 0000500A 8B15[C0500000]      <2> 	mov edx, [basenicaddr]
  6167 00005010 81C220000000        <2> 	add edx, .TSAD0
  6168 00005016 5F                  <2> 	pop edi
  6169 00005017 89F8                <2> 	mov eax, edi
  6170 00005019 0500001000          <2> 	add eax, 0x100000 ;base address
  6171 0000501E EF                  <2> 	out dx, eax	;here's Johnny!
  6172 0000501F 5E                  <2> 	pop esi
  6173 00005020 29FE                <2> 	sub esi, edi
  6174 00005022 8B15[C0500000]      <2> 	mov edx, [basenicaddr]
  6175 00005028 81C210000000        <2> 	add edx, .TSD0
  6176 0000502E ED                  <2> 	in eax, dx ;get tsd
  6177 0000502F 2500E0FFFF          <2> 	and eax, 0xFFFFE000 ;clear off thirteen bits
  6178 00005034 01F0                <2> 	add eax, esi ;add length to tsd
  6179 00005036 25FFDFFFFF          <2> 	and eax, 0xFFFFDFFF ;clear own bit
  6180 0000503B EF                  <2> 	out dx, eax
  6181                              <2> .checknicownbit:
  6182 0000503C 8B15[C0500000]      <2> 	mov edx, [basenicaddr]
  6183 00005042 81C210000000        <2> 	add edx, .TSD0
  6184 00005048 ED                  <2> 	in eax, dx
  6185 00005049 2500200000          <2> 	and eax, 0x2000 ;check own bit
  6186 0000504E 3D00200000          <2> 	cmp eax, 0x2000
  6187 00005053 75E7                <2> 	jne .checknicownbit
  6188                              <2> .checknictokbit:
  6189 00005055 8B15[C0500000]      <2> 	mov edx, [basenicaddr]
  6190 0000505B 81C210000000        <2> 	add edx, .TSD0
  6191 00005061 ED                  <2> 	in eax, dx
  6192 00005062 2500800000          <2> 	and eax, 0x8000	;check tok bit
  6193 00005067 3D00800000          <2> 	cmp eax, 0x8000
  6194 0000506C 75E7                <2> 	jne .checknictokbit
  6195 0000506E C3                  <2> 	ret
  6196                              <2> 	
  6197                              <2> showmac:	;mac begins in [ecx]
  6198 0000506F BE[A7500000]        <2> 	mov esi, macprint
  6199 00005074 89CF                <2> 	mov edi, ecx
  6200 00005076 81C106000000        <2> 	add ecx, 6
  6201                              <2> showmacloop:
  6202 0000507C 8A07                <2> 	mov al, [edi]
  6203 0000507E 8A27                <2> 	mov ah, [edi]
  6204 00005080 C0E804              <2> 	shr al, 4
  6205 00005083 C0E404              <2> 	shl ah, 4
  6206 00005086 C0EC04              <2> 	shr ah, 4
  6207 00005089 0430                <2> 	add al, 48
  6208 0000508B 80C430              <2> 	add ah, 48
  6209 0000508E 668906              <2> 	mov [esi], ax
  6210 00005091 81C603000000        <2> 	add esi, 3
  6211 00005097 47                  <2> 	inc edi
  6212 00005098 39CF                <2> 	cmp edi, ecx
  6213 0000509A 72E0                <2> 	jb showmacloop
  6214 0000509C BE[A7500000]        <2> 	mov esi, macprint
  6215 000050A1 E8A4D2FFFF          <2> 	call print
  6216 000050A6 C3                  <2> 	ret
  6217                              <2> 	
  6218 000050A7 30303A30303A30303A- <2> macprint db "00:00:00:00:00:00  ",0
  6219 000050B0 30303A30303A303020- <2>
  6220 000050B9 2000                <2>
  6221 000050BB 00000000            <2> ethernetend dw 0,0
  6222 000050BF 00                  <2> nicconfig db 0
  6223 000050C0 00000000            <2> basenicaddr	db 0,0,0,0
  6224 000050C4 C0A80005            <2> sysip db 192,168,0,5
  6225 000050C8 000000000000        <2> sysmac	db 0,0,0,0,0,0		;my mac address
  6226                              <1> %include "source/drivers/input/mouse.asm"
  6227 000050CE 00                  <2> mousedisabled db 0
  6228                              <2> 	
  6229                              <2> 	cursorgui:
  6230 000050CF 803D[BC6A0000]01    <2> 		cmp byte [mouseon], 1
  6231 000050D6 0F8432000000        <2> 		je near moused
  6232 000050DC 803D[AD8C0000]00    <2> 		cmp byte [guion], 0
  6233 000050E3 0F841F040000        <2> 		je near entdown
  6234                              <2> 	initmouse:
  6235 000050E9 803D[AD8C0000]00    <2> 		cmp byte [guion], 0
  6236 000050F0 7405                <2> 		je noswmsposinit
  6237 000050F2 E8BD080000          <2> 		call switchmousepos2
  6238                              <2> 	noswmsposinit:
  6239 000050F7 E84E020000          <2> 	  	call PS2SET
  6240 000050FC E877020000          <2> 		call ACTMOUS
  6241 00005101 C605[BC6A0000]01    <2> 		mov byte [mouseon],1
  6242 00005108 E890020000          <2> 		call GETB 	;;Get the responce byte of the mouse (like: Hey i am active)
  6243                              <2> 				;;If the bytes are mixed up,
  6244                              <2> 				;;remove this line or add another of this line.
  6245                              <2> 	nomouse:
  6246 0000510D C3                  <2> 		ret
  6247                              <2> 	moused:
  6248 0000510E 803D[CE500000]01    <2> 		cmp byte [mousedisabled], 1
  6249 00005115 74F6                <2> 		je nomouse
  6250 00005117 803D[BC6A0000]01    <2> 		  cmp byte [mouseon], 1
  6251 0000511E 75C9                <2> 		  jne initmouse
  6252 00005120 E878020000          <2> 		  call GETB
  6253 00005125 88C3                <2> 		  mov  bl, al
  6254 00005127 80E301              <2> 		  and  bl, 1
  6255 0000512A 881D[C2530000]      <2> 		  mov  BYTE [LBUTTON], bl
  6256 00005130 88C3                <2> 		  mov  bl, al
  6257 00005132 80E302              <2> 		  and  bl, 2
  6258 00005135 D0EB                <2> 		  shr  bl, 1
  6259 00005137 881D[C3530000]      <2> 		  mov  BYTE [RBUTTON], bl
  6260 0000513D 88C3                <2> 		  mov  bl, al
  6261 0000513F 80E304              <2> 		  and  bl, 4
  6262 00005142 C0EB02              <2> 		  shr  bl, 2
  6263 00005145 881D[C4530000]      <2> 		  mov  BYTE [MBUTTON], bl
  6264 0000514B E84D020000          <2> 		  call GETB
  6265 00005150 A2[C5530000]        <2> 		  mov  BYTE [XCOORD], al
  6266 00005155 E843020000          <2> 		  call GETB
  6267 0000515A A2[C6530000]        <2> 		  mov  BYTE [YCOORD], al
  6268                              <2> 
  6269                              <2> 	showpixelcursor:
  6270 0000515F 668B15[B1520000]    <2> 		mov dx, [mousecursorposition]
  6271 00005166 668B0D[B3520000]    <2> 		mov cx, [mousecursorposition + 2]
  6272 0000516D 668915[AD520000]    <2> 		mov [lastmouseposition], dx
  6273 00005174 66890D[AF520000]    <2> 		mov [lastmouseposition + 2], cx
  6274 0000517B A0[C5530000]        <2> 		mov al, [XCOORD]
  6275 00005180 3C80                <2> 		cmp al, 128
  6276 00005182 730C                <2> 		jae subxcoord
  6277 00005184 00C0                <2> 		add al, al
  6278 00005186 30E4                <2> 		xor ah, ah
  6279 00005188 6601C2              <2> 		add dx, ax
  6280 0000518B E90B000000          <2> 		jmp subxcoorddn
  6281                              <2> 	subxcoord:
  6282 00005190 00C0                <2> 		add al, al
  6283 00005192 30DB                <2> 		xor bl, bl
  6284 00005194 28C3                <2> 		sub bl, al
  6285 00005196 30FF                <2> 		xor bh, bh
  6286 00005198 6629DA              <2> 		sub dx, bx
  6287                              <2> 	subxcoorddn:
  6288 0000519B 8A1D[C6530000]      <2> 		mov bl, [YCOORD]
  6289 000051A1 30C0                <2> 		xor al, al
  6290 000051A3 28D8                <2> 		sub al, bl
  6291 000051A5 3C80                <2> 		cmp al, 128
  6292 000051A7 730A                <2> 		jae subycoord
  6293 000051A9 30E4                <2> 		xor ah, ah
  6294 000051AB 6601C1              <2> 		add cx, ax
  6295 000051AE E909000000          <2> 		jmp subycoorddn
  6296                              <2> 	subycoord:
  6297 000051B3 30DB                <2> 		xor bl, bl
  6298 000051B5 28C3                <2> 		sub bl, al
  6299 000051B7 30FF                <2> 		xor bh, bh
  6300 000051B9 6629D9              <2> 		sub cx, bx
  6301                              <2> 	subycoorddn:
  6302 000051BC 6681FA204E          <2> 		cmp dx, 20000
  6303 000051C1 7603                <2> 		jbe nooriginx2
  6304 000051C3 6631D2              <2> 		xor dx, dx
  6305                              <2> 	nooriginx2:
  6306 000051C6 6681F9204E          <2> 		cmp cx, 20000
  6307 000051CB 7603                <2> 		jbe nooriginy2
  6308 000051CD 6631C9              <2> 		xor cx, cx
  6309                              <2> 	nooriginy2:
  6310 000051D0 6681FA0000          <2> 		cmp dx, 0
  6311 000051D5 7415                <2> 		je nofixxcolumn2
  6312 000051D7 663B15[AB8C0000]    <2> 		cmp dx, [resolutionx2]
  6313 000051DE 720C                <2> 		jb nofixxcolumn2
  6314 000051E0 668B15[AB8C0000]    <2> 		mov dx, [resolutionx2]
  6315 000051E7 6681EA0200          <2> 		sub dx, 2
  6316                              <2> 	nofixxcolumn2:
  6317 000051EC 6681F90000          <2> 		cmp cx, 0
  6318 000051F1 7415                <2> 		je nofixyrow2
  6319 000051F3 663B0D[BF8B0000]    <2> 		cmp cx, [resolutiony]
  6320 000051FA 720C                <2> 		jb nofixyrow2
  6321 000051FC 668B0D[BF8B0000]    <2> 		mov cx, [resolutiony]
  6322 00005203 6681E90100          <2> 		sub cx, 1
  6323                              <2> 	nofixyrow2:
  6324 00005208 668915[B1520000]    <2> 		mov [mousecursorposition], dx
  6325 0000520F 66890D[B3520000]    <2> 		mov [mousecursorposition + 2], cx
  6326 00005216 803D[AD8C0000]00    <2> 		cmp byte [guion], 0
  6327 0000521D 0F8492000000        <2> 		je near termmouse
  6328 00005223 E82C070000          <2> 		call switchmousepos ;;use dragging code to ensure proper icon drag
  6329 00005228 803D[C2530000]01    <2> 		cmp byte [LBUTTON], 1
  6330 0000522F 0F84F3070000        <2> 		je near clickicon
  6331 00005235 803D[C3530000]01    <2> 		cmp byte [RBUTTON], 1
  6332 0000523C 0F84E6070000        <2> 		je near clickicon
  6333 00005242 A0[155A0000]        <2> 		mov al, [pbutton]
  6334 00005247 C705[185A0000]0000- <2> 		mov dword [dragging], 0
  6335 0000524F 0000                <2>
  6336 00005251 3C00                <2> 		cmp al, 0
  6337 00005253 740F                <2> 		je nopreviousbutton
  6338 00005255 E8A0060000          <2> 		call clearmousecursor
  6339 0000525A E8000D0000          <2> 		call reloadallgraphics
  6340                              <2> 	windowtermcopyend:
  6341 0000525F E850070000          <2> 		call switchmousepos2
  6342                              <2> 	nopreviousbutton:
  6343 00005264 30C0                <2> 		xor al, al
  6344 00005266 A2[155A0000]        <2> 		mov [pbutton], al
  6345 0000526B A0[C2530000]        <2> 		mov al, [LBUTTON]
  6346 00005270 A2[165A0000]        <2> 		mov [pLBUTTON], al
  6347 00005275 A0[C3530000]        <2> 		mov al, [RBUTTON]
  6348 0000527A A2[175A0000]        <2> 		mov [pRBUTTON], al
  6349 0000527F 31C9                <2> 		xor ecx, ecx
  6350 00005281 31D2                <2> 		xor edx, edx
  6351 00005283 668B15[B1520000]    <2> 		mov dx, [mousecursorposition]
  6352 0000528A 668B0D[B3520000]    <2> 		mov cx, [mousecursorposition + 2]
  6353 00005291 66BB18C7            <2> 		mov bx, 1100011100011000b
  6354 00005295 30E4                <2> 		xor ah, ah
  6355 00005297 B0FE                <2> 		mov al, 254
  6356 00005299 C605[F7580000]01    <2> 		mov byte [showcursorfonton], 1
  6357 000052A0 E884150000          <2> 		call showfontvesa
  6358 000052A5 C605[F7580000]00    <2> 		mov byte [showcursorfonton], 0
  6359 000052AC C3                  <2> 		ret
  6360                              <2> 
  6361 000052AD 84008400            <2> lastmouseposition dw 132,132
  6362 000052B1 84008400            <2> mousecursorposition dw 132,132	
  6363                              <2> 
  6364                              <2> termmouse:
  6365 000052B5 BE[B7AD0000]        <2> 		mov esi, videobuf
  6366 000052BA 31D2                <2> 		xor edx, edx
  6367 000052BC 668B15[AD520000]    <2> 		mov dx, [lastmouseposition]
  6368 000052C3 668B0D[AF520000]    <2> 		mov cx, [lastmouseposition + 2]
  6369 000052CA 66A1[48530000]      <2> 		mov ax, [cursorcache]
  6370 000052D0 663D0000            <2> 		cmp ax, 0
  6371 000052D4 7425                <2> 		je nocopycursorcache
  6372 000052D6 66C1E104            <2> 		shl cx, 4
  6373 000052DA 66C1E203            <2> 		shl dx, 3
  6374 000052DE 01D6                <2> 		add esi, edx
  6375 000052E0 6631D2              <2> 		xor dx, dx
  6376 000052E3 8A15[F0290000]      <2> 		mov dl, [charxy]
  6377 000052E9 6641                <2> 		inc cx
  6378                              <2> termmousecplp1:
  6379 000052EB 01D6                <2> 		add esi, edx
  6380 000052ED 6649                <2> 		dec cx
  6381 000052EF 6681F90000          <2> 		cmp cx, 0
  6382 000052F4 75F5                <2> 		jne termmousecplp1
  6383 000052F6 29D6                <2> 		sub esi, edx
  6384 000052F8 668906              <2> 		mov [esi], ax
  6385                              <2> nocopycursorcache:
  6386 000052FB BE[B7AD0000]        <2> 		mov esi, videobuf
  6387 00005300 31D2                <2> 		xor edx, edx
  6388 00005302 668B15[B1520000]    <2> 		mov dx, [mousecursorposition]
  6389 00005309 668B0D[B3520000]    <2> 		mov cx, [mousecursorposition + 2]
  6390 00005310 66C1E104            <2> 		shl cx, 4
  6391 00005314 66C1E203            <2> 		shl dx, 3
  6392 00005318 01D6                <2> 		add esi, edx
  6393 0000531A 6631D2              <2> 		xor dx, dx
  6394 0000531D 8A15[F0290000]      <2> 		mov dl, [charxy]
  6395 00005323 6641                <2> 		inc cx
  6396                              <2> termmousecplp2:
  6397 00005325 01D6                <2> 		add esi, edx
  6398 00005327 6649                <2> 		dec cx
  6399 00005329 6681F90000          <2> 		cmp cx, 0
  6400 0000532E 75F5                <2> 		jne termmousecplp2
  6401 00005330 29D6                <2> 		sub esi, edx
  6402 00005332 668B06              <2> 		mov ax, [esi]
  6403 00005335 66A3[48530000]      <2> 		mov [cursorcache], ax
  6404 0000533B B080                <2> 		mov al, 128
  6405 0000533D B407                <2> 		mov ah, 7
  6406 0000533F 668906              <2> 		mov [esi], ax
  6407 00005342 E840D7FFFF          <2> 		call termcopy
  6408 00005347 C3                  <2> 		ret
  6409 00005348 0000                <2> cursorcache db 0,0
  6410                              <2> 
  6411                              <2> PS2SET:
  6412 0000534A B0A8                <2>   mov  al, 0xa8		; enable mouse port
  6413 0000534C E664                <2>   out  0x64, al		; write to keyboardcontroller
  6414 0000534E E801000000          <2>   call CHKPRT		; check if command is progressed (demand!)
  6415 00005353 C3                  <2> ret
  6416                              <2> 
  6417                              <2> CHKPRT:
  6418 00005354 66B96400            <2>   mov  cx, 100
  6419                              <2>  .again:
  6420 00005358 E464                <2>   in   al, 0x64		; read from keyboardcontroller
  6421 0000535A A802                <2>   test al, 2		; Check if input buffer is empty
  6422 0000535C 7402                <2>   je .go
  6423 0000535E E2F8                <2>   loop .again
  6424                              <2>  .go:
  6425 00005360 C3                  <2> ret
  6426                              <2> 
  6427                              <2> WMOUS:
  6428 00005361 B0D4                <2>   mov  al, 0xd4		; write to mouse device instead of to keyboard
  6429 00005363 E664                <2>   out  0x64, al		; write to keyboardcontroller
  6430 00005365 E8EAFFFFFF          <2>   call CHKPRT		; check if command is progressed (demand!)
  6431 0000536A C3                  <2> ret
  6432                              <2> 
  6433                              <2> MBUFFUL:
  6434 0000536B 66B96400            <2>   mov cx, 100
  6435                              <2>  .mn:
  6436 0000536F E464                <2>   in   al, 0x64		; read from keyboardcontroller
  6437 00005371 A820                <2>   test al, 0x20		; check if mouse output buffer is full
  6438 00005373 7402                <2>   jz  .mnn
  6439 00005375 E2F8                <2>   loop .mn
  6440                              <2>  .mnn:
  6441 00005377 C3                  <2> ret
  6442                              <2> 
  6443                              <2> 
  6444                              <2> ACTMOUS:
  6445 00005378 E8E4FFFFFF          <2>   call WMOUS
  6446 0000537D B0F4                <2>   mov  al, 0xf4 	; Command to activate mouse itselve (Stream mode)
  6447 0000537F E660                <2>   out  0x60, al		; write ps/2 controller output port (activate mouse)
  6448 00005381 E8CEFFFFFF          <2>   call CHKPRT		; check if command is progressed (demand!)
  6449 00005386 E801000000          <2>   call CHKMOUS		; check if a byte is available
  6450 0000538B C3                  <2> ret
  6451                              <2> 
  6452                              <2> CHKMOUS:
  6453 0000538C B300                <2>   mov  bl, 0
  6454 0000538E 66B96400            <2>   mov cx, 100
  6455                              <2>  .vrd:
  6456 00005392 E464                <2>   in   al, 0x64		; read from keyboardcontroller
  6457 00005394 A801                <2>   test al, 1		; check if controller buffer (60h) has data
  6458 00005396 7504                <2>   jnz .yy
  6459 00005398 E2F8                <2>   loop .vrd
  6460 0000539A B301                <2>   mov  bl, 1
  6461                              <2>  .yy:
  6462 0000539C C3                  <2> ret
  6463                              <2> 
  6464                              <2> GETB:
  6465                              <2>  .cagain:
  6466 0000539D E8EAFFFFFF          <2>   call CHKMOUS		; check if a byte is available
  6467 000053A2 08DB                <2>   or bl, bl
  6468 000053A4 75F7                <2>   jnz .cagain
  6469 000053A6 B0AD                <2>   mov  al, 0xad		; Disable Keyboard
  6470 000053A8 E664                <2>   out  0x64, al		; write to keyboardcontroller
  6471 000053AA E8A5FFFFFF          <2>   call CHKPRT		; check if command is progressed (demand!)
  6472 000053AF 6631C0              <2>   xor  ax, ax
  6473 000053B2 E460                <2>   in   al, 0x60		; read ps/2 controller output port (mousebyte)
  6474 000053B4 88C2                <2>   mov  dl, al
  6475 000053B6 B0AE                <2>   mov  al, 0xae		; Enable Keyboard
  6476 000053B8 E664                <2>   out  0x64, al		; write to keyboardcontroller
  6477 000053BA E895FFFFFF          <2>   call CHKPRT		; check if command is progressed (demand!)
  6478 000053BF 88D0                <2>   mov  al, dl
  6479 000053C1 C3                  <2> ret
  6480                              <2> 
  6481 000053C2 00                  <2> LBUTTON db 0x00	;	Left   button status 1=PRESSED 0=RELEASED
  6482 000053C3 00                  <2> RBUTTON db 0x00	;	Right  button status 1=PRESSED 0=RELEASED
  6483 000053C4 00                  <2> MBUTTON db 0x00	;	Middle button status 1=PRESSED 0=RELEASED
  6484 000053C5 00                  <2> XCOORD  db 0x00	;	the moved distance  (horizontal)
  6485 000053C6 00                  <2> YCOORD  db 0x00	;	the moved distance  (vertical)
  6486                              <1> %include "source/drivers/input/keyboard.asm"
  6487 000053C7 00                  <2> specialkey db 0
  6488 000053C8 00                  <2> charregion db 0
  6489                              <2> waitforinput:		;;this is basically the idle process
  6490                              <2> 					;;this halts the cpu for a small amount of time and then sees if there was a keypress
  6491                              <2> 					;;this lets the cpu stay at close to 0% instead of 100%
  6492 000053C9 6631C0              <2> 	xor ax, ax
  6493 000053CC A0[31730000]        <2> 	mov al, [threadson]
  6494 000053D1 8825[31730000]      <2> 	mov [threadson], ah
  6495 000053D7 FB                  <2> 	sti
  6496 000053D8 F4                  <2> 	hlt
  6497 000053D9 A2[31730000]        <2> 	mov [threadson], al
  6498 000053DE 3A25[12280000]      <2> 	cmp ah, [trans]
  6499 000053E4 7401                <2> 	je getkey
  6500 000053E6 C3                  <2> 	ret
  6501                              <2> getkey:
  6502 000053E7 31C0                <2> 		xor eax, eax
  6503 000053E9 A2[C7530000]        <2> 		mov [specialkey], al
  6504 000053EE 66A3[10280000]      <2> 		mov [lastkey], ax
  6505 000053F4 E464                <2> 		in al, 64h ; Status
  6506 000053F6 A820                <2> 		test al, 20h ; PS2-Mouse?
  6507 000053F8 0F8510FDFFFF        <2> 		jnz near moused
  6508 000053FE A801                <2> 		test al, 1 
  6509 00005400 74C7                <2> 		jz waitforinput ; if output buffer full or no keypress, jump to idle process (only works when it is jz guistartin2, use jz guistartin to disable)
  6510                              <2> 	calckey:
  6511 00005402 E460                <2> 		in al, 60h
  6512 00005404 88C4                <2> 		mov ah, al
  6513 00005406 30C0                <2> 		xor al, al
  6514 00005408 8825[11280000]      <2> 		mov [lastkey + 1], ah
  6515 0000540E 88E0                <2> 		mov al, ah
  6516 00005410 BF[A9550000]        <2> 		mov edi, scancode
  6517                              <2> 	searchscan: 
  6518 00005415 3C3A                <2> 		cmp al, 3Ah
  6519 00005417 731A                <2> 		jae scanother
  6520 00005419 30E4                <2> 		xor ah, ah
  6521 0000541B C0E002              <2> 		shl al, 2
  6522 0000541E 01C7                <2> 		add edi, eax
  6523 00005420 D0E8                <2> 		shr al, 1
  6524 00005422 01C7                <2> 		add edi, eax
  6525 00005424 D0E8                <2> 		shr al, 1
  6526 00005426 8A27                <2> 		mov ah, [edi]
  6527 00005428 80FC00              <2> 		cmp ah, 0
  6528 0000542B 7406                <2> 		je scanother
  6529 0000542D E9D7000000          <2> 		jmp scanfound
  6530 00005432 00                  <2> uppercase db 0
  6531                              <2> scanother:
  6532 00005433 88C4                <2> 		mov ah, al
  6533 00005435 30C0                <2> 		xor al, al
  6534 00005437 66A3[10280000]      <2> 		mov [lastkey], ax
  6535 0000543D 80FCE0              <2> 		cmp ah, 0E0h
  6536 00005440 0F847D000000        <2> 		je near getkeyspecial
  6537 00005446 803D[C7530000]E0    <2> 		cmp byte [specialkey], 0xE0
  6538 0000544D 752B                <2> 		jne nospecialkey
  6539 0000544F 80FC38              <2> 		cmp ah, 38h
  6540 00005452 0F84A0000000        <2> 		je near alton
  6541 00005458 80FCB8              <2> 		cmp ah, 0B8h
  6542 0000545B 0F849F000000        <2> 		je near altoff
  6543 00005461 80FC1D              <2> 		cmp ah, 1Dh
  6544 00005464 0F847E000000        <2> 		je near ctron
  6545 0000546A 80FC9D              <2> 		cmp ah, 9Dh
  6546 0000546D 0F847D000000        <2> 		je near ctroff
  6547 00005473 66A3[10280000]      <2> 		mov [lastkey], ax
  6548 00005479 C3                  <2> 		ret
  6549                              <2> nospecialkey:
  6550 0000547A 80FC2A              <2> 		cmp ah, 2Ah
  6551 0000547D 0F8455000000        <2> 		je near shifton
  6552 00005483 80FC36              <2> 		cmp ah, 36h
  6553 00005486 0F844C000000        <2> 		je near shifton
  6554 0000548C 80FC1C              <2> 		cmp ah, 1Ch
  6555 0000548F 0F8473000000        <2> 		je near entdown
  6556 00005495 80FCAA              <2> 		cmp ah, 0AAh
  6557 00005498 0F8442000000        <2> 		je near shiftoff
  6558 0000549E 80FCB6              <2> 		cmp ah, 0B6h
  6559 000054A1 0F8439000000        <2> 		je near shiftoff
  6560 000054A7 80FC3A              <2> 		cmp ah, 3Ah
  6561 000054AA 0F84A5000000        <2> 		je near capslock
  6562 000054B0 80FC45              <2> 		cmp ah, 0x45
  6563 000054B3 0F84AD000000        <2> 		je near numlock
  6564 000054B9 80FC46              <2> 		cmp ah, 0x46
  6565 000054BC 0F84BC000000        <2> 		je near scrolllock
  6566 000054C2 C3                  <2> 		ret
  6567                              <2> 	getkeyspecial:
  6568 000054C3 C605[C7530000]E0    <2> 		mov byte [specialkey], 0xE0
  6569 000054CA E933FFFFFF          <2> 		jmp calckey
  6570                              <2> 	shift:
  6571 000054CF A0[32540000]        <2> 		mov al, [uppercase]
  6572 000054D4 3C01                <2> 		cmp al, 1
  6573 000054D6 7308                <2> 		jae shiftoff
  6574                              <2> 	shifton:
  6575 000054D8 C605[32540000]01    <2> 		mov byte [uppercase], 1
  6576 000054DF C3                  <2> 		ret
  6577                              <2> 	shiftoff:
  6578 000054E0 C605[32540000]00    <2> 		mov byte [uppercase], 0
  6579 000054E7 C3                  <2> 		ret
  6580                              <2> 	ctron:
  6581 000054E8 C605[54550000]01    <2> 		mov byte [ctrkey], 1
  6582 000054EF C3                  <2> 		ret
  6583                              <2> 	ctroff:
  6584 000054F0 C605[54550000]00    <2> 		mov byte [ctrkey], 0
  6585 000054F7 C3                  <2> 		ret
  6586                              <2> 	alton:
  6587 000054F8 C605[53550000]01    <2> 		mov byte [altkey], 1
  6588 000054FF C3                  <2> 		ret
  6589                              <2> 	altoff:
  6590 00005500 C605[53550000]00    <2> 		mov byte [altkey], 0
  6591 00005507 C3                  <2> 		ret
  6592                              <2> 	entdown:
  6593 00005508 C3                  <2> 		ret
  6594                              <2> 	scanfound:
  6595 00005509 81C704000000        <2> 		add edi, 4
  6596 0000550F 803D[54550000]01    <2> 		cmp byte [ctrkey], 1
  6597 00005516 731B                <2> 		jae altin
  6598 00005518 81EF04000000        <2> 		sub edi, 4
  6599 0000551E 81C702000000        <2> 		add edi, 2
  6600 00005524 803D[53550000]01    <2> 		cmp byte [altkey], 1
  6601 0000552B 7306                <2> 		jae altin
  6602 0000552D 81EF02000000        <2> 		sub edi, 2
  6603                              <2> altin:
  6604 00005533 81C701000000        <2> 		add edi, 1
  6605 00005539 803D[32540000]01    <2> 		cmp byte [uppercase], 1
  6606 00005540 7306                <2> 		jae uppercaseon
  6607 00005542 81EF01000000        <2> 		sub edi, 1
  6608                              <2> uppercaseon:
  6609 00005548 8A07                <2> 		mov al,[edi]
  6610 0000554A A2[10280000]        <2> 		mov [lastkey], al
  6611 0000554F C3                  <2> 		ret
  6612                              <2> 		
  6613 00005550 00                  <2> keyboardstatus db 0
  6614 00005551 00                  <2> numlockstatus db 0
  6615 00005552 00                  <2> scrolllockstatus db 0
  6616 00005553 00                  <2> altkey db 0
  6617 00005554 00                  <2> ctrkey db 0
  6618                              <2> 	capslock:
  6619 00005555 8035[50550000]04    <2> 		xor byte [keyboardstatus], 00000100b
  6620 0000555C E835000000          <2> 		call updatekblights
  6621 00005561 E969FFFFFF          <2> 		jmp shift
  6622                              <2> 		
  6623                              <2> 	numlock:
  6624 00005566 8035[50550000]02    <2> 		xor byte [keyboardstatus], 00000010b
  6625 0000556D 8035[51550000]01    <2> 		xor byte [numlockstatus], 1
  6626 00005574 E81D000000          <2> 		call updatekblights
  6627 00005579 E969FEFFFF          <2> 		jmp getkey
  6628                              <2> 	
  6629                              <2> 	scrolllock:
  6630 0000557E 8035[50550000]01    <2> 		xor byte [keyboardstatus], 00000001b
  6631 00005585 8035[52550000]01    <2> 		xor byte [scrolllockstatus], 1
  6632 0000558C E805000000          <2> 		call updatekblights
  6633 00005591 E951FEFFFF          <2> 		jmp getkey
  6634                              <2> 		
  6635                              <2> 	updatekblights:
  6636 00005596 B0ED                <2> 		mov al, 0xED
  6637 00005598 66BA6000            <2> 		mov dx, 0x60
  6638 0000559C EE                  <2> 		out dx, al
  6639                              <2> 	chkkbdack:
  6640 0000559D EC                  <2> 		in al, dx
  6641 0000559E 3CFA                <2> 		cmp al, 0xFA
  6642 000055A0 75FB                <2> 		jne chkkbdack
  6643 000055A2 A0[50550000]        <2> 		mov al, [keyboardstatus]
  6644 000055A7 EE                  <2> 		out dx, al
  6645 000055A8 C3                  <2> 		ret
  6646                              <2> 		
  6647                              <2> scancode:
  6648 000055A9 000000000000        <2> 	db 0,0,0,0,0,0				;0h
  6649 000055AF 000000000000        <2> 	db 0,0,0,0,0,0				;1h
  6650 000055B5 3121AD000000        <2> 	db '1','!',0xAD,0,0,0		;2h
  6651 000055BB 3240FDFB0000        <2> 	db '2','@',0xFD,0xFB,0,0	;3h
  6652 000055C1 332300000000        <2> 	db '3','#',0,0,0,0			;4h
  6653 000055C7 34249B9C0000        <2> 	db '4','$',0x9B,0x9C,0,0	;5h
  6654 000055CD 3525EE000000        <2> 	db '5','%',0xEE,0,0,0		;6h
  6655 000055D3 365EAC000000        <2> 	db '6','^',0xAC,0,0,0		;7h
  6656 000055D9 3726AB000000        <2> 	db '7','&',0xAB,0,0,0		;8h
  6657 000055DF 382AEC000000        <2> 	db '8','*',0xEC,0,0,0		;9h
  6658 000055E5 392800000000        <2> 	db '9','(',0,0,0,0			;0Ah
  6659 000055EB 302900000000        <2> 	db '0',')',0,0,0,0			;0Bh
  6660 000055F1 2D5F9DF10000        <2> 	db '-','_',0x9D,0xF1,0,0	;0Ch
  6661 000055F7 3D2BF7F60000        <2> 	db '=','+',0xF7,0xF6,0,0	;0Dh
  6662 000055FD 080800000000        <2> 	db 8,8,0,0,0,0				;0Eh
  6663 00005603 000000000000        <2> 	db 0,0,0,0,0,0				;0Fh
  6664 00005609 7151848E0000        <2> 	db 'q','Q',0x84,0x8E,0,0	;10h
  6665 0000560F 7757868F0000        <2> 	db 'w','W',0x86,0x8F,0,0	;11h
  6666 00005615 65458290EE45        <2> 	db 'e','E',0x82,0x90,0xEE,'E'	;12h
  6667 0000561B 7252898A7050        <2> 	db 'r','R',0x89,0x8A,'p','P'	;13h
  6668 00005621 7454819AE754        <2> 	db 't','T',0x81,0x9A,0xE7,'T'	;14h
  6669 00005627 795998007559        <2> 	db 'y','Y',0x98,0,'u','Y'	;15h
  6670 0000562D 7555A3970000        <2> 	db 'u','U',0xA3,0x97,0,0		;16h
  6671 00005633 6949A18D6949        <2> 	db 'i','I',0xA1,0x8D,'i','I'	;17h
  6672 00005639 6F4FA29577EA        <2> 	db 'o','O',0xA2,0x95,'w',0xEA	;18h
  6673 0000563F 70509499E3EF        <2> 	db 'p','P',0x94,0x99,0xE3,0xEF	;19h
  6674 00005645 5B7BF4000000        <2> 	db '[','{',0xF4,0,0,0		;1Ah
  6675 0000564B 5D7DF5000000        <2> 	db ']','}',0xF5,0,0,0		;1Bh
  6676 00005651 000000000000        <2> 	db 0,0,0,0,0,0				;1Ch
  6677 00005657 000000000000        <2> 	db 0,0,0,0,0,0				;1Dh
  6678 0000565D 6141A085E041        <2> 	db 'a','A',0xA0,133,224,'A'	;1Eh
  6679 00005663 73531500E5E4        <2> 	db 's','S',21,0,229,228		;1Fh
  6680 00005669 6444F800EB7F        <2> 	db 'd','D',0xF8,0,235,127	;20h
  6681 0000566F 66469F00EDE8        <2> 	db 'f','F',159,0,237,232	;21h
  6682 00005675 6747000079E2        <2> 	db 'g','G',0,0,'y',226		;22h
  6683 0000567B 684800006E48        <2> 	db 'h','H',0,0,'n','H'		;23h
  6684 00005681 6A4A00000000        <2> 	db 'j','J',0,0,0,0			;24h
  6685 00005687 6B4B00006B4B        <2> 	db 'k','K',0,0,'k','K'		;25h
  6686 0000568D 6C4C0000E9E9        <2> 	db 'l','L',0,0,233,233		;26h
  6687 00005693 3B3A14000000        <2> 	db ';',':',20,0,0,0			;27h
  6688 00005699 272200000000        <2> 	db 27h,22h,0,0,0,0			;28h
  6689 0000569F 607E00000000        <2> 	db '`','~',0,0,0,0			;29h
  6690 000056A5 000000000000        <2> 	db 0,0,0,0,0,0				;2Ah
  6691 000056AB 5C7CAAB30000        <2> 	db 92,'|',170,179,0,0		;2Bh
  6692 000056B1 7A5A91927A5A        <2> 	db 'z','Z',145,146,'z','Z'	;2Ch
  6693 000056B7 7858000000F0        <2> 	db 'x','X',0,0,0,240		;2Dh
  6694 000056BD 634387800000        <2> 	db 'c','C',135,128,0,0		;2Eh
  6695 000056C3 765600000000        <2> 	db 'v','V',0,0,0,0			;2Fh
  6696 000056C9 62420000E142        <2> 	db 'b','B',0,0,225,'B'		;30h
  6697 000056CF 6E4EA4A5764E        <2> 	db 'n','N',0xA4,0xA5,'v','N'	;31h
  6698 000056D5 6D4D0000E64D        <2> 	db 'm','M',0,0,230,'M'		;32h
  6699 000056DB 2C3CF3AE0000        <2> 	db ',','<',0xF3,174,0,0		;33h
  6700 000056E1 2E3EF2AF0000        <2> 	db '.','>',0xF2,175,0,0		;34h
  6701 000056E7 2F3FA8000000        <2> 	db '/','?',0xA8,0,0,0		;35h
  6702 000056ED 000000000000        <2> 	db 0,0,0,0,0,0				;36h
  6703 000056F3 000000000000        <2> 	db 0,0,0,0,0,0				;37h
  6704 000056F9 000000000000        <2> 	db 0,0,0,0,0,0				;38h
  6705 000056FF 202000000000        <2> 	db ' ',' ',0,0,0,0			;39h
  6706                              <2> noscan:
  6707                              <2> 
  6708                              <1> ;drivers will soon be handled intelligently
  6709                              <1> ;every driver's source will be scanned for a .init function
  6710                              <1> ;that will be called and if it returns 0
  6711                              <1> ;the hardware was found and the driver initialized properly
  6712                              <1> initialize:
  6713                              <1> ;Now I will initialise the interrupt controllers and remap irq's
  6714 00005705 E814000000          <1> 	call .pic
  6715 0000570A E83C000000          <1> 	call .pit
  6716 0000570F E85E000000          <1> 	call .fpu
  6717 00005714 31C0                <1> 	xor eax, eax
  6718 00005716 31C9                <1> 	xor ecx, ecx
  6719 00005718 E84EF6FFFF          <1> 	call sblaster.init
  6720 0000571D C3                  <1> 	ret
  6721                              <1> 	
  6722                              <1> .pic:
  6723 0000571E B011                <1> 	mov al, 0x11
  6724 00005720 E620                <1> 	out 0x20, al
  6725 00005722 E6A0                <1> 	out 0xA0, al
  6726 00005724 B040                <1> 	mov al, 0x40	;interrupt for master
  6727 00005726 E621                <1> 	out 0x21, al
  6728 00005728 B048                <1> 	mov al, 0x48	;interrupt for slave
  6729 0000572A E6A1                <1> 	out 0xA1, al
  6730 0000572C B004                <1> 	mov al, 4
  6731 0000572E E621                <1> 	out 0x21, al
  6732 00005730 B002                <1> 	mov al, 2
  6733 00005732 E6A1                <1> 	out 0xA1, al
  6734 00005734 B001                <1> 	mov al, 0x1
  6735 00005736 E621                <1> 	out 0x21, al
  6736 00005738 B001                <1> 	mov al, 0x1
  6737 0000573A E6A1                <1> 	out 0xA1, al
  6738                              <1> 	;masks are set to zero so as not to mask
  6739 0000573C 30C0                <1> 	xor al, al
  6740 0000573E E621                <1> 	out 0x21, al
  6741 00005740 30C0                <1> 	xor al, al
  6742 00005742 E6A1                <1> 	out 0xA1, al
  6743 00005744 B020                <1> 	mov al, 0x20
  6744 00005746 E6A0                <1> 	out 0xA0, al
  6745 00005748 E620                <1> 	out 0x20, al
  6746 0000574A C3                  <1> 	ret
  6747                              <1> .pit:
  6748                              <1> 	;initialize the PIT
  6749 0000574B 66A1[94060000]      <1> 	mov ax, [pitdiv] ;this is the divider for the PIT
  6750 00005751 E640                <1> 	out 0x40, al
  6751 00005753 66C1C008            <1> 	rol ax, 8
  6752 00005757 E640                <1> 	out 0x40, al
  6753                              <1> 	;enable rtc interrupt
  6754 00005759 B00B                <1> 	mov al, 0xB
  6755 0000575B E670                <1> 	out 0x70, al
  6756 0000575D 66C1C008            <1> 	rol ax, 8
  6757 00005761 E471                <1> 	in al, 0x71
  6758 00005763 66C1C008            <1> 	rol ax, 8
  6759 00005767 E670                <1> 	out 0x70, al
  6760 00005769 66C1C008            <1> 	rol ax, 8
  6761 0000576D 0C40                <1> 	or al, 0x40
  6762 0000576F E671                <1> 	out 0x71, al
  6763 00005771 C3                  <1> 	ret
  6764                              <1> .fpu:
  6765                              <1> 	;And now to initialize the fpu
  6766 00005772 0F20E0              <1> 	mov eax, cr4
  6767 00005775 0D00020000          <1> 	or eax, 0x200
  6768 0000577A 0F22E0              <1> 	mov cr4, eax
  6769 0000577D B87F0B0000          <1> 	mov eax, 0xB7F
  6770 00005782 50                  <1> 	push eax
  6771 00005783 D92C24              <1> 	fldcw [esp]
  6772 00005786 58                  <1> 	pop eax
  6773 00005787 C3                  <1> 	ret
  6774                              <1> 	
  6775                                      %include 'source/gui.asm'
  6776                              <1> guiclear:
  6777 00005788 8B3D[D38B0000]      <1> 	mov edi, [physbaseptr]
  6778 0000578E 668B15[BD8B0000]    <1> 	mov dx, [resolutionx]
  6779 00005795 668B0D[BF8B0000]    <1> 	mov cx, [resolutiony]
  6780 0000579C 66A1[C5570000]      <1> 	mov ax, [background]
  6781                              <1> guiclearloop:
  6782 000057A2 668907              <1> 	mov [edi], ax
  6783 000057A5 81C702000000        <1> 	add edi, 2
  6784 000057AB 664A                <1> 	dec dx
  6785 000057AD 6681FA0000          <1> 	cmp dx, 0
  6786 000057B2 77EE                <1> 	ja guiclearloop
  6787 000057B4 6649                <1> 	dec cx
  6788 000057B6 668B15[BD8B0000]    <1> 	mov dx, [resolutionx]
  6789 000057BD 6681F90000          <1> 	cmp cx, 0
  6790 000057C2 77DE                <1> 	ja guiclearloop
  6791 000057C4 C3                  <1> 	ret
  6792                              <1> 
  6793 000057C5 CF7B                <1> background dw 0111101111001111b
  6794                              <1> 
  6795                              <1> gui:	;Let's see what I can do, I am going to try to make this as freestanding as possible
  6796 000057C7 31C0                <1> 	xor eax, eax
  6797 000057C9 31DB                <1> 	xor ebx, ebx
  6798 000057CB 31C9                <1> 	xor ecx, ecx
  6799 000057CD 31D2                <1> 	xor edx, edx
  6800 000057CF 8B3D[D38B0000]      <1> 	mov edi, [physbaseptr]
  6801 000057D5 668B15[BD8B0000]    <1> 	mov dx, [resolutionx]
  6802 000057DC 668B0D[BF8B0000]    <1> 	mov cx, [resolutiony]
  6803 000057E3 668B1D[C5570000]    <1> 	mov bx, [background]
  6804                              <1> guiclearloop2:
  6805 000057EA 66891F              <1> 	mov [edi], bx
  6806 000057ED 81C702000000        <1> 	add edi, 2
  6807 000057F3 664A                <1> 	dec dx
  6808 000057F5 6681FA0000          <1> 	cmp dx, 0
  6809 000057FA 0F85EAFFFFFF        <1> 	jne near guiclearloop2
  6810 00005800 6649                <1> 	dec cx
  6811 00005802 668B15[BD8B0000]    <1> 	mov dx, [resolutionx]
  6812 00005809 6681F90000          <1> 	cmp cx, 0
  6813 0000580E 0F85D6FFFFFF        <1> 	jne near guiclearloop2
  6814 00005814 C605[AD8C0000]01    <1> 	mov byte [guion], 1
  6815 0000581B C605[F9580000]00    <1> 	mov byte [mouseselecton], 0
  6816 00005822 31C0                <1> 	xor eax, eax
  6817 00005824 31DB                <1> 	xor ebx, ebx
  6818 00005826 31C9                <1> 	xor ecx, ecx
  6819 00005828 31D2                <1> 	xor edx, edx
  6820                              <1> 	
  6821 0000582A BE[D16A0000]        <1> 	mov esi, pacmsg
  6822 0000582F 6631C0              <1> 	xor ax, ax
  6823 00005832 31DB                <1> 	xor ebx, ebx
  6824 00005834 66B99000            <1> 	mov cx, 144
  6825 00005838 66BA0400            <1> 	mov dx, 4
  6826 0000583C E8640A0000          <1> 	call showstring
  6827                              <1> 	
  6828 00005841 BE[0C6C0000]        <1> 	mov esi, interneticon
  6829 00005846 6631C0              <1> 	xor ax, ax
  6830 00005849 BB[3E6B0000]        <1> 	mov ebx, noie
  6831 0000584E 66B91800            <1> 	mov cx, 24
  6832 00005852 66BA0400            <1> 	mov dx, 4
  6833 00005856 E8F40E0000          <1> 	call showicon
  6834                              <1> 	
  6835 0000585B BE[8E6C0000]        <1> 	mov esi, wordicon
  6836 00005860 6631C0              <1> 	xor ax, ax
  6837 00005863 31DB                <1> 	xor ebx, ebx
  6838 00005865 66B91800            <1> 	mov cx, 24
  6839 00005869 66BA3000            <1> 	mov dx, 48
  6840 0000586D E8DD0E0000          <1> 	call showicon
  6841                              <1> 	
  6842 00005872 BE[106D0000]        <1> 	mov esi, pacmanpellet
  6843 00005877 6631C0              <1> 	xor ax, ax
  6844 0000587A 31DB                <1> 	xor ebx, ebx
  6845 0000587C 66B94000            <1> 	mov cx, 64
  6846 00005880 66BA0400            <1> 	mov dx, 4
  6847 00005884 E8C60E0000          <1> 	call showicon
  6848                              <1> 	
  6849 00005889 BE[146E0000]        <1> 	mov esi, pacman
  6850 0000588E 6631C0              <1> 	xor ax, ax
  6851 00005891 BB[276B0000]        <1> 	mov ebx, pacmannomnom
  6852 00005896 66B94000            <1> 	mov cx, 64
  6853 0000589A 66BA3000            <1> 	mov dx, 48
  6854 0000589E E8AC0E0000          <1> 	call showicon
  6855                              <1> 	
  6856 000058A3 BE[926D0000]        <1> 	mov esi, ghostie
  6857 000058A8 6631C0              <1> 	xor ax, ax
  6858 000058AB BB[106B0000]        <1> 	mov ebx, boo
  6859 000058B0 66B96C00            <1> 	mov cx, 108
  6860 000058B4 66BA0400            <1> 	mov dx, 4
  6861 000058B8 E8920E0000          <1> 	call showicon
  6862                              <1> 
  6863 000058BD BE[BD6A0000]        <1> 	mov esi, start
  6864 000058C2 668B0D[BF8B0000]    <1> 	mov cx, [resolutiony]
  6865 000058C9 6681E91000          <1> 	sub cx, 16
  6866 000058CE 66BA0200            <1> 	mov dx, 2
  6867 000058D2 30E4                <1> 	xor ah, ah
  6868 000058D4 B010                <1> 	mov al, 00010000b
  6869 000058D6 BB[B96B0000]        <1> 	mov ebx, winblows
  6870 000058DB E8C5090000          <1> 	call showstring
  6871                              <1> 	
  6872 000058E0 E8EAF7FFFF          <1> 	call cursorgui
  6873                              <1> guistart:
  6874 000058E5 E8FDFAFFFF          <1> 	call getkey
  6875 000058EA C605[F3580000]00    <1> 	mov byte [copygui], 0
  6876 000058F1 EBF2                <1> 	jmp guistart
  6877                              <1> 	
  6878                              <1> ;guicopy:	;;for double buffering
  6879                              <1> ;	mov byte [copygui], 1
  6880                              <1> ;	mov edi, [offscreenmemoffset]
  6881                              <1> ;	xor edx, edx
  6882                              <1> ;	xor ecx, ecx
  6883                              <1> ;	mov dx, [mousecursorposition]
  6884                              <1> ;	mov cx, [mousecursorposition + 2]
  6885                              <1> ;	add edi, edx
  6886                              <1> ;	mov dx, [resolutionx2]
  6887                              <1> ;	inc cx
  6888                              <1> ;guicp2:
  6889                              <1> ;	add edi, edx
  6890                              <1> ;	dec cx
  6891                              <1> ;	cmp cx, 0
  6892                              <1> ;	jne guicp2
  6893                              <1> ;	sub edi, edx
  6894                              <1> ;	mov [cursorloc], edi
  6895                              <1> ;	mov ebx, cursorbmp
  6896                              <1> ;	mov cx, [resolutiony]
  6897                              <1> ;	rol ecx, 16
  6898                              <1> ;	mov cx, [resolutionx]
  6899                              <1> ;	mov esi, [physbaseptr]
  6900                              <1> ;	mov edi, [offscreenmemoffset]
  6901                              <1> ;guicp1:
  6902                              <1> ;	mov ax, [esi]
  6903                              <1> ;	mov [edi], ax
  6904                              <1> ;	add esi, 2
  6905                              <1> ;	add edi, 2
  6906                              <1> ;	cmp edi, [cursorloc]
  6907                              <1> ;	je copycursor
  6908                              <1> ;dncopycursor:
  6909                              <1> ;	dec cx
  6910                              <1> ;	cmp cx, 0
  6911                              <1> ;	jne guicp1
  6912                              <1> ;	mov cx, [resolutionx]
  6913                              <1> ;	rol ecx, 16
  6914                              <1> ;	dec cx
  6915                              <1> ;	cmp cx, 0
  6916                              <1> ;	rol ecx, 16
  6917                              <1> ;	jne guicp1
  6918                              <1> ;	mov byte [copygui], 0
  6919                              <1> ;	ret
  6920                              <1> ;copycursor:
  6921                              <1> ;	cmp ebx, cursorbmpend
  6922                              <1> ;	jae dncopycursor
  6923                              <1> ;	mov dx, [resolutionx2]
  6924                              <1> ;	add edi, edx
  6925                              <1> ;	mov [cursorloc], edi
  6926                              <1> ;	sub edi, edx
  6927                              <1> ;	dec ebx
  6928                              <1> ;	sub edi, 2
  6929                              <1> ;	sub esi, 2
  6930                              <1> ;	mov dx, 9
  6931                              <1> ;curscplp:
  6932                              <1> ;	inc ebx
  6933                              <1> ;	add esi, 2
  6934                              <1> ;	add edi, 2
  6935                              <1> ;	mov ax, [esi]
  6936                              <1> ;	mov [edi], ax
  6937                              <1> ;	mov al, [ebx]
  6938                              <1> ;	cmp al, 0
  6939                              <1> ;	je curscplp2
  6940                              <1> ;	mov word [edi], 1110011110011100b
  6941                              <1> ;curscplp2:
  6942                              <1> ;	dec cx
  6943                              <1> ;	cmp cx, 0
  6944                              <1> ;	je dncopycursor
  6945                              <1> ;	dec dx
  6946                              <1> ;	cmp dx, 0
  6947                              <1> ;	jne curscplp
  6948                              <1> ;	jmp dncopycursor
  6949                              <1> 	
  6950                              <1> 	
  6951                              <1> ;cursorloc: dd 0
  6952                              <1> 				
  6953 000058F3 00                  <1> copygui db 0
  6954 000058F4 00                  <1> graphicsset db 0
  6955 000058F5 0000                <1> graphicspos db 0,0
  6956 000058F7 00                  <1> showcursorfonton db 0
  6957 000058F8 00                  <1> savefonton db 0
  6958 000058F9 00                  <1> mouseselecton db 0
  6959                              <1> 
  6960                              <1> 		
  6961                              <1> clearmousecursor:
  6962 000058FA BE[C5570000]        <1> 		mov esi, background
  6963 000058FF 8B3D[D38B0000]      <1> 		mov edi, [physbaseptr]
  6964 00005905 31D2                <1> 		xor edx, edx
  6965 00005907 31C9                <1> 		xor ecx, ecx
  6966 00005909 668B15[AD520000]    <1> 		mov dx, [lastmouseposition]
  6967 00005910 668B0D[AF520000]    <1> 		mov cx, [lastmouseposition + 2]
  6968 00005917 01D7                <1> 		add edi, edx
  6969 00005919 31D2                <1> 		xor edx, edx
  6970 0000591B 668B15[AB8C0000]    <1> 		mov dx, [resolutionx2]
  6971 00005922 6681F90000          <1> 		cmp cx, 0
  6972 00005927 740B                <1> 		je noyclr
  6973 00005929 01D7                <1> yclr:	add edi, edx
  6974 0000592B 6649                <1> 		dec cx
  6975 0000592D 6681F90000          <1> 		cmp cx, 0
  6976 00005932 75F5                <1> 		jne yclr
  6977 00005934 668B06              <1> noyclr:	mov ax, [esi]
  6978 00005937 C1C010              <1> 		rol eax, 16
  6979 0000593A 668B06              <1> 		mov ax, [esi]
  6980 0000593D 8907                <1> 		mov [edi], eax
  6981 0000593F 894704              <1> 		mov [edi + 4], eax
  6982 00005942 894708              <1> 		mov [edi + 8], eax
  6983 00005945 89470C              <1> 		mov [edi + 12], eax
  6984 00005948 01D7                <1> 		add edi, edx
  6985 0000594A 6641                <1> 		inc cx
  6986 0000594C 6681F91000          <1> 		cmp cx, 16
  6987 00005951 72E1                <1> 		jb noyclr
  6988 00005953 C3                  <1> 		ret
  6989                              <1> 
  6990                              <1> switchmousepos:		;;switch were the mouse is located
  6991 00005954 BE[24900000]        <1> 		mov esi, mousecolorbuf
  6992 00005959 8B3D[D38B0000]      <1> 		mov edi, [physbaseptr]
  6993 0000595F 31D2                <1> 		xor edx, edx
  6994 00005961 31C9                <1> 		xor ecx, ecx
  6995 00005963 668B15[AD520000]    <1> 		mov dx, [lastmouseposition]
  6996 0000596A 668B0D[AF520000]    <1> 		mov cx, [lastmouseposition + 2]
  6997 00005971 01D7                <1> 		add edi, edx
  6998 00005973 31D2                <1> 		xor edx, edx
  6999 00005975 668B15[AB8C0000]    <1> 		mov dx, [resolutionx2]
  7000 0000597C 6681F90000          <1> 		cmp cx, 0
  7001 00005981 740B                <1> 		je noswmsy
  7002 00005983 01D7                <1> swmsy:		add edi, edx
  7003 00005985 6649                <1> 		dec cx
  7004 00005987 6681F90000          <1> 		cmp cx, 0
  7005 0000598C 75F5                <1> 		jne swmsy
  7006 0000598E 8B06                <1> noswmsy:	mov eax, [esi]
  7007 00005990 8B5E04              <1> 		mov ebx, [esi + 4]
  7008 00005993 8907                <1> 		mov [edi], eax
  7009 00005995 895F04              <1> 		mov [edi + 4], ebx
  7010 00005998 8B4608              <1> 		mov eax, [esi + 8]
  7011 0000599B 8B5E0C              <1> 		mov ebx, [esi + 12]
  7012 0000599E 894708              <1> 		mov [edi + 8], eax
  7013 000059A1 895F0C              <1> 		mov [edi + 12], ebx
  7014 000059A4 01D7                <1> 		add edi, edx
  7015 000059A6 81C610000000        <1> 		add esi, 16
  7016 000059AC 81FE[24910000]      <1> 		cmp esi, mcolorend
  7017 000059B2 72DA                <1> 		jb noswmsy
  7018                              <1> 		
  7019                              <1> switchmousepos2:
  7020 000059B4 BE[24900000]        <1> 		mov esi, mousecolorbuf
  7021 000059B9 8B3D[D38B0000]      <1> 		mov edi, [physbaseptr]
  7022 000059BF 31D2                <1> 		xor edx, edx
  7023 000059C1 31C9                <1> 		xor ecx, ecx
  7024 000059C3 668B15[B1520000]    <1> 		mov dx, [mousecursorposition]
  7025 000059CA 668B0D[B3520000]    <1> 		mov cx, [mousecursorposition + 2]
  7026 000059D1 01D7                <1> 		add edi, edx
  7027 000059D3 31D2                <1> 		xor edx, edx
  7028 000059D5 668B15[AB8C0000]    <1> 		mov dx, [resolutionx2]
  7029 000059DC 6681F90000          <1> 		cmp cx, 0
  7030 000059E1 740B                <1> 		je noswmsy2
  7031 000059E3 01D7                <1> swmsy2:		add edi, edx
  7032 000059E5 6649                <1> 		dec cx
  7033 000059E7 6681F90000          <1> 		cmp cx, 0
  7034 000059EC 75F5                <1> 		jne swmsy2
  7035 000059EE 8B07                <1> noswmsy2:	mov eax, [edi]
  7036 000059F0 8B5F04              <1> 		mov ebx, [edi + 4]
  7037 000059F3 8906                <1> 		mov [esi], eax
  7038 000059F5 895E04              <1> 		mov [esi + 4], ebx
  7039 000059F8 8B4708              <1> 		mov eax, [edi + 8]
  7040 000059FB 8B5F0C              <1> 		mov ebx, [edi + 12]
  7041 000059FE 894608              <1> 		mov [esi + 8], eax
  7042 00005A01 895E0C              <1> 		mov [esi + 12], ebx
  7043 00005A04 01D7                <1> 		add edi, edx
  7044 00005A06 81C610000000        <1> 		add esi, 16
  7045 00005A0C 81FE[24910000]      <1> 		cmp esi, mcolorend
  7046 00005A12 72DA                <1> 		jb noswmsy2
  7047 00005A14 C3                  <1> 		ret
  7048                              <1> 
  7049 00005A15 00                  <1> pbutton db 0
  7050 00005A16 00                  <1> pLBUTTON db 0
  7051 00005A17 00                  <1> pRBUTTON db 0
  7052 00005A18 00000000            <1> dragging dw 0,0
  7053 00005A1C 0000000000000000    <1> lastpos dw 0,0,0,0
  7054 00005A24 00000000            <1> colorbuf dw 0,0
  7055                              <1> 	
  7056                              <1> 	clickicon:
  7057 00005A28 B001                <1> 		mov al, 1
  7058 00005A2A A2[155A0000]        <1> 		mov [pbutton], al
  7059 00005A2F A0[165A0000]        <1> 		mov al, [pLBUTTON]
  7060 00005A34 2205[C2530000]      <1> 		and al, [LBUTTON]
  7061 00005A3A 8A25[175A0000]      <1> 		mov ah, [pRBUTTON]
  7062 00005A40 2225[C3530000]      <1> 		and ah, [RBUTTON]
  7063 00005A46 08E0                <1> 		or al, ah
  7064 00005A48 3C00                <1> 		cmp al, 0
  7065 00005A4A 741B                <1> 		je nodragclick
  7066 00005A4C 813D[185A0000]0100- <1> 		cmp dword [dragging], 1
  7067 00005A54 0000                <1>
  7068 00005A56 732D                <1> 		jae dragclick
  7069 00005A58 C705[185A0000]0100- <1> 		mov dword [dragging], 1
  7070 00005A60 0000                <1>
  7071 00005A62 E91E000000          <1> 		jmp dragclick
  7072                              <1> 	nodragclick:
  7073 00005A67 C705[185A0000]0000- <1> 		mov dword [dragging], 0
  7074 00005A6F 0000                <1>
  7075 00005A71 A0[C2530000]        <1> 		mov al, [LBUTTON]
  7076 00005A76 A2[165A0000]        <1> 		mov [pLBUTTON], al
  7077 00005A7B A0[C3530000]        <1> 		mov al, [RBUTTON]
  7078 00005A80 A2[175A0000]        <1> 		mov [pRBUTTON], al
  7079                              <1> 	dragclick:
  7080 00005A85 6631C0              <1> 		xor ax, ax
  7081 00005A88 BE[248E0000]        <1> 		mov esi, graphicstable
  7082 00005A8D C705[0B6B0000]0000- <1> 		mov dword [codepointer], 0
  7083 00005A95 0000                <1>
  7084                              <1> 	clicon2:
  7085 00005A97 31D2                <1> 		xor edx, edx
  7086 00005A99 31C9                <1> 		xor ecx, ecx
  7087 00005A9B 66813E0100          <1> 		cmp word [esi], 1
  7088 00005AA0 0F841B000000        <1> 		je near iconselect
  7089 00005AA6 66813E0200          <1> 		cmp word [esi], 2
  7090 00005AAB 0F8472010000        <1> 		je near textselected
  7091 00005AB1 66813E0300          <1> 		cmp word [esi], 3
  7092 00005AB6 0F84C7020000        <1> 		je near windowselect
  7093 00005ABC E901040000          <1> 		jmp nexticonsel
  7094                              <1> 	iconselect:
  7095 00005AC1 668B5606            <1> 		mov dx, [esi + 6]
  7096 00005AC5 6689D0              <1> 		mov ax, dx
  7097 00005AC8 668B4E08            <1> 		mov cx, [esi + 8]
  7098 00005ACC 6689CB              <1> 		mov bx, cx
  7099 00005ACF 6681C32000          <1> 		add bx, 32
  7100 00005AD4 6601D0              <1> 		add ax, dx
  7101 00005AD7 813D[185A0000]0100- <1> 		cmp dword [dragging], 1
  7102 00005ADF 0000                <1>
  7103 00005AE1 746F                <1> 		je dragicon
  7104 00005AE3 813D[185A0000]0000- <1> 		cmp dword [dragging], 0
  7105 00005AEB 0000                <1>
  7106 00005AED 7411                <1> 		je nodragiconcheck
  7107 00005AEF 3935[185A0000]      <1> 		cmp dword [dragging], esi
  7108 00005AF5 0F85C7030000        <1> 		jne near nexticonsel
  7109 00005AFB E952000000          <1> 		jmp dragicon
  7110                              <1> 	nodragiconcheck:
  7111 00005B00 663905[B1520000]    <1> 		cmp [mousecursorposition], ax
  7112 00005B07 0F82B5030000        <1> 		jb near nexticonsel
  7113 00005B0D 66054000            <1> 		add ax, 64
  7114 00005B11 663905[B1520000]    <1> 		cmp [mousecursorposition], ax
  7115 00005B18 0F87A4030000        <1> 		ja near nexticonsel
  7116 00005B1E 6629D0              <1> 		sub ax, dx
  7117 00005B21 66390D[B3520000]    <1> 		cmp [mousecursorposition + 2], cx
  7118 00005B28 0F8294030000        <1> 		jb near nexticonsel
  7119 00005B2E 66391D[B3520000]    <1> 		cmp [mousecursorposition + 2], bx
  7120 00005B35 0F8787030000        <1> 		ja near nexticonsel
  7121 00005B3B 668B460A            <1> 		mov ax, [esi + 10]
  7122 00005B3F 66250100            <1> 		and ax, 1
  7123 00005B43 663D0100            <1> 		cmp ax, 1
  7124 00005B47 0F84B6000000        <1> 		je near unselecticon
  7125 00005B4D E98D000000          <1> 		jmp nodragicon
  7126                              <1> 	dragicon:
  7127 00005B52 663905[AD520000]    <1> 		cmp [lastmouseposition], ax
  7128 00005B59 0F8263030000        <1> 		jb near nexticonsel
  7129 00005B5F 66054000            <1> 		add ax, 64
  7130 00005B63 663905[AD520000]    <1> 		cmp [lastmouseposition], ax
  7131 00005B6A 0F8752030000        <1> 		ja near nexticonsel
  7132 00005B70 6629D0              <1> 		sub ax, dx
  7133 00005B73 66390D[AF520000]    <1> 		cmp [lastmouseposition + 2], cx
  7134 00005B7A 0F8242030000        <1> 		jb near nexticonsel
  7135 00005B80 66391D[AF520000]    <1> 		cmp [lastmouseposition + 2], bx
  7136 00005B87 0F8735030000        <1> 		ja near nexticonsel
  7137 00005B8D 668B460A            <1> 		mov ax, [esi + 10]
  7138 00005B91 2410                <1> 		and al, 00010000b
  7139 00005B93 3C10                <1> 		cmp al, 00010000b
  7140 00005B95 7448                <1> 		je nodragicon
  7141 00005B97 8935[185A0000]      <1> 		mov [dragging], esi
  7142 00005B9D 66D1E2              <1> 		shl dx, 1
  7143 00005BA0 662B15[AD520000]    <1> 		sub dx, [lastmouseposition]
  7144 00005BA7 660315[B1520000]    <1> 		add dx, [mousecursorposition]
  7145 00005BAE 66D1EA              <1> 		shr dx, 1
  7146 00005BB1 66030D[B3520000]    <1> 		add cx, [mousecursorposition + 2]
  7147 00005BB8 662B0D[AF520000]    <1> 		sub cx, [lastmouseposition + 2]
  7148 00005BBF 663B15[AB8C0000]    <1> 		cmp dx, [resolutionx2]
  7149 00005BC6 7607                <1> 		jbe chkyresdrgicn
  7150 00005BC8 668B15[B1520000]    <1> 		mov dx, [mousecursorposition]
  7151                              <1> 	chkyresdrgicn:
  7152 00005BCF 663B0D[BF8B0000]    <1> 		cmp cx, [resolutiony]
  7153 00005BD6 7607                <1> 		jbe nodragicon
  7154 00005BD8 668B0D[B3520000]    <1> 		mov cx, [mousecursorposition + 2]
  7155                              <1> 	nodragicon:
  7156 00005BDF 66814E0A0100        <1> 		or word [esi + 10], 1
  7157 00005BE5 8B5E0C              <1> 		mov ebx, [esi + 12]
  7158 00005BE8 668B460A            <1> 		mov ax, [esi + 10]
  7159 00005BEC 8B7602              <1> 		mov esi, [esi + 2]
  7160 00005BEF C705[0B6B0000]0000- <1> 		mov dword [codepointer], 0
  7161 00005BF7 0000                <1>
  7162 00005BF9 E8510B0000          <1> 		call showicon
  7163 00005BFE E9D8020000          <1> 		jmp doneiconsel
  7164                              <1> 	unselecticon:
  7165 00005C03 6681660AFEFF        <1> 		and word [esi + 10], 0xFFFE
  7166 00005C09 8B5E0C              <1> 		mov ebx, [esi + 12]
  7167 00005C0C 668B460A            <1> 		mov ax, [esi + 10]
  7168 00005C10 8B7602              <1> 		mov esi, [esi + 2]
  7169 00005C13 891D[0B6B0000]      <1> 		mov [codepointer], ebx
  7170 00005C19 E8310B0000          <1> 		call showicon
  7171 00005C1E E9B8020000          <1> 		jmp doneiconsel
  7172                              <1> 	textselected:
  7173 00005C23 8B5E02              <1> 		mov ebx, [esi + 2]
  7174 00005C26 668B5606            <1> 		mov dx, [esi + 6]
  7175 00005C2A 6689D0              <1> 		mov ax, dx
  7176 00005C2D 668B4E08            <1> 		mov cx, [esi + 8]
  7177                              <1> 	lengthtesttext:
  7178 00005C31 803B00              <1> 		cmp byte [ebx], 0
  7179 00005C34 7407                <1> 		je donetesttextlength
  7180 00005C36 43                  <1> 		inc ebx
  7181 00005C37 66051000            <1> 		add ax, 16
  7182 00005C3B EBF4                <1> 		jmp lengthtesttext
  7183                              <1> 	donetesttextlength:
  7184 00005C3D 6689CB              <1> 		mov bx, cx
  7185 00005C40 6681C30F00          <1> 		add bx, 15
  7186 00005C45 813D[185A0000]0100- <1> 		cmp dword [dragging], 1
  7187 00005C4D 0000                <1>
  7188 00005C4F 7468                <1> 		je dragtext
  7189 00005C51 813D[185A0000]0000- <1> 		cmp dword [dragging], 0
  7190 00005C59 0000                <1>
  7191 00005C5B 7411                <1> 		je nodragtextcheck
  7192 00005C5D 3935[185A0000]      <1> 		cmp dword [dragging], esi
  7193 00005C63 0F8559020000        <1> 		jne near nexticonsel
  7194 00005C69 E94B000000          <1> 		jmp dragtext
  7195                              <1> 	nodragtextcheck:
  7196 00005C6E 663915[B1520000]    <1> 		cmp [mousecursorposition], dx
  7197 00005C75 0F8247020000        <1> 		jb near nexticonsel
  7198 00005C7B 663905[B1520000]    <1> 		cmp [mousecursorposition], ax
  7199 00005C82 0F873A020000        <1> 		ja near nexticonsel
  7200 00005C88 66390D[B3520000]    <1> 		cmp [mousecursorposition + 2], cx
  7201 00005C8F 0F822D020000        <1> 		jb near nexticonsel
  7202 00005C95 66391D[B3520000]    <1> 		cmp [mousecursorposition + 2], bx
  7203 00005C9C 0F8720020000        <1> 		ja near nexticonsel
  7204 00005CA2 668B460A            <1> 		mov ax, [esi + 10]
  7205 00005CA6 66250100            <1> 		and ax, 1
  7206 00005CAA 663D0100            <1> 		cmp ax, 1
  7207 00005CAE 0F84AB000000        <1> 		je near unselecttext
  7208 00005CB4 E986000000          <1> 		jmp nodragtext
  7209                              <1> 	dragtext:
  7210 00005CB9 663915[AD520000]    <1> 		cmp [lastmouseposition], dx
  7211 00005CC0 0F82FC010000        <1> 		jb near nexticonsel
  7212 00005CC6 663905[AD520000]    <1> 		cmp [lastmouseposition], ax
  7213 00005CCD 0F87EF010000        <1> 		ja near nexticonsel
  7214 00005CD3 66390D[AF520000]    <1> 		cmp [lastmouseposition + 2], cx
  7215 00005CDA 0F82E2010000        <1> 		jb near nexticonsel
  7216 00005CE0 66391D[AF520000]    <1> 		cmp [lastmouseposition + 2], bx
  7217 00005CE7 0F87D5010000        <1> 		ja near nexticonsel
  7218 00005CED 668B460A            <1> 		mov ax, [esi + 10]
  7219 00005CF1 2410                <1> 		and al, 00010000b
  7220 00005CF3 663D1000            <1> 		cmp ax, 00010000b
  7221 00005CF7 0F8442000000        <1> 		je near nodragtext
  7222 00005CFD 8935[185A0000]      <1> 		mov [dragging], esi
  7223 00005D03 662B15[AD520000]    <1> 		sub dx, [lastmouseposition]
  7224 00005D0A 660315[B1520000]    <1> 		add dx, [mousecursorposition]
  7225 00005D11 66030D[B3520000]    <1> 		add cx, [mousecursorposition + 2]
  7226 00005D18 662B0D[AF520000]    <1> 		sub cx, [lastmouseposition + 2]
  7227 00005D1F 663B15[AB8C0000]    <1> 		cmp dx, [resolutionx2]
  7228 00005D26 7607                <1> 		jbe chkyresdrgtxt
  7229 00005D28 668B15[B1520000]    <1> 		mov dx, [mousecursorposition]
  7230                              <1> 	chkyresdrgtxt:
  7231 00005D2F 663B0D[BF8B0000]    <1> 		cmp cx, [resolutiony]
  7232 00005D36 7607                <1> 		jbe nodragtext
  7233 00005D38 668B0D[B3520000]    <1> 		mov cx, [mousecursorposition + 2]
  7234                              <1> 	nodragtext:
  7235 00005D3F 66814E0A0100        <1> 		or word [esi + 10], 1
  7236 00005D45 8B5E0C              <1> 		mov ebx, [esi + 12]
  7237 00005D48 891D[0B6B0000]      <1> 		mov [codepointer], ebx
  7238 00005D4E 668B460A            <1> 		mov ax, [esi + 10]
  7239 00005D52 8B7602              <1> 		mov esi, [esi + 2]
  7240 00005D55 E84B050000          <1> 		call showstring
  7241 00005D5A E97C010000          <1> 		jmp doneiconsel
  7242                              <1> 	unselecttext:
  7243 00005D5F 6681660AFEFF        <1> 		and word [esi + 10], 0xFFFE
  7244 00005D65 8B5E0C              <1> 		mov ebx, [esi + 12]
  7245 00005D68 668B460A            <1> 		mov ax, [esi + 10]
  7246 00005D6C 8B7602              <1> 		mov esi, [esi + 2]
  7247 00005D6F C705[0B6B0000]0000- <1> 		mov dword [codepointer], 0
  7248 00005D77 0000                <1>
  7249 00005D79 E827050000          <1> 		call showstring
  7250 00005D7E E958010000          <1> 		jmp doneiconsel
  7251                              <1> windowselect:
  7252 00005D83 8B7E02              <1> 		mov edi, [esi + 2]
  7253 00005D86 668B5606            <1> 		mov dx, [esi + 6]
  7254 00005D8A 6689D0              <1> 		mov ax, dx
  7255 00005D8D 668B4E08            <1> 		mov cx, [esi + 8]
  7256 00005D91 6689CB              <1> 		mov bx, cx
  7257 00005D94 6681C31000          <1> 		add bx, 16
  7258 00005D99 813D[185A0000]0100- <1> 		cmp dword [dragging], 1
  7259 00005DA1 0000                <1>
  7260 00005DA3 746D                <1> 		je dragwin
  7261 00005DA5 813D[185A0000]0000- <1> 		cmp dword [dragging], 0
  7262 00005DAD 0000                <1>
  7263 00005DAF 7411                <1> 		je nodragwincheck
  7264 00005DB1 3935[185A0000]      <1> 		cmp dword [dragging], esi
  7265 00005DB7 0F8505010000        <1> 		jne near nexticonsel
  7266 00005DBD E950000000          <1> 		jmp dragwin
  7267                              <1> 	nodragwincheck:
  7268 00005DC2 663905[B1520000]    <1> 		cmp [mousecursorposition], ax
  7269 00005DC9 0F82F3000000        <1> 		jb near nexticonsel
  7270 00005DCF 660307              <1> 		add ax, [edi]
  7271 00005DD2 660307              <1> 		add ax, [edi]
  7272 00005DD5 663905[B1520000]    <1> 		cmp [mousecursorposition], ax
  7273 00005DDC 0F87E0000000        <1> 		ja near nexticonsel
  7274 00005DE2 66390D[B3520000]    <1> 		cmp [mousecursorposition + 2], cx
  7275 00005DE9 0F82D3000000        <1> 		jb near nexticonsel
  7276 00005DEF 66391D[B3520000]    <1> 		cmp [mousecursorposition + 2], bx
  7277 00005DF6 0F87C6000000        <1> 		ja near nexticonsel
  7278 00005DFC 662D1400            <1> 		sub ax, 20
  7279 00005E00 663905[B1520000]    <1> 		cmp [mousecursorposition], ax
  7280 00005E07 0F8795000000        <1> 		ja near killwin
  7281 00005E0D E97C000000          <1> 		jmp nodragwin
  7282                              <1> 	dragwin:
  7283 00005E12 663905[AD520000]    <1> 		cmp [lastmouseposition], ax
  7284 00005E19 0F82A3000000        <1> 		jb near nexticonsel
  7285 00005E1F 660307              <1> 		add ax, [edi]
  7286 00005E22 660307              <1> 		add ax, [edi]
  7287 00005E25 663905[AD520000]    <1> 		cmp [lastmouseposition], ax
  7288 00005E2C 0F8790000000        <1> 		ja near nexticonsel
  7289 00005E32 66390D[AF520000]    <1> 		cmp [lastmouseposition + 2], cx
  7290 00005E39 0F8283000000        <1> 		jb near nexticonsel
  7291 00005E3F 66391D[AF520000]    <1> 		cmp [lastmouseposition + 2], bx
  7292 00005E46 0F8776000000        <1> 		ja near nexticonsel
  7293 00005E4C 8935[185A0000]      <1> 		mov [dragging], esi
  7294 00005E52 662B15[AD520000]    <1> 		sub dx, [lastmouseposition]
  7295 00005E59 660315[B1520000]    <1> 		add dx, [mousecursorposition]
  7296 00005E60 66030D[B3520000]    <1> 		add cx, [mousecursorposition + 2]
  7297 00005E67 662B0D[AF520000]    <1> 		sub cx, [lastmouseposition + 2]
  7298 00005E6E 663B15[AB8C0000]    <1> 		cmp dx, [resolutionx2]
  7299 00005E75 7607                <1> 		jbe chkyresdrgwin
  7300 00005E77 668B15[B1520000]    <1> 		mov dx, [mousecursorposition]
  7301                              <1> 	chkyresdrgwin:
  7302 00005E7E 663B0D[BF8B0000]    <1> 		cmp cx, [resolutiony]
  7303 00005E85 7607                <1> 		jbe nodragwin
  7304 00005E87 668B0D[B3520000]    <1> 		mov cx, [mousecursorposition + 2]
  7305                              <1> 	nodragwin:
  7306 00005E8E 8B5E0C              <1> 		mov ebx, [esi + 12]
  7307 00005E91 668B460A            <1> 		mov ax, [esi + 10]
  7308 00005E95 8B7602              <1> 		mov esi, [esi + 2]
  7309 00005E98 E870040000          <1> 		call showwindow
  7310 00005E9D E939000000          <1> 		jmp doneiconsel
  7311                              <1> 	killwin:
  7312 00005EA2 66C7060000          <1> 		mov word [esi], 0
  7313 00005EA7 C605[2C280000]00    <1> 		mov byte [termguion], 0
  7314 00005EAE E8D5F8FFFF          <1> 		call guiclear
  7315 00005EB3 E8A7000000          <1> 		call reloadallgraphics
  7316 00005EB8 E928FAFFFF          <1> 		jmp guistart
  7317 00005EBD E93A000000          <1> 		jmp doneiconsel2
  7318                              <1> 	nexticonsel:
  7319 00005EC2 6681660AFEFF        <1> 		and word [esi + 10], 0xFFFE
  7320 00005EC8 81C610000000        <1> 		add esi, 16
  7321 00005ECE 81FE[24900000]      <1> 		cmp esi, graphicstableend
  7322 00005ED4 7305                <1> 		jae doneiconsel
  7323 00005ED6 E9BCFBFFFF          <1> 		jmp clicon2
  7324                              <1> 	doneiconsel:
  7325 00005EDB 813D[185A0000]0100- <1> 		cmp dword [dragging], 1
  7326 00005EE3 0000                <1>
  7327 00005EE5 7315                <1> 		jae doneiconsel2
  7328 00005EE7 813D[0B6B0000]0000- <1> 		cmp dword [codepointer], 0
  7329 00005EEF 0000                <1>
  7330 00005EF1 7409                <1> 		je doneiconsel2
  7331 00005EF3 8B1D[0B6B0000]      <1> 		mov ebx, [codepointer]
  7332 00005EF9 FFD3                <1> 		call ebx 
  7333 00005EFB C3                  <1> 		ret
  7334                              <1> 	doneiconsel2:
  7335 00005EFC A0[C2530000]        <1> 		mov al, [LBUTTON]
  7336 00005F01 A2[165A0000]        <1> 		mov [pLBUTTON], al
  7337 00005F06 A0[C3530000]        <1> 		mov al, [RBUTTON]
  7338 00005F0B A2[175A0000]        <1> 		mov [pRBUTTON], al
  7339 00005F10 66813D[185A0000]01- <1> 		cmp word [dragging], 1
  7340 00005F18 00                  <1>
  7341 00005F19 0F860A000000        <1> 		jbe near noreloadgraphicsclick
  7342 00005F1F E8D6F9FFFF          <1> call clearmousecursor
  7343 00005F24 E836000000          <1> call reloadallgraphics
  7344                              <1> noreloadgraphicsclick:
  7345 00005F29 31C9                <1> 		xor ecx, ecx
  7346 00005F2B 31D2                <1> 		xor edx, edx
  7347 00005F2D 30E4                <1> 		xor ah, ah
  7348 00005F2F B0FE                <1> 		mov al, 254
  7349 00005F31 668B15[B1520000]    <1> 		mov dx, [mousecursorposition]
  7350 00005F38 668B0D[B3520000]    <1> 		mov cx, [mousecursorposition + 2]
  7351 00005F3F 66BBE738            <1> 		mov bx, 0011100011100111b
  7352 00005F43 C605[F7580000]01    <1> 		mov byte [showcursorfonton], 1
  7353 00005F4A E8DA080000          <1> 		call showfontvesa
  7354 00005F4F C605[F7580000]00    <1> 		mov byte [showcursorfonton], 0
  7355 00005F56 C3                  <1> 		ret
  7356 00005F57 00000000            <1> lastdrag dw 0,0
  7357 00005F5B 00000000            <1> grpctblpos dw 0,0
  7358                              <1> 
  7359                              <1> reloadallgraphics:
  7360 00005F5F BF[248E0000]        <1> 		mov edi, graphicstable
  7361                              <1> reloadgraphicsloop:
  7362 00005F64 8B7702              <1> 		mov esi, [edi + 2]
  7363 00005F67 668B5706            <1> 		mov dx, [edi + 6]
  7364 00005F6B 668B4F08            <1> 		mov cx, [edi + 8]
  7365 00005F6F 668B07              <1> 		mov ax, [edi]
  7366 00005F72 668B5F0A            <1> 		mov bx, [edi + 10]
  7367 00005F76 893D[5B5F0000]      <1> 		mov [grpctblpos], edi
  7368 00005F7C 3B3D[185A0000]      <1> 		cmp edi, [dragging]
  7369 00005F82 741E                <1> 		je loadedgraphic
  7370 00005F84 663D0100            <1> 		cmp ax, 1
  7371 00005F88 0F8436000000        <1> 		je near icongraphic
  7372 00005F8E 663D0200            <1> 		cmp ax, 2
  7373 00005F92 0F843C000000        <1> 		je near stringgraphic
  7374 00005F98 663D0300            <1> 		cmp ax, 3
  7375 00005F9C 0F8416000000        <1> 		je near windowgraphic
  7376 00005FA2 8B3D[5B5F0000]      <1> loadedgraphic:  mov edi, [grpctblpos]
  7377 00005FA8 81C710000000        <1> 		add edi, 16
  7378 00005FAE 81FF[24900000]      <1> 		cmp edi, graphicstableend
  7379 00005FB4 732E                <1> 		jae donereloadgraphics
  7380 00005FB6 EBAC                <1> 		jmp reloadgraphicsloop
  7381 00005FB8 E8F8030000          <1> windowgraphic:	call showwindow2
  7382 00005FBD E851C4FFFF          <1> 		call cleardouble
  7383 00005FC2 EBDE                <1> 		jmp loadedgraphic
  7384 00005FC4 80E301              <1> icongraphic:	and bl, 1
  7385 00005FC7 881D[0F6B0000]      <1> 		mov [iconselected], bl
  7386 00005FCD E890070000          <1> 		call showicon2
  7387 00005FD2 EBCE                <1> 		jmp loadedgraphic
  7388 00005FD4 80E301              <1> stringgraphic:  and bl, 1
  7389 00005FD7 881D[F9580000]      <1> 		mov [mouseselecton], bl
  7390 00005FDD E8D6020000          <1> 		call showstring2
  7391 00005FE2 EBBE                <1> 		jmp loadedgraphic
  7392                              <1> donereloadgraphics:
  7393 00005FE4 8B3D[185A0000]      <1> 		mov edi, [dragging]
  7394 00005FEA 81FF[248E0000]      <1> 		cmp edi, graphicstable
  7395 00005FF0 7226                <1> 		jb notcorrectdrag
  7396 00005FF2 668B07              <1> 		mov ax, [edi]
  7397 00005FF5 8B7702              <1> 		mov esi, [edi + 2]
  7398 00005FF8 668B5706            <1> 		mov dx, [edi + 6]
  7399 00005FFC 668B4F08            <1> 		mov cx, [edi + 8]
  7400 00006000 668B5F0A            <1> 		mov bx, [edi + 10]
  7401 00006004 663D0100            <1> 		cmp ax, 1
  7402 00006008 750F                <1> 		jne noticondragging
  7403 0000600A 80E301              <1> 		and bl, 1
  7404 0000600D 881D[0F6B0000]      <1> 		mov [iconselected], bl
  7405 00006013 E84A070000          <1> 		call showicon2
  7406                              <1> notcorrectdrag:
  7407 00006018 C3                  <1> 		ret
  7408                              <1> 
  7409                              <1> 	noticondragging:
  7410 00006019 663D0200            <1> 		cmp ax, 2
  7411 0000601D 75F9                <1> 		jne notcorrectdrag
  7412 0000601F 80E301              <1> 		and bl, 1
  7413 00006022 881D[F9580000]      <1> 		mov [mouseselecton], bl
  7414 00006028 E88B020000          <1> 		call showstring2
  7415 0000602D EBE9                <1> 		jmp notcorrectdrag
  7416                              <1> 
  7417 0000602F 00<rept>            <1> grphbuf times 16 db 0
  7418                              <1> 	graphicsadd:
  7419 0000603F BF[248E0000]        <1> 		mov edi, graphicstable
  7420                              <1> 	shwgrph1:
  7421 00006044 397702              <1> 		cmp dword [edi + 2], esi
  7422 00006047 7414                <1> 		je showgraphicsreplace2
  7423 00006049 81C710000000        <1> 		add edi, 16
  7424 0000604F 81FF[24900000]      <1> 		cmp edi, graphicstableend
  7425 00006055 0F832F020000        <1> 		jae near showgraphicsnew
  7426 0000605B EBE7                <1> 		jmp shwgrph1
  7427                              <1> 	showgraphicsreplace2:
  7428 0000605D 8935[31600000]      <1> 		mov [grphbuf + 2], esi
  7429 00006063 668915[35600000]    <1> 		mov [grphbuf + 6], dx
  7430 0000606A 66890D[37600000]    <1> 		mov [grphbuf + 8], cx
  7431 00006071 891D[3B600000]      <1> 		mov [grphbuf + 12], ebx
  7432 00006077 30FF                <1> 		xor bh, bh
  7433 00006079 88E3                <1> 		mov bl, ah
  7434 0000607B 30E4                <1> 		xor ah, ah
  7435 0000607D 66A3[39600000]      <1> 		mov [grphbuf + 10], ax	
  7436 00006083 66891D[2F600000]    <1> 		mov [grphbuf], bx
  7437 0000608A 66A1[2F600000]      <1> 		mov ax, [grphbuf]
  7438 00006090 663D0100            <1> 		cmp ax, 1
  7439 00006094 0F8419000000        <1> 		je near replaceicon
  7440 0000609A 663D0200            <1> 		cmp ax, 2
  7441 0000609E 0F8493000000        <1> 		je near replacestring
  7442 000060A4 663D0300            <1> 		cmp ax, 3
  7443 000060A8 0F840F010000        <1> 		je near replacewindow
  7444 000060AE E9B4010000          <1> 		jmp showgraphicsreplace
  7445                              <1> 	replaceicon:
  7446 000060B3 893D[1C5A0000]      <1> 		mov [lastpos], edi
  7447 000060B9 8935[205A0000]      <1> 		mov [lastpos + 4], esi
  7448 000060BF 8B7702              <1> 		mov esi, [edi + 2]
  7449 000060C2 668B5F0C            <1> 		mov bx, [edi + 12]
  7450 000060C6 668B5706            <1> 		mov dx, [edi + 6]
  7451 000060CA 668B4F08            <1> 		mov cx, [edi + 8]
  7452 000060CE 668B06              <1> 		mov ax, [esi]
  7453 000060D1 66A3[245A0000]      <1> 		mov [colorbuf], ax
  7454 000060D7 66A1[C5570000]      <1> 		mov ax, [background]
  7455 000060DD 668906              <1> 		mov [esi], ax
  7456 000060E0 8B5F0C              <1> 		mov ebx, [edi + 12]
  7457 000060E3 668B470A            <1> 		mov ax, [edi + 10]
  7458 000060E7 2401                <1> 		and al, 1
  7459 000060E9 A2[0F6B0000]        <1> 		mov [iconselected], al
  7460 000060EE 668B470A            <1> 		mov ax, [edi + 10]
  7461 000060F2 E86B060000          <1> 		call showicon2
  7462 000060F7 8B3D[1C5A0000]      <1> 		mov edi, [lastpos]
  7463 000060FD 8B7702              <1> 		mov esi, [edi + 2]
  7464 00006100 66A1[245A0000]      <1> 		mov ax, [colorbuf]
  7465 00006106 668906              <1> 		mov [esi], ax
  7466 00006109 8B35[205A0000]      <1> 		mov esi, [lastpos + 4]
  7467 0000610F 668B15[35600000]    <1> 		mov dx, [grphbuf + 6]
  7468 00006116 668B0D[37600000]    <1> 		mov cx, [grphbuf + 8]
  7469 0000611D 668B1D[2F600000]    <1> 		mov bx, [grphbuf]
  7470 00006124 66A1[39600000]      <1> 		mov ax, [grphbuf + 10]
  7471 0000612A 88DC                <1> 		mov ah, bl
  7472 0000612C 8B1D[3B600000]      <1> 		mov ebx, [grphbuf + 12]
  7473 00006132 E930010000          <1> 		jmp showgraphicsreplace
  7474                              <1> 	replacestring:
  7475 00006137 893D[1C5A0000]      <1> 		mov [lastpos], edi
  7476 0000613D 8935[205A0000]      <1> 		mov [lastpos + 4], esi
  7477 00006143 8B5F0C              <1> 		mov ebx, [edi + 12]
  7478 00006146 8B7702              <1> 		mov esi, [edi + 2]
  7479 00006149 668B5706            <1> 		mov dx, [edi + 6]
  7480 0000614D 668B4F08            <1> 		mov cx, [edi + 8]
  7481 00006151 66A1[F0620000]      <1> 		mov ax, [colorfont2]
  7482 00006157 66A3[245A0000]      <1> 		mov [colorbuf], ax
  7483 0000615D 66A1[C5570000]      <1> 		mov ax, [background]
  7484 00006163 66A3[F0620000]      <1> 		mov [colorfont2], ax		
  7485 00006169 8B5F0C              <1> 		mov ebx, [edi + 12]
  7486 0000616C 668B470A            <1> 		mov ax, [edi + 10]
  7487 00006170 2401                <1> 		and al, 1
  7488 00006172 A2[F9580000]        <1> 		mov [mouseselecton], al
  7489 00006177 668B470A            <1> 		mov ax, [edi + 10]
  7490 0000617B E838010000          <1> 		call showstring2
  7491 00006180 66A1[245A0000]      <1> 		mov ax, [colorbuf]
  7492 00006186 66A3[F0620000]      <1> 		mov [colorfont2], ax
  7493 0000618C 8B3D[1C5A0000]      <1> 		mov edi, [lastpos]
  7494 00006192 8B7702              <1> 		mov esi, [edi + 2]
  7495 00006195 668B15[35600000]    <1> 		mov dx, [grphbuf + 6]
  7496 0000619C 668B0D[37600000]    <1> 		mov cx, [grphbuf + 8]
  7497 000061A3 668B1D[2F600000]    <1> 		mov bx, [grphbuf]
  7498 000061AA 66A1[39600000]      <1> 		mov ax, [grphbuf + 10]
  7499 000061B0 88DC                <1> 		mov ah, bl
  7500 000061B2 8B1D[3B600000]      <1> 		mov ebx, [grphbuf + 12]
  7501 000061B8 E9AA000000          <1> 		jmp showgraphicsreplace
  7502                              <1> 	replacewindow:
  7503 000061BD 893D[1C5A0000]      <1> 		mov [lastpos], edi
  7504 000061C3 8935[205A0000]      <1> 		mov [lastpos + 4], esi
  7505 000061C9 8B7702              <1> 		mov esi, [edi + 2]
  7506 000061CC 8B3D[FF620000]      <1> 		mov edi, [windowbufloc]
  7507 000061D2 31D2                <1> 		xor edx, edx
  7508 000061D4 668B15[AB8C0000]    <1> 		mov dx, [resolutionx2]
  7509 000061DB C1E204              <1> 		shl edx, 4
  7510 000061DE 29D7                <1> 		sub edi, edx
  7511 000061E0 31D2                <1> 		xor edx, edx
  7512 000061E2 668B16              <1> 		mov dx, [esi]
  7513 000061E5 660316              <1> 		add dx, [esi]
  7514 000061E8 668B4E02            <1> 		mov cx, [esi + 2]
  7515 000061EC 6681C11000          <1> 		add cx, 16
  7516 000061F1 66A1[C5570000]      <1> 		mov ax, [background]
  7517                              <1> 	clearwindow:
  7518 000061F7 668907              <1> 		mov [edi], ax
  7519 000061FA 81C702000000        <1> 		add edi, 2
  7520 00006200 81EA02000000        <1> 		sub edx, 2
  7521 00006206 81FA00000000        <1> 		cmp edx, 0
  7522 0000620C 75E9                <1> 		jne clearwindow
  7523 0000620E 6649                <1> 		dec cx
  7524 00006210 668B15[AB8C0000]    <1> 		mov dx, [resolutionx2]
  7525 00006217 662B16              <1> 		sub dx, [esi]
  7526 0000621A 662B16              <1> 		sub dx, [esi]
  7527 0000621D 01D7                <1> 		add edi, edx
  7528 0000621F 668B16              <1> 		mov dx, [esi]
  7529 00006222 660316              <1> 		add dx, [esi]
  7530 00006225 6681F90000          <1> 		cmp cx, 0
  7531 0000622A 75CB                <1> 		jne clearwindow
  7532 0000622C C605[2D280000]00    <1> 		mov byte [termcopyon], 0
  7533 00006233 8B3D[1C5A0000]      <1> 		mov edi, [lastpos]
  7534 00006239 8B35[31600000]      <1> 		mov esi, [grphbuf + 2]
  7535 0000623F 668B15[35600000]    <1> 		mov dx, [grphbuf + 6]
  7536 00006246 668B0D[37600000]    <1> 		mov cx, [grphbuf + 8]
  7537 0000624D 668B1D[2F600000]    <1> 		mov bx, [grphbuf]
  7538 00006254 66A1[39600000]      <1> 		mov ax, [grphbuf + 10]
  7539 0000625A 88DC                <1> 		mov ah, bl
  7540 0000625C 8B1D[3B600000]      <1> 		mov ebx, [grphbuf + 12]
  7541 00006262 E900000000          <1> 		jmp showgraphicsreplace
  7542                              <1> 	showgraphicsreplace:
  7543 00006267 897702              <1> 		mov [edi + 2], esi
  7544 0000626A 66895706            <1> 		mov [edi + 6], dx
  7545 0000626E 66894F08            <1> 		mov [edi + 8], cx
  7546 00006272 895F0C              <1> 		mov [edi + 12], ebx
  7547 00006275 30FF                <1> 		xor bh, bh
  7548 00006277 88E3                <1> 		mov bl, ah
  7549 00006279 30E4                <1> 		xor ah, ah
  7550 0000627B 6689470A            <1> 		mov [edi + 10], ax
  7551 0000627F 66891F              <1> 		mov [edi], bx
  7552 00006282 8B5F0C              <1> 		mov ebx, [edi + 12]
  7553 00006285 668B470A            <1> 		mov ax, [edi + 10]
  7554 00006289 C3                  <1> 		ret
  7555                              <1> 	showgraphicsnew:
  7556 0000628A BF[248E0000]        <1> 		mov edi, graphicstable
  7557                              <1> 	shwgrph2:
  7558 0000628F 66813F0000          <1> 		cmp word [edi], 0
  7559 00006294 74D1                <1> 		je showgraphicsreplace
  7560 00006296 81C710000000        <1> 		add edi, 16
  7561 0000629C 81FF[24900000]      <1> 		cmp edi, graphicstableend
  7562 000062A2 72EB                <1> 		jb shwgrph2
  7563                              <1> 	showgraphicsdone:
  7564 000062A4 C3                  <1> 		ret
  7565                              <1> 
  7566                              <1> 	showstring:
  7567 000062A5 A2[F9580000]        <1> 		mov [mouseselecton], al
  7568 000062AA 8025[F9580000]01    <1> 		and byte [mouseselecton], 1
  7569 000062B1 B402                <1> 		mov ah, 2
  7570 000062B3 E887FDFFFF          <1> 		call graphicsadd
  7571                              <1> 	showstring2:
  7572 000062B8 30E4                <1> 		xor ah, ah
  7573 000062BA 8A06                <1> 		mov al, [esi]
  7574 000062BC 3C00                <1> 		cmp al, 0
  7575 000062BE 7428                <1> 		je doneshowstring
  7576 000062C0 46                  <1> 		inc esi
  7577 000062C1 3CFF                <1> 		cmp al, 255
  7578 000062C3 74F3                <1> 		je showstring2
  7579 000062C5 8935[B86A0000]      <1> 		mov [showstringesi], esi
  7580 000062CB 668B1D[F0620000]    <1> 		mov bx, [colorfont2]
  7581 000062D2 E852050000          <1> 		call showfontvesa
  7582 000062D7 3C0A                <1> 		cmp al, 10
  7583 000062D9 7405                <1> 		je noproceedshst
  7584 000062DB 6681C20800          <1> 		add dx, 8
  7585                              <1> 	noproceedshst:
  7586 000062E0 8B35[B86A0000]      <1> 		mov esi, [showstringesi]
  7587 000062E6 EBD0                <1> 		jmp showstring2
  7588                              <1> 	doneshowstring:
  7589 000062E8 C605[F9580000]00    <1> 		mov byte [mouseselecton], 0
  7590 000062EF C3                  <1> 		ret
  7591                              <1> 
  7592 000062F0 FFFF                <1> colorfont2 dw 0xFFFF
  7593 000062F2 00                  <1> colorcache db 0
  7594 000062F3 0000                <1> winvcopystx dw 0
  7595 000062F5 0000                <1> winvcopysty dw 0
  7596 000062F7 0000                <1> winvcopydx dw 0
  7597 000062F9 0000                <1> winvcopycx dw 0
  7598 000062FB FFFF0000            <1> windowcolor dw 0xFFFF,0x0
  7599 000062FF 00000000            <1> windowbufloc: dw 0,0
  7600 00006303 00000000            <1> windowinfobuf dd 0
  7601 00006307 0000                <1> termcol dw 0
  7602 00006309 00000000            <1> wincopyendpos dd 0
  7603                              <1> 
  7604                              <1> 	showwindow:	;;windowstuff in si, position in (dx, cx), nothing in ax, code in bx
  7605 0000630D C605[2C280000]01    <1> 		mov byte [termguion], 1
  7606 00006314 6681C11000          <1> 		add cx, 16
  7607 00006319 668915[F3620000]    <1> 		mov [winvcopystx], dx
  7608 00006320 66890D[F5620000]    <1> 		mov [winvcopysty], cx
  7609 00006327 8935[03630000]      <1> 		mov [windowinfobuf], esi
  7610 0000632D 668B16              <1> 		mov dx, [esi]
  7611 00006330 668B4E02            <1> 		mov cx, [esi + 2]
  7612 00006334 31C0                <1> 		xor eax, eax
  7613 00006336 31DB                <1> 		xor ebx, ebx
  7614 00006338 6689D0              <1> 		mov ax, dx
  7615 0000633B 6689CB              <1> 		mov bx, cx
  7616 0000633E 66C1E803            <1> 		shr ax, 3
  7617 00006342 66C1EB04            <1> 		shr bx, 4
  7618 00006346 66A3[07630000]      <1> 		mov [termcol], ax
  7619 0000634C A2[F0290000]        <1> 		mov [charxy], al
  7620 00006351 881D[F1290000]      <1> 		mov [charxy + 1], bl
  7621 00006357 BF[B7AD0000]        <1> 		mov edi, videobuf
  7622 0000635C 81FB00000000        <1> 		cmp ebx, 0
  7623 00006362 0F84CD030000        <1> 		je near donewincopynow	;AAAAAAAAA!!!!!
  7624                              <1> 	findendposwin:
  7625 00006368 01C7                <1> 		add edi, eax
  7626 0000636A 01C7                <1> 		add edi, eax
  7627 0000636C 4B                  <1> 		dec ebx
  7628 0000636D 81FB00000000        <1> 		cmp ebx, 0
  7629 00006373 77F3                <1> 		ja findendposwin
  7630 00006375 893D[09630000]      <1> 		mov [wincopyendpos], edi
  7631 0000637B 31FF                <1> 		xor edi, edi
  7632 0000637D 6631C0              <1> 		xor ax, ax
  7633 00006380 6631DB              <1> 		xor bx, bx
  7634 00006383 6601D2              <1> 		add dx, dx
  7635 00006386 668915[F7620000]    <1> 		mov [winvcopydx], dx
  7636 0000638D 66890D[F9620000]    <1> 		mov [winvcopycx], cx
  7637 00006394 668B0D[F5620000]    <1> 		mov cx, [winvcopysty]
  7638 0000639B 6681E91000          <1> 		sub cx, 16
  7639 000063A0 668B15[F3620000]    <1> 		mov dx, [winvcopystx]
  7640 000063A7 C605[2D280000]00    <1> 		mov byte [termcopyon], 0
  7641 000063AE B403                <1> 		mov ah, 3
  7642 000063B0 E88AFCFFFF          <1> 		call graphicsadd
  7643                              <1> 	showwindow2:
  7644 000063B5 6681C11000          <1> 		add cx, 16
  7645 000063BA 668915[F3620000]    <1> 		mov [winvcopystx], dx
  7646 000063C1 66890D[F5620000]    <1> 		mov [winvcopysty], cx
  7647 000063C8 668B16              <1> 		mov dx, [esi]
  7648 000063CB 668B4E02            <1> 		mov cx, [esi + 2]
  7649 000063CF 6601D2              <1> 		add dx, dx
  7650 000063D2 668915[F7620000]    <1> 		mov [winvcopydx], dx
  7651 000063D9 66890D[F9620000]    <1> 		mov [winvcopycx], cx
  7652 000063E0 8B3D[FF620000]      <1> 		mov edi, [windowbufloc]
  7653 000063E6 31D2                <1> 		xor edx, edx
  7654 000063E8 668B15[AB8C0000]    <1> 		mov dx, [resolutionx2]
  7655 000063EF C1E204              <1> 		shl edx, 4
  7656 000063F2 29D7                <1> 		sub edi, edx
  7657 000063F4 803D[2D280000]00    <1> 		cmp byte [termcopyon], 0
  7658 000063FB 7538                <1> 		jne nocleartitlebarpos
  7659 000063FD 8B3D[D38B0000]      <1> 		mov edi, [physbaseptr]
  7660 00006403 31D2                <1> 		xor edx, edx
  7661 00006405 668B15[F3620000]    <1> 		mov dx, [winvcopystx]
  7662 0000640C 01D7                <1> 		add edi, edx
  7663 0000640E 668B0D[F5620000]    <1> 		mov cx, [winvcopysty]
  7664 00006415 6681E91000          <1> 		sub cx, 16
  7665 0000641A 6681F90000          <1> 		cmp cx, 0
  7666 0000641F 7414                <1> 		je nocleartitlebarpos
  7667                              <1> 	cleartitlebarpos:
  7668 00006421 31D2                <1> 		xor edx, edx
  7669 00006423 668B15[AB8C0000]    <1> 		mov dx, [resolutionx2]
  7670 0000642A 01D7                <1> 		add edi, edx
  7671 0000642C 6649                <1> 		dec cx
  7672 0000642E 6681F90000          <1> 		cmp cx, 0
  7673 00006433 75EC                <1> 		jne cleartitlebarpos
  7674                              <1> 	nocleartitlebarpos:
  7675 00006435 66B91000            <1> 		mov cx, 16
  7676 00006439 668B15[F7620000]    <1> 		mov dx, [winvcopydx]
  7677 00006440 6681F90000          <1> 		cmp cx, 0
  7678 00006445 0F8448000000        <1> 		je near canceltitlebarput
  7679 0000644B 6681FA0000          <1> 		cmp dx, 0
  7680 00006450 0F843D000000        <1> 		je near canceltitlebarput
  7681                              <1> 	titlebarput:
  7682 00006456 66A1[FB620000]      <1> 		mov ax, [windowcolor]
  7683 0000645C 668907              <1> 		mov [edi], ax
  7684 0000645F 6681EA0200          <1> 		sub dx, 2
  7685 00006464 81C702000000        <1> 		add edi, 2
  7686 0000646A 6681FA0000          <1> 		cmp dx, 0
  7687 0000646F 75E5                <1> 		jne titlebarput
  7688 00006471 31D2                <1> 		xor edx, edx
  7689 00006473 668B15[AB8C0000]    <1> 		mov dx, [resolutionx2]
  7690 0000647A 6649                <1> 		dec cx
  7691 0000647C 662B15[F7620000]    <1> 		sub dx, [winvcopydx]
  7692 00006483 01D7                <1> 		add edi, edx
  7693 00006485 668B15[F7620000]    <1> 		mov dx, [winvcopydx]
  7694 0000648C 6681F90000          <1> 		cmp cx, 0
  7695 00006491 75C3                <1> 		jne titlebarput
  7696                              <1> 	canceltitlebarput:
  7697 00006493 893D[FF620000]      <1> 		mov [windowbufloc], edi
  7698 00006499 803D[2D280000]02    <1> 		cmp byte [termcopyon], 2
  7699 000064A0 0F8461000000        <1> 		je near winvcpst
  7700 000064A6 6631C0              <1> 		xor ax, ax
  7701 000064A9 81C604000000        <1> 		add esi, 4
  7702 000064AF 668B15[F3620000]    <1> 		mov dx, [winvcopystx]
  7703 000064B6 668B0D[F5620000]    <1> 		mov cx, [winvcopysty]
  7704 000064BD 6681E91000          <1> 		sub cx, 16
  7705 000064C2 6631DB              <1> 		xor bx, bx
  7706 000064C5 C605[F9580000]01    <1> 		mov byte [mouseselecton], 1
  7707 000064CC E8E7FDFFFF          <1> 		call showstring2
  7708 000064D1 B058                <1> 		mov al, "X"
  7709 000064D3 30E4                <1> 		xor ah, ah
  7710 000064D5 668B1D[F0620000]    <1> 		mov bx, [colorfont2]
  7711 000064DC 668B15[F3620000]    <1> 		mov dx, [winvcopystx]
  7712 000064E3 668B0D[F5620000]    <1> 		mov cx, [winvcopysty]
  7713 000064EA 6681E91000          <1> 		sub cx, 16
  7714 000064EF 6681EA1400          <1> 		sub dx, 20
  7715 000064F4 660315[F7620000]    <1> 		add dx, [winvcopydx]
  7716 000064FB C605[F9580000]01    <1> 		mov byte [mouseselecton], 1
  7717 00006502 E822030000          <1> 		call showfontvesa
  7718                              <1> 	winvcpst:
  7719 00006507 8B3D[FF620000]      <1> 		mov edi, [windowbufloc]
  7720 0000650D E97E000000          <1> 		jmp windowvideocopyset
  7721                              <1> 
  7722                              <1> 	windowvideocopy:
  7723 00006512 8B35[03630000]      <1> 		mov esi, [windowinfobuf]
  7724 00006518 668B16              <1> 		mov dx, [esi]
  7725 0000651B 668B4E02            <1> 		mov cx, [esi + 2]
  7726 0000651F 31C0                <1> 		xor eax, eax
  7727 00006521 31DB                <1> 		xor ebx, ebx
  7728 00006523 6689D0              <1> 		mov ax, dx
  7729 00006526 6689CB              <1> 		mov bx, cx
  7730 00006529 66C1E803            <1> 		shr ax, 3
  7731 0000652D 66C1EB04            <1> 		shr bx, 4
  7732 00006531 66A3[07630000]      <1> 		mov [termcol], ax
  7733 00006537 A2[F0290000]        <1> 		mov [charxy], al
  7734 0000653C 881D[F1290000]      <1> 		mov [charxy + 1], bl
  7735 00006542 8B3D[FF620000]      <1> 		mov edi, [windowbufloc]
  7736 00006548 3B3D[D38B0000]      <1> 		cmp edi, [physbaseptr]
  7737 0000654E 0F833C000000        <1> 		jae near windowvideocopyset
  7738 00006554 31C9                <1> 		xor ecx, ecx
  7739 00006556 31D2                <1> 		xor edx, edx
  7740 00006558 668B15[F3620000]    <1> 		mov dx, [winvcopystx]
  7741 0000655F 668B0D[F5620000]    <1> 		mov cx, [winvcopysty]
  7742 00006566 8B3D[D38B0000]      <1> 		mov edi, [physbaseptr]
  7743 0000656C 01D7                <1> 		add edi, edx
  7744 0000656E 81F900000000        <1> 		cmp ecx, 0
  7745 00006574 741A                <1> 		je windowvideocopyset
  7746                              <1> 	yrescopylp:
  7747 00006576 31D2                <1> 		xor edx, edx
  7748 00006578 668B15[AB8C0000]    <1> 		mov dx, [resolutionx2]
  7749 0000657F 01D7                <1> 		add edi, edx
  7750 00006581 6649                <1> 		dec cx
  7751 00006583 6681F90000          <1> 		cmp cx, 0
  7752 00006588 75EC                <1> 		jne yrescopylp
  7753 0000658A 893D[FF620000]      <1> 		mov [windowbufloc], edi
  7754                              <1> 	windowvideocopyset:
  7755 00006590 6631C9              <1> 		xor cx, cx
  7756 00006593 6649                <1> 		dec cx
  7757 00006595 66890D[47670000]    <1> 		mov [charposline], cx
  7758 0000659C 89FE                <1> 		mov esi, edi
  7759 0000659E 81EE10000000        <1> 		sub esi, 16
  7760 000065A4 31D2                <1> 		xor edx, edx
  7761 000065A6 668B15[AB8C0000]    <1> 		mov dx, [resolutionx2]
  7762 000065AD C1E204              <1> 		shl edx, 4
  7763 000065B0 01D6                <1> 		add esi, edx
  7764 000065B2 BF[B7AD0000]        <1> 		mov edi, videobuf
  7765 000065B7 81EF02000000        <1> 		sub edi, 2
  7766 000065BD 893D[49670000]      <1> 		mov [charposvbuf], edi
  7767 000065C3 E96E000000          <1> 		jmp nextcharwin
  7768                              <1> 	copywindow:
  7769 000065C8 B201                <1> 		mov dl, 1
  7770 000065CA D0C6                <1> 		rol dh, 1
  7771 000065CC 20F2                <1> 		and dl, dh
  7772 000065CE 803D[F2620000]10    <1> 		cmp byte [colorcache], 0x10
  7773 000065D5 731C                <1> 		jae switchwincolors
  7774 000065D7 66A1[FD620000]      <1> 		mov ax, [windowcolor + 2]
  7775 000065DD 668907              <1> 		mov [edi], ax
  7776 000065E0 80FA00              <1> 		cmp dl, 0
  7777 000065E3 7425                <1> 		je nowritewin
  7778 000065E5 66A1[FB620000]      <1> 		mov ax, [windowcolor]
  7779 000065EB 668907              <1> 		mov [edi], ax
  7780 000065EE E917000000          <1> 		jmp nowritewin
  7781                              <1> 	switchwincolors:
  7782 000065F3 66A1[FB620000]      <1> 		mov ax, [windowcolor]
  7783 000065F9 668907              <1> 		mov [edi], ax
  7784 000065FC 80FA00              <1> 		cmp dl, 0
  7785 000065FF 7409                <1> 		je nowritewin
  7786 00006601 66A1[FD620000]      <1> 		mov ax, [windowcolor + 2]
  7787 00006607 668907              <1> 		mov [edi], ax
  7788                              <1> 	nowritewin:
  7789 0000660A 81C702000000        <1> 		add edi, 2
  7790 00006610 FEC1                <1> 		inc cl
  7791 00006612 80F908              <1> 		cmp cl, 8
  7792 00006615 75B1                <1> 		jne copywindow
  7793 00006617 6643                <1> 		inc bx
  7794 00006619 30C9                <1> 		xor cl, cl
  7795 0000661B 31D2                <1> 		xor edx, edx
  7796 0000661D 668B15[AB8C0000]    <1> 		mov dx, [resolutionx2]
  7797 00006624 01D6                <1> 		add esi, edx
  7798 00006626 89F7                <1> 		mov edi, esi
  7799 00006628 678AB7[9B79]        <1> 		mov dh, [fonts + bx]
  7800 0000662D D0CE                <1> 		ror dh, 1
  7801 0000662F FEC5                <1> 		inc ch
  7802 00006631 80FD10              <1> 		cmp ch, 16
  7803 00006634 7592                <1> 		jne copywindow
  7804                              <1> 	nextcharwin:
  7805 00006636 6631C9              <1> 		xor cx, cx
  7806 00006639 8B3D[49670000]      <1> 		mov edi, [charposvbuf]
  7807 0000663F 81C702000000        <1> 		add edi, 2
  7808 00006645 3B3D[09630000]      <1> 		cmp edi, [wincopyendpos]
  7809 0000664B 0F83E4000000        <1> 		jae near donewincopynow
  7810 00006651 8A7F01              <1> 		mov bh, [edi + 1]
  7811 00006654 80FF00              <1> 		cmp bh, 0
  7812 00006657 7505                <1> 		jne nofixcolorwin
  7813 00006659 B707                <1> 		mov bh, 7
  7814 0000665B 887F01              <1> 		mov [edi + 1], bh
  7815                              <1> 	nofixcolorwin:
  7816 0000665E 883D[F2620000]      <1> 		mov [colorcache], bh
  7817 00006664 8A1F                <1> 		mov bl, [edi]
  7818 00006666 893D[49670000]      <1> 		mov [charposvbuf], edi
  7819 0000666C 81EF[B7AD0000]      <1> 		sub edi, videobuf
  7820 00006672 81C7[F7FE0000]      <1> 		add edi, videobuf2
  7821 00006678 8A6701              <1> 		mov ah, [edi + 1]
  7822 0000667B 8A07                <1> 		mov al, [edi]
  7823 0000667D 6639D8              <1> 		cmp ax, bx
  7824 00006680 7543                <1> 		jne noskipcharcopy
  7825                              <1> 	skipcharcopy:
  7826 00006682 81C610000000        <1> 		add esi, 16
  7827 00006688 668B0D[47670000]    <1> 		mov cx, [charposline]
  7828 0000668F 6641                <1> 		inc cx
  7829 00006691 66890D[47670000]    <1> 		mov [charposline], cx
  7830 00006698 663B0D[07630000]    <1> 		cmp cx, [termcol]
  7831 0000669F 7295                <1> 		jb nextcharwin
  7832 000066A1 6631C9              <1> 		xor cx, cx
  7833 000066A4 66890D[47670000]    <1> 		mov [charposline], cx
  7834 000066AB 31D2                <1> 		xor edx, edx
  7835 000066AD 668B15[AB8C0000]    <1> 		mov dx, [resolutionx2]
  7836 000066B4 C1E204              <1> 		shl edx, 4
  7837 000066B7 662B15[F7620000]    <1> 		sub dx, [winvcopydx]
  7838 000066BE 01D6                <1> 		add esi, edx
  7839 000066C0 E971FFFFFF          <1> 		jmp nextcharwin
  7840                              <1> 	noskipcharcopy:
  7841 000066C5 881F                <1> 		mov [edi], bl
  7842 000066C7 887F01              <1> 		mov [edi + 1], bh
  7843 000066CA 8B3D[49670000]      <1> 		mov edi, [charposvbuf]
  7844 000066D0 30FF                <1> 		xor bh, bh
  7845 000066D2 66C1E304            <1> 		shl bx, 4
  7846 000066D6 31D2                <1> 		xor edx, edx
  7847 000066D8 668B15[AB8C0000]    <1> 		mov dx, [resolutionx2]
  7848 000066DF C1E204              <1> 		shl edx, 4
  7849 000066E2 29D6                <1> 		sub esi, edx
  7850 000066E4 81C610000000        <1> 		add esi, 16
  7851 000066EA 89F7                <1> 		mov edi, esi
  7852 000066EC 668B0D[47670000]    <1> 		mov cx, [charposline]
  7853 000066F3 6641                <1> 		inc cx
  7854 000066F5 663B0D[07630000]    <1> 		cmp cx, [termcol]
  7855 000066FC 7316                <1> 		jae fixwindowcopy
  7856 000066FE 66890D[47670000]    <1> 		mov [charposline], cx
  7857 00006705 6631C9              <1> 		xor cx, cx
  7858 00006708 678AB7[9B79]        <1> 		mov dh, [fonts + bx]
  7859 0000670D D0CE                <1> 		ror dh, 1
  7860 0000670F E9B4FEFFFF          <1> 		jmp copywindow
  7861                              <1> fixwindowcopy:
  7862 00006714 6631C9              <1> 		xor cx, cx
  7863 00006717 66890D[47670000]    <1> 		mov [charposline], cx
  7864 0000671E 662B15[F7620000]    <1> 		sub dx, [winvcopydx]
  7865 00006725 01D6                <1> 		add esi, edx
  7866 00006727 89F7                <1> 		mov edi, esi
  7867 00006729 678AB7[9B79]        <1> 		mov dh, [fonts + bx]
  7868 0000672E D0CE                <1> 		ror dh, 1
  7869 00006730 E993FEFFFF          <1> 		jmp copywindow
  7870                              <1> donewincopynow:
  7871 00006735 803D[2D280000]01    <1> 		cmp byte [termcopyon], 1
  7872 0000673C 7501                <1> 		jne forgetresetstuff
  7873 0000673E 61                  <1> 		popa
  7874                              <1> forgetresetstuff:
  7875 0000673F C605[2D280000]00    <1> 		mov byte [termcopyon], 0
  7876 00006746 C3                  <1> 		ret
  7877                              <1> 		
  7878 00006747 0000                <1> charposline dw 0
  7879 00006749 00000000            <1> charposvbuf dw 0,0
  7880 0000674D 0000                <1> iconcolor dw 0
  7881                              <1> 	showicon:	;;icon in si, position in (dx,cx), selected in ax, code in bx
  7882 0000674F A2[0F6B0000]        <1> 		mov [iconselected], al
  7883 00006754 8025[0F6B0000]01    <1> 		and byte [iconselected], 1
  7884 0000675B B401                <1> 		mov ah, 1
  7885 0000675D E8DDF8FFFF          <1> 		call graphicsadd
  7886                              <1> 	showicon2:
  7887 00006762 8B3D[D38B0000]      <1> 		mov edi, [physbaseptr]
  7888 00006768 6601D2              <1> 		add dx, dx
  7889 0000676B 663B15[AB8C0000]    <1> 		cmp dx, [resolutionx2]
  7890 00006772 720C                <1> 		jb screenxgood
  7891 00006774 668B15[AB8C0000]    <1> 		mov dx, [resolutionx2]
  7892 0000677B 6681EA4000          <1> 		sub dx, 64
  7893                              <1> 	screenxgood:
  7894 00006780 6681F90000          <1> 		cmp cx, 0
  7895 00006785 7422                <1> 		je noscreenygoodchk
  7896 00006787 663B0D[BF8B0000]    <1> 		cmp cx, [resolutiony]
  7897 0000678E 720C                <1> 		jb screenygood
  7898 00006790 668B0D[BF8B0000]    <1> 		mov cx, [resolutiony]
  7899 00006797 6681E92000          <1> 		sub cx, 32
  7900                              <1> 	screenygood:
  7901 0000679C 31DB                <1> 		xor ebx, ebx
  7902 0000679E 668B1D[AB8C0000]    <1> 		mov bx, [resolutionx2]
  7903 000067A5 01DF                <1> 		add edi, ebx
  7904 000067A7 E2F3                <1> 		loop screenygood
  7905                              <1> 	noscreenygoodchk:
  7906 000067A9 31DB                <1> 		xor ebx, ebx
  7907 000067AB 6689D3              <1> 		mov bx, dx
  7908 000067AE 01DF                <1> 		add edi, ebx
  7909 000067B0 6631C9              <1> 		xor cx, cx
  7910 000067B3 668B06              <1> 		mov ax, [esi]
  7911 000067B6 81C602000000        <1> 		add esi, 2
  7912 000067BC 66A3[4D670000]      <1> 		mov [iconcolor], ax
  7913                              <1> 	writeicon:
  7914 000067C2 8B06                <1> 		mov eax, [esi]
  7915 000067C4 D1C0                <1> 		rol eax, 1
  7916 000067C6 30C9                <1> 		xor cl, cl
  7917                              <1> 	writeiconline:
  7918 000067C8 B201                <1> 		mov dl, 1
  7919 000067CA 20C2                <1> 		and dl, al
  7920 000067CC 3215[0F6B0000]      <1> 		xor dl, [iconselected]
  7921 000067D2 668B1D[C5570000]    <1> 		mov bx, [background]
  7922 000067D9 66891F              <1> 		mov [edi], bx
  7923 000067DC 80FA00              <1> 		cmp dl, 0
  7924 000067DF 740A                <1> 		je noiconline
  7925 000067E1 668B15[4D670000]    <1> 		mov dx, [iconcolor]
  7926 000067E8 668917              <1> 		mov [edi], dx
  7927                              <1> 	noiconline:
  7928 000067EB 81C702000000        <1> 		add edi, 2
  7929 000067F1 D1C0                <1> 		rol eax, 1
  7930 000067F3 FEC1                <1> 		inc cl
  7931 000067F5 80F920              <1> 		cmp cl, 32
  7932 000067F8 72CE                <1> 		jb writeiconline
  7933 000067FA 81C604000000        <1> 		add esi, 4
  7934 00006800 FEC5                <1> 		inc ch
  7935 00006802 31D2                <1> 		xor edx, edx
  7936 00006804 668B15[AB8C0000]    <1> 		mov dx, [resolutionx2]
  7937 0000680B 01D7                <1> 		add edi, edx
  7938 0000680D 81EF40000000        <1> 		sub edi, 64
  7939 00006813 80FD20              <1> 		cmp ch, 32
  7940 00006816 72AA                <1> 		jb writeicon
  7941 00006818 31C0                <1> 		xor eax, eax
  7942 0000681A C3                  <1> 		ret
  7943                              <1> 
  7944 0000681B 02                  <1> resolutionbytes db 2
  7945 0000681C 0000                <1> posxvesa dw 0
  7946 0000681E 0000                <1> posyvesa dw 0
  7947 00006820 FFFF                <1> colorfont dw 0xFFFF
  7948                              <1> savefontvesa:		;;same rules as showfontvesa
  7949 00006822 C605[F8580000]01    <1> 	mov byte [savefonton], 1
  7950                              <1> showfontvesa:		;;position in (dx,cx), color in bx, char in al
  7951 00006829 3CFF                <1> 	cmp al, 255
  7952 0000682B 7501                <1> 	jne nostopshowfont
  7953 0000682D C3                  <1> 	ret
  7954                              <1> nostopshowfont:
  7955 0000682E 66890D[1E680000]    <1> 	mov [posyvesa], cx
  7956 00006835 3C0A                <1> 	cmp al, 10
  7957 00006837 0F8424000000        <1> 	je near goodvesafontx
  7958 0000683D 31C9                <1> 	xor ecx, ecx
  7959 0000683F 668B0D[AB8C0000]    <1> 	mov cx, [resolutionx2]
  7960 00006846 6639CA              <1> 	cmp dx, cx
  7961 00006849 7616                <1> 	jbe goodvesafontx
  7962 0000684B 6631D2              <1> 	xor dx, dx
  7963 0000684E 668B0D[1E680000]    <1> 	mov cx, [posyvesa]
  7964 00006855 6681C11000          <1> 	add cx, 16
  7965 0000685A 66890D[1E680000]    <1> 	mov [posyvesa], cx
  7966                              <1> goodvesafontx:
  7967 00006861 668B0D[1E680000]    <1> 	mov cx, [posyvesa]
  7968 00006868 668915[1C680000]    <1> 	mov [posxvesa], dx
  7969 0000686F 8B3D[D38B0000]      <1> 	mov edi, [physbaseptr]
  7970 00006875 66891D[20680000]    <1> 	mov [colorfont], bx
  7971 0000687C 31DB                <1> 	xor ebx, ebx
  7972 0000687E 88C3                <1> 	mov bl, al
  7973 00006880 31C0                <1> 	xor eax, eax
  7974 00006882 88D8                <1> 	mov al, bl
  7975 00006884 6689D3              <1> 	mov bx, dx
  7976 00006887 89DA                <1> 	mov edx, ebx
  7977 00006889 31DB                <1> 	xor ebx, ebx
  7978 0000688B 6681F90000          <1> 	cmp cx, 0
  7979 00006890 7415                <1> 	je vesaposloopdn
  7980 00006892 668B1D[AB8C0000]    <1> 	mov bx, [resolutionx2]
  7981                              <1> vesaposloop:
  7982 00006899 01DA                <1> 	add edx, ebx
  7983 0000689B 6681E90100          <1> 	sub cx, 1
  7984 000068A0 6681F90000          <1> 	cmp cx, 0
  7985 000068A5 75F2                <1> 	jne vesaposloop
  7986                              <1> vesaposloopdn:
  7987 000068A7 01D7                <1> 	add edi, edx
  7988 000068A9 BE[9B790000]        <1> 	mov esi, fonts
  7989                              <1> findfontvesa:
  7990 000068AE 30E4                <1> 	xor ah, ah
  7991 000068B0 3C0A                <1> 	cmp al, 10
  7992 000068B2 0F84FE000000        <1> 	je near nwlinevesa
  7993 000068B8 C1E004              <1> 	shl eax, 4
  7994 000068BB 01C6                <1> 	add esi, eax
  7995 000068BD C1E804              <1> 	shr eax, 4
  7996 000068C0 81FE[9B890000]      <1> 	cmp esi, fontend
  7997 000068C6 0F83B9000000        <1> 	jae near donefontvesa
  7998 000068CC 4E                  <1> 	dec esi
  7999                              <1> foundfontvesa:
  8000 000068CD 46                  <1> 	inc esi
  8001 000068CE 803D[F8580000]01    <1> 	cmp byte [savefonton], 1
  8002 000068D5 0F8401010000        <1> 	je near vesafontsaver
  8003 000068DB 30C9                <1> 	xor cl, cl
  8004 000068DD 8A06                <1> 	mov al, [esi]
  8005 000068DF 668B15[AB8C0000]    <1> 	mov dx, [resolutionx2]
  8006 000068E6 662B15[1C680000]    <1> 	sub dx, [posxvesa]
  8007 000068ED 6681FA1000          <1> 	cmp dx, 16
  8008 000068F2 7708                <1> 	ja paintfontvesa
  8009 000068F4 D0EA                <1> 	shr dl, 1
  8010 000068F6 8815[B5690000]      <1> 	mov [charwidth], dl
  8011                              <1> paintfontvesa:
  8012 000068FC B201                <1> 	mov dl, 1
  8013 000068FE 20C2                <1> 	and dl, al
  8014 00006900 803D[F7580000]01    <1> 	cmp byte [showcursorfonton], 1
  8015 00006907 0F8435000000        <1> 	je near nodelpaintedfont
  8016 0000690D 803D[F7580000]02    <1> 	cmp byte [showcursorfonton], 2
  8017 00006914 0F8518000000        <1> 	jne near noswitchcursorfonton
  8018 0000691A 80FA00              <1> 	cmp dl, 0
  8019 0000691D 0F842E000000        <1> 	je near nopixelset
  8020 00006923 668B1D[20680000]    <1> 	mov bx, [colorfont]
  8021 0000692A 66891F              <1> 	mov [edi], bx
  8022 0000692D E91F000000          <1> 	jmp nopixelset
  8023                              <1> noswitchcursorfonton:
  8024 00006932 3215[F9580000]      <1> 	xor dl, [mouseselecton]
  8025 00006938 668B1D[C5570000]    <1> 	mov bx, [background]
  8026 0000693F 66891F              <1> 	mov [edi], bx
  8027                              <1> nodelpaintedfont:
  8028 00006942 80FA00              <1> 	cmp dl, 0
  8029 00006945 740A                <1> 	je nopixelset
  8030 00006947 668B15[20680000]    <1> 	mov dx, [colorfont]
  8031 0000694E 668917              <1> 	mov [edi], dx
  8032                              <1> nopixelset:
  8033 00006951 81C702000000        <1> 	add edi, 2
  8034 00006957 D0C0                <1> 	rol al, 1
  8035 00006959 FEC1                <1> 	inc cl
  8036 0000695B 3A0D[B5690000]      <1> 	cmp cl, [charwidth]
  8037 00006961 7299                <1> 	jb paintfontvesa
  8038 00006963 FEC5                <1> 	inc ch
  8039 00006965 31D2                <1> 	xor edx, edx
  8040 00006967 668B15[AB8C0000]    <1> 	mov dx, [resolutionx2]
  8041 0000696E 01D7                <1> 	add edi, edx
  8042 00006970 31D2                <1> 	xor edx, edx
  8043 00006972 8A15[B5690000]      <1> 	mov dl, [charwidth]
  8044 00006978 00D2                <1> 	add dl, dl
  8045 0000697A 29D7                <1> 	sub edi, edx
  8046 0000697C 80FD10              <1> 	cmp ch, 16
  8047 0000697F 0F8248FFFFFF        <1> 	jb foundfontvesa
  8048                              <1> donefontvesa:
  8049 00006985 B208                <1> 	mov dl, 8
  8050 00006987 8815[B5690000]      <1> 	mov [charwidth], dl
  8051 0000698D 668B15[1C680000]    <1> 	mov dx, [posxvesa]
  8052 00006994 8A1D[B5690000]      <1> 	mov bl, [charwidth]
  8053 0000699A 30FF                <1> 	xor bh, bh
  8054 0000699C 6601DA              <1> 	add dx, bx
  8055 0000699F 668B1D[20680000]    <1> 	mov bx, [colorfont]
  8056 000069A6 668B0D[1E680000]    <1> 	mov cx, [posyvesa]
  8057 000069AD C605[F8580000]00    <1> 	mov byte [savefonton], 0
  8058 000069B4 C3                  <1> 	ret
  8059 000069B5 08                  <1> charwidth db 8
  8060                              <1> nwlinevesa:
  8061 000069B6 668B15[1C680000]    <1> 	mov dx, [posxvesa]
  8062 000069BD 6631D2              <1> 	xor dx, dx
  8063 000069C0 668915[1C680000]    <1> 	mov [posxvesa], dx
  8064 000069C7 668B0D[1E680000]    <1> 	mov cx, [posyvesa]
  8065 000069CE 6681C11000          <1> 	add cx, 16
  8066 000069D3 66890D[1E680000]    <1> 	mov [posyvesa], cx
  8067 000069DA EBA9                <1> 	jmp donefontvesa
  8068                              <1> vesafontsaver:
  8069 000069DC 30C0                <1> 	xor al, al
  8070 000069DE 30C9                <1> 	xor cl, cl
  8071                              <1> vesafontsaver2:
  8072 000069E0 668B17              <1> 	mov dx, [edi]
  8073 000069E3 663B15[20680000]    <1> 	cmp dx, [colorfont]
  8074 000069EA 742F                <1> 	je colorfontmatch
  8075                              <1> donecolormatch:
  8076 000069EC 81C702000000        <1> 	add edi, 2
  8077 000069F2 D0C0                <1> 	rol al, 1
  8078 000069F4 FEC1                <1> 	inc cl
  8079 000069F6 80F908              <1> 	cmp cl, 8
  8080 000069F9 72E5                <1> 	jb vesafontsaver2
  8081 000069FB 8806                <1> 	mov [esi], al
  8082 000069FD 46                  <1> 	inc esi
  8083 000069FE FEC5                <1> 	inc ch
  8084 00006A00 31D2                <1> 	xor edx, edx
  8085 00006A02 668B15[AB8C0000]    <1> 	mov dx, [resolutionx2]
  8086 00006A09 01D7                <1> 	add edi, edx
  8087 00006A0B 81EF10000000        <1> 	sub edi, 16
  8088 00006A11 80FD10              <1> 	cmp ch, 16
  8089 00006A14 72C6                <1> 	jb vesafontsaver
  8090 00006A16 E96AFFFFFF          <1> 	jmp donefontvesa
  8091                              <1> colorfontmatch:
  8092 00006A1B 0401                <1> 	add al, 1
  8093 00006A1D EBCD                <1> 	jmp donecolormatch
  8094                              <1> 	
  8095                              <1> showbmp:
  8096 00006A1F 668B06              <1> 	mov ax, [esi]
  8097 00006A22 663D424D            <1> 	cmp ax, "BM"
  8098 00006A26 0F8582000000        <1> 	jne near endedbmp
  8099 00006A2C 8B3D[D38B0000]      <1> 	mov edi, [physbaseptr]
  8100 00006A32 6689D0              <1> 	mov ax, dx
  8101 00006A35 6689CB              <1> 	mov bx, cx
  8102 00006A38 31C9                <1> 	xor ecx, ecx
  8103 00006A3A 31D2                <1> 	xor edx, edx
  8104 00006A3C 6689D9              <1> 	mov cx, bx
  8105 00006A3F 6689C2              <1> 	mov dx, ax
  8106 00006A42 01D7                <1> 	add edi, edx
  8107 00006A44 01D7                <1> 	add edi, edx
  8108 00006A46 31D2                <1> 	xor edx, edx
  8109 00006A48 668B15[AB8C0000]    <1> 	mov dx, [resolutionx2]
  8110 00006A4F 41                  <1> 	inc ecx
  8111 00006A50 034E16              <1> 	add ecx, [esi + 22]
  8112                              <1> bmplocloop:
  8113 00006A53 01D7                <1> 	add edi, edx
  8114 00006A55 E2FC                <1> 	loop bmplocloop
  8115 00006A57 29D7                <1> 	sub edi, edx
  8116 00006A59 8B5612              <1> 	mov edx, [esi + 18]
  8117 00006A5C 8B4E16              <1> 	mov ecx, [esi + 22]
  8118 00006A5F 8B460A              <1> 	mov eax, [esi + 10]
  8119 00006A62 8B5E02              <1> 	mov ebx, [esi + 2]
  8120 00006A65 01F3                <1> 	add ebx, esi
  8121 00006A67 891D[B46A0000]      <1> 	mov [bmpend], ebx
  8122 00006A6D 89D3                <1> 	mov ebx, edx
  8123 00006A6F 01C6                <1> 	add esi, eax
  8124                              <1> ldxbmp:
  8125 00006A71 668B06              <1> 	mov ax, [esi]
  8126 00006A74 668907              <1> 	mov [edi], ax
  8127 00006A77 81C702000000        <1> 	add edi, 2
  8128 00006A7D 81C602000000        <1> 	add esi, 2
  8129 00006A83 3B35[B46A0000]      <1> 	cmp esi, [bmpend]
  8130 00006A89 7723                <1> 	ja endedbmp
  8131 00006A8B 4A                  <1> 	dec edx
  8132 00006A8C 81FA00000000        <1> 	cmp edx, 0
  8133 00006A92 77DD                <1> 	ja ldxbmp
  8134 00006A94 31D2                <1> 	xor edx, edx
  8135 00006A96 668B15[AB8C0000]    <1> 	mov dx, [resolutionx2]
  8136 00006A9D 29DF                <1> 	sub edi, ebx
  8137 00006A9F 29DF                <1> 	sub edi, ebx
  8138 00006AA1 29D7                <1> 	sub edi, edx
  8139 00006AA3 49                  <1> 	dec ecx
  8140 00006AA4 89DA                <1> 	mov edx, ebx
  8141 00006AA6 81F900000000        <1> 	cmp ecx, 0
  8142 00006AAC 77C3                <1> 	ja ldxbmp
  8143                              <1> endedbmp:
  8144 00006AAE E801EFFFFF          <1> 	call switchmousepos2
  8145 00006AB3 C3                  <1> 	ret
  8146                              <1> 	
  8147 00006AB4 00000000            <1> 	bmpend dd 0
  8148                              <1> 
  8149                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Here are some vars;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  8150 00006AB8 00000000            <1> 	showstringesi dw 0,0
  8151 00006ABC 00                  <1> 	mouseon db 0
  8152 00006ABD 737461727400        <1> 	start	db "start",0
  8153 00006AC3 536F6C6C65724F5300  <1> 	gotomenu db "SollerOS",0
  8154 00006ACC 426F6F2100          <1> 	boomsg db "Boo!",0
  8155 00006AD1 5061636D616E207761- <1> 	pacmsg	db "Pacman was easy to draw.",0
  8156 00006ADA 73206561737920746F- <1>
  8157 00006AE3 20647261772E00      <1>
  8158 00006AEA 4F6D206E6F6D206E6F- <1> 	pacnom  db "Om nom nom nom",0
  8159 00006AF3 6D206E6F6D00        <1>
  8160 00006AF9 77696E646F77732073- <1> 	winmsg	db "windows sucks",0
  8161 00006B02 75636B7300          <1>
  8162 00006B07 5800                <1> 	xmsg db "X",0
  8163 00006B09 0000                <1> 	icon dw 0	;pointer to icon
  8164 00006B0B 00000000            <1> 	codepointer dw 0,0 ;pointer to code
  8165 00006B0F 00                  <1> 	iconselected db 0
  8166                              <1> 	
  8167                              <1> 	boo:
  8168 00006B10 BE[CC6A0000]        <1> 		mov esi, boomsg
  8169 00006B15 66BA6400            <1> 		mov dx, 100
  8170 00006B19 66B94001            <1> 		mov cx, 320
  8171 00006B1D 31DB                <1> 		xor ebx, ebx
  8172 00006B1F 6631C0              <1> 		xor ax, ax
  8173 00006B22 E97EF7FFFF          <1> 		jmp showstring
  8174                              <1> 
  8175                              <1> 	pacmannomnom:
  8176 00006B27 BE[EA6A0000]        <1> 		mov esi, pacnom
  8177 00006B2C 66BA8200            <1> 		mov dx, 130
  8178 00006B30 66B93C00            <1> 		mov cx, 60
  8179 00006B34 31DB                <1> 		xor ebx, ebx
  8180 00006B36 6631C0              <1> 		xor ax, ax
  8181 00006B39 E967F7FFFF          <1> 		jmp showstring	
  8182                              <1> 	
  8183                              <1> 	noie:
  8184 00006B3E 66C705[FA6B0000]80- <1> 		mov word [termwindow], 640
  8185 00006B46 02                  <1>
  8186 00006B47 66C705[FC6B0000]E0- <1> 		mov word [termwindow + 2], 480	;the previous lines of code make a large terminal window that is 4 characters smaller than the screen
  8187 00006B4F 01                  <1>
  8188 00006B50 BE[FA6B0000]        <1> 		mov esi, termwindow
  8189 00006B55 66BA1000            <1> 		mov dx, 16
  8190 00006B59 66B91000            <1> 		mov cx, 16
  8191 00006B5D BB[BB2C0000]        <1> 		mov ebx, os
  8192 00006B62 6631C0              <1> 		xor ax, ax
  8193 00006B65 E8A3F7FFFF          <1> 		call showwindow
  8194 00006B6A E94CC1FFFF          <1> 		jmp os
  8195                              <1> 
  8196                              <1> 	gotomenuboot:
  8197 00006B6F 31D2                <1> 		xor edx, edx
  8198 00006B71 31C9                <1> 		xor ecx, ecx
  8199 00006B73 668B15[BD8B0000]    <1> 		mov dx, [resolutionx]
  8200 00006B7A 668B0D[BF8B0000]    <1> 		mov cx, [resolutiony]
  8201 00006B81 66C1E904            <1> 		shr cx, 4
  8202 00006B85 6681E90100          <1> 		sub cx, 1
  8203 00006B8A 66C1E104            <1> 		shl cx, 4
  8204 00006B8E 668915[FA6B0000]    <1> 		mov [termwindow], dx
  8205 00006B95 66890D[FC6B0000]    <1> 		mov [termwindow + 2], cx	;the previous lines of code make a large terminal window that is fullscreen
  8206 00006B9C BE[FA6B0000]        <1> 		mov esi, termwindow
  8207 00006BA1 6631D2              <1> 		xor dx, dx
  8208 00006BA4 6631C9              <1> 		xor cx, cx
  8209 00006BA7 BB[BB2C0000]        <1> 		mov ebx, os
  8210 00006BAC 6631C0              <1> 		xor ax, ax
  8211 00006BAF E859F7FFFF          <1> 		call showwindow
  8212 00006BB4 E902C1FFFF          <1> 		jmp os
  8213                              <1> 		;ret
  8214                              <1> 
  8215                              <1> 	winblows:
  8216 00006BB9 BE[F96A0000]        <1> 		mov esi, winmsg
  8217 00006BBE 6631D2              <1> 		xor dx, dx
  8218 00006BC1 668B0D[BF8B0000]    <1> 		mov cx, [resolutiony]
  8219 00006BC8 6681E92000          <1> 		sub cx, 32
  8220 00006BCD 31DB                <1> 		xor ebx, ebx
  8221 00006BCF 30E4                <1> 		xor ah, ah
  8222 00006BD1 B011                <1> 		mov al, 00010001b
  8223 00006BD3 E8CDF6FFFF          <1> 		call showstring
  8224 00006BD8 BE[C36A0000]        <1> 		mov esi, gotomenu
  8225 00006BDD 668B0D[BF8B0000]    <1> 		mov cx, [resolutiony]
  8226 00006BE4 6681E93000          <1> 		sub cx, 48
  8227 00006BE9 6631D2              <1> 		xor dx, dx
  8228 00006BEC 30E4                <1> 		xor ah, ah
  8229 00006BEE B010                <1> 		mov al, 00010000b
  8230 00006BF0 BB[6F6B0000]        <1> 		mov ebx, gotomenuboot
  8231 00006BF5 E9ABF6FFFF          <1> 		jmp showstring
  8232                              <1> 
  8233 00006BFA 20035802            <1> 	termwindow:	dw 800,600	;;window size
  8234 00006BFE 53757065725465726D- <1> 	termmsg:	db "SuperTerminal",0	;;window title
  8235 00006C07 696E616C00          <1>
  8236                              <1> 	
  8237 00006C07 <incbin>            <1> interneticon: 	incbin 'source/precompiled/interneticon.pak'
  8238 00006C07 <incbin>            <1> wordicon: 	incbin 'source/precompiled/wordicon.pak'
  8239 00006C07 <incbin>            <1> pacmanpellet: incbin 'source/precompiled/pacmanpellet.pak'
  8240 00006C07 <incbin>            <1> ghostie	incbin 'source/precompiled/ghostie.pak'
  8241 00006C07 <incbin>            <1> pacman	incbin 'source/precompiled/pacman.pak'
  8242                                      %include 'source/arp.asm'
  8243                              <1> ;ARP TESTING
  8244                              <1> arpinit:
  8245 00006E96 BE[4D6F0000]        <1> 	mov esi, arptable
  8246 00006E9B BF[C8500000]        <1> 	mov edi, sysmac
  8247 00006EA0 BB[C4500000]        <1> 	mov ebx, sysip
  8248 00006EA5 8B0F                <1> 	mov ecx, [edi]
  8249 00006EA7 890E                <1> 	mov [esi], ecx
  8250 00006EA9 668B4F04            <1> 	mov cx, [edi + 4]
  8251 00006EAD 894E04              <1> 	mov [esi + 4], ecx
  8252 00006EB0 8B0B                <1> 	mov ecx, [ebx]
  8253 00006EB2 894E06              <1> 	mov [esi + 6], ecx
  8254 00006EB5 C605[4C6F0000]01    <1> 	mov byte [arpconfig], 1
  8255 00006EBC C3                  <1> 	ret
  8256                              <1> arptest:
  8257 00006EBD 803D[4C6F0000]01    <1> 	cmp byte [arpconfig], 1
  8258 00006EC4 7405                <1> 	je arptest2
  8259 00006EC6 E8CBFFFFFF          <1> 	call arpinit
  8260                              <1> arptest2:	;try to reach 192.168.0.1
  8261 00006ECB 8B0D[C8500000]      <1> 	mov ecx, [sysmac]
  8262 00006ED1 668B1D[CC500000]    <1> 	mov bx, [sysmac + 4]
  8263 00006ED8 890D[126F0000]      <1> 	mov [sourcemac], ecx
  8264 00006EDE 66891D[166F0000]    <1> 	mov [sourcemac + 4],bx
  8265 00006EE5 890D[226F0000]      <1> 	mov [arpsenderinfo], ecx
  8266 00006EEB 66891D[266F0000]    <1> 	mov [arpsenderinfo + 4], bx
  8267 00006EF2 BF[0C6F0000]        <1> 	mov edi, frame
  8268 00006EF7 BE[4C6F0000]        <1> 	mov esi, framend
  8269 00006EFC E8F9E0FFFF          <1> 	call rtl8139.sendpacket
  8270 00006F01 BE[76790000]        <1> 	mov esi, line
  8271 00006F06 E83FB4FFFF          <1> 	call print
  8272 00006F0B C3                  <1> 	ret
  8273                              <1> 	
  8274                              <1> ;example frame
  8275                              <1> frame:
  8276 00006F0C FFFFFFFFFFFF        <1> destinationmac:	db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
  8277 00006F12 000000000000        <1> sourcemac:		db 0,0,0,0,0,0
  8278 00006F18 0608                <1> ethertype:		dw 0x0806			;;arp
  8279                              <1> 	;;example packet
  8280 00006F1A 0100                <1> 	arppacket: 		dw 1				;;ethernet is 1
  8281 00006F1C 0008                <1> 	arpprotocol: 	dw 0x0800			;;ip is 0x800
  8282 00006F1E 0604                <1> 					db 6,4				;;length of mac, length of ip
  8283 00006F20 0100                <1> 	arpoperation: 	dw 1				;;one for arp request
  8284 00006F22 000000000000        <1> 	arpsenderinfo:	db 0x00,0x00,0x00,0x00,0x00,0x00	;;mac
  8285 00006F28 C0A80005            <1> 					db 192,168,0,5			;;ip
  8286 00006F2C 000000000000        <1> 	arptargetinfo:	db 0x00,0x00,0x00,0x00,0x00,0x00	;;ignored in requests
  8287 00006F32 C0A80001            <1> 					db 192,168,0,1			;;ip
  8288 00006F36 00<rept>            <1> padding:		times (64-($-frame)) db 0
  8289                              <1> framend:
  8290                              <1> 
  8291 00006F4C 00                  <1> arpconfig db 0
  8292                              <1> arptable:	;;mac,ip
  8293 00006F4D 000000000000000000- <1> 	times 10 db 0,0,0,0,0,0,0,0,0,0
  8294 00006F56 00<rept>            <1>
  8295                              <1> arptableend:
  8296                                      %include 'source/pci.asm'
  8297 00006FB1 00                  <1> pcibus		db 0
  8298 00006FB2 00                  <1> pcidevice	db 0
  8299 00006FB3 00                  <1> pcifunction	db 0
  8300 00006FB4 00                  <1> pciregister	db 0
  8301 00006FB5 00                  <1> pcireqtype db 0
  8302                              <1> 
  8303                              <1> getpciport:
  8304 00006FB6 B001                <1> 	mov al, 1
  8305 00006FB8 A2[B56F0000]        <1> 	mov [pcireqtype], al
  8306 00006FBD E916000000          <1> 	jmp searchpci
  8307                              <1> pcidump:
  8308 00006FC2 31C0                <1> 	xor eax, eax
  8309 00006FC4 A2[B36F0000]        <1> 	mov [pcifunction], al
  8310 00006FC9 A2[B16F0000]        <1> 	mov [pcibus], al
  8311 00006FCE A2[B26F0000]        <1> 	mov [pcidevice], al
  8312 00006FD3 A2[B56F0000]        <1> 	mov [pcireqtype], al
  8313                              <1> searchpci:		;;return in ebx, start X in pciX
  8314 00006FD8 30C0                <1> 	xor al, al
  8315 00006FDA A2[B46F0000]        <1> 	mov [pciregister], al
  8316 00006FDF E855010000          <1> 	call getpciaddr
  8317 00006FE4 BAF80C0000          <1> 	mov edx, 0xCF8
  8318 00006FE9 EF                  <1> 	out dx, eax	;;request pci config
  8319 00006FEA BAFC0C0000          <1> 	mov edx, 0xCFC
  8320 00006FEF ED                  <1> 	in eax, dx 	;;read in pci config
  8321 00006FF0 3D0000FFFF          <1> 	cmp eax, 0xFFFF0000
  8322 00006FF5 0F8237000000        <1> 	jb near checkpcidevice
  8323                              <1> searchpciret:
  8324                              <1> nextpcidevice:
  8325 00006FFB 30C0                <1> 	xor al, al
  8326 00006FFD A2[B36F0000]        <1> 	mov [pcifunction], al
  8327 00007002 A0[B26F0000]        <1> 	mov al, [pcidevice]
  8328 00007007 3C1F                <1> 	cmp al, 11111b
  8329 00007009 0F83C1000000        <1> 	jae near nextpcibus
  8330 0000700F FEC0                <1> 	inc al
  8331 00007011 A2[B26F0000]        <1> 	mov [pcidevice], al
  8332 00007016 EBC0                <1> 	jmp searchpci
  8333 00007018 A0[B36F0000]        <1> 	mov al, [pcifunction]
  8334 0000701D 3C07                <1> 	cmp al, 111b
  8335 0000701F 0F83D6FFFFFF        <1> 	jae near nextpcidevice
  8336 00007025 FEC0                <1> 	inc al
  8337 00007027 A2[B36F0000]        <1> 	mov [pcifunction], al
  8338 0000702C EBAA                <1> 	jmp searchpci
  8339 0000702E 00000000            <1> pcitype: db 0,0,0,0
  8340                              <1> checkpcidevice:
  8341 00007032 30C0                <1> 	xor al, al
  8342 00007034 3805[B56F0000]      <1> 	cmp [pcireqtype], al
  8343 0000703A 0F842B000000        <1> 	je near dumppcidevice
  8344 00007040 B008                <1> 	mov al, 0x08
  8345 00007042 A2[B46F0000]        <1> 	mov [pciregister], al	;;class code, subclass, revision id
  8346 00007047 E8ED000000          <1> 	call getpciaddr
  8347 0000704C BAF80C0000          <1> 	mov edx, 0xCF8
  8348 00007051 EF                  <1> 	out dx, eax
  8349 00007052 BAFC0C0000          <1> 	mov edx, 0xCFC
  8350 00007057 ED                  <1> 	in eax, dx
  8351 00007058 C1C008              <1> 	rol eax, 8
  8352 0000705B 8A1D[2E700000]      <1> 	mov bl, [pcitype]
  8353 00007061 38D8                <1> 	cmp al, bl
  8354 00007063 0F8486000000        <1> 	je near foundpciaddr
  8355 00007069 EB90                <1> 	jmp searchpciret
  8356                              <1> dumppcidevice:
  8357 0000706B 30C0                <1> 	xor al, al
  8358 0000706D A2[B46F0000]        <1> 	mov [pciregister], al
  8359 00007072 E8C2000000          <1> 	call getpciaddr
  8360 00007077 89C1                <1> 	mov ecx, eax
  8361 00007079 C605[57330000]05    <1> 	mov byte [firsthexshown], 5
  8362 00007080 E8E7C2FFFF          <1> 	call showhex
  8363                              <1> dumppcidevicelp:
  8364 00007085 A2[B46F0000]        <1> 	mov [pciregister], al
  8365 0000708A E8AA000000          <1> 	call getpciaddr
  8366 0000708F BAF80C0000          <1> 	mov edx, 0xCF8
  8367 00007094 EF                  <1> 	out dx, eax
  8368 00007095 BAFC0C0000          <1> 	mov edx, 0xCFC
  8369 0000709A ED                  <1> 	in eax, dx
  8370 0000709B 89C1                <1> 	mov ecx, eax
  8371 0000709D A0[B46F0000]        <1> 	mov al, [pciregister]
  8372 000070A2 0404                <1> 	add al, 4
  8373 000070A4 C605[57330000]05    <1> 	mov byte [firsthexshown], 5
  8374 000070AB E8BCC2FFFF          <1> 	call showhex
  8375 000070B0 3C3C                <1> 	cmp al, 0x3C
  8376 000070B2 72D1                <1> 	jb dumppcidevicelp
  8377                              <1> dumppcidn:
  8378 000070B4 803D[EE290000]00    <1> 	cmp byte [charpos], 0
  8379 000070BB 0F843AFFFFFF        <1> 	je near searchpciret
  8380 000070C1 BE[76790000]        <1> 	mov esi, line
  8381 000070C6 E87FB2FFFF          <1> 	call print
  8382 000070CB E92BFFFFFF          <1> 	jmp searchpciret
  8383                              <1> nextpcibus:
  8384 000070D0 30C0                <1> 	xor al, al
  8385 000070D2 A2[B26F0000]        <1> 	mov [pcidevice], al
  8386 000070D7 A0[B16F0000]        <1> 	mov al, [pcibus]
  8387 000070DC 3C7F                <1> 	cmp al, 1111111b
  8388 000070DE 730C                <1> 	jae donesearchpci
  8389 000070E0 FEC0                <1> 	inc al
  8390 000070E2 A2[B16F0000]        <1> 	mov [pcibus], al
  8391 000070E7 E9ECFEFFFF          <1> 	jmp searchpci
  8392                              <1> donesearchpci:
  8393 000070EC 31D2                <1> 	xor edx, edx
  8394 000070EE C3                  <1> 	ret
  8395                              <1> foundpciaddr:
  8396 000070EF B010                <1> 	mov al, 0x10
  8397 000070F1 A2[B46F0000]        <1> 	mov [pciregister], al
  8398                              <1> findpciioaddr:
  8399 000070F6 E83E000000          <1> 	call getpciaddr
  8400 000070FB BAF80C0000          <1> 	mov edx, 0xCF8
  8401 00007100 EF                  <1> 	out dx, eax
  8402 00007101 BAFC0C0000          <1> 	mov edx, 0xCFC
  8403 00007106 ED                  <1> 	in eax, dx
  8404 00007107 89C3                <1> 	mov ebx, eax
  8405 00007109 81E301000000        <1> 	and ebx, 1
  8406 0000710F 81FB00000000        <1> 	cmp ebx, 0
  8407 00007115 0F8408000000        <1> 	je near notpciioaddr
  8408 0000711B 2D01000000          <1> 	sub eax, 1
  8409 00007120 89C2                <1> 	mov edx, eax
  8410 00007122 C3                  <1> 	ret
  8411                              <1> notpciioaddr:
  8412 00007123 A0[B46F0000]        <1> 	mov al, [pciregister]
  8413 00007128 0404                <1> 	add al, 4
  8414 0000712A 3C28                <1> 	cmp al, 0x28
  8415 0000712C 0F87C9FEFFFF        <1> 	ja near searchpciret
  8416 00007132 A2[B46F0000]        <1> 	mov [pciregister], al
  8417 00007137 EBBD                <1> 	jmp findpciioaddr
  8418                              <1> getpciaddr:		;;puts it in eax and ebx
  8419 00007139 31C0                <1> 			xor eax, eax
  8420 0000713B BB00000080          <1> 			mov ebx, 0x80000000
  8421 00007140 A0[B16F0000]        <1> 			mov al, [pcibus]
  8422 00007145 C1E010              <1> 			shl eax, 16
  8423 00007148 01C3                <1> 			add ebx, eax
  8424 0000714A 31C0                <1> 			xor eax, eax
  8425 0000714C A0[B26F0000]        <1> 			mov al, [pcidevice]
  8426 00007151 C1E00B              <1> 			shl eax, 11
  8427 00007154 01C3                <1> 			add ebx, eax
  8428 00007156 31C0                <1> 			xor eax, eax
  8429 00007158 A0[B36F0000]        <1> 			mov al, [pcifunction]
  8430 0000715D C1E008              <1> 			shl eax, 8
  8431 00007160 01C3                <1> 			add ebx, eax
  8432 00007162 31C0                <1> 			xor eax, eax
  8433 00007164 A0[B46F0000]        <1> 			mov al, [pciregister]
  8434 00007169 01C3                <1> 			add ebx, eax
  8435 0000716B 89D8                <1> 			mov eax, ebx
  8436 0000716D C3                  <1> 			ret
  8437                                      %include 'source/disk.asm'
  8438                              <1> ;This loads files using the methods in the loaded driver
  8439                              <1> %include "source/drivers/disk/realmode.asm"
  8440                              <2> diskrreal:
  8441                              <2> 			;read from disk using real mode-it does not work with large files
  8442                              <2> 			;sector count in cl
  8443                              <2> 			;disk number in ch
  8444                              <2> 			;48 bit address with last 32 bits in ebx
  8445                              <2> 			;buffer in esi
  8446                              <2> 			;puts end of buffer in edi and end lba address in edx
  8447 0000716E 880D[9B710000]      <2> 	mov [sdlength], cl
  8448 00007174 891D[9C710000]      <2> 	mov [sdaddress], ebx
  8449 0000717A 8935[FA720000]      <2> 	mov [oldesireal], esi
  8450 00007180 66BE[A071]          <2> 	mov si, readdiskreal
  8451 00007184 668935[2B110000]    <2> 	mov [realmodeptr], si
  8452 0000718B BE[DC710000]        <2> 	mov esi, backfromrealread
  8453 00007190 8935[27110000]      <2> 	mov [realmodereturn], esi
  8454 00007196 E9949EFFFF          <2> 	jmp realmode
  8455 0000719B 00                  <2> sdlength db 0
  8456 0000719C 00000000            <2> sdaddress dd 0
  8457                              <2> 
  8458                              <2> [BITS 16]
  8459                              <2> readdiskreal:
  8460 000071A0 C706[CC71]1000      <2> 	mov word [dlen], 0x10
  8461 000071A6 C706[D071]0000      <2> 	mov word [daddress], 0
  8462 000071AC C706[D271]0001      <2> 	mov word [dsegm], 0x100
  8463 000071B2 66891E[D471]        <2> 	mov [dlbaad], ebx
  8464 000071B7 880E[CE71]          <2> 	mov [dreadlen], cl
  8465                              <2> ReadHardDisk:
  8466 000071BB BE[CC71]            <2> 	mov si, diskaddresspacket
  8467 000071BE 31C0                <2> 	xor ax, ax
  8468 000071C0 B442                <2> 	mov ah, 0x42
  8469 000071C2 8A16[CB71]          <2> 	mov dl, [dnumber]
  8470 000071C6 CD13                <2> 	int 0x13
  8471 000071C8 72F1                <2> 	jc ReadHardDisk
  8472 000071CA C3                  <2> 	ret
  8473                              <2> 
  8474 000071CB 80                  <2> dnumber db 0x80
  8475                              <2> diskaddresspacket:
  8476 000071CC 10                  <2> dlen:	db 0x10 ;size of packet
  8477 000071CD 00                  <2> 		db 0
  8478 000071CE 7F00                <2> dreadlen:	dw 0x7F	;blocks to read=maximum
  8479 000071D0 0000                <2> daddress:	dw 0x0	;address 0
  8480 000071D2 0001                <2> dsegm:		dw 0x100	;segment
  8481                              <2> 		;start with known value for hd
  8482                              <2> dlbaad:
  8483 000071D4 00000000            <2> 	dd 0	;lba address
  8484 000071D8 00000000            <2> 	dd 0
  8485                              <2> [BITS 32]
  8486                              <2> backfromrealread:
  8487 000071DC 8B35[FA720000]      <2> 	mov esi, [oldesireal]
  8488 000071E2 8B1D[9C710000]      <2> 	mov ebx, [sdaddress]
  8489 000071E8 31C9                <2> 	xor ecx, ecx
  8490 000071EA 8A0D[9B710000]      <2> 	mov cl, [sdlength]
  8491 000071F0 01CB                <2> 	add ebx, ecx
  8492 000071F2 66B80800            <2> 	mov ax, LINEAR_SEL
  8493 000071F6 8EE0                <2> 	mov fs, ax
  8494 000071F8 BF00100000          <2> 	mov edi, 0x1000
  8495 000071FD B200                <2> 	mov dl, 0
  8496 000071FF D0E1                <2> 	shl cl, 1
  8497                              <2> copyfromrmodedisk:
  8498 00007201 648A07              <2> 	mov al, [fs:edi]
  8499 00007204 8806                <2> 	mov [esi], al
  8500 00007206 47                  <2> 	inc edi
  8501 00007207 46                  <2> 	inc esi
  8502 00007208 FECA                <2> 	dec dl
  8503 0000720A 80FA00              <2> 	cmp dl, 0
  8504 0000720D 75F2                <2> 	jne copyfromrmodedisk
  8505 0000720F FEC9                <2> 	dec cl
  8506 00007211 B200                <2> 	mov dl, 0
  8507 00007213 80F900              <2> 	cmp cl, 0
  8508 00007216 75E9                <2> 	jne copyfromrmodedisk
  8509 00007218 66B83000            <2> 	mov ax, NEW_DATA_SEL
  8510 0000721C 8EE0                <2> 	mov fs, ax
  8511 0000721E 89F7                <2> 	mov edi, esi
  8512 00007220 8B35[FA720000]      <2> 	mov esi, [oldesireal]
  8513 00007226 89DA                <2> 	mov edx, ebx
  8514 00007228 8B1D[9C710000]      <2> 	mov ebx, [sdaddress]
  8515 0000722E C3                  <2> 	ret
  8516                              <2> 	
  8517                              <1> loadfile:	;loads a file with the name buffer's location in edi into location in esi
  8518 0000722F 803F00              <1> 	cmp byte [edi], 0
  8519 00007232 0F8448000000        <1> 	je near nofileload
  8520 00007238 89FA                <1> 	mov edx, edi
  8521 0000723A BB[AE8C0000]        <1> 	mov ebx, diskfileindex
  8522                              <1> nextnamechar:
  8523 0000723F 8A07                <1> 	mov al, [edi]
  8524 00007241 3C26                <1> 	cmp al, '&'
  8525 00007243 7440                <1> 	je nullfile
  8526 00007245 8A23                <1> 	mov ah, [ebx]
  8527 00007247 47                  <1> 	inc edi
  8528 00007248 43                  <1> 	inc ebx
  8529 00007249 88C1                <1> 	mov cl, al
  8530 0000724B 08E1                <1> 	or cl, ah
  8531 0000724D 80F900              <1> 	cmp cl, 0
  8532 00007250 744E                <1> 	je equalfilenames
  8533 00007252 80F920              <1> 	cmp cl, ' '
  8534 00007255 7449                <1> 	je equalfilenames
  8535 00007257 3C2A                <1> 	cmp al, '*'
  8536 00007259 742B                <1> 	je equalfilenames2
  8537 0000725B 80FC00              <1> 	cmp ah, 0
  8538 0000725E 7410                <1> 	je nextfilename
  8539 00007260 3C00                <1> 	cmp al, 0
  8540 00007262 7404                <1> 	je getebxzero
  8541 00007264 38E0                <1> 	cmp al, ah
  8542 00007266 74D7                <1> 	je nextnamechar
  8543                              <1> getebxzero:
  8544 00007268 8A23                <1> 	mov ah, [ebx]
  8545 0000726A 43                  <1> 	inc ebx
  8546 0000726B 80FC00              <1> 	cmp ah, 0
  8547 0000726E 75F8                <1> 	jne getebxzero
  8548                              <1> nextfilename:
  8549 00007270 81C308000000        <1> 	add ebx, 8		;next descriptor
  8550 00007276 89D7                <1> 	mov edi, edx
  8551 00007278 81FB[248E0000]      <1> 	cmp ebx, enddiskfileindex
  8552 0000727E 72BF                <1> 	jb nextnamechar
  8553                              <1> nofileload:
  8554 00007280 BA94010000          <1> 	mov edx, 404	;indicate not found error
  8555                              <1> nullfile:
  8556 00007285 C3                  <1> 	ret
  8557                              <1> equalfilenames2:
  8558 00007286 81EB02000000        <1> 	sub ebx, 2
  8559                              <1> eqfilefind:
  8560 0000728C 43                  <1> 	inc ebx
  8561 0000728D 81FB[248E0000]      <1> 	cmp ebx, enddiskfileindex
  8562 00007293 0F83E7FFFFFF        <1> 	jae near nofileload
  8563 00007299 8A03                <1> 	mov al, [ebx]
  8564 0000729B 3C00                <1> 	cmp al, 0
  8565 0000729D 75ED                <1> 	jne eqfilefind
  8566 0000729F 43                  <1> 	inc ebx
  8567                              <1> equalfilenames:
  8568 000072A0 8B4304              <1> 	mov eax, [ebx + 4] 	;put file size in eax
  8569 000072A3 8B1B                <1> 	mov ebx, [ebx]		;put file beginning in ebx
  8570 000072A5 031D[98010000]      <1> 	add ebx, [lbaad]	;add offset to solleros
  8571 000072AB 31C9                <1> 	xor ecx, ecx
  8572 000072AD 88C1                <1> 	mov cl, al			;get excess number of sectors
  8573 000072AF C0E102              <1> 	shl cl, 2
  8574 000072B2 C0E902              <1> 	shr cl, 2			;cut off at 64
  8575 000072B5 29C8                <1> 	sub eax, ecx		;get rid of excess sectors
  8576 000072B7 B500                <1> 	mov ch, 0			;drive 0
  8577 000072B9 C1E806              <1> 	shr eax, 6			;get number of 64 sector tracks
  8578                              <1> loaddiskfile:			;tracks in eax, excess sectors in cl, drive in ch, buffer in esi, address in ebx
  8579 000072BC A3[FE720000]        <1> 	mov [filetracks], eax
  8580 000072C1 89F7                <1> 	mov edi, esi		;just in case cl is 0
  8581 000072C3 89DA                <1> 	mov edx, ebx
  8582 000072C5 80F900              <1> 	cmp cl, 0
  8583 000072C8 7405                <1> 	je copytracksforfile
  8584 000072CA E89FFEFFFF          <1> 	call diskrreal	;take care of excess sectors
  8585                              <1> copytracksforfile:
  8586 000072CF A1[FE720000]        <1> 	mov eax, [filetracks]
  8587 000072D4 3D00000000          <1> 	cmp eax, 0
  8588 000072D9 7419                <1> 	je donecopyfile
  8589 000072DB 48                  <1> 	dec eax
  8590 000072DC A3[FE720000]        <1> 	mov [filetracks], eax
  8591 000072E1 89D3                <1> 	mov ebx, edx	;get end lba
  8592 000072E3 B140                <1> 	mov cl, 0x40 ;for compatability with BIOS it uses 64 instead of 128
  8593 000072E5 8A2D[97010000]      <1> 	mov ch, [DriveNumber]
  8594 000072EB 89FE                <1> 	mov esi, edi	;reset buffer
  8595 000072ED E87CFEFFFF          <1> 	call diskrreal
  8596 000072F2 EBDB                <1> 	jmp copytracksforfile
  8597                              <1> donecopyfile:
  8598 000072F4 BA00000000          <1> 	mov edx, 0	;no error
  8599 000072F9 C3                  <1> 	ret
  8600                              <1> 
  8601 000072FA 00000000            <1> oldesireal dd 0
  8602 000072FE 00000000            <1> filetracks dd 0
  8603 00007302 00                  <1> lbad1 db 0
  8604 00007303 00                  <1> lbad2 db 0
  8605 00007304 00                  <1> lbad3 db 0
  8606 00007305 00                  <1> lbad4 db 0
  8607 00007306 00                  <1> lbad5 db 0
  8608 00007307 00                  <1> lbad6 db 0
  8609 00007308 6400                <1> segments dw 100
  8610                              <1> 
  8611                              <1> 
  8612                              <1> 	
  8613                                      %include 'source/threads.asm'
  8614                              <1> ;;THIS IS MY FIRST ATTEMPT AT IMPLEMENTING THREADS
  8615                              <1> threadstarttest:
  8616 0000730A E9B2040000          <1>     jmp startthreads
  8617                              <1> mainthread:
  8618 0000730F F4                  <1> 	hlt		;;this does not work properly
  8619 00007310 EBFD                <1> 	jmp mainthread
  8620                              <1> 	
  8621                              <1> nwcmdst:
  8622 00007312 C605[31730000]00    <1> 	mov byte [threadson], 0
  8623 00007319 E93EBBFFFF          <1> 	jmp nwcmd
  8624                              <1> 	
  8625                              <1> modelthread:
  8626 0000731E B001                <1> 	mov al, 1
  8627 00007320 B409                <1> 	mov ah, 9
  8628 00007322 8B0D[27790000]      <1> 	mov ecx, [currentthread]
  8629 00007328 CD30                <1> 	int 0x30
  8630 0000732A E8C793FFFF          <1> 	call timerinterrupt
  8631 0000732F EBE1                <1> 	jmp nwcmdst
  8632                              <1> 	
  8633                              <1> 	
  8634 00007331 00                  <1> threadson db 0
  8635 00007332 04000000            <1> lastthread dd 4
  8636                              <1> 
  8637                              <1> thrdtst:
  8638 00007336 [1E730000]<rept>    <1> times 256 dd modelthread	;;could go up to 2048, but that takes too long
  8639                              <1> thrdtstend:
  8640                              <1> 
  8641 00007736 00000000            <1> 	espold dd 0
  8642                              <1> 
  8643                              <1> threadfork:
  8644 0000773A C605[31730000]01    <1> 	mov byte [threadson], 1
  8645 00007741 60                  <1> 	pushad
  8646                              <1> 	
  8647 00007742 8CC8                <1> 	mov eax, cs
  8648 00007744 89C2                <1> 	mov edx, eax
  8649 00007746 8B4C2428            <1> 	mov ecx, [esp + 40]
  8650 0000774A 81C900020000        <1> 	or ecx, 0x200
  8651 00007750 89E3                <1> 	mov ebx, esp
  8652 00007752 BC00040000          <1> 	mov esp, stackdummy
  8653                              <1> 	
  8654 00007757 60                  <1> 	pushad
  8655 00007758 B8[0F730000]        <1> 	mov eax, mainthread
  8656 0000775D 89442420            <1> 	mov [esp + 32], eax
  8657 00007761 89542424            <1> 	mov [esp + 36], edx
  8658 00007765 894C2428            <1> 	mov [esp + 40], ecx
  8659 00007769 8925[53800100]      <1> 	mov [threadlist], esp
  8660                              <1> 	
  8661 0000776F 891D[36770000]      <1> 	mov [espold], ebx
  8662 00007775 89F0                <1> 	mov eax, esi
  8663 00007777 BC00080000          <1> 	mov esp, stack1
  8664 0000777C 8B1D[32730000]      <1> 	mov ebx, [lastthread]
  8665 00007782 C1E30A              <1> 	shl ebx, 10
  8666 00007785 01DC                <1> 	add esp, ebx
  8667 00007787 C1EB0A              <1> 	shr ebx, 10
  8668 0000778A 60                  <1> 	pushad
  8669 0000778B 89442420            <1> 	mov [esp + 32], eax
  8670 0000778F 89542424            <1> 	mov [esp + 36], edx
  8671 00007793 894C2428            <1> 	mov [esp + 40], ecx
  8672 00007797 89A3[53800100]      <1> 	mov [threadlist + ebx], esp
  8673 0000779D 8B25[36770000]      <1> 	mov esp, [espold]
  8674 000077A3 81C304000000        <1> 	add ebx, 4
  8675 000077A9 89A3[53800100]      <1> 	mov [threadlist + ebx], esp
  8676 000077AF 81C304000000        <1> 	add ebx, 4
  8677 000077B5 891D[32730000]      <1> 	mov [lastthread], ebx
  8678 000077BB B020                <1> 	mov al, 0x20
  8679 000077BD E620                <1> 	out 0x20, al
  8680 000077BF 61                  <1> 	popad
  8681 000077C0 C3                  <1> 	ret
  8682                              <1> 
  8683                              <1> startthreads:
  8684 000077C1 C605[31730000]01    <1> 	mov byte [threadson], 1
  8685 000077C8 60                  <1> 	pushad
  8686                              <1> 	
  8687 000077C9 8CC8                <1> 	mov eax, cs
  8688 000077CB 89C2                <1> 	mov edx, eax
  8689 000077CD 8B4C2428            <1> 	mov ecx, [esp + 40]
  8690 000077D1 81C900020000        <1> 	or ecx, 0x200
  8691 000077D7 89E3                <1> 	mov ebx, esp
  8692 000077D9 BC00040000          <1> 	mov esp, stackdummy
  8693                              <1> 	
  8694 000077DE 60                  <1> 	pushad
  8695 000077DF B8[0F730000]        <1> 	mov eax, mainthread
  8696 000077E4 89442420            <1> 	mov [esp + 32], eax	;used to be 32
  8697 000077E8 89542424            <1> 	mov [esp + 36], edx ;used to be 36
  8698 000077EC 894C2428            <1> 	mov [esp + 40], ecx
  8699 000077F0 8925[53800100]      <1> 	mov [threadlist], esp
  8700                              <1> 
  8701                              <1> 			;;that above setup the dummy thread which for some reason does not run
  8702                              <1> 			;;this below will setup the threads found in thrdtst
  8703                              <1> 
  8704                              <1> testthreads:
  8705 000077F6 BE[36730000]        <1> 	mov esi, thrdtst
  8706 000077FB BC00080000          <1> 	mov esp, stack1
  8707 00007800 BF[53800100]        <1> 	mov edi, threadlist
  8708 00007805 81C704000000        <1> 	add edi, 4
  8709                              <1> nxtthreadld:
  8710 0000780B 60                  <1> 	pushad
  8711 0000780C 8B06                <1> 	mov eax, [esi]
  8712 0000780E 89442420            <1> 	mov [esp + 32], eax
  8713 00007812 89542424            <1> 	mov [esp + 36], edx
  8714 00007816 894C2428            <1> 	mov [esp + 40], ecx
  8715 0000781A 8927                <1> 	mov [edi], esp
  8716 0000781C 81C400040000        <1> 	add esp, 1024
  8717 00007822 81C604000000        <1> 	add esi, 4
  8718 00007828 81C704000000        <1> 	add edi, 4
  8719 0000782E 81FF[5BA00100]      <1> 	cmp edi, threadlistend
  8720 00007834 0F831A000000        <1> 	jae near nomorethreadspace
  8721 0000783A 81FC[5BA82100]      <1> 	cmp esp, bssend
  8722 00007840 0F8347000000        <1> 	jae near nomorestackspace
  8723 00007846 81FE[36770000]      <1> 	cmp esi, thrdtstend
  8724 0000784C 72BD                <1> 	jb nxtthreadld
  8725 0000784E 89DC                <1> 	mov esp, ebx
  8726 00007850 61                  <1> 	popad
  8727 00007851 FB                  <1> 	sti
  8728 00007852 EBFE                <1> 	jmp $	;;wait for the irq to hook
  8729                              <1> 	
  8730                              <1> nomorethreadspace:
  8731 00007854 BE[6A780000]        <1> 	mov esi, nmts
  8732 00007859 E8ECAAFFFF          <1> 	call print
  8733 0000785E C605[31730000]00    <1> 	mov byte [threadson], 0
  8734 00007865 E9F2B5FFFF          <1> 	jmp nwcmd
  8735 0000786A 74656820636F6C6F6E- <1> nmts	db "teh colonel no can haz moar treds",10,0
  8736 00007873 656C206E6F2063616E- <1>
  8737 0000787C 2068617A206D6F6172- <1>
  8738 00007885 2074726564730A00    <1>
  8739                              <1> 
  8740                              <1> nomorestackspace:
  8741 0000788D BE[A8780000]        <1> 	mov esi, nmss
  8742 00007892 E8B3AAFFFF          <1> 	call print
  8743 00007897 BC00082000          <1> 	mov esp, stackend
  8744 0000789C C605[31730000]00    <1> 	mov byte [threadson], 0
  8745 000078A3 E9B4B5FFFF          <1> 	jmp nwcmd
  8746 000078A8 74656820636F6C6F6E- <1> nmss	db "teh colonel no can haz moar staqz",10,0
  8747 000078B1 656C206E6F2063616E- <1>
  8748 000078BA 2068617A206D6F6172- <1>
  8749 000078C3 20737461717A0A00    <1>
  8750                              <1> 	
  8751                              <1> threadswitch:
  8752 000078CB FA                  <1> 	cli
  8753 000078CC 60                  <1> 	pushad
  8754 000078CD BF[53800100]        <1> 	mov edi, threadlist
  8755 000078D2 A1[27790000]        <1> 	mov eax, [currentthread]
  8756 000078D7 40                  <1> 	inc eax
  8757 000078D8 A3[27790000]        <1> 	mov [currentthread], eax
  8758 000078DD 6648                <1> 	dec ax
  8759 000078DF C1E002              <1> 	shl eax, 2
  8760 000078E2 01C7                <1> 	add edi, eax
  8761 000078E4 8927                <1> 	mov [edi], esp
  8762 000078E6 81C704000000        <1> 	add edi, 4
  8763 000078EC 81FF[5BA00100]      <1> 	cmp edi, threadlistend
  8764 000078F2 0F830D000000        <1> 	jae near nookespthread
  8765 000078F8 8B07                <1> 	mov eax, [edi]
  8766 000078FA 3D00000000          <1> 	cmp eax, 0
  8767 000078FF 0F8519000000        <1> 	jne near okespthread
  8768                              <1> nookespthread:
  8769 00007905 BF[53800100]        <1> 	mov edi, threadlist
  8770 0000790A 31C0                <1> 	xor eax, eax
  8771 0000790C A3[27790000]        <1> 	mov [currentthread], eax
  8772 00007911 8B07                <1> 	mov eax, [edi]
  8773 00007913 3D00000000          <1> 	cmp eax, 0
  8774 00007918 0F84F4F9FFFF        <1> 	je near nwcmdst
  8775                              <1> okespthread:
  8776 0000791E 89C4                <1> 	mov esp, eax
  8777 00007920 B020                <1> 	mov al, 0x20
  8778 00007922 E620                <1> 	out 0x20, al
  8779 00007924 61                  <1> 	popad
  8780 00007925 FB                  <1> 	sti
  8781 00007926 C3                  <1> 	ret
  8782                              <1> 	
  8783 00007927 00000000            <1> currentthread dd 0
  8784                                      %include 'source/data.asm'
  8785 0000792B 6578697400          <1> 	exitmsg db	"exit",0
  8786 00007930 626F6F742E736800    <1> 	bootfilename db "boot.sh",0
  8787 00007938 50726F6772616D2022- <1> 	notfound1 db "Program ",34,0
  8788 00007941 00                  <1>
  8789 00007942 22206E6F7420666F75- <1> 	notfound2 db  34," not found.",10,0
  8790 0000794B 6E642E0A00          <1>
  8791 00007950 757365726E616D653A- <1> 	userask db "username:",0
  8792 00007959 00                  <1>
  8793 0000795A 70617373776F72643A- <1> 	pwdask	db	"password:",0
  8794 00007963 00                  <1>
  8795 00007964 40                  <1> 	computer db "@"
  8796 00007965 536F6C6C65724F5300  <1> 	computername	db	"SollerOS",0
  8797 0000796E 20                  <1> 	location db " "
  8798 0000796F 2F00                <1> 	locationname db "/",0
  8799 00007971 5D242000            <1> 	endprompt db "]$ ",0
  8800 00007975 0D                  <1> 	crlf 	db  13
  8801 00007976 0A00                <1> 	line	db	10,0
  8802                              <1> 	userlst:
  8803 00007978 726F6F7400          <1> 			db "root",0
  8804 0000797D 617765736F6D65706F- <1> 			db "awesomepower",0
  8805 00007986 77657200            <1>
  8806 0000798A 7573657200          <1> 			db "user",0
  8807 0000798F 70617373776F726400  <1> 			db "password",0
  8808 00007998 6E00                <1> 			db "n",0	;;abuse for quick entry-a quick double n followed by a double enter will get you in
  8809 0000799A 00                  <1> 			db 0
  8810                              <1> 	userlstend:
  8811                              <1> 	
  8812 0000799A <incbin>            <1> fonts:	incbin 'source/precompiled/fonts.pak'
  8813                              <1> fontend:
  8814                              <1> 
  8815                              <1> mcursor:
  8816 0000899B 01                  <1> 	db	00000001b
  8817 0000899C 81                  <1> 	db	10000001b
  8818 0000899D C1                  <1> 	db	11000001b
  8819 0000899E E1                  <1> 	db	11100001b
  8820 0000899F F1                  <1> 	db	11110001b
  8821 000089A0 F9                  <1> 	db	11111001b
  8822 000089A1 FD                  <1> 	db	11111101b
  8823 000089A2 FF                  <1> 	db	11111111b
  8824 000089A3 F9                  <1> 	db	11111001b
  8825 000089A4 B9                  <1> 	db	10111001b
  8826 000089A5 39                  <1> 	db	00111001b
  8827 000089A6 1C                  <1> 	db	00011100b
  8828 000089A7 1C                  <1> 	db	00011100b
  8829 000089A8 0E                  <1> 	db	00001110b
  8830 000089A9 0E                  <1> 	db	00001110b
  8831 000089AA 0C                  <1> 	db	00001100b
  8832                              <1> 	
  8833                              <1> VBEMODEBLOCK:
  8834 000089AB 00<rept>            <1> vbesignature 		times  4 db 0 	;VBE Signature
  8835 000089AF 00<rept>            <1> vbeversion  		times  2 db 0	;VBE Version
  8836 000089B1 00<rept>            <1> oemstringptr  		times  4 db 0	;Pointer to OEM String
  8837 000089B5 00<rept>            <1> capabilities 		times  4 db 0	;Capabilities of graphics cont.
  8838 000089B9 00<rept>            <1> videomodeptr 		times  4 db 0	;Pointer to Video Mode List
  8839 000089BD 00<rept>            <1> totalmemory   		times  2 db 0	;number of 64Kb memory blocks
  8840 000089BF 00<rept>            <1> oemsoftwarerev  	times  2 db 0	;VBE implementation Software revision
  8841 000089C1 00<rept>            <1> oemvendornameptr 	times  4 db 0	;Pointer to Vendor Name String
  8842 000089C5 00<rept>            <1> oemproductnameptr 	times  4 db 0	;Pointer to Product Name String
  8843 000089C9 00<rept>            <1> oemproductrevptr 	times  4 db 0	;Pointer to Product Revision String
  8844 000089CD 00<rept>            <1> reserved			times  222 db 0	;Reserved for VBE implementation scratch area
  8845 00008AAB 00<rept>            <1> oemdata 			times  256 db 0	;Data Area for OEM Strings
  8846                              <1> 
  8847                              <1> VBEMODEINFOBLOCK:
  8848                              <1> ;Mandatory information for all VBE revision
  8849 00008BAB 00<rept>            <1> modeattributes   	times  2 db 0	;Mode attributes
  8850 00008BAD 00                  <1> winaattributes   	times  1 db 0	;Window A attributes
  8851 00008BAE 00                  <1> winbattributes   	times  1 db 0	;Window B attributes
  8852 00008BAF 00<rept>            <1> wingranularity   	times  2 db 0	;Window granularity
  8853 00008BB1 00<rept>            <1> winsize          	times  2 db 0	;Window size
  8854 00008BB3 00<rept>            <1> winasegment      	times  2 db 0	;Window A start segment
  8855 00008BB5 00<rept>            <1> winbsegment      	times  2 db 0	;Window B start segment
  8856 00008BB7 00<rept>            <1> winfuncptr       	times  4 db 0	;pointer to window function
  8857 00008BBB 00<rept>            <1> bytesperscanline 	times  2 db 0	;Bytes per scan line
  8858                              <1> 
  8859                              <1> ;Mandatory information for VBE 1.2 and above
  8860 00008BBD 00<rept>            <1> resolutionx     	times  2 db 0	;Horizontal resolution in pixel or chars
  8861 00008BBF 00<rept>            <1> resolutiony	    	times  2 db 0	;Vertical resolution in pixel or chars
  8862 00008BC1 00                  <1> xcharsize       	times  1 db 0	;Character cell width in pixel
  8863 00008BC2 00                  <1> ycharsize       	times  1 db 0	;Character cell height in pixel
  8864 00008BC3 00                  <1> numberofplanes  	times  1 db 0	;Number of memory planes
  8865 00008BC4 00                  <1> bitsperpixel    	times  1 db 0	;Bits per pixel
  8866 00008BC5 00                  <1> numberofbanks   	times  1 db 0	;Number of banks
  8867 00008BC6 00                  <1> memorymodel     	times  1 db 0	;Memory model type
  8868 00008BC7 00                  <1> banksize        	times  1 db 0	;Bank size in KB
  8869 00008BC8 00                  <1> numberofimagepages	times  1 db 0	;Number of images
  8870 00008BC9 00                  <1> reserved1       	times  1 db 0	;Reserved for page function
  8871                              <1> 
  8872                              <1> ;Direct Color fields (required for direct/6 and YUV/7 memory models)
  8873 00008BCA 00                  <1> redmasksize			times  1 db 0	;Size of direct color red mask in bits
  8874 00008BCB 00                  <1> redfieldposition	times  1 db 0	;Bit position of lsb of red bask
  8875 00008BCC 00                  <1> greenmasksize   	times  1 db 0	;Size of direct color green mask in bits
  8876 00008BCD 00                  <1> greenfieldposition	times  1 db 0	;Bit position of lsb of green bask
  8877 00008BCE 00                  <1> bluemasksize		times  1 db 0	;Size of direct color blue mask in bits
  8878 00008BCF 00                  <1> bluefieldposition	times  1 db 0	;Bit position of lsb of blue bask
  8879 00008BD0 00                  <1> rsvdmasksize        times  1 db 0		;Size of direct color reserved mask in bits
  8880 00008BD1 00                  <1> rsvdfieldposition	times  1 db 0		;Bit position of lsb of reserved bask
  8881 00008BD2 00                  <1> directcolormodeinfo	times  1 db 0	;Direct color mode attributes
  8882                              <1> 
  8883                              <1> ;Mandatory information for VBE 2.0 and above
  8884 00008BD3 00<rept>            <1> physbaseptr 		times  4 db 0	;Physical address for flat frame buffer
  8885 00008BD7 00<rept>            <1> offscreenmemoffset 	times  4 db 0	;Pointer to start of off screen memory
  8886 00008BDB 00<rept>            <1> offscreenmemsize 	times  2 db 0    ;Amount of off screen memory in 1Kb units
  8887 00008BDD 00<rept>            <1> reserved2 			times  206 db 0  ;Remainder of ModeInfoBlock
  8888                              <1> 
  8889 00008CAB 0000                <1> resolutionx2 dw 0	;this is not part of the VBE but is necessary GUI info
  8890 00008CAD 00                  <1> guion db 0
  8891                              <1> VBEEND:
  8892                              <1> osend:	;this is the end of the operating system's space on disk
  8893                                      %include 'fileindex.asm'
  8894                              <1> diskfileindex:
  8895 00008CAE 617267746573742E65- <1> db "argtest.elf",0
  8896 00008CB7 6C6600              <1>
  8897 00008CBA 48000000            <1> dd (f0-$$)/512
  8898 00008CBE 07010000            <1> dd (f1-f0)/512
  8899 00008CC2 626300              <1> db "bc",0
  8900 00008CC5 4F010000            <1> dd (f1-$$)/512
  8901 00008CC9 D4020000            <1> dd (f2-f1)/512
  8902 00008CCD 626F6F742E736800    <1> db "boot.sh",0
  8903 00008CD5 23040000            <1> dd (f2-$$)/512
  8904 00008CD9 01000000            <1> dd (f3-f2)/512
  8905 00008CDD 63686172746573742E- <1> db "chartest.elf",0
  8906 00008CE6 656C6600            <1>
  8907 00008CEA 24040000            <1> dd (f3-$$)/512
  8908 00008CEE 28010000            <1> dd (f4-f3)/512
  8909 00008CF2 646F73746573742E63- <1> db "dostest.com",0
  8910 00008CFB 6F6D00              <1>
  8911 00008CFE 4C050000            <1> dd (f4-$$)/512
  8912 00008D02 01000000            <1> dd (f5-f4)/512
  8913 00008D06 66696E616C636F756E- <1> db "finalcount.snd",0
  8914 00008D0F 742E736E6400        <1>
  8915 00008D15 4D050000            <1> dd (f5-$$)/512
  8916 00008D19 01000000            <1> dd (f6-f5)/512
  8917 00008D1D 68656C6C6F776F726C- <1> db "helloworld.elf",0
  8918 00008D26 642E656C6600        <1>
  8919 00008D2C 4E050000            <1> dd (f6-$$)/512
  8920 00008D30 D9010000            <1> dd (f7-f6)/512
  8921 00008D34 696E7400            <1> db "int",0
  8922 00008D38 27070000            <1> dd (f7-$$)/512
  8923 00008D3C 01000000            <1> dd (f8-f7)/512
  8924 00008D40 6C6F7374776F6F6473- <1> db "lostwoods.snd",0
  8925 00008D49 2E736E6400          <1>
  8926 00008D4E 28070000            <1> dd (f8-$$)/512
  8927 00008D52 01000000            <1> dd (f9-f8)/512
  8928 00008D56 6D6172696F2E736E64- <1> db "mario.snd",0
  8929 00008D5F 00                  <1>
  8930 00008D60 29070000            <1> dd (f9-$$)/512
  8931 00008D64 01000000            <1> dd (f10-f9)/512
  8932 00008D68 736F6C6C65726F732E- <1> db "solleros.bmp",0
  8933 00008D71 626D7000            <1>
  8934 00008D75 2A070000            <1> dd (f10-$$)/512
  8935 00008D79 B0020000            <1> dd (f11-f10)/512
  8936 00008D7D 736F6C6C65726F732E- <1> db "solleros.txt",0
  8937 00008D86 74787400            <1>
  8938 00008D8A DA090000            <1> dd (f11-$$)/512
  8939 00008D8E 01000000            <1> dd (f12-f11)/512
  8940 00008D92 736F6E676F74696D65- <1> db "songotime.snd",0
  8941 00008D9B 2E736E6400          <1>
  8942 00008DA0 DB090000            <1> dd (f12-$$)/512
  8943 00008DA4 01000000            <1> dd (f13-f12)/512
  8944 00008DA8 737464696F74657374- <1> db "stdiotest.elf",0
  8945 00008DB1 2E656C6600          <1>
  8946 00008DB6 DC090000            <1> dd (f13-$$)/512
  8947 00008DBA 26010000            <1> dd (f14-f13)/512
  8948 00008DBE 74656C7900          <1> db "tely",0
  8949 00008DC3 020B0000            <1> dd (f14-$$)/512
  8950 00008DC7 01000000            <1> dd (f15-f14)/512
  8951 00008DCB 7475746F7269616C2E- <1> db "tutorial.sh",0
  8952 00008DD4 736800              <1>
  8953 00008DD7 030B0000            <1> dd (f15-$$)/512
  8954 00008DDB 03000000            <1> dd (f16-f15)/512
  8955 00008DDF 756E667300          <1> db "unfs",0
  8956 00008DE4 060B0000            <1> dd (f16-$$)/512
  8957 00008DE8 02000000            <1> dd (f17-f16)/512
  8958 00008DEC 766963746F72792E77- <1> db "victory.wav",0
  8959 00008DF5 617600              <1>
  8960 00008DF8 080B0000            <1> dd (f17-$$)/512
  8961 00008DFC 16000000            <1> dd (f18-f17)/512
  8962 00008E00 5F696D672E62696E00  <1> db "_img.bin",0
  8963 00008E09 1E0B0000            <1> dd (f18-$$)/512
  8964 00008E0D D7020000            <1> dd (f19-f18)/512
  8965 00008E11 5F756E66732D64656D- <1> db "_unfs-demo",0
  8966 00008E1A 6F00                <1>
  8967 00008E1C F50D0000            <1> dd (f19-$$)/512
  8968 00008E20 05000000            <1> dd (f20-f19)/512
  8969                              <1> enddiskfileindex:
  8970                              <1> 
  8971                                      %include 'source/bss.asm'
  8972                              <1> bssstart: equ $
  8973                              <1> graphicstable equ bssstart;w type, dw datalocation, w locationx, w locationy, w selected, dw code
  8974                              <1> 	graphicstableend equ graphicstable + 200h
  8975                              <1> mousecolorbuf equ graphicstableend ;where the gui under the mouse is stored
  8976                              <1> mcolorend equ mousecolorbuf + 256
  8977                              <1> fileindex: equ mcolorend
  8978                              <1> fileindexend: equ fileindex + 1024
  8979                              <1> uid equ fileindexend
  8980                              <1> ranboot equ uid + 4
  8981                              <1> IFON equ ranboot + 1
  8982                              <1> IFTRUE equ IFON + 1
  8983                              <1> BATCHPOS equ IFTRUE + 100
  8984                              <1> BATCHISON equ BATCHPOS + 4
  8985                              <1> LOOPON equ BATCHISON + 1
  8986                              <1> LOOPPOS	equ LOOPON + 1
  8987                              <1> variables: equ LOOPPOS + 4
  8988                              <1> varend: equ variables + 4096
  8989                              <1> buftxt2: equ varend
  8990                              <1> buftxt: equ buftxt2 + 1024 + 10
  8991                              <1> buftxtend: equ buftxt + 1024
  8992                              <1> buf2: equ buftxtend
  8993                              <1> numbuf: equ buf2 + 20
  8994                              <1> videobuf equ numbuf + 1	;1280x1024pixels in characters
  8995                              <1> videobufend	equ videobuf + 160*64*2
  8996                              <1> videobuf2 equ videobufend + 160*2
  8997                              <1> videobuf2end equ videobuf2 + 160*64*2
  8998                              <1> lastcommandpos: equ videobuf2end + 160*2
  8999                              <1> currentcommandpos: equ lastcommandpos + 4
  9000                              <1> commandbuf: equ currentcommandpos + 4
  9001                              <1> commandbufend: equ commandbuf + 4096 ;this is where kernel space only ends, the rest is for threading
  9002                              <1> rbuffstart: equ commandbufend ;for use with networking
  9003                              <1> threadlist: equ rbuffstart + 8212 ;this buffer will hold the stack locations of all of the threads, up to 2048
  9004                              <1> threadlistend: equ threadlist + 2050*4
  9005                              <1> stack equ threadlistend
  9006                              <1> stacks:	equ 0 ;i use SS now for proper stack management. This makes sure stacks never screw with other memory
  9007                              <1> stackdummy: equ stacks + 1024
  9008                              <1> stack1: equ stackdummy + 1024  ;woah, thats a lot of space for stacks
  9009                              <1> stackend: equ stack1 + 1024*2048	;from here on, it is not kernel space so apps can be loaded here.
  9010                              <1> bssend equ stackend + stack
  9011                              <1> dosprogloc equ 0x400000
  9012                                      %include 'files.asm'
  9013 00008E24 00<rept>            <1> align 512,db 0
  9014                              <1> f0:
  9015 00008E24 <incbin>            <1> incbin "included/argtest.elf"
  9016 00029DDB 00<rept>            <1> align 512,db 0
  9017                              <1> f1:
  9018 00029DDB <incbin>            <1> incbin "included/bc"
  9019 000845E9 00<rept>            <1> align 512,db 0
  9020                              <1> f2:
  9021 000845E9 <incbin>            <1> incbin "included/boot.sh"
  9022 00084666 00<rept>            <1> align 512,db 0
  9023                              <1> f3:
  9024 00084666 <incbin>            <1> incbin "included/chartest.elf"
  9025 000A9678 00<rept>            <1> align 512,db 0
  9026                              <1> f4:
  9027 000A9678 <incbin>            <1> incbin "included/dostest.com"
  9028 000A992B 00<rept>            <1> align 512,db 0
  9029                              <1> f5:
  9030 000A992B <incbin>            <1> incbin "included/finalcount.snd"
  9031 000A9B02 00<rept>            <1> align 512,db 0
  9032                              <1> f6:
  9033 000A9B02 <incbin>            <1> incbin "included/helloworld.elf"
  9034 000E4D68 00<rept>            <1> align 512,db 0
  9035                              <1> f7:
  9036 000E4D68 <incbin>            <1> incbin "included/int"
  9037 000E4F81 00<rept>            <1> align 512,db 0
  9038                              <1> f8:
  9039 000E4F81 <incbin>            <1> incbin "included/lostwoods.snd"
  9040 000E5056 00<rept>            <1> align 512,db 0
  9041                              <1> f9:
  9042 000E5056 <incbin>            <1> incbin "included/mario.snd"
  9043 000E523A 00<rept>            <1> align 512,db 0
  9044                              <1> f10:
  9045 000E523A <incbin>            <1> incbin "included/solleros.bmp"
  9046 0013B3E6 00<rept>            <1> align 512,db 0
  9047                              <1> f11:
  9048 0013B3E6 <incbin>            <1> incbin "included/solleros.txt"
  9049 0013B576 00<rept>            <1> align 512,db 0
  9050                              <1> f12:
  9051 0013B576 <incbin>            <1> incbin "included/songotime.snd"
  9052 0013B64A 00<rept>            <1> align 512,db 0
  9053                              <1> f13:
  9054 0013B64A <incbin>            <1> incbin "included/stdiotest.elf"
  9055 00160328 00<rept>            <1> align 512,db 0
  9056                              <1> f14:
  9057 00160328 <incbin>            <1> incbin "included/tely"
  9058 0016059F 00<rept>            <1> align 512,db 0
  9059                              <1> f15:
  9060 0016059F <incbin>            <1> incbin "included/tutorial.sh"
  9061 00160B45 00<rept>            <1> align 512,db 0
  9062                              <1> f16:
  9063 00160B45 <incbin>            <1> incbin "included/unfs"
  9064                              <1> align 512,db 0
  9065                              <1> f17:
  9066 00160B45 <incbin>            <1> incbin "included/victory.wav"
  9067 00163B48 00<rept>            <1> align 512,db 0
  9068                              <1> f18:
  9069 00163B48 <incbin>            <1> incbin "included/_img.bin"
  9070                              <1> align 512,db 0
  9071                              <1> f19:
  9072 00163B48 <incbin>            <1> incbin "included/_unfs-demo"
  9073                              <1> align 512,db 0
  9074                              <1> f20:
