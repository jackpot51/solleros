     1                                  [BITS 16]
     2                                      %include 'source/menu.asm'
     3                              <1>     ; MENU.ASM
     4                              <1> %include 'source/signature.asm'
     5                              <2> signature:	;used by bootloader to find SollerOS, is totally awesome
     6 00000000 EDA55ED1            <2> dd 0xD15EA5ED	;diseased
     7 00000004 15D000B1            <2> dd 0xB100D015	;blood is
     8 00000008 EDFED2BA            <2> dd 0xBAD2FEED	;bad to feed
     9 0000000C 95D0112A            <2> dd 0x2A11D095	;to all dogs
    10 00000010 52A71CA1            <2> dd 0xA11CA752	;all cats too.
    11 00000014 0F751015            <2> dd 0x1510750F   ;is lots of
    12 00000018 75CAADDE            <2> dd 0xDEADCA75   ;dead cats
    13 0000001C 95D0ADDE            <2> dd 0xDEADD095   ;dead dogs
    14 00000020 86000000            <2> dd 134			;version
    15 00000024 534F4C4C45524F53    <2> db "SOLLEROS"
    16                              <2> signatureend:
    17                              <1> menustart:	
    18 0000002C 8CC8                <1> 	mov ax, cs
    19 0000002E 8ED8                <1> 	mov ds, ax
    20 00000030 8EC0                <1> 	mov es, ax
    21 00000032 8ED0                <1> 	mov ss, ax
    22 00000034 880E[8301]          <1> 	mov [DriveNumber], cl
    23 00000038 668916[8401]        <1> 	mov [lbaad], edx
    24 0000003D B800A0              <1> 	mov ax, 0xA000
    25 00000040 8EE8                <1> 	mov gs, ax
    26 00000042 B81200              <1> 	mov ax, 12h
    27 00000045 31DB                <1> 	xor bx, bx
    28 00000047 CD10                <1> 	int 10h
    29                              <1> guiload:
    30 00000049 BE[9702]            <1> 	mov si, bootmsg
    31 0000004C E84F01              <1> 	call printrm
    32 0000004F 31C0                <1> 	xor ax, ax
    33 00000051 CD16                <1> 	int 16h
    34 00000053 3C79                <1> 	cmp al, "y"
    35 00000055 0F85F800            <1> 	jne near guiload2
    36                              <1> guiloadagain:
    37 00000059 B8004F              <1> 	mov ax, 04F00h
    38 0000005C BF[A484]            <1> 	mov di, VBEMODEBLOCK
    39 0000005F CD10                <1> 	int 10h
    40 00000061 BE[C684]            <1> 	mov si, reserved
    41 00000064 81EE0200            <1> 	sub si, 2
    42                              <1> findvideomodes:
    43 00000068 81C60200            <1> 	add si, 2
    44 0000006C 8B0C                <1> 	mov cx, [si]
    45 0000006E 81F9FFFF            <1> 	cmp cx, 0xFFFF
    46 00000072 0F840B00            <1> 	je near nextvmode
    47 00000076 81FE[A485]          <1> 	cmp si, oemdata
    48 0000007A 0F83D300            <1> 	jae near guiload2	;;kill if no valid list is found
    49 0000007E E9E7FF              <1> 	jmp findvideomodes 	
    50                              <1> ;;debug,shows vmodes available
    51                              <1> nextvmode:
    52 00000081 81EE0200            <1> 	sub si, 2
    53 00000085 81FE[C684]          <1> 	cmp si, reserved
    54 00000089 0F82CCFF            <1> 	jb near guiloadagain
    55 0000008D 8B0C                <1> 	mov cx, [si]
    56 0000008F 81F9FFFF            <1> 	cmp cx, 0xFFFF
    57 00000093 0F84EAFF            <1> 	je near nextvmode
    58 00000097 81C10040            <1> 	add cx, 0x4000 		;;Linear Frame Buffer
    59 0000009B B8014F              <1> 	mov ax, 04F01h
    60 0000009E BF[A486]            <1> 	mov di, VBEMODEINFOBLOCK
    61 000000A1 890E[8801]          <1> 	mov [vesamode], cx
    62 000000A5 CD10                <1> 	int 10h
    63 000000A7 A0[BD86]            <1> 	mov al, [bitsperpixel]
    64 000000AA 3C10                <1> 	cmp al, 16
    65 000000AC 75D3                <1> 	jne nextvmode
    66 000000AE 8936[8A01]          <1> 	mov [videomodecache], si
    67 000000B2 80FC00              <1> 	cmp ah, 0
    68 000000B5 0F842300            <1> 	je near setvesamode
    69 000000B9 E9C5FF              <1> 	jmp nextvmode
    70 000000BC 0A0D49732074686973- <1> isthisvideook db 10,13,"Is this video mode OK?(y/n)",13,10,0
    71 000000C5 20766964656F206D6F- <1>
    72 000000CE 6465204F4B3F28792F- <1>
    73 000000D7 6E290D0A00          <1>
    74                              <1> setvesamode:
    75 000000DC 8B0E[B686]          <1> 	mov cx, [xresolution]
    76 000000E0 E8D400              <1> 	call decshow
    77 000000E3 B078                <1> 	mov al, "x"
    78 000000E5 E84001              <1> 	call char
    79 000000E8 8B0E[B886]          <1> 	mov cx, [yresolution]
    80 000000EC E8C800              <1> 	call decshow
    81 000000EF B040                <1> 	mov al, "@"
    82 000000F1 E83401              <1> 	call char
    83 000000F4 8A0E[BD86]          <1> 	mov cl, [bitsperpixel]
    84 000000F8 E8BC00              <1> 	call decshow
    85 000000FB BE[BC00]            <1> 	mov si, isthisvideook
    86 000000FE E89D00              <1> 	call printrm
    87 00000101 31C0                <1> 	xor ax, ax
    88 00000103 CD16                <1> 	int 16h
    89 00000105 8B36[8A01]          <1> 	mov si, [videomodecache]
    90 00000109 3C79                <1> 	cmp al, "y"
    91 0000010B 0F8572FF            <1> 	jne near nextvmode
    92 0000010F 8B16[B686]          <1> 	mov dx, [xresolution]
    93 00000113 8B0E[B886]          <1> 	mov cx, [yresolution]
    94 00000117 8916[235F]          <1> 	mov [resolutionx], dx
    95 0000011B 890E[215F]          <1> 	mov [resolutiony], cx
    96 0000011F 01D2                <1> 	add dx, dx
    97 00000121 8916[255F]          <1> 	mov [resolutionx2], dx
    98 00000125 31D2                <1> 	xor dx, dx
    99 00000127 31C9                <1> 	xor cx, cx
   100 00000129 B8024F              <1> 	mov ax, 04F02h
   101 0000012C 8B1E[8801]          <1> 	mov bx, [vesamode]
   102 00000130 CD10                <1> 	int 10h		;;enter VESA mode
   103 00000132 C606[8C01]00        <1> 	mov byte [guinodo], 0
   104 00000137 C606[5050]01        <1> 	mov byte [guion], 1
   105 0000013C 6631C0              <1> 	xor eax, eax
   106 0000013F 6631DB              <1> 	xor ebx, ebx
   107 00000142 6631C9              <1> 	xor ecx, ecx
   108 00000145 6631D2              <1> 	xor edx, edx
   109 00000148 6631F6              <1> 	xor esi, esi
   110 0000014B 6631FF              <1> 	xor edi, edi	;;reset registers
   111 0000014E E96001              <1> 	jmp pmode
   112                              <1> guiload2:
   113 00000151 B9E001              <1> 	mov cx, 480
   114 00000154 BA8002              <1> 	mov dx, 640
   115 00000157 8916[235F]          <1> 	mov [resolutionx], dx
   116 0000015B 01D2                <1> 	add dx, dx
   117 0000015D 8916[255F]          <1> 	mov [resolutionx2], dx
   118 00000161 890E[215F]          <1> 	mov [resolutiony], cx
   119 00000165 B81200              <1> 	mov ax, 12h
   120 00000168 31DB                <1> 	xor bx, bx
   121 0000016A CD10                <1> 	int 10h
   122 0000016C C606[8C01]01        <1> 	mov byte [guinodo], 1
   123 00000171 6631DB              <1> 	xor ebx, ebx
   124 00000174 6631C9              <1> 	xor ecx, ecx
   125 00000177 6631D2              <1> 	xor edx, edx
   126 0000017A 6631F6              <1> 	xor esi, esi
   127 0000017D 6631FF              <1> 	xor edi, edi
   128 00000180 E92E01              <1> 	jmp pmode
   129                              <1> 
   130 00000183 00                  <1> DriveNumber db 0
   131 00000184 00000000            <1> lbaad dd 0
   132                              <1> 	
   133 00000188 0000                <1> vesamode dw 0
   134 0000018A 0000                <1> videomodecache dw 0
   135                              <1> 
   136 0000018C 00                  <1> guinodo db 0
   137                              <1> tests:
   138 0000018D BB0700              <1> 	mov bx, 7
   139 00000190 B40E                <1> 	mov ah, 0Eh
   140 00000192 FEC0                <1> 	inc al
   141 00000194 3C02                <1> 	cmp al, 2
   142 00000196 7501                <1> 	jne cnttest
   143 00000198 C3                  <1> 	ret
   144                              <1> cnttest:
   145 00000199 CD10                <1> 	int 10h
   146 0000019B E9EFFF              <1> 	jmp tests
   147                              <1> 
   148                              <1>     printrm:			; 'si' comes in with string address
   149 0000019E BB0700              <1> 	    mov bx,07		; write to display
   150 000001A1 B40E                <1> 	    mov ah,0Eh		; screen function
   151 000001A3 8A04                <1>     prs2:    mov al,[si]         ; get next character
   152 000001A5 3C00                <1> 	    cmp al,0		; look for terminator 
   153 000001A7 7406                <1>             je finpr2		; zero byte at end of string
   154 000001A9 CD10                <1> 	    int 10h		; write character to screen.    
   155 000001AB 46                  <1>      	    inc si	     	; move to next character
   156 000001AC E9F4FF              <1> 	    jmp prs2		; loop
   157 000001AF C3                  <1>     finpr2: ret
   158                              <1> 
   159 000001B0 0000000000          <1> dcnm db 0,0,0,0,0
   160 000001B5 0000                <1> dcnmend db 0,0
   161                              <1> 
   162                              <1> 
   163                              <1> decshow:
   164 000001B7 BE[B001]            <1> 	mov si, dcnm
   165                              <1> decclear:
   166 000001BA B030                <1> 	mov al, "0"
   167 000001BC 8804                <1> 	mov [si], al
   168 000001BE 46                  <1> 	inc si
   169 000001BF 81FE[B501]          <1> 	cmp si, dcnmend
   170 000001C3 76F5                <1> 	jbe decclear
   171 000001C5 4E                  <1> 	dec si
   172 000001C6 E81500              <1> 	call convertrm
   173 000001C9 BE[B001]            <1> 	mov si, dcnm
   174                              <1> dectst:
   175 000001CC 8A04                <1> 	mov al, [si]
   176 000001CE 46                  <1> 	inc si
   177 000001CF 81FE[B501]          <1> 	cmp si, dcnmend
   178 000001D3 7704                <1> 	ja dectstend
   179 000001D5 3C30                <1> 	cmp al, "0"
   180 000001D7 76F3                <1> 	jbe dectst
   181                              <1> dectstend:
   182 000001D9 4E                  <1> 	dec si
   183 000001DA E8C1FF              <1> 	call printrm
   184 000001DD C3                  <1> 	ret
   185                              <1> 	
   186                              <1> 	
   187                              <1> convertrm:
   188 000001DE 4E                  <1> 	dec si
   189 000001DF 89F3                <1> 	mov bx, si		;place to convert into must be in si, number to convert must be in cx
   190                              <1> cnvrtrm:
   191 000001E1 89DE                <1> 	mov si, bx
   192 000001E3 81EE0300            <1> 	sub si, 3
   193 000001E7 46                  <1> ten3rm:	inc si
   194 000001E8 81F9E803            <1> 	cmp cx, 1000
   195 000001EC 7209                <1> 	jb ten2rm
   196 000001EE 81E9E803            <1> 	sub cx, 1000
   197 000001F2 FE04                <1> 	inc byte [si]
   198 000001F4 E9EAFF              <1> 	jmp cnvrtrm
   199 000001F7 46                  <1> ten2rm:	inc si
   200 000001F8 81F96400            <1> 	cmp cx, 100
   201 000001FC 7209                <1> 	jb ten1rm
   202 000001FE 81E96400            <1> 	sub cx, 100
   203 00000202 FE04                <1> 	inc byte [si]
   204 00000204 E9DAFF              <1> 	jmp cnvrtrm
   205 00000207 46                  <1> ten1rm:	inc si
   206 00000208 81F90A00            <1> 	cmp cx, 10
   207 0000020C 7209                <1> 	jb ten0rm
   208 0000020E 81E90A00            <1> 	sub cx, 10
   209 00000212 FE04                <1> 	inc byte [si]
   210 00000214 E9CAFF              <1> 	jmp cnvrtrm
   211 00000217 46                  <1> ten0rm:	inc si
   212 00000218 81F90100            <1> 	cmp cx, 1
   213 0000021C 7209                <1> 	jb tendnrm
   214 0000021E 81E90100            <1> 	sub cx, 1
   215 00000222 FE04                <1> 	inc byte [si]
   216 00000224 E9BAFF              <1> 	jmp cnvrtrm
   217                              <1> tendnrm:
   218 00000227 C3                  <1> 	ret
   219                              <1> 
   220                              <1> 
   221                              <1> 
   222                              <1> 
   223                              <1>     char: 		    ;char must be in al
   224 00000228 BB0700              <1>        mov bx, 07
   225 0000022B B40E                <1> 	   mov ah, 0Eh
   226 0000022D CD10                <1> 	   int 10h
   227 0000022F C3                  <1> 	   ret
   228                              <1> 
   229                              <1> 		shutdown:
   230 00000230 0F20C0              <1> 				mov eax, cr0
   231 00000233 24FE                <1> 				and al,0xFE     ; back to realmode
   232 00000235 0F22C0              <1> 				mov  cr0, eax   ; by toggling bit again
   233 00000238 FB                  <1> 				sti
   234 00000239 B80053              <1> 			MOV AX, 5300h	; Shuts down APM-Machines.
   235 0000023C 31DB                <1> 			XOR BX, BX	; Newer machines automatically
   236 0000023E CD15                <1> 			INT 15h		; shut down
   237 00000240 B80453              <1> 			MOV AX, 5304h
   238 00000243 31DB                <1> 			XOR BX, BX
   239 00000245 CD15                <1> 			INT 15h		; Interrupt 15h originally was
   240 00000247 B80153              <1> 			MOV AX, 5301h	; used for Cartridges (cassettes)
   241 0000024A 31DB                <1> 			XOR BX, BX	; but is still in use for
   242 0000024C CD15                <1> 			INT 15h		; diverse things
   243 0000024E B80753              <1> 			MOV AX, 5307h
   244 00000251 BB0100              <1> 			MOV BX, 1
   245 00000254 B90300              <1> 			MOV CX, 3
   246 00000257 CD15                <1> 			INT 15h
   247 00000259 CF                  <1> 			IRET
   248                              <1> 
   249                              <1> 	coldboot:
   250 0000025A 0F20C0              <1> 			   mov eax, cr0
   251 0000025D 24FE                <1> 			   and al,0xFE     ; back to realmode
   252 0000025F 0F22C0              <1> 			   mov  cr0, eax   ; by toggling bit again
   253 00000262 FB                  <1> 			   sti
   254 00000263 B84000              <1> 			MOV AX, 0040h
   255 00000266 8EC0                <1> 			MOV ES, AX
   256 00000268 26C70672000000      <1> 			MOV WORD [ES:00072h], 0h
   257 0000026F EA0000FFFF          <1> 			JMP 0FFFFh:0000h
   258 00000274 CF                  <1> 			IRET
   259                              <1> 
   260                              <1> 		warmboot:
   261 00000275 E81200              <1> 			call realmode
   262 00000278 B84000              <1> 			MOV AX, 0040h
   263 0000027B 8EC0                <1> 			MOV ES, AX
   264 0000027D 26C70672003412      <1> 			MOV WORD [ES:00072h], 01234h
   265 00000284 EA0000FFFF          <1> 			JMP 0FFFFh:0000h
   266 00000289 CF                  <1> 			IRET
   267                              <1> 
   268                              <1> 
   269                              <1> realmode:
   270 0000028A 0F20C0              <1>    mov eax, cr0
   271 0000028D 24FE                <1>    and al,0xFE     ; back to realmode
   272 0000028F 0F22C0              <1>    mov  cr0, eax   ; by toggling bit again
   273 00000292 FB                  <1>    sti
   274 00000293 6631C0              <1>    xor eax, eax
   275 00000296 C3                  <1>    ret
   276                              <1>    
   277 00000297 426F6F7420696E746F- <1> bootmsg:	db "Boot into the GUI?(y/n)",10,13,0
   278 000002A0 20746865204755493F- <1>
   279 000002A9 28792F6E290A0D00    <1>
   280                                      %include 'source/pmode.asm'
   281                              <1> [BITS 16]
   282                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   283                              <1> ;	16-bit real mode
   284                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   285                              <1> 
   286                              <1> pmode:
   287 000002B1 BA9200              <1> 	mov dx, 0x92
   288 000002B4 EC                  <1> 	in al, dx	;;A20
   289 000002B5 0C02                <1> 	or al, 2
   290 000002B7 EE                  <1> 	out dx, al
   291 000002B8 6631DB              <1> 	xor ebx, ebx
   292 000002BB 8CCB                <1> 	mov bx,cs		; EBX=segment
   293 000002BD 66C1E304            <1> 	shl ebx,4		;	<< 4
   294 000002C1 67668D03            <1> 	lea eax,[ebx]		; EAX=linear address of segment base
   295 000002C5 A3[9804]            <1> 	mov [gdt2 + 2],ax
   296 000002C8 A3[A004]            <1> 	mov [gdt3 + 2],ax
   297 000002CB 66C1E810            <1> 	shr eax,16
   298 000002CF A2[9A04]            <1> 	mov [gdt2 + 4],al
   299 000002D2 A2[A204]            <1> 	mov [gdt3 + 4],al
   300 000002D5 8826[9D04]          <1> 	mov [gdt2 + 7],ah
   301 000002D9 8826[A504]          <1> 	mov [gdt3 + 7],ah
   302                              <1> 	
   303 000002DD 66B8[00000000]      <1> 	mov eax, stack
   304 000002E3 A3[A804]            <1> 	mov [gdts + 2],ax
   305 000002E6 66C1E810            <1> 	shr eax,16
   306 000002EA A2[AA04]            <1> 	mov [gdts + 4],al
   307 000002ED 8826[AD04]          <1> 	mov [gdts + 7],ah
   308 000002F1 66A1[3504]          <1> 	mov eax, [newcodecache]
   309 000002F5 A3[B004]            <1> 	mov [gdt4 + 2],ax
   310 000002F8 A3[B804]            <1> 	mov [gdt5 + 2],ax
   311 000002FB 66C1E810            <1> 	shr eax,16
   312 000002FF A2[B204]            <1> 	mov [gdt4 + 4],al
   313 00000302 A2[BA04]            <1> 	mov [gdt5 + 4],al
   314 00000305 8826[B504]          <1> 	mov [gdt4 + 7],ah
   315 00000309 8826[BD04]          <1> 	mov [gdt5 + 7],ah
   316                              <1> 	
   317                              <1> ; fix up gdt and idt
   318 0000030D 67668D83[86040000]  <1> 	lea eax,[ebx + gdt]	; EAX=linear address of gdt
   319 00000315 66A3[7C04]          <1> 	mov [gdtr + 2],eax
   320 00000319 67668D83[BE040000]  <1> 	lea eax,[ebx + idt]	; EAX=linear address of idt
   321 00000321 66A3[8204]          <1> 	mov [idtr + 2],eax
   322 00000325 FA                  <1> 	cli
   323 00000326 0F0116[7A04]        <1> 	lgdt [gdtr]
   324 0000032B 0F011E[8004]        <1> 	lidt [idtr]
   325 00000330 6631DB              <1> 	xor ebx, ebx
   326 00000333 8CDB                <1> 	mov bx, ds
   327 00000335 66891E[3104]        <1> 	mov [basecache], ebx
   328 0000033A 0F20C0              <1> 	mov eax,cr0
   329 0000033D 0C01                <1> 	or al,1
   330 0000033F 0F22C0              <1> 	mov cr0,eax
   331 00000342 EA[4B03]1000        <1> 	jmp SYS_CODE_SEL:do_pm
   332                              <1> [BITS 32]
   333 00000347 90                  <1> 	nop
   334 00000348 90                  <1> 	nop
   335 00000349 90                  <1> 	nop
   336 0000034A 90                  <1> 	nop
   337                              <1> do_pm:
   338 0000034B 31C0                <1> 	xor eax, eax
   339 0000034D 66B81800            <1> 	mov ax, SYS_DATA_SEL
   340 00000351 8ED8                <1> 	mov ds,ax
   341 00000353 8ED0                <1> 	mov ss,ax	;;can switch back to STACK_SEL later
   342 00000355 BC[00100000]        <1> 	mov esp, stackend	;;can switch back to 4096 later
   343 0000035A 90                  <1> 	nop
   344 0000035B 90                  <1> 	nop
   345 0000035C 8EC0                <1> 	mov es, ax
   346 0000035E 8EE0                <1> 	mov fs, ax
   347 00000360 66B83000            <1> 	mov ax, NEW_DATA_SEL
   348 00000364 8EE8                <1> 	mov gs, ax
   349                              <1> 	
   350                              <1> copykernel:
   351 00000366 648B06              <1> 	mov eax, [fs:esi]
   352 00000369 658906              <1> 	mov [gs:esi], eax
   353 0000036C 81C604000000        <1> 	add esi, 4
   354 00000372 81FE[00000000]      <1> 	cmp esi, bssstart
   355 00000378 72EC                <1> 	jb copykernel
   356 0000037A EA[81030000]2800    <1> 	jmp NEW_CODE_SEL:done_copy
   357                              <1> 	
   358                              <1> done_copy:
   359 00000381 66B83000            <1> 	mov ax, NEW_DATA_SEL	;;these MUST be setup AFTER the kernel switches places!!!
   360 00000385 8ED8                <1> 	mov ds, ax
   361 00000387 8ED0                <1> 	mov ss, ax
   362 00000389 BC[00100000]        <1> 	mov esp, stackend
   363 0000038E 90                  <1> 	nop
   364 0000038F 90                  <1> 	nop
   365 00000390 66B83000            <1> 	mov ax, NEW_DATA_SEL
   366 00000394 8EC0                <1> 	mov es, ax
   367 00000396 8EE0                <1> 	mov fs, ax
   368 00000398 66B81800            <1> 	mov ax, SYS_DATA_SEL
   369 0000039C 8EE8                <1> 	mov gs, ax
   370                              <1> 	
   371                              <1> ;Now I will initialise the interrupt controllers and remap irq's
   372 0000039E B011                <1> 	mov al, 0x11
   373 000003A0 E620                <1> 	out 0x20, al
   374 000003A2 E6A0                <1> 	out 0xA0, al
   375 000003A4 B040                <1> 	mov al, 0x40	;interrupt for master
   376 000003A6 E621                <1> 	out 0x21, al
   377 000003A8 B048                <1> 	mov al, 0x48	;interrupt for slave
   378 000003AA E6A1                <1> 	out 0xA1, al
   379 000003AC B004                <1> 	mov al, 4
   380 000003AE E621                <1> 	out 0x21, al
   381 000003B0 B002                <1> 	mov al, 2
   382 000003B2 E6A1                <1> 	out 0xA1, al
   383 000003B4 B001                <1> 	mov al, 0x1
   384 000003B6 E621                <1> 	out 0x21, al
   385 000003B8 B001                <1> 	mov al, 0x1
   386 000003BA E6A1                <1> 	out 0xA1, al
   387                              <1> 	;masks are set to zero so as not to mask
   388 000003BC 30C0                <1> 	xor al, al
   389 000003BE E621                <1> 	out 0x21, al
   390 000003C0 30C0                <1> 	xor al, al
   391 000003C2 E6A1                <1> 	out 0xA1, al
   392 000003C4 B020                <1> 	mov al, 0x20
   393 000003C6 E6A0                <1> 	out 0xA0, al
   394 000003C8 E620                <1> 	out 0x20, al
   395                              <1> 	;And now to initialize the fpu
   396 000003CA 0F20E0              <1> 	mov eax, cr4
   397 000003CD 0D00020000          <1> 	or eax, 0x200
   398 000003D2 0F22E0              <1> 	mov cr4, eax
   399 000003D5 B87F0B0000          <1> 	mov eax, 0xB7F
   400 000003DA 50                  <1> 	push eax
   401 000003DB D92C24              <1> 	fldcw [esp]
   402 000003DE 58                  <1> 	pop eax
   403 000003DF 31C0                <1> 	xor eax, eax
   404 000003E1 31C9                <1> 	xor ecx, ecx
   405                              <1> 
   406 000003E3 A1[35040000]        <1> 	mov eax, [newcodecache]
   407 000003E8 C1E804              <1> 	shr eax, 4
   408 000003EB A3[31040000]        <1> 	mov [basecache], eax
   409                              <1> 	
   410 000003F0 89C3                <1> 	mov ebx, eax
   411 000003F2 C1E304              <1> 	shl ebx, 4
   412 000003F5 8B3D[CC860000]      <1> 	mov edi, [physbaseptr]
   413 000003FB 29DF                <1> 	sub edi, ebx
   414 000003FD 893D[CC860000]      <1> 	mov [physbaseptr], edi
   415                              <1> 	
   416 00000403 BE[00000000]        <1> 	mov esi, bssstart
   417 00000408 31C0                <1> 	xor eax, eax
   418                              <1> clearkernelbuffers:
   419 0000040A 8906                <1> 	mov [esi], eax
   420 0000040C 81C604000000        <1> 	add esi, 4
   421 00000412 81FE[67A22000]      <1> 	cmp esi, bssend
   422 00000418 72F0                <1> 	jb clearkernelbuffers
   423 0000041A 803D[8C010000]01    <1> 	cmp byte [guinodo], 1
   424 00000421 7405                <1> 	je guidonot
   425 00000423 E9F24A0000          <1> 	jmp gui
   426                              <1> guidonot:
   427 00000428 E9F72A0000          <1> 	jmp os
   428                              <1> 	
   429 0000042D 00000000            <1> user2codepoint dw 0,0
   430 00000431 00000000            <1> basecache dd 0
   431 00000435 00001000            <1> newcodecache dd 0x100000
   432                              <1> 
   433                              <1> ;surekillmsg db 10,13,"Kill this application?",10,13,0
   434                              <1> 
   435                              <1> timerinterrupt:
   436 00000439 803D[1C6D0000]01    <1> 	cmp byte [threadson], 1
   437 00000440 7505                <1> 	jne userinterrupt
   438 00000442 E9926E0000          <1> 	jmp threadswitch
   439                              <1> userinterrupt:		;checks for escape, if pressed, it quits the program currently running
   440 00000447 FA                  <1> 	cli
   441 00000448 803D[1C6D0000]00    <1> 	cmp byte [threadson], 0
   442 0000044F 0F8418000000        <1> 	je near handled3
   443 00000455 60                  <1> 	pusha
   444 00000456 E460                <1> 	in al, 60h
   445 00000458 3C01                <1> 	cmp al, 1		;escape
   446 0000045A 7405                <1> 	je userint
   447 0000045C E90B000000          <1> 	jmp handled2
   448                              <1> userint:
   449 00000461 B020                <1> 	mov al, 0x20
   450 00000463 E620                <1> 	out 0x20, al
   451 00000465 61                  <1> 	popa
   452 00000466 FB                  <1> 	sti
   453 00000467 E9EE2B0000          <1> 	jmp nwcmd
   454                              <1> handled2:
   455 0000046C 61                  <1> 	popa
   456                              <1> handled3:
   457 0000046D FB                  <1> 	sti
   458                              <1> handled:
   459 0000046E 50                  <1> 	push eax
   460 0000046F B020                <1> 	mov al, 0x20
   461 00000471 E620                <1> 	out 0x20, al
   462 00000473 58                  <1> 	pop eax
   463 00000474 CF                  <1> 	iret
   464 00000475 E9FBFFFFFF          <1> 	jmp $
   465                              <1> [BITS 16]
   466                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   467                              <1> ;	16-bit limit/32-bit linear base address of GDT and IDT
   468                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   469 0000047A 3700                <1> gdtr:	dw gdt_end - gdt - 1	; GDT limit
   470 0000047C 00000000            <1> 	dd 0    		; filled with linear, physical address of GDT
   471                              <1> 
   472 00000480 FF07                <1> idtr:	dw idt_end - idt - 1	; IDT limit
   473 00000482 00000000            <1> 	dd 0			; filled with linear, physical address of IDT
   474                              <1> 
   475                              <1> 
   476 00000486 0000                <1> gdt:	dw 0			; limit 15:0
   477 00000488 0000                <1> 	dw 0			; base 15:0
   478 0000048A 00                  <1> 	db 0			; base 23:16
   479 0000048B 00                  <1> 	db 0			; type
   480 0000048C 00                  <1> 	db 0			; limit 19:16, flags
   481 0000048D 00                  <1> 	db 0			; base 31:24
   482                              <1> ; linear data segment descriptor
   483                              <1> LINEAR_SEL	equ	$-gdt
   484 0000048E FFFF                <1> 	dw 0xFFFF		; limit 0xFFFFF
   485 00000490 0000                <1> 	dw 0			; base for this one is always 0
   486 00000492 00                  <1> 	db 0
   487 00000493 92                  <1> 	db 0x92			; present, ring 0, data, expand-up, writable
   488 00000494 CF                  <1> 	db 0xCF			; page-granular, 32-bit
   489 00000495 00                  <1> 	db 0
   490                              <1> ; code segment descriptor
   491                              <1> SYS_CODE_SEL	equ	$-gdt
   492 00000496 FFFF                <1> gdt2:	dw 0xFFFF
   493 00000498 0000                <1> 	dw 0			; (base gets set above)
   494 0000049A 00                  <1> 	db 0
   495 0000049B 9A                  <1> 	db 0x9A			; present, ring 0, code, non-conforming, readable
   496 0000049C CF                  <1> 	db 0xCF
   497 0000049D 00                  <1> 	db 0
   498                              <1> ; data segment descriptor
   499                              <1> SYS_DATA_SEL	equ	$-gdt
   500 0000049E FFFF                <1> gdt3:	dw 0xFFFF
   501 000004A0 0000                <1> 	dw 0			; (base gets set above)
   502 000004A2 00                  <1> 	db 0
   503 000004A3 92                  <1> 	db 0x92			; present, ring 0, data, expand-up, writable
   504 000004A4 CF                  <1> 	db 0xCF
   505 000004A5 00                  <1> 	db 0
   506                              <1> STACK_SEL	equ	$-gdt	;;this is no longer used for various reasons
   507 000004A6 0100                <1> gdts:	dw 1
   508 000004A8 0000                <1> 	dw 0			; (base gets set above)
   509 000004AA 00                  <1> 	db 0
   510 000004AB 92                  <1> 	db 0x92			; present, ring 0, data, expand-up, writable
   511 000004AC C0                  <1> 	db 0xC0
   512 000004AD 00                  <1> 	db 0
   513                              <1> NEW_CODE_SEL	equ	$-gdt
   514 000004AE FFFF                <1> gdt4:	dw 0xFFFF
   515 000004B0 0000                <1> 	dw 0			; (base gets set above)
   516 000004B2 00                  <1> 	db 0
   517 000004B3 9A                  <1> 	db 0x9A			; present, ring 0, code, non-conforming, readable
   518 000004B4 CF                  <1> 	db 0xCF
   519 000004B5 00                  <1> 	db 0
   520                              <1> ; data segment descriptor
   521                              <1> NEW_DATA_SEL	equ	$-gdt
   522 000004B6 FFFF                <1> gdt5:	dw 0xFFFF
   523 000004B8 0000                <1> 	dw 0			; (base gets set above)
   524 000004BA 00                  <1> 	db 0
   525 000004BB 92                  <1> 	db 0x92			; present, ring 0, data, expand-up, writable
   526 000004BC CF                  <1> 	db 0xCF
   527 000004BD 00                  <1> 	db 0
   528                              <1> gdt_end:
   529                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   530                              <1> ;	interrupt descriptor table (IDT)
   531                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   532                              <1> ; 32 reserved interrupts:
   533                              <1> idt:	
   534                              <1> %assign i 0
   535                              <1> %rep    33
   536                              <1> 		dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   537                              <1> %assign i i+1
   538                              <1> %endrep
   539 000004BE [BE0C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   540                              <2> %assign i i+1
   541 000004C6 [CB0C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   542                              <2> %assign i i+1
   543 000004CE [D80C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   544                              <2> %assign i i+1
   545 000004D6 [E50C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   546                              <2> %assign i i+1
   547 000004DE [F20C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   548                              <2> %assign i i+1
   549 000004E6 [FF0C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   550                              <2> %assign i i+1
   551 000004EE [0C0D]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   552                              <2> %assign i i+1
   553 000004F6 [190D]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   554                              <2> %assign i i+1
   555 000004FE [260D]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   556                              <2> %assign i i+1
   557 00000506 [330D]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   558                              <2> %assign i i+1
   559 0000050E [400D]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   560                              <2> %assign i i+1
   561 00000516 [4D0D]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   562                              <2> %assign i i+1
   563 0000051E [5A0D]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   564                              <2> %assign i i+1
   565 00000526 [670D]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   566                              <2> %assign i i+1
   567 0000052E [740D]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   568                              <2> %assign i i+1
   569 00000536 [810D]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   570                              <2> %assign i i+1
   571 0000053E [8E0D]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   572                              <2> %assign i i+1
   573 00000546 [9B0D]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   574                              <2> %assign i i+1
   575 0000054E [A80D]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   576                              <2> %assign i i+1
   577 00000556 [B50D]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   578                              <2> %assign i i+1
   579 0000055E [C20D]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   580                              <2> %assign i i+1
   581 00000566 [CF0D]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   582                              <2> %assign i i+1
   583 0000056E [DC0D]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   584                              <2> %assign i i+1
   585 00000576 [E90D]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   586                              <2> %assign i i+1
   587 0000057E [F60D]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   588                              <2> %assign i i+1
   589 00000586 [030E]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   590                              <2> %assign i i+1
   591 0000058E [100E]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   592                              <2> %assign i i+1
   593 00000596 [1D0E]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   594                              <2> %assign i i+1
   595 0000059E [2A0E]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   596                              <2> %assign i i+1
   597 000005A6 [370E]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   598                              <2> %assign i i+1
   599 000005AE [440E]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   600                              <2> %assign i i+1
   601 000005B6 [510E]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   602                              <2> %assign i i+1
   603 000005BE [5E0E]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   604                              <2> %assign i i+1
   605                              <1> 		;dw handled,NEW_CODE_SEL,0x8E00,0
   606 000005C6 [4B2E]2800008E0000  <1> 		dw int21h,NEW_CODE_SEL,0x8E00,0
   607                              <1> %assign i 0x22
   608                              <1> %rep 14
   609                              <1> 		dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   610                              <1> 		;dw handled,NEW_CODE_SEL,0x8E00,0
   611                              <1> %assign i +1
   612                              <1> %endrep
   613 000005CE [780E]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   614                              <2> 
   615                              <2> %assign i +1
   616 000005D6 [CB0C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   617                              <2> 
   618                              <2> %assign i +1
   619 000005DE [CB0C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   620                              <2> 
   621                              <2> %assign i +1
   622 000005E6 [CB0C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   623                              <2> 
   624                              <2> %assign i +1
   625 000005EE [CB0C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   626                              <2> 
   627                              <2> %assign i +1
   628 000005F6 [CB0C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   629                              <2> 
   630                              <2> %assign i +1
   631 000005FE [CB0C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   632                              <2> 
   633                              <2> %assign i +1
   634 00000606 [CB0C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   635                              <2> 
   636                              <2> %assign i +1
   637 0000060E [CB0C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   638                              <2> 
   639                              <2> %assign i +1
   640 00000616 [CB0C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   641                              <2> 
   642                              <2> %assign i +1
   643 0000061E [CB0C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   644                              <2> 
   645                              <2> %assign i +1
   646 00000626 [CB0C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   647                              <2> 
   648                              <2> %assign i +1
   649 0000062E [CB0C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   650                              <2> 
   651                              <2> %assign i +1
   652 00000636 [CB0C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   653                              <2> 
   654                              <2> %assign i +1
   655                              <1> ;INT 30h for os use and 3rd party use:
   656 0000063E [E126]2800008E0000  <1> 		dw newints,NEW_CODE_SEL,0x8E00,0
   657                              <1> ;here are all the irq's
   658                              <1> %assign i 0x31
   659                              <1> %rep 15
   660                              <1> 		dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   661                              <1> 		;dw handled,NEW_CODE_SEL,0x8E00,0
   662                              <1> %assign i +1
   663                              <1> %endrep
   664 00000646 [3B0F]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   665                              <2> 
   666                              <2> %assign i +1
   667 0000064E [CB0C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   668                              <2> 
   669                              <2> %assign i +1
   670 00000656 [CB0C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   671                              <2> 
   672                              <2> %assign i +1
   673 0000065E [CB0C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   674                              <2> 
   675                              <2> %assign i +1
   676 00000666 [CB0C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   677                              <2> 
   678                              <2> %assign i +1
   679 0000066E [CB0C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   680                              <2> 
   681                              <2> %assign i +1
   682 00000676 [CB0C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   683                              <2> 
   684                              <2> %assign i +1
   685 0000067E [CB0C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   686                              <2> 
   687                              <2> %assign i +1
   688 00000686 [CB0C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   689                              <2> 
   690                              <2> %assign i +1
   691 0000068E [CB0C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   692                              <2> 
   693                              <2> %assign i +1
   694 00000696 [CB0C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   695                              <2> 
   696                              <2> %assign i +1
   697 0000069E [CB0C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   698                              <2> 
   699                              <2> %assign i +1
   700 000006A6 [CB0C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   701                              <2> 
   702                              <2> %assign i +1
   703 000006AE [CB0C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   704                              <2> 
   705                              <2> %assign i +1
   706 000006B6 [CB0C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   707                              <2> 
   708                              <2> %assign i +1
   709 000006BE [3904]2800008E0000  <1> 		dw timerinterrupt,NEW_CODE_SEL,0x8E00,0
   710 000006C6 [4704]2800008E0000  <1> 		dw userinterrupt,NEW_CODE_SEL,0x8E00,0
   711                              <1> ;%assign i 0x42
   712                              <1> %rep 14
   713                              <1> 		;dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   714                              <1> 		dw handled,NEW_CODE_SEL,0x8E00,0
   715                              <1> ;%assign i +1
   716                              <1> %endrep
   717                              <2> 
   718 000006CE [6E04]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   719                              <2> 
   720                              <2> 
   721 000006D6 [6E04]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   722                              <2> 
   723                              <2> 
   724 000006DE [6E04]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   725                              <2> 
   726                              <2> 
   727 000006E6 [6E04]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   728                              <2> 
   729                              <2> 
   730 000006EE [6E04]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   731                              <2> 
   732                              <2> 
   733 000006F6 [6E04]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   734                              <2> 
   735                              <2> 
   736 000006FE [6E04]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   737                              <2> 
   738                              <2> 
   739 00000706 [6E04]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   740                              <2> 
   741                              <2> 
   742 0000070E [6E04]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   743                              <2> 
   744                              <2> 
   745 00000716 [6E04]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   746                              <2> 
   747                              <2> 
   748 0000071E [6E04]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   749                              <2> 
   750                              <2> 
   751 00000726 [6E04]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   752                              <2> 
   753                              <2> 
   754 0000072E [6E04]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   755                              <2> 
   756                              <2> 
   757 00000736 [6E04]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   758                              <2> 
   759                              <1> ;This brings me up to something
   760                              <1> %assign i 0x50
   761                              <1> %rep 176
   762                              <1> 		dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   763                              <1> 		;dw handled,NEW_CODE_SEL,0x8E00,0
   764                              <1> %assign i +1
   765                              <1> %endrep
   766 0000073E [CE10]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   767                              <2> 
   768                              <2> %assign i +1
   769 00000746 [CB0C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   770                              <2> 
   771                              <2> %assign i +1
   772 0000074E [CB0C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   773                              <2> 
   774                              <2> %assign i +1
   775 00000756 [CB0C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   776                              <2> 
   777                              <2> %assign i +1
   778 0000075E [CB0C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   779                              <2> 
   780                              <2> %assign i +1
   781 00000766 [CB0C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   782                              <2> 
   783                              <2> %assign i +1
   784 0000076E [CB0C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   785                              <2> 
   786                              <2> %assign i +1
   787 00000776 [CB0C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   788                              <2> 
   789                              <2> %assign i +1
   790 0000077E [CB0C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   791                              <2> 
   792                              <2> %assign i +1
   793 00000786 [CB0C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   794                              <2> 
   795                              <2> %assign i +1
   796 0000078E [CB0C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   797                              <2> 
   798                              <2> %assign i +1
   799 00000796 [CB0C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   800                              <2> 
   801                              <2> %assign i +1
   802 0000079E [CB0C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   803                              <2> 
   804                              <2> %assign i +1
   805 000007A6 [CB0C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   806                              <2> 
   807                              <2> %assign i +1
   808 000007AE [CB0C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   809                              <2> 
   810                              <2> %assign i +1
   811 000007B6 [CB0C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   812                              <2> 
   813                              <2> %assign i +1
   814 000007BE [CB0C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   815                              <2> 
   816                              <2> %assign i +1
   817 000007C6 [CB0C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   818                              <2> 
   819                              <2> %assign i +1
   820 000007CE [CB0C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   821                              <2> 
   822                              <2> %assign i +1
   823 000007D6 [CB0C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   824                              <2> 
   825                              <2> %assign i +1
   826 000007DE [CB0C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   827                              <2> 
   828                              <2> %assign i +1
   829 000007E6 [CB0C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   830                              <2> 
   831                              <2> %assign i +1
   832 000007EE [CB0C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   833                              <2> 
   834                              <2> %assign i +1
   835 000007F6 [CB0C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   836                              <2> 
   837                              <2> %assign i +1
   838 000007FE [CB0C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   839                              <2> 
   840                              <2> %assign i +1
   841 00000806 [CB0C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   842                              <2> 
   843                              <2> %assign i +1
   844 0000080E [CB0C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   845                              <2> 
   846                              <2> %assign i +1
   847 00000816 [CB0C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   848                              <2> 
   849                              <2> %assign i +1
   850 0000081E [CB0C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   851                              <2> 
   852                              <2> %assign i +1
   853 00000826 [CB0C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   854                              <2> 
   855                              <2> %assign i +1
   856 0000082E [CB0C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   857                              <2> 
   858                              <2> %assign i +1
   859 00000836 [CB0C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   860                              <2> 
   861                              <2> %assign i +1
   862 0000083E [CB0C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   863                              <2> 
   864                              <2> %assign i +1
   865 00000846 [CB0C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   866                              <2> 
   867                              <2> %assign i +1
   868 0000084E [CB0C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   869                              <2> 
   870                              <2> %assign i +1
   871 00000856 [CB0C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   872                              <2> 
   873                              <2> %assign i +1
   874 0000085E [CB0C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   875                              <2> 
   876                              <2> %assign i +1
   877 00000866 [CB0C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   878                              <2> 
   879                              <2> %assign i +1
   880 0000086E [CB0C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   881                              <2> 
   882                              <2> %assign i +1
   883 00000876 [CB0C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   884                              <2> 
   885                              <2> %assign i +1
   886 0000087E [CB0C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   887                              <2> 
   888                              <2> %assign i +1
   889 00000886 [CB0C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   890                              <2> 
   891                              <2> %assign i +1
   892 0000088E [CB0C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   893                              <2> 
   894                              <2> %assign i +1
   895 00000896 [CB0C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   896                              <2> 
   897                              <2> %assign i +1
   898 0000089E [CB0C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   899                              <2> 
   900                              <2> %assign i +1
   901 000008A6 [CB0C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   902                              <2> 
   903                              <2> %assign i +1
   904 000008AE [CB0C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   905                              <2> 
   906                              <2> %assign i +1
   907 000008B6 [CB0C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   908                              <2> 
   909                              <2> %assign i +1
   910 000008BE [CB0C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   911                              <2> 
   912                              <2> %assign i +1
   913 000008C6 [CB0C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   914                              <2> 
   915                              <2> %assign i +1
   916 000008CE [CB0C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   917                              <2> 
   918                              <2> %assign i +1
   919 000008D6 [CB0C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   920                              <2> 
   921                              <2> %assign i +1
   922 000008DE [CB0C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   923                              <2> 
   924                              <2> %assign i +1
   925 000008E6 [CB0C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   926                              <2> 
   927                              <2> %assign i +1
   928 000008EE [CB0C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   929                              <2> 
   930                              <2> %assign i +1
   931 000008F6 [CB0C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   932                              <2> 
   933                              <2> %assign i +1
   934 000008FE [CB0C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   935                              <2> 
   936                              <2> %assign i +1
   937 00000906 [CB0C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   938                              <2> 
   939                              <2> %assign i +1
   940 0000090E [CB0C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   941                              <2> 
   942                              <2> %assign i +1
   943 00000916 [CB0C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   944                              <2> 
   945                              <2> %assign i +1
   946 0000091E [CB0C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   947                              <2> 
   948                              <2> %assign i +1
   949 00000926 [CB0C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   950                              <2> 
   951                              <2> %assign i +1
   952 0000092E [CB0C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   953                              <2> 
   954                              <2> %assign i +1
   955 00000936 [CB0C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   956                              <2> 
   957                              <2> %assign i +1
   958 0000093E [CB0C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   959                              <2> 
   960                              <2> %assign i +1
   961 00000946 [CB0C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   962                              <2> 
   963                              <2> %assign i +1
   964 0000094E [CB0C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   965                              <2> 
   966                              <2> %assign i +1
   967 00000956 [CB0C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   968                              <2> 
   969                              <2> %assign i +1
   970 0000095E [CB0C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   971                              <2> 
   972                              <2> %assign i +1
   973 00000966 [CB0C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   974                              <2> 
   975                              <2> %assign i +1
   976 0000096E [CB0C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   977                              <2> 
   978                              <2> %assign i +1
   979 00000976 [CB0C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   980                              <2> 
   981                              <2> %assign i +1
   982 0000097E [CB0C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   983                              <2> 
   984                              <2> %assign i +1
   985 00000986 [CB0C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   986                              <2> 
   987                              <2> %assign i +1
   988 0000098E [CB0C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   989                              <2> 
   990                              <2> %assign i +1
   991 00000996 [CB0C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   992                              <2> 
   993                              <2> %assign i +1
   994 0000099E [CB0C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   995                              <2> 
   996                              <2> %assign i +1
   997 000009A6 [CB0C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   998                              <2> 
   999                              <2> %assign i +1
  1000 000009AE [CB0C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1001                              <2> 
  1002                              <2> %assign i +1
  1003 000009B6 [CB0C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1004                              <2> 
  1005                              <2> %assign i +1
  1006 000009BE [CB0C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1007                              <2> 
  1008                              <2> %assign i +1
  1009 000009C6 [CB0C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1010                              <2> 
  1011                              <2> %assign i +1
  1012 000009CE [CB0C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1013                              <2> 
  1014                              <2> %assign i +1
  1015 000009D6 [CB0C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1016                              <2> 
  1017                              <2> %assign i +1
  1018 000009DE [CB0C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1019                              <2> 
  1020                              <2> %assign i +1
  1021 000009E6 [CB0C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1022                              <2> 
  1023                              <2> %assign i +1
  1024 000009EE [CB0C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1025                              <2> 
  1026                              <2> %assign i +1
  1027 000009F6 [CB0C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1028                              <2> 
  1029                              <2> %assign i +1
  1030 000009FE [CB0C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1031                              <2> 
  1032                              <2> %assign i +1
  1033 00000A06 [CB0C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1034                              <2> 
  1035                              <2> %assign i +1
  1036 00000A0E [CB0C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1037                              <2> 
  1038                              <2> %assign i +1
  1039 00000A16 [CB0C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1040                              <2> 
  1041                              <2> %assign i +1
  1042 00000A1E [CB0C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1043                              <2> 
  1044                              <2> %assign i +1
  1045 00000A26 [CB0C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1046                              <2> 
  1047                              <2> %assign i +1
  1048 00000A2E [CB0C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1049                              <2> 
  1050                              <2> %assign i +1
  1051 00000A36 [CB0C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1052                              <2> 
  1053                              <2> %assign i +1
  1054 00000A3E [CB0C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1055                              <2> 
  1056                              <2> %assign i +1
  1057 00000A46 [CB0C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1058                              <2> 
  1059                              <2> %assign i +1
  1060 00000A4E [CB0C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1061                              <2> 
  1062                              <2> %assign i +1
  1063 00000A56 [CB0C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1064                              <2> 
  1065                              <2> %assign i +1
  1066 00000A5E [CB0C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1067                              <2> 
  1068                              <2> %assign i +1
  1069 00000A66 [CB0C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1070                              <2> 
  1071                              <2> %assign i +1
  1072 00000A6E [CB0C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1073                              <2> 
  1074                              <2> %assign i +1
  1075 00000A76 [CB0C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1076                              <2> 
  1077                              <2> %assign i +1
  1078 00000A7E [CB0C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1079                              <2> 
  1080                              <2> %assign i +1
  1081 00000A86 [CB0C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1082                              <2> 
  1083                              <2> %assign i +1
  1084 00000A8E [CB0C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1085                              <2> 
  1086                              <2> %assign i +1
  1087 00000A96 [CB0C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1088                              <2> 
  1089                              <2> %assign i +1
  1090 00000A9E [CB0C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1091                              <2> 
  1092                              <2> %assign i +1
  1093 00000AA6 [CB0C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1094                              <2> 
  1095                              <2> %assign i +1
  1096 00000AAE [CB0C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1097                              <2> 
  1098                              <2> %assign i +1
  1099 00000AB6 [CB0C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1100                              <2> 
  1101                              <2> %assign i +1
  1102 00000ABE [CB0C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1103                              <2> 
  1104                              <2> %assign i +1
  1105 00000AC6 [CB0C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1106                              <2> 
  1107                              <2> %assign i +1
  1108 00000ACE [CB0C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1109                              <2> 
  1110                              <2> %assign i +1
  1111 00000AD6 [CB0C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1112                              <2> 
  1113                              <2> %assign i +1
  1114 00000ADE [CB0C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1115                              <2> 
  1116                              <2> %assign i +1
  1117 00000AE6 [CB0C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1118                              <2> 
  1119                              <2> %assign i +1
  1120 00000AEE [CB0C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1121                              <2> 
  1122                              <2> %assign i +1
  1123 00000AF6 [CB0C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1124                              <2> 
  1125                              <2> %assign i +1
  1126 00000AFE [CB0C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1127                              <2> 
  1128                              <2> %assign i +1
  1129 00000B06 [CB0C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1130                              <2> 
  1131                              <2> %assign i +1
  1132 00000B0E [CB0C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1133                              <2> 
  1134                              <2> %assign i +1
  1135 00000B16 [CB0C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1136                              <2> 
  1137                              <2> %assign i +1
  1138 00000B1E [CB0C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1139                              <2> 
  1140                              <2> %assign i +1
  1141 00000B26 [CB0C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1142                              <2> 
  1143                              <2> %assign i +1
  1144 00000B2E [CB0C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1145                              <2> 
  1146                              <2> %assign i +1
  1147 00000B36 [CB0C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1148                              <2> 
  1149                              <2> %assign i +1
  1150 00000B3E [CB0C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1151                              <2> 
  1152                              <2> %assign i +1
  1153 00000B46 [CB0C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1154                              <2> 
  1155                              <2> %assign i +1
  1156 00000B4E [CB0C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1157                              <2> 
  1158                              <2> %assign i +1
  1159 00000B56 [CB0C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1160                              <2> 
  1161                              <2> %assign i +1
  1162 00000B5E [CB0C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1163                              <2> 
  1164                              <2> %assign i +1
  1165 00000B66 [CB0C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1166                              <2> 
  1167                              <2> %assign i +1
  1168 00000B6E [CB0C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1169                              <2> 
  1170                              <2> %assign i +1
  1171 00000B76 [CB0C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1172                              <2> 
  1173                              <2> %assign i +1
  1174 00000B7E [CB0C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1175                              <2> 
  1176                              <2> %assign i +1
  1177 00000B86 [CB0C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1178                              <2> 
  1179                              <2> %assign i +1
  1180 00000B8E [CB0C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1181                              <2> 
  1182                              <2> %assign i +1
  1183 00000B96 [CB0C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1184                              <2> 
  1185                              <2> %assign i +1
  1186 00000B9E [CB0C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1187                              <2> 
  1188                              <2> %assign i +1
  1189 00000BA6 [CB0C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1190                              <2> 
  1191                              <2> %assign i +1
  1192 00000BAE [CB0C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1193                              <2> 
  1194                              <2> %assign i +1
  1195 00000BB6 [CB0C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1196                              <2> 
  1197                              <2> %assign i +1
  1198 00000BBE [CB0C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1199                              <2> 
  1200                              <2> %assign i +1
  1201 00000BC6 [CB0C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1202                              <2> 
  1203                              <2> %assign i +1
  1204 00000BCE [CB0C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1205                              <2> 
  1206                              <2> %assign i +1
  1207 00000BD6 [CB0C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1208                              <2> 
  1209                              <2> %assign i +1
  1210 00000BDE [CB0C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1211                              <2> 
  1212                              <2> %assign i +1
  1213 00000BE6 [CB0C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1214                              <2> 
  1215                              <2> %assign i +1
  1216 00000BEE [CB0C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1217                              <2> 
  1218                              <2> %assign i +1
  1219 00000BF6 [CB0C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1220                              <2> 
  1221                              <2> %assign i +1
  1222 00000BFE [CB0C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1223                              <2> 
  1224                              <2> %assign i +1
  1225 00000C06 [CB0C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1226                              <2> 
  1227                              <2> %assign i +1
  1228 00000C0E [CB0C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1229                              <2> 
  1230                              <2> %assign i +1
  1231 00000C16 [CB0C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1232                              <2> 
  1233                              <2> %assign i +1
  1234 00000C1E [CB0C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1235                              <2> 
  1236                              <2> %assign i +1
  1237 00000C26 [CB0C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1238                              <2> 
  1239                              <2> %assign i +1
  1240 00000C2E [CB0C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1241                              <2> 
  1242                              <2> %assign i +1
  1243 00000C36 [CB0C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1244                              <2> 
  1245                              <2> %assign i +1
  1246 00000C3E [CB0C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1247                              <2> 
  1248                              <2> %assign i +1
  1249 00000C46 [CB0C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1250                              <2> 
  1251                              <2> %assign i +1
  1252 00000C4E [CB0C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1253                              <2> 
  1254                              <2> %assign i +1
  1255 00000C56 [CB0C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1256                              <2> 
  1257                              <2> %assign i +1
  1258 00000C5E [CB0C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1259                              <2> 
  1260                              <2> %assign i +1
  1261 00000C66 [CB0C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1262                              <2> 
  1263                              <2> %assign i +1
  1264 00000C6E [CB0C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1265                              <2> 
  1266                              <2> %assign i +1
  1267 00000C76 [CB0C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1268                              <2> 
  1269                              <2> %assign i +1
  1270 00000C7E [CB0C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1271                              <2> 
  1272                              <2> %assign i +1
  1273 00000C86 [CB0C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1274                              <2> 
  1275                              <2> %assign i +1
  1276 00000C8E [CB0C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1277                              <2> 
  1278                              <2> %assign i +1
  1279 00000C96 [CB0C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1280                              <2> 
  1281                              <2> %assign i +1
  1282 00000C9E [CB0C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1283                              <2> 
  1284                              <2> %assign i +1
  1285 00000CA6 [CB0C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1286                              <2> 
  1287                              <2> %assign i +1
  1288 00000CAE [CB0C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1289                              <2> 
  1290                              <2> %assign i +1
  1291 00000CB6 [CB0C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1292                              <2> 
  1293                              <2> %assign i +1
  1294                              <1> idt_end:
  1295                              <1> [BITS 32]
  1296                                  [BITS 32]
  1297                                  	%include 'source/exception.asm'
  1298                              <1> 
  1299                              <1> unhand:	
  1300                              <1> 	%assign i 0
  1301                              <1> 	%rep 256
  1302                              <1> 	cli
  1303                              <1> 	mov byte [intprob], i
  1304                              <1> 	jmp unhand2
  1305                              <1> 	%assign i i+1
  1306                              <1> 	%endrep
  1307 00000CBE FA                  <2>  cli
  1308 00000CBF C605[BC1C0000]00    <2>  mov byte [intprob], i
  1309 00000CC6 E9F30C0000          <2>  jmp unhand2
  1310                              <2>  %assign i i+1
  1311 00000CCB FA                  <2>  cli
  1312 00000CCC C605[BC1C0000]01    <2>  mov byte [intprob], i
  1313 00000CD3 E9E60C0000          <2>  jmp unhand2
  1314                              <2>  %assign i i+1
  1315 00000CD8 FA                  <2>  cli
  1316 00000CD9 C605[BC1C0000]02    <2>  mov byte [intprob], i
  1317 00000CE0 E9D90C0000          <2>  jmp unhand2
  1318                              <2>  %assign i i+1
  1319 00000CE5 FA                  <2>  cli
  1320 00000CE6 C605[BC1C0000]03    <2>  mov byte [intprob], i
  1321 00000CED E9CC0C0000          <2>  jmp unhand2
  1322                              <2>  %assign i i+1
  1323 00000CF2 FA                  <2>  cli
  1324 00000CF3 C605[BC1C0000]04    <2>  mov byte [intprob], i
  1325 00000CFA E9BF0C0000          <2>  jmp unhand2
  1326                              <2>  %assign i i+1
  1327 00000CFF FA                  <2>  cli
  1328 00000D00 C605[BC1C0000]05    <2>  mov byte [intprob], i
  1329 00000D07 E9B20C0000          <2>  jmp unhand2
  1330                              <2>  %assign i i+1
  1331 00000D0C FA                  <2>  cli
  1332 00000D0D C605[BC1C0000]06    <2>  mov byte [intprob], i
  1333 00000D14 E9A50C0000          <2>  jmp unhand2
  1334                              <2>  %assign i i+1
  1335 00000D19 FA                  <2>  cli
  1336 00000D1A C605[BC1C0000]07    <2>  mov byte [intprob], i
  1337 00000D21 E9980C0000          <2>  jmp unhand2
  1338                              <2>  %assign i i+1
  1339 00000D26 FA                  <2>  cli
  1340 00000D27 C605[BC1C0000]08    <2>  mov byte [intprob], i
  1341 00000D2E E98B0C0000          <2>  jmp unhand2
  1342                              <2>  %assign i i+1
  1343 00000D33 FA                  <2>  cli
  1344 00000D34 C605[BC1C0000]09    <2>  mov byte [intprob], i
  1345 00000D3B E97E0C0000          <2>  jmp unhand2
  1346                              <2>  %assign i i+1
  1347 00000D40 FA                  <2>  cli
  1348 00000D41 C605[BC1C0000]0A    <2>  mov byte [intprob], i
  1349 00000D48 E9710C0000          <2>  jmp unhand2
  1350                              <2>  %assign i i+1
  1351 00000D4D FA                  <2>  cli
  1352 00000D4E C605[BC1C0000]0B    <2>  mov byte [intprob], i
  1353 00000D55 E9640C0000          <2>  jmp unhand2
  1354                              <2>  %assign i i+1
  1355 00000D5A FA                  <2>  cli
  1356 00000D5B C605[BC1C0000]0C    <2>  mov byte [intprob], i
  1357 00000D62 E9570C0000          <2>  jmp unhand2
  1358                              <2>  %assign i i+1
  1359 00000D67 FA                  <2>  cli
  1360 00000D68 C605[BC1C0000]0D    <2>  mov byte [intprob], i
  1361 00000D6F E94A0C0000          <2>  jmp unhand2
  1362                              <2>  %assign i i+1
  1363 00000D74 FA                  <2>  cli
  1364 00000D75 C605[BC1C0000]0E    <2>  mov byte [intprob], i
  1365 00000D7C E93D0C0000          <2>  jmp unhand2
  1366                              <2>  %assign i i+1
  1367 00000D81 FA                  <2>  cli
  1368 00000D82 C605[BC1C0000]0F    <2>  mov byte [intprob], i
  1369 00000D89 E9300C0000          <2>  jmp unhand2
  1370                              <2>  %assign i i+1
  1371 00000D8E FA                  <2>  cli
  1372 00000D8F C605[BC1C0000]10    <2>  mov byte [intprob], i
  1373 00000D96 E9230C0000          <2>  jmp unhand2
  1374                              <2>  %assign i i+1
  1375 00000D9B FA                  <2>  cli
  1376 00000D9C C605[BC1C0000]11    <2>  mov byte [intprob], i
  1377 00000DA3 E9160C0000          <2>  jmp unhand2
  1378                              <2>  %assign i i+1
  1379 00000DA8 FA                  <2>  cli
  1380 00000DA9 C605[BC1C0000]12    <2>  mov byte [intprob], i
  1381 00000DB0 E9090C0000          <2>  jmp unhand2
  1382                              <2>  %assign i i+1
  1383 00000DB5 FA                  <2>  cli
  1384 00000DB6 C605[BC1C0000]13    <2>  mov byte [intprob], i
  1385 00000DBD E9FC0B0000          <2>  jmp unhand2
  1386                              <2>  %assign i i+1
  1387 00000DC2 FA                  <2>  cli
  1388 00000DC3 C605[BC1C0000]14    <2>  mov byte [intprob], i
  1389 00000DCA E9EF0B0000          <2>  jmp unhand2
  1390                              <2>  %assign i i+1
  1391 00000DCF FA                  <2>  cli
  1392 00000DD0 C605[BC1C0000]15    <2>  mov byte [intprob], i
  1393 00000DD7 E9E20B0000          <2>  jmp unhand2
  1394                              <2>  %assign i i+1
  1395 00000DDC FA                  <2>  cli
  1396 00000DDD C605[BC1C0000]16    <2>  mov byte [intprob], i
  1397 00000DE4 E9D50B0000          <2>  jmp unhand2
  1398                              <2>  %assign i i+1
  1399 00000DE9 FA                  <2>  cli
  1400 00000DEA C605[BC1C0000]17    <2>  mov byte [intprob], i
  1401 00000DF1 E9C80B0000          <2>  jmp unhand2
  1402                              <2>  %assign i i+1
  1403 00000DF6 FA                  <2>  cli
  1404 00000DF7 C605[BC1C0000]18    <2>  mov byte [intprob], i
  1405 00000DFE E9BB0B0000          <2>  jmp unhand2
  1406                              <2>  %assign i i+1
  1407 00000E03 FA                  <2>  cli
  1408 00000E04 C605[BC1C0000]19    <2>  mov byte [intprob], i
  1409 00000E0B E9AE0B0000          <2>  jmp unhand2
  1410                              <2>  %assign i i+1
  1411 00000E10 FA                  <2>  cli
  1412 00000E11 C605[BC1C0000]1A    <2>  mov byte [intprob], i
  1413 00000E18 E9A10B0000          <2>  jmp unhand2
  1414                              <2>  %assign i i+1
  1415 00000E1D FA                  <2>  cli
  1416 00000E1E C605[BC1C0000]1B    <2>  mov byte [intprob], i
  1417 00000E25 E9940B0000          <2>  jmp unhand2
  1418                              <2>  %assign i i+1
  1419 00000E2A FA                  <2>  cli
  1420 00000E2B C605[BC1C0000]1C    <2>  mov byte [intprob], i
  1421 00000E32 E9870B0000          <2>  jmp unhand2
  1422                              <2>  %assign i i+1
  1423 00000E37 FA                  <2>  cli
  1424 00000E38 C605[BC1C0000]1D    <2>  mov byte [intprob], i
  1425 00000E3F E97A0B0000          <2>  jmp unhand2
  1426                              <2>  %assign i i+1
  1427 00000E44 FA                  <2>  cli
  1428 00000E45 C605[BC1C0000]1E    <2>  mov byte [intprob], i
  1429 00000E4C E96D0B0000          <2>  jmp unhand2
  1430                              <2>  %assign i i+1
  1431 00000E51 FA                  <2>  cli
  1432 00000E52 C605[BC1C0000]1F    <2>  mov byte [intprob], i
  1433 00000E59 E9600B0000          <2>  jmp unhand2
  1434                              <2>  %assign i i+1
  1435 00000E5E FA                  <2>  cli
  1436 00000E5F C605[BC1C0000]20    <2>  mov byte [intprob], i
  1437 00000E66 E9530B0000          <2>  jmp unhand2
  1438                              <2>  %assign i i+1
  1439 00000E6B FA                  <2>  cli
  1440 00000E6C C605[BC1C0000]21    <2>  mov byte [intprob], i
  1441 00000E73 E9460B0000          <2>  jmp unhand2
  1442                              <2>  %assign i i+1
  1443 00000E78 FA                  <2>  cli
  1444 00000E79 C605[BC1C0000]22    <2>  mov byte [intprob], i
  1445 00000E80 E9390B0000          <2>  jmp unhand2
  1446                              <2>  %assign i i+1
  1447 00000E85 FA                  <2>  cli
  1448 00000E86 C605[BC1C0000]23    <2>  mov byte [intprob], i
  1449 00000E8D E92C0B0000          <2>  jmp unhand2
  1450                              <2>  %assign i i+1
  1451 00000E92 FA                  <2>  cli
  1452 00000E93 C605[BC1C0000]24    <2>  mov byte [intprob], i
  1453 00000E9A E91F0B0000          <2>  jmp unhand2
  1454                              <2>  %assign i i+1
  1455 00000E9F FA                  <2>  cli
  1456 00000EA0 C605[BC1C0000]25    <2>  mov byte [intprob], i
  1457 00000EA7 E9120B0000          <2>  jmp unhand2
  1458                              <2>  %assign i i+1
  1459 00000EAC FA                  <2>  cli
  1460 00000EAD C605[BC1C0000]26    <2>  mov byte [intprob], i
  1461 00000EB4 E9050B0000          <2>  jmp unhand2
  1462                              <2>  %assign i i+1
  1463 00000EB9 FA                  <2>  cli
  1464 00000EBA C605[BC1C0000]27    <2>  mov byte [intprob], i
  1465 00000EC1 E9F80A0000          <2>  jmp unhand2
  1466                              <2>  %assign i i+1
  1467 00000EC6 FA                  <2>  cli
  1468 00000EC7 C605[BC1C0000]28    <2>  mov byte [intprob], i
  1469 00000ECE E9EB0A0000          <2>  jmp unhand2
  1470                              <2>  %assign i i+1
  1471 00000ED3 FA                  <2>  cli
  1472 00000ED4 C605[BC1C0000]29    <2>  mov byte [intprob], i
  1473 00000EDB E9DE0A0000          <2>  jmp unhand2
  1474                              <2>  %assign i i+1
  1475 00000EE0 FA                  <2>  cli
  1476 00000EE1 C605[BC1C0000]2A    <2>  mov byte [intprob], i
  1477 00000EE8 E9D10A0000          <2>  jmp unhand2
  1478                              <2>  %assign i i+1
  1479 00000EED FA                  <2>  cli
  1480 00000EEE C605[BC1C0000]2B    <2>  mov byte [intprob], i
  1481 00000EF5 E9C40A0000          <2>  jmp unhand2
  1482                              <2>  %assign i i+1
  1483 00000EFA FA                  <2>  cli
  1484 00000EFB C605[BC1C0000]2C    <2>  mov byte [intprob], i
  1485 00000F02 E9B70A0000          <2>  jmp unhand2
  1486                              <2>  %assign i i+1
  1487 00000F07 FA                  <2>  cli
  1488 00000F08 C605[BC1C0000]2D    <2>  mov byte [intprob], i
  1489 00000F0F E9AA0A0000          <2>  jmp unhand2
  1490                              <2>  %assign i i+1
  1491 00000F14 FA                  <2>  cli
  1492 00000F15 C605[BC1C0000]2E    <2>  mov byte [intprob], i
  1493 00000F1C E99D0A0000          <2>  jmp unhand2
  1494                              <2>  %assign i i+1
  1495 00000F21 FA                  <2>  cli
  1496 00000F22 C605[BC1C0000]2F    <2>  mov byte [intprob], i
  1497 00000F29 E9900A0000          <2>  jmp unhand2
  1498                              <2>  %assign i i+1
  1499 00000F2E FA                  <2>  cli
  1500 00000F2F C605[BC1C0000]30    <2>  mov byte [intprob], i
  1501 00000F36 E9830A0000          <2>  jmp unhand2
  1502                              <2>  %assign i i+1
  1503 00000F3B FA                  <2>  cli
  1504 00000F3C C605[BC1C0000]31    <2>  mov byte [intprob], i
  1505 00000F43 E9760A0000          <2>  jmp unhand2
  1506                              <2>  %assign i i+1
  1507 00000F48 FA                  <2>  cli
  1508 00000F49 C605[BC1C0000]32    <2>  mov byte [intprob], i
  1509 00000F50 E9690A0000          <2>  jmp unhand2
  1510                              <2>  %assign i i+1
  1511 00000F55 FA                  <2>  cli
  1512 00000F56 C605[BC1C0000]33    <2>  mov byte [intprob], i
  1513 00000F5D E95C0A0000          <2>  jmp unhand2
  1514                              <2>  %assign i i+1
  1515 00000F62 FA                  <2>  cli
  1516 00000F63 C605[BC1C0000]34    <2>  mov byte [intprob], i
  1517 00000F6A E94F0A0000          <2>  jmp unhand2
  1518                              <2>  %assign i i+1
  1519 00000F6F FA                  <2>  cli
  1520 00000F70 C605[BC1C0000]35    <2>  mov byte [intprob], i
  1521 00000F77 E9420A0000          <2>  jmp unhand2
  1522                              <2>  %assign i i+1
  1523 00000F7C FA                  <2>  cli
  1524 00000F7D C605[BC1C0000]36    <2>  mov byte [intprob], i
  1525 00000F84 E9350A0000          <2>  jmp unhand2
  1526                              <2>  %assign i i+1
  1527 00000F89 FA                  <2>  cli
  1528 00000F8A C605[BC1C0000]37    <2>  mov byte [intprob], i
  1529 00000F91 E9280A0000          <2>  jmp unhand2
  1530                              <2>  %assign i i+1
  1531 00000F96 FA                  <2>  cli
  1532 00000F97 C605[BC1C0000]38    <2>  mov byte [intprob], i
  1533 00000F9E E91B0A0000          <2>  jmp unhand2
  1534                              <2>  %assign i i+1
  1535 00000FA3 FA                  <2>  cli
  1536 00000FA4 C605[BC1C0000]39    <2>  mov byte [intprob], i
  1537 00000FAB E90E0A0000          <2>  jmp unhand2
  1538                              <2>  %assign i i+1
  1539 00000FB0 FA                  <2>  cli
  1540 00000FB1 C605[BC1C0000]3A    <2>  mov byte [intprob], i
  1541 00000FB8 E9010A0000          <2>  jmp unhand2
  1542                              <2>  %assign i i+1
  1543 00000FBD FA                  <2>  cli
  1544 00000FBE C605[BC1C0000]3B    <2>  mov byte [intprob], i
  1545 00000FC5 E9F4090000          <2>  jmp unhand2
  1546                              <2>  %assign i i+1
  1547 00000FCA FA                  <2>  cli
  1548 00000FCB C605[BC1C0000]3C    <2>  mov byte [intprob], i
  1549 00000FD2 E9E7090000          <2>  jmp unhand2
  1550                              <2>  %assign i i+1
  1551 00000FD7 FA                  <2>  cli
  1552 00000FD8 C605[BC1C0000]3D    <2>  mov byte [intprob], i
  1553 00000FDF E9DA090000          <2>  jmp unhand2
  1554                              <2>  %assign i i+1
  1555 00000FE4 FA                  <2>  cli
  1556 00000FE5 C605[BC1C0000]3E    <2>  mov byte [intprob], i
  1557 00000FEC E9CD090000          <2>  jmp unhand2
  1558                              <2>  %assign i i+1
  1559 00000FF1 FA                  <2>  cli
  1560 00000FF2 C605[BC1C0000]3F    <2>  mov byte [intprob], i
  1561 00000FF9 E9C0090000          <2>  jmp unhand2
  1562                              <2>  %assign i i+1
  1563 00000FFE FA                  <2>  cli
  1564 00000FFF C605[BC1C0000]40    <2>  mov byte [intprob], i
  1565 00001006 E9B3090000          <2>  jmp unhand2
  1566                              <2>  %assign i i+1
  1567 0000100B FA                  <2>  cli
  1568 0000100C C605[BC1C0000]41    <2>  mov byte [intprob], i
  1569 00001013 E9A6090000          <2>  jmp unhand2
  1570                              <2>  %assign i i+1
  1571 00001018 FA                  <2>  cli
  1572 00001019 C605[BC1C0000]42    <2>  mov byte [intprob], i
  1573 00001020 E999090000          <2>  jmp unhand2
  1574                              <2>  %assign i i+1
  1575 00001025 FA                  <2>  cli
  1576 00001026 C605[BC1C0000]43    <2>  mov byte [intprob], i
  1577 0000102D E98C090000          <2>  jmp unhand2
  1578                              <2>  %assign i i+1
  1579 00001032 FA                  <2>  cli
  1580 00001033 C605[BC1C0000]44    <2>  mov byte [intprob], i
  1581 0000103A E97F090000          <2>  jmp unhand2
  1582                              <2>  %assign i i+1
  1583 0000103F FA                  <2>  cli
  1584 00001040 C605[BC1C0000]45    <2>  mov byte [intprob], i
  1585 00001047 E972090000          <2>  jmp unhand2
  1586                              <2>  %assign i i+1
  1587 0000104C FA                  <2>  cli
  1588 0000104D C605[BC1C0000]46    <2>  mov byte [intprob], i
  1589 00001054 E965090000          <2>  jmp unhand2
  1590                              <2>  %assign i i+1
  1591 00001059 FA                  <2>  cli
  1592 0000105A C605[BC1C0000]47    <2>  mov byte [intprob], i
  1593 00001061 E958090000          <2>  jmp unhand2
  1594                              <2>  %assign i i+1
  1595 00001066 FA                  <2>  cli
  1596 00001067 C605[BC1C0000]48    <2>  mov byte [intprob], i
  1597 0000106E E94B090000          <2>  jmp unhand2
  1598                              <2>  %assign i i+1
  1599 00001073 FA                  <2>  cli
  1600 00001074 C605[BC1C0000]49    <2>  mov byte [intprob], i
  1601 0000107B E93E090000          <2>  jmp unhand2
  1602                              <2>  %assign i i+1
  1603 00001080 FA                  <2>  cli
  1604 00001081 C605[BC1C0000]4A    <2>  mov byte [intprob], i
  1605 00001088 E931090000          <2>  jmp unhand2
  1606                              <2>  %assign i i+1
  1607 0000108D FA                  <2>  cli
  1608 0000108E C605[BC1C0000]4B    <2>  mov byte [intprob], i
  1609 00001095 E924090000          <2>  jmp unhand2
  1610                              <2>  %assign i i+1
  1611 0000109A FA                  <2>  cli
  1612 0000109B C605[BC1C0000]4C    <2>  mov byte [intprob], i
  1613 000010A2 E917090000          <2>  jmp unhand2
  1614                              <2>  %assign i i+1
  1615 000010A7 FA                  <2>  cli
  1616 000010A8 C605[BC1C0000]4D    <2>  mov byte [intprob], i
  1617 000010AF E90A090000          <2>  jmp unhand2
  1618                              <2>  %assign i i+1
  1619 000010B4 FA                  <2>  cli
  1620 000010B5 C605[BC1C0000]4E    <2>  mov byte [intprob], i
  1621 000010BC E9FD080000          <2>  jmp unhand2
  1622                              <2>  %assign i i+1
  1623 000010C1 FA                  <2>  cli
  1624 000010C2 C605[BC1C0000]4F    <2>  mov byte [intprob], i
  1625 000010C9 E9F0080000          <2>  jmp unhand2
  1626                              <2>  %assign i i+1
  1627 000010CE FA                  <2>  cli
  1628 000010CF C605[BC1C0000]50    <2>  mov byte [intprob], i
  1629 000010D6 E9E3080000          <2>  jmp unhand2
  1630                              <2>  %assign i i+1
  1631 000010DB FA                  <2>  cli
  1632 000010DC C605[BC1C0000]51    <2>  mov byte [intprob], i
  1633 000010E3 E9D6080000          <2>  jmp unhand2
  1634                              <2>  %assign i i+1
  1635 000010E8 FA                  <2>  cli
  1636 000010E9 C605[BC1C0000]52    <2>  mov byte [intprob], i
  1637 000010F0 E9C9080000          <2>  jmp unhand2
  1638                              <2>  %assign i i+1
  1639 000010F5 FA                  <2>  cli
  1640 000010F6 C605[BC1C0000]53    <2>  mov byte [intprob], i
  1641 000010FD E9BC080000          <2>  jmp unhand2
  1642                              <2>  %assign i i+1
  1643 00001102 FA                  <2>  cli
  1644 00001103 C605[BC1C0000]54    <2>  mov byte [intprob], i
  1645 0000110A E9AF080000          <2>  jmp unhand2
  1646                              <2>  %assign i i+1
  1647 0000110F FA                  <2>  cli
  1648 00001110 C605[BC1C0000]55    <2>  mov byte [intprob], i
  1649 00001117 E9A2080000          <2>  jmp unhand2
  1650                              <2>  %assign i i+1
  1651 0000111C FA                  <2>  cli
  1652 0000111D C605[BC1C0000]56    <2>  mov byte [intprob], i
  1653 00001124 E995080000          <2>  jmp unhand2
  1654                              <2>  %assign i i+1
  1655 00001129 FA                  <2>  cli
  1656 0000112A C605[BC1C0000]57    <2>  mov byte [intprob], i
  1657 00001131 E988080000          <2>  jmp unhand2
  1658                              <2>  %assign i i+1
  1659 00001136 FA                  <2>  cli
  1660 00001137 C605[BC1C0000]58    <2>  mov byte [intprob], i
  1661 0000113E E97B080000          <2>  jmp unhand2
  1662                              <2>  %assign i i+1
  1663 00001143 FA                  <2>  cli
  1664 00001144 C605[BC1C0000]59    <2>  mov byte [intprob], i
  1665 0000114B E96E080000          <2>  jmp unhand2
  1666                              <2>  %assign i i+1
  1667 00001150 FA                  <2>  cli
  1668 00001151 C605[BC1C0000]5A    <2>  mov byte [intprob], i
  1669 00001158 E961080000          <2>  jmp unhand2
  1670                              <2>  %assign i i+1
  1671 0000115D FA                  <2>  cli
  1672 0000115E C605[BC1C0000]5B    <2>  mov byte [intprob], i
  1673 00001165 E954080000          <2>  jmp unhand2
  1674                              <2>  %assign i i+1
  1675 0000116A FA                  <2>  cli
  1676 0000116B C605[BC1C0000]5C    <2>  mov byte [intprob], i
  1677 00001172 E947080000          <2>  jmp unhand2
  1678                              <2>  %assign i i+1
  1679 00001177 FA                  <2>  cli
  1680 00001178 C605[BC1C0000]5D    <2>  mov byte [intprob], i
  1681 0000117F E93A080000          <2>  jmp unhand2
  1682                              <2>  %assign i i+1
  1683 00001184 FA                  <2>  cli
  1684 00001185 C605[BC1C0000]5E    <2>  mov byte [intprob], i
  1685 0000118C E92D080000          <2>  jmp unhand2
  1686                              <2>  %assign i i+1
  1687 00001191 FA                  <2>  cli
  1688 00001192 C605[BC1C0000]5F    <2>  mov byte [intprob], i
  1689 00001199 E920080000          <2>  jmp unhand2
  1690                              <2>  %assign i i+1
  1691 0000119E FA                  <2>  cli
  1692 0000119F C605[BC1C0000]60    <2>  mov byte [intprob], i
  1693 000011A6 E913080000          <2>  jmp unhand2
  1694                              <2>  %assign i i+1
  1695 000011AB FA                  <2>  cli
  1696 000011AC C605[BC1C0000]61    <2>  mov byte [intprob], i
  1697 000011B3 E906080000          <2>  jmp unhand2
  1698                              <2>  %assign i i+1
  1699 000011B8 FA                  <2>  cli
  1700 000011B9 C605[BC1C0000]62    <2>  mov byte [intprob], i
  1701 000011C0 E9F9070000          <2>  jmp unhand2
  1702                              <2>  %assign i i+1
  1703 000011C5 FA                  <2>  cli
  1704 000011C6 C605[BC1C0000]63    <2>  mov byte [intprob], i
  1705 000011CD E9EC070000          <2>  jmp unhand2
  1706                              <2>  %assign i i+1
  1707 000011D2 FA                  <2>  cli
  1708 000011D3 C605[BC1C0000]64    <2>  mov byte [intprob], i
  1709 000011DA E9DF070000          <2>  jmp unhand2
  1710                              <2>  %assign i i+1
  1711 000011DF FA                  <2>  cli
  1712 000011E0 C605[BC1C0000]65    <2>  mov byte [intprob], i
  1713 000011E7 E9D2070000          <2>  jmp unhand2
  1714                              <2>  %assign i i+1
  1715 000011EC FA                  <2>  cli
  1716 000011ED C605[BC1C0000]66    <2>  mov byte [intprob], i
  1717 000011F4 E9C5070000          <2>  jmp unhand2
  1718                              <2>  %assign i i+1
  1719 000011F9 FA                  <2>  cli
  1720 000011FA C605[BC1C0000]67    <2>  mov byte [intprob], i
  1721 00001201 E9B8070000          <2>  jmp unhand2
  1722                              <2>  %assign i i+1
  1723 00001206 FA                  <2>  cli
  1724 00001207 C605[BC1C0000]68    <2>  mov byte [intprob], i
  1725 0000120E E9AB070000          <2>  jmp unhand2
  1726                              <2>  %assign i i+1
  1727 00001213 FA                  <2>  cli
  1728 00001214 C605[BC1C0000]69    <2>  mov byte [intprob], i
  1729 0000121B E99E070000          <2>  jmp unhand2
  1730                              <2>  %assign i i+1
  1731 00001220 FA                  <2>  cli
  1732 00001221 C605[BC1C0000]6A    <2>  mov byte [intprob], i
  1733 00001228 E991070000          <2>  jmp unhand2
  1734                              <2>  %assign i i+1
  1735 0000122D FA                  <2>  cli
  1736 0000122E C605[BC1C0000]6B    <2>  mov byte [intprob], i
  1737 00001235 E984070000          <2>  jmp unhand2
  1738                              <2>  %assign i i+1
  1739 0000123A FA                  <2>  cli
  1740 0000123B C605[BC1C0000]6C    <2>  mov byte [intprob], i
  1741 00001242 E977070000          <2>  jmp unhand2
  1742                              <2>  %assign i i+1
  1743 00001247 FA                  <2>  cli
  1744 00001248 C605[BC1C0000]6D    <2>  mov byte [intprob], i
  1745 0000124F E96A070000          <2>  jmp unhand2
  1746                              <2>  %assign i i+1
  1747 00001254 FA                  <2>  cli
  1748 00001255 C605[BC1C0000]6E    <2>  mov byte [intprob], i
  1749 0000125C E95D070000          <2>  jmp unhand2
  1750                              <2>  %assign i i+1
  1751 00001261 FA                  <2>  cli
  1752 00001262 C605[BC1C0000]6F    <2>  mov byte [intprob], i
  1753 00001269 E950070000          <2>  jmp unhand2
  1754                              <2>  %assign i i+1
  1755 0000126E FA                  <2>  cli
  1756 0000126F C605[BC1C0000]70    <2>  mov byte [intprob], i
  1757 00001276 E943070000          <2>  jmp unhand2
  1758                              <2>  %assign i i+1
  1759 0000127B FA                  <2>  cli
  1760 0000127C C605[BC1C0000]71    <2>  mov byte [intprob], i
  1761 00001283 E936070000          <2>  jmp unhand2
  1762                              <2>  %assign i i+1
  1763 00001288 FA                  <2>  cli
  1764 00001289 C605[BC1C0000]72    <2>  mov byte [intprob], i
  1765 00001290 E929070000          <2>  jmp unhand2
  1766                              <2>  %assign i i+1
  1767 00001295 FA                  <2>  cli
  1768 00001296 C605[BC1C0000]73    <2>  mov byte [intprob], i
  1769 0000129D E91C070000          <2>  jmp unhand2
  1770                              <2>  %assign i i+1
  1771 000012A2 FA                  <2>  cli
  1772 000012A3 C605[BC1C0000]74    <2>  mov byte [intprob], i
  1773 000012AA E90F070000          <2>  jmp unhand2
  1774                              <2>  %assign i i+1
  1775 000012AF FA                  <2>  cli
  1776 000012B0 C605[BC1C0000]75    <2>  mov byte [intprob], i
  1777 000012B7 E902070000          <2>  jmp unhand2
  1778                              <2>  %assign i i+1
  1779 000012BC FA                  <2>  cli
  1780 000012BD C605[BC1C0000]76    <2>  mov byte [intprob], i
  1781 000012C4 E9F5060000          <2>  jmp unhand2
  1782                              <2>  %assign i i+1
  1783 000012C9 FA                  <2>  cli
  1784 000012CA C605[BC1C0000]77    <2>  mov byte [intprob], i
  1785 000012D1 E9E8060000          <2>  jmp unhand2
  1786                              <2>  %assign i i+1
  1787 000012D6 FA                  <2>  cli
  1788 000012D7 C605[BC1C0000]78    <2>  mov byte [intprob], i
  1789 000012DE E9DB060000          <2>  jmp unhand2
  1790                              <2>  %assign i i+1
  1791 000012E3 FA                  <2>  cli
  1792 000012E4 C605[BC1C0000]79    <2>  mov byte [intprob], i
  1793 000012EB E9CE060000          <2>  jmp unhand2
  1794                              <2>  %assign i i+1
  1795 000012F0 FA                  <2>  cli
  1796 000012F1 C605[BC1C0000]7A    <2>  mov byte [intprob], i
  1797 000012F8 E9C1060000          <2>  jmp unhand2
  1798                              <2>  %assign i i+1
  1799 000012FD FA                  <2>  cli
  1800 000012FE C605[BC1C0000]7B    <2>  mov byte [intprob], i
  1801 00001305 E9B4060000          <2>  jmp unhand2
  1802                              <2>  %assign i i+1
  1803 0000130A FA                  <2>  cli
  1804 0000130B C605[BC1C0000]7C    <2>  mov byte [intprob], i
  1805 00001312 E9A7060000          <2>  jmp unhand2
  1806                              <2>  %assign i i+1
  1807 00001317 FA                  <2>  cli
  1808 00001318 C605[BC1C0000]7D    <2>  mov byte [intprob], i
  1809 0000131F E99A060000          <2>  jmp unhand2
  1810                              <2>  %assign i i+1
  1811 00001324 FA                  <2>  cli
  1812 00001325 C605[BC1C0000]7E    <2>  mov byte [intprob], i
  1813 0000132C E98D060000          <2>  jmp unhand2
  1814                              <2>  %assign i i+1
  1815 00001331 FA                  <2>  cli
  1816 00001332 C605[BC1C0000]7F    <2>  mov byte [intprob], i
  1817 00001339 E980060000          <2>  jmp unhand2
  1818                              <2>  %assign i i+1
  1819 0000133E FA                  <2>  cli
  1820 0000133F C605[BC1C0000]80    <2>  mov byte [intprob], i
  1821 00001346 E973060000          <2>  jmp unhand2
  1822                              <2>  %assign i i+1
  1823 0000134B FA                  <2>  cli
  1824 0000134C C605[BC1C0000]81    <2>  mov byte [intprob], i
  1825 00001353 E966060000          <2>  jmp unhand2
  1826                              <2>  %assign i i+1
  1827 00001358 FA                  <2>  cli
  1828 00001359 C605[BC1C0000]82    <2>  mov byte [intprob], i
  1829 00001360 E959060000          <2>  jmp unhand2
  1830                              <2>  %assign i i+1
  1831 00001365 FA                  <2>  cli
  1832 00001366 C605[BC1C0000]83    <2>  mov byte [intprob], i
  1833 0000136D E94C060000          <2>  jmp unhand2
  1834                              <2>  %assign i i+1
  1835 00001372 FA                  <2>  cli
  1836 00001373 C605[BC1C0000]84    <2>  mov byte [intprob], i
  1837 0000137A E93F060000          <2>  jmp unhand2
  1838                              <2>  %assign i i+1
  1839 0000137F FA                  <2>  cli
  1840 00001380 C605[BC1C0000]85    <2>  mov byte [intprob], i
  1841 00001387 E932060000          <2>  jmp unhand2
  1842                              <2>  %assign i i+1
  1843 0000138C FA                  <2>  cli
  1844 0000138D C605[BC1C0000]86    <2>  mov byte [intprob], i
  1845 00001394 E925060000          <2>  jmp unhand2
  1846                              <2>  %assign i i+1
  1847 00001399 FA                  <2>  cli
  1848 0000139A C605[BC1C0000]87    <2>  mov byte [intprob], i
  1849 000013A1 E918060000          <2>  jmp unhand2
  1850                              <2>  %assign i i+1
  1851 000013A6 FA                  <2>  cli
  1852 000013A7 C605[BC1C0000]88    <2>  mov byte [intprob], i
  1853 000013AE E90B060000          <2>  jmp unhand2
  1854                              <2>  %assign i i+1
  1855 000013B3 FA                  <2>  cli
  1856 000013B4 C605[BC1C0000]89    <2>  mov byte [intprob], i
  1857 000013BB E9FE050000          <2>  jmp unhand2
  1858                              <2>  %assign i i+1
  1859 000013C0 FA                  <2>  cli
  1860 000013C1 C605[BC1C0000]8A    <2>  mov byte [intprob], i
  1861 000013C8 E9F1050000          <2>  jmp unhand2
  1862                              <2>  %assign i i+1
  1863 000013CD FA                  <2>  cli
  1864 000013CE C605[BC1C0000]8B    <2>  mov byte [intprob], i
  1865 000013D5 E9E4050000          <2>  jmp unhand2
  1866                              <2>  %assign i i+1
  1867 000013DA FA                  <2>  cli
  1868 000013DB C605[BC1C0000]8C    <2>  mov byte [intprob], i
  1869 000013E2 E9D7050000          <2>  jmp unhand2
  1870                              <2>  %assign i i+1
  1871 000013E7 FA                  <2>  cli
  1872 000013E8 C605[BC1C0000]8D    <2>  mov byte [intprob], i
  1873 000013EF E9CA050000          <2>  jmp unhand2
  1874                              <2>  %assign i i+1
  1875 000013F4 FA                  <2>  cli
  1876 000013F5 C605[BC1C0000]8E    <2>  mov byte [intprob], i
  1877 000013FC E9BD050000          <2>  jmp unhand2
  1878                              <2>  %assign i i+1
  1879 00001401 FA                  <2>  cli
  1880 00001402 C605[BC1C0000]8F    <2>  mov byte [intprob], i
  1881 00001409 E9B0050000          <2>  jmp unhand2
  1882                              <2>  %assign i i+1
  1883 0000140E FA                  <2>  cli
  1884 0000140F C605[BC1C0000]90    <2>  mov byte [intprob], i
  1885 00001416 E9A3050000          <2>  jmp unhand2
  1886                              <2>  %assign i i+1
  1887 0000141B FA                  <2>  cli
  1888 0000141C C605[BC1C0000]91    <2>  mov byte [intprob], i
  1889 00001423 E996050000          <2>  jmp unhand2
  1890                              <2>  %assign i i+1
  1891 00001428 FA                  <2>  cli
  1892 00001429 C605[BC1C0000]92    <2>  mov byte [intprob], i
  1893 00001430 E989050000          <2>  jmp unhand2
  1894                              <2>  %assign i i+1
  1895 00001435 FA                  <2>  cli
  1896 00001436 C605[BC1C0000]93    <2>  mov byte [intprob], i
  1897 0000143D E97C050000          <2>  jmp unhand2
  1898                              <2>  %assign i i+1
  1899 00001442 FA                  <2>  cli
  1900 00001443 C605[BC1C0000]94    <2>  mov byte [intprob], i
  1901 0000144A E96F050000          <2>  jmp unhand2
  1902                              <2>  %assign i i+1
  1903 0000144F FA                  <2>  cli
  1904 00001450 C605[BC1C0000]95    <2>  mov byte [intprob], i
  1905 00001457 E962050000          <2>  jmp unhand2
  1906                              <2>  %assign i i+1
  1907 0000145C FA                  <2>  cli
  1908 0000145D C605[BC1C0000]96    <2>  mov byte [intprob], i
  1909 00001464 E955050000          <2>  jmp unhand2
  1910                              <2>  %assign i i+1
  1911 00001469 FA                  <2>  cli
  1912 0000146A C605[BC1C0000]97    <2>  mov byte [intprob], i
  1913 00001471 E948050000          <2>  jmp unhand2
  1914                              <2>  %assign i i+1
  1915 00001476 FA                  <2>  cli
  1916 00001477 C605[BC1C0000]98    <2>  mov byte [intprob], i
  1917 0000147E E93B050000          <2>  jmp unhand2
  1918                              <2>  %assign i i+1
  1919 00001483 FA                  <2>  cli
  1920 00001484 C605[BC1C0000]99    <2>  mov byte [intprob], i
  1921 0000148B E92E050000          <2>  jmp unhand2
  1922                              <2>  %assign i i+1
  1923 00001490 FA                  <2>  cli
  1924 00001491 C605[BC1C0000]9A    <2>  mov byte [intprob], i
  1925 00001498 E921050000          <2>  jmp unhand2
  1926                              <2>  %assign i i+1
  1927 0000149D FA                  <2>  cli
  1928 0000149E C605[BC1C0000]9B    <2>  mov byte [intprob], i
  1929 000014A5 E914050000          <2>  jmp unhand2
  1930                              <2>  %assign i i+1
  1931 000014AA FA                  <2>  cli
  1932 000014AB C605[BC1C0000]9C    <2>  mov byte [intprob], i
  1933 000014B2 E907050000          <2>  jmp unhand2
  1934                              <2>  %assign i i+1
  1935 000014B7 FA                  <2>  cli
  1936 000014B8 C605[BC1C0000]9D    <2>  mov byte [intprob], i
  1937 000014BF E9FA040000          <2>  jmp unhand2
  1938                              <2>  %assign i i+1
  1939 000014C4 FA                  <2>  cli
  1940 000014C5 C605[BC1C0000]9E    <2>  mov byte [intprob], i
  1941 000014CC E9ED040000          <2>  jmp unhand2
  1942                              <2>  %assign i i+1
  1943 000014D1 FA                  <2>  cli
  1944 000014D2 C605[BC1C0000]9F    <2>  mov byte [intprob], i
  1945 000014D9 E9E0040000          <2>  jmp unhand2
  1946                              <2>  %assign i i+1
  1947 000014DE FA                  <2>  cli
  1948 000014DF C605[BC1C0000]A0    <2>  mov byte [intprob], i
  1949 000014E6 E9D3040000          <2>  jmp unhand2
  1950                              <2>  %assign i i+1
  1951 000014EB FA                  <2>  cli
  1952 000014EC C605[BC1C0000]A1    <2>  mov byte [intprob], i
  1953 000014F3 E9C6040000          <2>  jmp unhand2
  1954                              <2>  %assign i i+1
  1955 000014F8 FA                  <2>  cli
  1956 000014F9 C605[BC1C0000]A2    <2>  mov byte [intprob], i
  1957 00001500 E9B9040000          <2>  jmp unhand2
  1958                              <2>  %assign i i+1
  1959 00001505 FA                  <2>  cli
  1960 00001506 C605[BC1C0000]A3    <2>  mov byte [intprob], i
  1961 0000150D E9AC040000          <2>  jmp unhand2
  1962                              <2>  %assign i i+1
  1963 00001512 FA                  <2>  cli
  1964 00001513 C605[BC1C0000]A4    <2>  mov byte [intprob], i
  1965 0000151A E99F040000          <2>  jmp unhand2
  1966                              <2>  %assign i i+1
  1967 0000151F FA                  <2>  cli
  1968 00001520 C605[BC1C0000]A5    <2>  mov byte [intprob], i
  1969 00001527 E992040000          <2>  jmp unhand2
  1970                              <2>  %assign i i+1
  1971 0000152C FA                  <2>  cli
  1972 0000152D C605[BC1C0000]A6    <2>  mov byte [intprob], i
  1973 00001534 E985040000          <2>  jmp unhand2
  1974                              <2>  %assign i i+1
  1975 00001539 FA                  <2>  cli
  1976 0000153A C605[BC1C0000]A7    <2>  mov byte [intprob], i
  1977 00001541 E978040000          <2>  jmp unhand2
  1978                              <2>  %assign i i+1
  1979 00001546 FA                  <2>  cli
  1980 00001547 C605[BC1C0000]A8    <2>  mov byte [intprob], i
  1981 0000154E E96B040000          <2>  jmp unhand2
  1982                              <2>  %assign i i+1
  1983 00001553 FA                  <2>  cli
  1984 00001554 C605[BC1C0000]A9    <2>  mov byte [intprob], i
  1985 0000155B E95E040000          <2>  jmp unhand2
  1986                              <2>  %assign i i+1
  1987 00001560 FA                  <2>  cli
  1988 00001561 C605[BC1C0000]AA    <2>  mov byte [intprob], i
  1989 00001568 E951040000          <2>  jmp unhand2
  1990                              <2>  %assign i i+1
  1991 0000156D FA                  <2>  cli
  1992 0000156E C605[BC1C0000]AB    <2>  mov byte [intprob], i
  1993 00001575 E944040000          <2>  jmp unhand2
  1994                              <2>  %assign i i+1
  1995 0000157A FA                  <2>  cli
  1996 0000157B C605[BC1C0000]AC    <2>  mov byte [intprob], i
  1997 00001582 E937040000          <2>  jmp unhand2
  1998                              <2>  %assign i i+1
  1999 00001587 FA                  <2>  cli
  2000 00001588 C605[BC1C0000]AD    <2>  mov byte [intprob], i
  2001 0000158F E92A040000          <2>  jmp unhand2
  2002                              <2>  %assign i i+1
  2003 00001594 FA                  <2>  cli
  2004 00001595 C605[BC1C0000]AE    <2>  mov byte [intprob], i
  2005 0000159C E91D040000          <2>  jmp unhand2
  2006                              <2>  %assign i i+1
  2007 000015A1 FA                  <2>  cli
  2008 000015A2 C605[BC1C0000]AF    <2>  mov byte [intprob], i
  2009 000015A9 E910040000          <2>  jmp unhand2
  2010                              <2>  %assign i i+1
  2011 000015AE FA                  <2>  cli
  2012 000015AF C605[BC1C0000]B0    <2>  mov byte [intprob], i
  2013 000015B6 E903040000          <2>  jmp unhand2
  2014                              <2>  %assign i i+1
  2015 000015BB FA                  <2>  cli
  2016 000015BC C605[BC1C0000]B1    <2>  mov byte [intprob], i
  2017 000015C3 E9F6030000          <2>  jmp unhand2
  2018                              <2>  %assign i i+1
  2019 000015C8 FA                  <2>  cli
  2020 000015C9 C605[BC1C0000]B2    <2>  mov byte [intprob], i
  2021 000015D0 E9E9030000          <2>  jmp unhand2
  2022                              <2>  %assign i i+1
  2023 000015D5 FA                  <2>  cli
  2024 000015D6 C605[BC1C0000]B3    <2>  mov byte [intprob], i
  2025 000015DD E9DC030000          <2>  jmp unhand2
  2026                              <2>  %assign i i+1
  2027 000015E2 FA                  <2>  cli
  2028 000015E3 C605[BC1C0000]B4    <2>  mov byte [intprob], i
  2029 000015EA E9CF030000          <2>  jmp unhand2
  2030                              <2>  %assign i i+1
  2031 000015EF FA                  <2>  cli
  2032 000015F0 C605[BC1C0000]B5    <2>  mov byte [intprob], i
  2033 000015F7 E9C2030000          <2>  jmp unhand2
  2034                              <2>  %assign i i+1
  2035 000015FC FA                  <2>  cli
  2036 000015FD C605[BC1C0000]B6    <2>  mov byte [intprob], i
  2037 00001604 E9B5030000          <2>  jmp unhand2
  2038                              <2>  %assign i i+1
  2039 00001609 FA                  <2>  cli
  2040 0000160A C605[BC1C0000]B7    <2>  mov byte [intprob], i
  2041 00001611 E9A8030000          <2>  jmp unhand2
  2042                              <2>  %assign i i+1
  2043 00001616 FA                  <2>  cli
  2044 00001617 C605[BC1C0000]B8    <2>  mov byte [intprob], i
  2045 0000161E E99B030000          <2>  jmp unhand2
  2046                              <2>  %assign i i+1
  2047 00001623 FA                  <2>  cli
  2048 00001624 C605[BC1C0000]B9    <2>  mov byte [intprob], i
  2049 0000162B E98E030000          <2>  jmp unhand2
  2050                              <2>  %assign i i+1
  2051 00001630 FA                  <2>  cli
  2052 00001631 C605[BC1C0000]BA    <2>  mov byte [intprob], i
  2053 00001638 E981030000          <2>  jmp unhand2
  2054                              <2>  %assign i i+1
  2055 0000163D FA                  <2>  cli
  2056 0000163E C605[BC1C0000]BB    <2>  mov byte [intprob], i
  2057 00001645 E974030000          <2>  jmp unhand2
  2058                              <2>  %assign i i+1
  2059 0000164A FA                  <2>  cli
  2060 0000164B C605[BC1C0000]BC    <2>  mov byte [intprob], i
  2061 00001652 E967030000          <2>  jmp unhand2
  2062                              <2>  %assign i i+1
  2063 00001657 FA                  <2>  cli
  2064 00001658 C605[BC1C0000]BD    <2>  mov byte [intprob], i
  2065 0000165F E95A030000          <2>  jmp unhand2
  2066                              <2>  %assign i i+1
  2067 00001664 FA                  <2>  cli
  2068 00001665 C605[BC1C0000]BE    <2>  mov byte [intprob], i
  2069 0000166C E94D030000          <2>  jmp unhand2
  2070                              <2>  %assign i i+1
  2071 00001671 FA                  <2>  cli
  2072 00001672 C605[BC1C0000]BF    <2>  mov byte [intprob], i
  2073 00001679 E940030000          <2>  jmp unhand2
  2074                              <2>  %assign i i+1
  2075 0000167E FA                  <2>  cli
  2076 0000167F C605[BC1C0000]C0    <2>  mov byte [intprob], i
  2077 00001686 E933030000          <2>  jmp unhand2
  2078                              <2>  %assign i i+1
  2079 0000168B FA                  <2>  cli
  2080 0000168C C605[BC1C0000]C1    <2>  mov byte [intprob], i
  2081 00001693 E926030000          <2>  jmp unhand2
  2082                              <2>  %assign i i+1
  2083 00001698 FA                  <2>  cli
  2084 00001699 C605[BC1C0000]C2    <2>  mov byte [intprob], i
  2085 000016A0 E919030000          <2>  jmp unhand2
  2086                              <2>  %assign i i+1
  2087 000016A5 FA                  <2>  cli
  2088 000016A6 C605[BC1C0000]C3    <2>  mov byte [intprob], i
  2089 000016AD E90C030000          <2>  jmp unhand2
  2090                              <2>  %assign i i+1
  2091 000016B2 FA                  <2>  cli
  2092 000016B3 C605[BC1C0000]C4    <2>  mov byte [intprob], i
  2093 000016BA E9FF020000          <2>  jmp unhand2
  2094                              <2>  %assign i i+1
  2095 000016BF FA                  <2>  cli
  2096 000016C0 C605[BC1C0000]C5    <2>  mov byte [intprob], i
  2097 000016C7 E9F2020000          <2>  jmp unhand2
  2098                              <2>  %assign i i+1
  2099 000016CC FA                  <2>  cli
  2100 000016CD C605[BC1C0000]C6    <2>  mov byte [intprob], i
  2101 000016D4 E9E5020000          <2>  jmp unhand2
  2102                              <2>  %assign i i+1
  2103 000016D9 FA                  <2>  cli
  2104 000016DA C605[BC1C0000]C7    <2>  mov byte [intprob], i
  2105 000016E1 E9D8020000          <2>  jmp unhand2
  2106                              <2>  %assign i i+1
  2107 000016E6 FA                  <2>  cli
  2108 000016E7 C605[BC1C0000]C8    <2>  mov byte [intprob], i
  2109 000016EE E9CB020000          <2>  jmp unhand2
  2110                              <2>  %assign i i+1
  2111 000016F3 FA                  <2>  cli
  2112 000016F4 C605[BC1C0000]C9    <2>  mov byte [intprob], i
  2113 000016FB E9BE020000          <2>  jmp unhand2
  2114                              <2>  %assign i i+1
  2115 00001700 FA                  <2>  cli
  2116 00001701 C605[BC1C0000]CA    <2>  mov byte [intprob], i
  2117 00001708 E9B1020000          <2>  jmp unhand2
  2118                              <2>  %assign i i+1
  2119 0000170D FA                  <2>  cli
  2120 0000170E C605[BC1C0000]CB    <2>  mov byte [intprob], i
  2121 00001715 E9A4020000          <2>  jmp unhand2
  2122                              <2>  %assign i i+1
  2123 0000171A FA                  <2>  cli
  2124 0000171B C605[BC1C0000]CC    <2>  mov byte [intprob], i
  2125 00001722 E997020000          <2>  jmp unhand2
  2126                              <2>  %assign i i+1
  2127 00001727 FA                  <2>  cli
  2128 00001728 C605[BC1C0000]CD    <2>  mov byte [intprob], i
  2129 0000172F E98A020000          <2>  jmp unhand2
  2130                              <2>  %assign i i+1
  2131 00001734 FA                  <2>  cli
  2132 00001735 C605[BC1C0000]CE    <2>  mov byte [intprob], i
  2133 0000173C E97D020000          <2>  jmp unhand2
  2134                              <2>  %assign i i+1
  2135 00001741 FA                  <2>  cli
  2136 00001742 C605[BC1C0000]CF    <2>  mov byte [intprob], i
  2137 00001749 E970020000          <2>  jmp unhand2
  2138                              <2>  %assign i i+1
  2139 0000174E FA                  <2>  cli
  2140 0000174F C605[BC1C0000]D0    <2>  mov byte [intprob], i
  2141 00001756 E963020000          <2>  jmp unhand2
  2142                              <2>  %assign i i+1
  2143 0000175B FA                  <2>  cli
  2144 0000175C C605[BC1C0000]D1    <2>  mov byte [intprob], i
  2145 00001763 E956020000          <2>  jmp unhand2
  2146                              <2>  %assign i i+1
  2147 00001768 FA                  <2>  cli
  2148 00001769 C605[BC1C0000]D2    <2>  mov byte [intprob], i
  2149 00001770 E949020000          <2>  jmp unhand2
  2150                              <2>  %assign i i+1
  2151 00001775 FA                  <2>  cli
  2152 00001776 C605[BC1C0000]D3    <2>  mov byte [intprob], i
  2153 0000177D E93C020000          <2>  jmp unhand2
  2154                              <2>  %assign i i+1
  2155 00001782 FA                  <2>  cli
  2156 00001783 C605[BC1C0000]D4    <2>  mov byte [intprob], i
  2157 0000178A E92F020000          <2>  jmp unhand2
  2158                              <2>  %assign i i+1
  2159 0000178F FA                  <2>  cli
  2160 00001790 C605[BC1C0000]D5    <2>  mov byte [intprob], i
  2161 00001797 E922020000          <2>  jmp unhand2
  2162                              <2>  %assign i i+1
  2163 0000179C FA                  <2>  cli
  2164 0000179D C605[BC1C0000]D6    <2>  mov byte [intprob], i
  2165 000017A4 E915020000          <2>  jmp unhand2
  2166                              <2>  %assign i i+1
  2167 000017A9 FA                  <2>  cli
  2168 000017AA C605[BC1C0000]D7    <2>  mov byte [intprob], i
  2169 000017B1 E908020000          <2>  jmp unhand2
  2170                              <2>  %assign i i+1
  2171 000017B6 FA                  <2>  cli
  2172 000017B7 C605[BC1C0000]D8    <2>  mov byte [intprob], i
  2173 000017BE E9FB010000          <2>  jmp unhand2
  2174                              <2>  %assign i i+1
  2175 000017C3 FA                  <2>  cli
  2176 000017C4 C605[BC1C0000]D9    <2>  mov byte [intprob], i
  2177 000017CB E9EE010000          <2>  jmp unhand2
  2178                              <2>  %assign i i+1
  2179 000017D0 FA                  <2>  cli
  2180 000017D1 C605[BC1C0000]DA    <2>  mov byte [intprob], i
  2181 000017D8 E9E1010000          <2>  jmp unhand2
  2182                              <2>  %assign i i+1
  2183 000017DD FA                  <2>  cli
  2184 000017DE C605[BC1C0000]DB    <2>  mov byte [intprob], i
  2185 000017E5 E9D4010000          <2>  jmp unhand2
  2186                              <2>  %assign i i+1
  2187 000017EA FA                  <2>  cli
  2188 000017EB C605[BC1C0000]DC    <2>  mov byte [intprob], i
  2189 000017F2 E9C7010000          <2>  jmp unhand2
  2190                              <2>  %assign i i+1
  2191 000017F7 FA                  <2>  cli
  2192 000017F8 C605[BC1C0000]DD    <2>  mov byte [intprob], i
  2193 000017FF E9BA010000          <2>  jmp unhand2
  2194                              <2>  %assign i i+1
  2195 00001804 FA                  <2>  cli
  2196 00001805 C605[BC1C0000]DE    <2>  mov byte [intprob], i
  2197 0000180C E9AD010000          <2>  jmp unhand2
  2198                              <2>  %assign i i+1
  2199 00001811 FA                  <2>  cli
  2200 00001812 C605[BC1C0000]DF    <2>  mov byte [intprob], i
  2201 00001819 E9A0010000          <2>  jmp unhand2
  2202                              <2>  %assign i i+1
  2203 0000181E FA                  <2>  cli
  2204 0000181F C605[BC1C0000]E0    <2>  mov byte [intprob], i
  2205 00001826 E993010000          <2>  jmp unhand2
  2206                              <2>  %assign i i+1
  2207 0000182B FA                  <2>  cli
  2208 0000182C C605[BC1C0000]E1    <2>  mov byte [intprob], i
  2209 00001833 E986010000          <2>  jmp unhand2
  2210                              <2>  %assign i i+1
  2211 00001838 FA                  <2>  cli
  2212 00001839 C605[BC1C0000]E2    <2>  mov byte [intprob], i
  2213 00001840 E979010000          <2>  jmp unhand2
  2214                              <2>  %assign i i+1
  2215 00001845 FA                  <2>  cli
  2216 00001846 C605[BC1C0000]E3    <2>  mov byte [intprob], i
  2217 0000184D E96C010000          <2>  jmp unhand2
  2218                              <2>  %assign i i+1
  2219 00001852 FA                  <2>  cli
  2220 00001853 C605[BC1C0000]E4    <2>  mov byte [intprob], i
  2221 0000185A E95F010000          <2>  jmp unhand2
  2222                              <2>  %assign i i+1
  2223 0000185F FA                  <2>  cli
  2224 00001860 C605[BC1C0000]E5    <2>  mov byte [intprob], i
  2225 00001867 E952010000          <2>  jmp unhand2
  2226                              <2>  %assign i i+1
  2227 0000186C FA                  <2>  cli
  2228 0000186D C605[BC1C0000]E6    <2>  mov byte [intprob], i
  2229 00001874 E945010000          <2>  jmp unhand2
  2230                              <2>  %assign i i+1
  2231 00001879 FA                  <2>  cli
  2232 0000187A C605[BC1C0000]E7    <2>  mov byte [intprob], i
  2233 00001881 E938010000          <2>  jmp unhand2
  2234                              <2>  %assign i i+1
  2235 00001886 FA                  <2>  cli
  2236 00001887 C605[BC1C0000]E8    <2>  mov byte [intprob], i
  2237 0000188E E92B010000          <2>  jmp unhand2
  2238                              <2>  %assign i i+1
  2239 00001893 FA                  <2>  cli
  2240 00001894 C605[BC1C0000]E9    <2>  mov byte [intprob], i
  2241 0000189B E91E010000          <2>  jmp unhand2
  2242                              <2>  %assign i i+1
  2243 000018A0 FA                  <2>  cli
  2244 000018A1 C605[BC1C0000]EA    <2>  mov byte [intprob], i
  2245 000018A8 E911010000          <2>  jmp unhand2
  2246                              <2>  %assign i i+1
  2247 000018AD FA                  <2>  cli
  2248 000018AE C605[BC1C0000]EB    <2>  mov byte [intprob], i
  2249 000018B5 E904010000          <2>  jmp unhand2
  2250                              <2>  %assign i i+1
  2251 000018BA FA                  <2>  cli
  2252 000018BB C605[BC1C0000]EC    <2>  mov byte [intprob], i
  2253 000018C2 E9F7000000          <2>  jmp unhand2
  2254                              <2>  %assign i i+1
  2255 000018C7 FA                  <2>  cli
  2256 000018C8 C605[BC1C0000]ED    <2>  mov byte [intprob], i
  2257 000018CF E9EA000000          <2>  jmp unhand2
  2258                              <2>  %assign i i+1
  2259 000018D4 FA                  <2>  cli
  2260 000018D5 C605[BC1C0000]EE    <2>  mov byte [intprob], i
  2261 000018DC E9DD000000          <2>  jmp unhand2
  2262                              <2>  %assign i i+1
  2263 000018E1 FA                  <2>  cli
  2264 000018E2 C605[BC1C0000]EF    <2>  mov byte [intprob], i
  2265 000018E9 E9D0000000          <2>  jmp unhand2
  2266                              <2>  %assign i i+1
  2267 000018EE FA                  <2>  cli
  2268 000018EF C605[BC1C0000]F0    <2>  mov byte [intprob], i
  2269 000018F6 E9C3000000          <2>  jmp unhand2
  2270                              <2>  %assign i i+1
  2271 000018FB FA                  <2>  cli
  2272 000018FC C605[BC1C0000]F1    <2>  mov byte [intprob], i
  2273 00001903 E9B6000000          <2>  jmp unhand2
  2274                              <2>  %assign i i+1
  2275 00001908 FA                  <2>  cli
  2276 00001909 C605[BC1C0000]F2    <2>  mov byte [intprob], i
  2277 00001910 E9A9000000          <2>  jmp unhand2
  2278                              <2>  %assign i i+1
  2279 00001915 FA                  <2>  cli
  2280 00001916 C605[BC1C0000]F3    <2>  mov byte [intprob], i
  2281 0000191D E99C000000          <2>  jmp unhand2
  2282                              <2>  %assign i i+1
  2283 00001922 FA                  <2>  cli
  2284 00001923 C605[BC1C0000]F4    <2>  mov byte [intprob], i
  2285 0000192A E98F000000          <2>  jmp unhand2
  2286                              <2>  %assign i i+1
  2287 0000192F FA                  <2>  cli
  2288 00001930 C605[BC1C0000]F5    <2>  mov byte [intprob], i
  2289 00001937 E982000000          <2>  jmp unhand2
  2290                              <2>  %assign i i+1
  2291 0000193C FA                  <2>  cli
  2292 0000193D C605[BC1C0000]F6    <2>  mov byte [intprob], i
  2293 00001944 E975000000          <2>  jmp unhand2
  2294                              <2>  %assign i i+1
  2295 00001949 FA                  <2>  cli
  2296 0000194A C605[BC1C0000]F7    <2>  mov byte [intprob], i
  2297 00001951 E968000000          <2>  jmp unhand2
  2298                              <2>  %assign i i+1
  2299 00001956 FA                  <2>  cli
  2300 00001957 C605[BC1C0000]F8    <2>  mov byte [intprob], i
  2301 0000195E E95B000000          <2>  jmp unhand2
  2302                              <2>  %assign i i+1
  2303 00001963 FA                  <2>  cli
  2304 00001964 C605[BC1C0000]F9    <2>  mov byte [intprob], i
  2305 0000196B E94E000000          <2>  jmp unhand2
  2306                              <2>  %assign i i+1
  2307 00001970 FA                  <2>  cli
  2308 00001971 C605[BC1C0000]FA    <2>  mov byte [intprob], i
  2309 00001978 E941000000          <2>  jmp unhand2
  2310                              <2>  %assign i i+1
  2311 0000197D FA                  <2>  cli
  2312 0000197E C605[BC1C0000]FB    <2>  mov byte [intprob], i
  2313 00001985 E934000000          <2>  jmp unhand2
  2314                              <2>  %assign i i+1
  2315 0000198A FA                  <2>  cli
  2316 0000198B C605[BC1C0000]FC    <2>  mov byte [intprob], i
  2317 00001992 E927000000          <2>  jmp unhand2
  2318                              <2>  %assign i i+1
  2319 00001997 FA                  <2>  cli
  2320 00001998 C605[BC1C0000]FD    <2>  mov byte [intprob], i
  2321 0000199F E91A000000          <2>  jmp unhand2
  2322                              <2>  %assign i i+1
  2323 000019A4 FA                  <2>  cli
  2324 000019A5 C605[BC1C0000]FE    <2>  mov byte [intprob], i
  2325 000019AC E90D000000          <2>  jmp unhand2
  2326                              <2>  %assign i i+1
  2327 000019B1 FA                  <2>  cli
  2328 000019B2 C605[BC1C0000]FF    <2>  mov byte [intprob], i
  2329 000019B9 E900000000          <2>  jmp unhand2
  2330                              <2>  %assign i i+1
  2331                              <1> unhand2:
  2332 000019BE FA                  <1> 	cli
  2333 000019BF 1E                  <1> 	push ds
  2334 000019C0 06                  <1> 	push es
  2335 000019C1 0FA0                <1> 	push fs
  2336 000019C3 0FA8                <1> 	push gs
  2337 000019C5 16                  <1> 	push ss
  2338 000019C6 60                  <1> 	pushad
  2339 000019C7 803D[50500000]00    <1> 	cmp byte [guion], 0
  2340 000019CE 0F8432000000        <1> 	je near noguiunhandstuff
  2341 000019D4 66C705[B61C0000]08- <1> 	mov word [locunhandy], 8
  2342 000019DC 00                  <1>
  2343 000019DD 66C705[B81C0000]08- <1> 	mov word [locunhandx], 8
  2344 000019E5 00                  <1>
  2345 000019E6 668B1D[184F0000]    <1> 	mov bx, [background]
  2346 000019ED 66891D[BA1C0000]    <1> 	mov [backgroundcache], bx
  2347 000019F4 C605[1C490000]01    <1> 	mov byte [mousedisabled],1
  2348 000019FB 66BB00F8            <1> 	mov bx, 1111100000000000b
  2349 000019FF 66891D[184F0000]    <1> 	mov [background], bx
  2350                              <1> noguiunhandstuff:
  2351 00001A06 89E6                <1> 	mov esi, esp
  2352 00001A08 8935[AA1C0000]      <1> 	mov [espfirst], esi
  2353 00001A0E 81C6BC000000        <1> 	add esi, ((unhndrgend - unhndrg)/15)*4
  2354 00001A14 8935[A61C0000]      <1> 	mov [esploc], esi
  2355 00001A1A BE[C51C0000]        <1> 	mov esi, unhandmsg
  2356 00001A1F 8935[AE1C0000]      <1> 	mov [esiloc], esi
  2357 00001A25 31C9                <1> 	xor ecx, ecx
  2358 00001A27 8A0D[BC1C0000]      <1> 	mov cl, [intprob]
  2359 00001A2D BB[58200000]        <1> 	mov ebx, errortypes
  2360 00001A32 C1E102              <1> 	shl ecx, 2
  2361 00001A35 01CB                <1> 	add ebx, ecx
  2362 00001A37 81FB[98200000]      <1> 	cmp ebx, errortypesend
  2363 00001A3D 7205                <1> 	jb gooderrortype
  2364 00001A3F BB[98200000]        <1> 	mov ebx, errortypesend
  2365                              <1> gooderrortype:
  2366 00001A44 8B33                <1> 	mov esi, [ebx]
  2367 00001A46 803D[50500000]00    <1> 	cmp byte [guion], 0
  2368 00001A4D 0F842D000000        <1> 	je near errortext
  2369 00001A53 668B0D[B61C0000]    <1> 	mov cx, [locunhandy]
  2370 00001A5A 668B15[B81C0000]    <1> 	mov dx, [locunhandx]
  2371 00001A61 66B80100            <1> 	mov ax, 1
  2372 00001A65 6631DB              <1> 	xor bx, bx
  2373 00001A68 E8BC3F0000          <1> 	call showstring2
  2374 00001A6D 66890D[B61C0000]    <1> 	mov [locunhandy], cx
  2375 00001A74 668915[B81C0000]    <1> 	mov [locunhandx], dx
  2376 00001A7B E905000000          <1> 	jmp errortextdone
  2377                              <1> errortext:
  2378 00001A80 E8570F0000          <1> 	call print		;;get the error message and print it
  2379                              <1> errortextdone:
  2380 00001A85 31C9                <1> 	xor ecx, ecx
  2381 00001A87 8A0D[BC1C0000]      <1> 	mov cl, [intprob]
  2382 00001A8D E8AD010000          <1> 	call expdump
  2383                              <1> dumpstack:
  2384 00001A92 8B35[A61C0000]      <1> 	mov esi, [esploc]
  2385 00001A98 39E6                <1> 	cmp esi, esp
  2386 00001A9A 7219                <1> 	jb donedump
  2387 00001A9C 368B0E              <1> 	mov ecx, [ss:esi]
  2388 00001A9F 81EE04000000        <1> 	sub esi, 4
  2389 00001AA5 8935[A61C0000]      <1> 	mov [esploc], esi
  2390 00001AAB E88F010000          <1> 	call expdump
  2391 00001AB0 E9DDFFFFFF          <1> 	jmp dumpstack
  2392                              <1> donedump:
  2393 00001AB5 0F20C1              <1> 	mov ecx, cr0
  2394 00001AB8 E882010000          <1> 	call expdump
  2395 00001ABD 0F20D1              <1> 	mov ecx, cr2
  2396 00001AC0 E87A010000          <1> 	call expdump
  2397 00001AC5 0F20D9              <1> 	mov ecx, cr3
  2398 00001AC8 E872010000          <1> 	call expdump
  2399 00001ACD 0F20E1              <1> 	mov ecx, cr4
  2400 00001AD0 E86A010000          <1> 	call expdump
  2401 00001AD5 8B35[A61C0000]      <1> 	mov esi, [esploc]
  2402 00001ADB 368B7C2434          <1> 	mov edi, [ss:esp + 52]
  2403 00001AE0 81C710000000        <1> 	add edi, 16
  2404 00001AE6 893D[C11C0000]      <1> 	mov [codelocend], edi
  2405 00001AEC 81EF20000000        <1> 	sub edi, 32
  2406                              <1> dumpcodeloop:
  2407 00001AF2 893D[BD1C0000]      <1> 	mov [codeloc], edi
  2408 00001AF8 8B0F                <1> 	mov ecx, [edi]
  2409 00001AFA E840010000          <1> 	call expdump
  2410 00001AFF 8B3D[BD1C0000]      <1> 	mov edi, [codeloc]
  2411 00001B05 81C704000000        <1> 	add edi, 4
  2412 00001B0B 3B3D[C11C0000]      <1> 	cmp edi, [codelocend]
  2413 00001B11 72DF                <1> 	jb dumpcodeloop
  2414 00001B13 BE[CE1B0000]        <1> 	mov esi, backtoosmsg
  2415 00001B18 803D[50500000]00    <1> 	cmp byte [guion], 0
  2416 00001B1F 750A                <1> 	jne guibacktomsg
  2417 00001B21 E8B60E0000          <1> 	call print
  2418 00001B26 E91A000000          <1> 	jmp backtomsgdone
  2419                              <1> guibacktomsg:
  2420 00001B2B 668B15[B81C0000]    <1> 	mov dx, [locunhandx]
  2421 00001B32 668B0D[B61C0000]    <1> 	mov cx, [locunhandy]
  2422 00001B39 66B80100            <1> 	mov ax, 1
  2423 00001B3D 6631DB              <1> 	xor bx, bx
  2424 00001B40 E8E43E0000          <1> 	call showstring2
  2425                              <1> backtomsgdone:
  2426 00001B45 30C0                <1> 	xor al, al
  2427 00001B47 E83E0E0000          <1> 	call int302
  2428 00001B4C 803D[BC1C0000]03    <1> 	cmp byte [intprob], 3
  2429 00001B53 753C                <1> 	jne nodebugint
  2430 00001B55 803D[50500000]00    <1> 	cmp byte [guion], 0
  2431 00001B5C 7422                <1> 	je nodebuggui
  2432 00001B5E 668B1D[BA1C0000]    <1> 	mov bx, [backgroundcache]
  2433 00001B65 66891D[184F0000]    <1> 	mov [background], bx
  2434 00001B6C 6631DB              <1> 	xor bx, bx
  2435 00001B6F C605[1C490000]00    <1> 	mov byte [mousedisabled], 0
  2436 00001B76 E860330000          <1> 	call guiclear
  2437 00001B7B E8433B0000          <1> 	call reloadallgraphics
  2438                              <1> nodebuggui:
  2439 00001B80 8B35[AA1C0000]      <1> 	mov esi, [espfirst]
  2440 00001B86 89F4                <1> 	mov esp, esi
  2441 00001B88 61                  <1> 	popad
  2442 00001B89 17                  <1> 	pop ss
  2443 00001B8A 0FA9                <1> 	pop gs
  2444 00001B8C 0FA1                <1> 	pop fs
  2445 00001B8E 07                  <1> 	pop es
  2446 00001B8F 1F                  <1> 	pop ds
  2447 00001B90 CF                  <1> 	iret
  2448                              <1> nodebugint:
  2449 00001B91 61                  <1> 	popad
  2450 00001B92 17                  <1> 	pop ss
  2451 00001B93 0FA9                <1> 	pop gs
  2452 00001B95 0FA1                <1> 	pop fs
  2453 00001B97 07                  <1> 	pop es
  2454 00001B98 1F                  <1> 	pop ds
  2455 00001B99 803D[50500000]00    <1> 	cmp byte [guion], 0
  2456 00001BA0 7427                <1> 	je returnunhandgui
  2457 00001BA2 668B1D[BA1C0000]    <1> 	mov bx, [backgroundcache]
  2458 00001BA9 66891D[184F0000]    <1> 	mov [background], bx
  2459 00001BB0 6631DB              <1> 	xor bx, bx
  2460 00001BB3 C605[1C490000]00    <1> 	mov byte [mousedisabled], 0
  2461 00001BBA E81C330000          <1> 	call guiclear
  2462 00001BBF E8FF3A0000          <1> 	call reloadallgraphics
  2463 00001BC4 E951330000          <1> 	jmp gui
  2464                              <1> returnunhandgui:
  2465 00001BC9 E98C140000          <1> 	jmp nwcmd
  2466 00001BCE 506C6561736520706F- <1> backtoosmsg db "Please post any problems in the Issues section at solleros.googlecode.com",10,13
  2467 00001BD7 737420616E79207072- <1>
  2468 00001BE0 6F626C656D7320696E- <1>
  2469 00001BE9 207468652049737375- <1>
  2470 00001BF2 65732073656374696F- <1>
  2471 00001BFB 6E20617420736F6C6C- <1>
  2472 00001C04 65726F732E676F6F67- <1>
  2473 00001C0D 6C65636F64652E636F- <1>
  2474 00001C16 6D0A0D              <1>
  2475 00001C19 507265737320616E79- <1> 			db "Press any key to return to SollerOS",10,13,0
  2476 00001C22 206B657920746F2072- <1>
  2477 00001C2B 657475726E20746F20- <1>
  2478 00001C34 536F6C6C65724F530A- <1>
  2479 00001C3D 0D00                <1>
  2480                              <1> expdump:
  2481 00001C3F 8B35[AE1C0000]      <1> 	mov esi, [esiloc]
  2482 00001C45 89F7                <1> 	mov edi, esi
  2483 00001C47 81C70F000000        <1> 	add edi, 15
  2484 00001C4D 81C604000000        <1> 	add esi, 4
  2485 00001C53 893D[AE1C0000]      <1> 	mov [esiloc], edi
  2486 00001C59 81EF03000000        <1> 	sub edi, 3
  2487 00001C5F E8A4180000          <1> 	call converthex
  2488 00001C64 81EE04000000        <1> 	sub esi, 4
  2489 00001C6A 803D[50500000]00    <1> 	cmp byte [guion], 0
  2490 00001C71 0F8429000000        <1> 	je near expdumptext
  2491 00001C77 668B0D[B61C0000]    <1> 	mov cx, [locunhandy]
  2492 00001C7E 668B15[B81C0000]    <1> 	mov dx, [locunhandx]
  2493 00001C85 66B80100            <1> 	mov ax, 1
  2494 00001C89 6631DB              <1> 	xor bx, bx
  2495 00001C8C E8983D0000          <1> 	call showstring2
  2496 00001C91 66890D[B61C0000]    <1> 	mov [locunhandy], cx
  2497 00001C98 668915[B81C0000]    <1> 	mov [locunhandx], dx
  2498 00001C9F C3                  <1> 	ret
  2499                              <1> expdumptext:
  2500 00001CA0 E8370D0000          <1> 	call print
  2501 00001CA5 C3                  <1> 	ret
  2502 00001CA6 00000000            <1> esploc dd 0
  2503 00001CAA 00000000            <1> espfirst dd 0
  2504 00001CAE 00000000            <1> esiloc dd 0
  2505 00001CB2 00000000            <1> esiregbuf dd 0
  2506 00001CB6 0100                <1> locunhandy dw 1
  2507 00001CB8 0100                <1> locunhandx dw 1
  2508 00001CBA 0000                <1> backgroundcache dw 0
  2509 00001CBC 00                  <1> intprob db 0
  2510 00001CBD 00000000            <1> codeloc dd 0
  2511 00001CC1 00000000            <1> codelocend dd 0
  2512                              <1> 	unhandmsg:	
  2513 00001CC5 494E543D3030303030- <1> 			db "INT=00000000",10,13,0
  2514 00001CCE 3030300A0D00        <1>
  2515                              <1> unhndrg:
  2516 00001CD4 FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0	;;this dumps the stack before the stack frame in question
  2517 00001CDD 303030202000<rept>  <1>
  2518 00001D3D FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",10,13,0
  2519 00001D46 3030300A0D00        <1>
  2520 00001D4C FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0	;;this dumps the stack before the stack frame in question
  2521 00001D55 303030202000<rept>  <1>
  2522 00001DB5 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",10,13,0
  2523 00001DBE 3030300A0D00        <1>
  2524 00001DC4 FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0	;;this dumps the stack before the stack frame in question
  2525 00001DCD 303030202000<rept>  <1>
  2526 00001E2D FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",10,13,0
  2527 00001E36 3030300A0D00        <1>
  2528 00001E3C FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0	;;this dumps the stack before the stack frame in question
  2529 00001E45 303030202000<rept>  <1>
  2530 00001EA5 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",10,13,0
  2531 00001EAE 3030300A0D00        <1>
  2532                              <1> unhandregs:
  2533 00001EB4 45464C3D3030303030- <1> 			db "EFL=00000000  ",0
  2534 00001EBD 303030202000        <1>
  2535 00001EC3 43533A3D3030303030- <1> 			db "CS:=00000000  ",0
  2536 00001ECC 303030202000        <1>
  2537 00001ED2 4549503D3030303030- <1> 			db "EIP=00000000",10,13,0
  2538 00001EDB 3030300A0D00        <1>
  2539 00001EE1 44533A3D3030303030- <1> 			db "DS:=00000000  ",0
  2540 00001EEA 303030202000        <1>
  2541 00001EF0 45533A3D3030303030- <1> 			db "ES:=00000000  ",0
  2542 00001EF9 303030202000        <1>
  2543 00001EFF 46533A3D3030303030- <1> 			db "FS:=00000000  ",0
  2544 00001F08 303030202000        <1>
  2545 00001F0E 47533A3D3030303030- <1> 			db "GS:=00000000  ",0
  2546 00001F17 303030202000        <1>
  2547 00001F1D 53533A3D3030303030- <1> 			db "SS:=00000000",10,13,0
  2548 00001F26 3030300A0D00        <1>
  2549 00001F2C 4541583D3030303030- <1> 			db "EAX=00000000  ",0
  2550 00001F35 303030202000        <1>
  2551 00001F3B 4543583D3030303030- <1> 			db "ECX=00000000  ",0
  2552 00001F44 303030202000        <1>
  2553 00001F4A 4544583D3030303030- <1> 			db "EDX=00000000  ",0
  2554 00001F53 303030202000        <1>
  2555 00001F59 4542583D3030303030- <1> 			db "EBX=00000000",10,13,0
  2556 00001F62 3030300A0D00        <1>
  2557 00001F68 4553503D3030303030- <1> 			db "ESP=00000000  ",0
  2558 00001F71 303030202000        <1>
  2559 00001F77 4542503D3030303030- <1> 			db "EBP=00000000  ",0
  2560 00001F80 303030202000        <1>
  2561 00001F86 4553493D3030303030- <1> 			db "ESI=00000000  ",0
  2562 00001F8F 303030202000        <1>
  2563 00001F95 4544493D3030303030- <1> unhndrgend:	db "EDI=00000000",10,13,0
  2564 00001F9E 3030300A0D00        <1>
  2565 00001FA4 4352303D3030303030- <1> 			db "CR0=00000000  ",0
  2566 00001FAD 303030202000        <1>
  2567 00001FB3 4352323D3030303030- <1> 			db "CR2=00000000  ",0
  2568 00001FBC 303030202000        <1>
  2569 00001FC2 4352333D3030303030- <1> 			db "CR3=00000000  ",0
  2570 00001FCB 303030202000        <1>
  2571 00001FD1 4352343D3030303030- <1> 			db "CR4=00000000",10,13,0
  2572 00001FDA 3030300A0D00        <1>
  2573 00001FE0 FFFFFFFF3030303030- <1> unhandcode: times 2 db 255,255,255,255,"00000000  ",0	;;this dumps the code before and after the interrupt in question
  2574 00001FE9 303030202000<rept>  <1>
  2575 00001FFE FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000 ",255,0
  2576 00002007 30303020FF00        <1>
  2577 0000200D FFFFFF5B3030303030- <1> 			db 255,255,255,"[00000000] ",0
  2578 00002016 3030305D2000        <1>
  2579 0000201C FFFFFFFF3030303030- <1> 			times 3 db 255,255,255,255,"00000000  ",0
  2580 00002025 303030202000<rept>  <1>
  2581 00002049 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",10,13,0
  2582 00002052 3030300A0D00        <1>
  2583                              <1> unhandmsgend:
  2584                              <1> 
  2585                              <1> errortypes:
  2586 00002058 [9C200000]          <1> 			dd err0
  2587 0000205C [03210000]          <1> 			dd err1
  2588 00002060 [66210000]          <1> 			dd err2
  2589 00002064 [BC210000]          <1> 			dd err3
  2590 00002068 [23220000]          <1> 			dd err4
  2591 0000206C [77220000]          <1> 			dd err5
  2592 00002070 [E4220000]          <1> 			dd err6
  2593 00002074 [4F230000]          <1> 			dd err7
  2594 00002078 [9B230000]          <1> 			dd err8
  2595 0000207C [FA230000]          <1> 			dd err9
  2596 00002080 [55240000]          <1> 			dd err10
  2597 00002084 [A2240000]          <1> 			dd err11
  2598 00002088 [F4240000]          <1> 			dd err12
  2599 0000208C [4F250000]          <1> 			dd err13
  2600 00002090 [B4250000]          <1> 			dd err14
  2601 00002094 [F2250000]          <1> 			dd err15
  2602                              <1> errortypesend:
  2603 00002098 [80260000]          <1> 			dd unknownerror
  2604                              <1> 			
  2605 0000209C 4469766973696F6E20- <1> err0	db "Division by zero:",10,13
  2606 000020A5 6279207A65726F3A0A- <1>
  2607 000020AE 0D                  <1>
  2608 000020AF 546563686E6963616C- <1> 		db "Technically lim a",246,"x = ",236," when a is any real number. Happy Easter!",10,13
  2609 000020B8 6C79206C696D2061F6- <1>
  2610 000020C1 78203D20EC20776865- <1>
  2611 000020CA 6E206120697320616E- <1>
  2612 000020D3 79207265616C206E75- <1>
  2613 000020DC 6D6265722E20486170- <1>
  2614 000020E5 707920456173746572- <1>
  2615 000020EE 210A0D              <1>
  2616 000020F1 202020202020202020- <1> 		db "            x",26,"0",10,13,0
  2617 000020FA 202020781A300A0D00  <1>
  2618                              <1> 		
  2619 00002103 53696E676C652D7374- <1> err1	db "Single-step/Breakpoint:",10,13
  2620 0000210C 65702F427265616B70- <1>
  2621 00002115 6F696E743A0A0D      <1>
  2622 0000211C 4120627265616B706F- <1> 		db "A breakpoint fault, breakpoint trap, or single-step trap was triggered.",10,13,0
  2623 00002125 696E74206661756C74- <1>
  2624 0000212E 2C20627265616B706F- <1>
  2625 00002137 696E7420747261702C- <1>
  2626 00002140 206F722073696E676C- <1>
  2627 00002149 652D73746570207472- <1>
  2628 00002152 617020776173207472- <1>
  2629 0000215B 696767657265642E0A- <1>
  2630 00002164 0D00                <1>
  2631                              <1> 		
  2632 00002166 4E6F6E6D61736B6162- <1> err2	db "Nonmaskable interrupt:",10,13
  2633 0000216F 6C6520696E74657272- <1>
  2634 00002178 7570743A0A0D        <1>
  2635 0000217E 412068617264776172- <1> 		db "A hardware interrupt was triggered that could not be masked",10,13,0
  2636 00002187 6520696E7465727275- <1>
  2637 00002190 707420776173207472- <1>
  2638 00002199 696767657265642074- <1>
  2639 000021A2 68617420636F756C64- <1>
  2640 000021AB 206E6F74206265206D- <1>
  2641 000021B4 61736B65640A0D00    <1>
  2642                              <1> 		
  2643 000021BC 427265616B706F696E- <1> err3	db "Breakpoint:",10,13
  2644 000021C5 743A0A0D            <1>
  2645 000021C9 5468697320696E7465- <1> 		db "This interrupt is used in programs to show the stack and registers and can be",10,13
  2646 000021D2 727275707420697320- <1>
  2647 000021DB 7573656420696E2070- <1>
  2648 000021E4 726F6772616D732074- <1>
  2649 000021ED 6F2073686F77207468- <1>
  2650 000021F6 6520737461636B2061- <1>
  2651 000021FF 6E6420726567697374- <1>
  2652 00002208 65727320616E642063- <1>
  2653 00002211 616E2062650A0D      <1>
  2654 00002218 69676E6F7265642E0A- <1> 		db "ignored.",10,13,0
  2655 00002221 0D00                <1>
  2656                              <1> 		
  2657 00002223 4F766572666C6F773A- <1> err4	db "Overflow:",10,13
  2658 0000222C 0A0D                <1>
  2659 0000222E 5468652070726F6365- <1> 		db "The processor ran into an INTO instruction with the overflow flag set.",10,13,0
  2660 00002237 73736F722072616E20- <1>
  2661 00002240 696E746F20616E2049- <1>
  2662 00002249 4E544F20696E737472- <1>
  2663 00002252 756374696F6E207769- <1>
  2664 0000225B 746820746865206F76- <1>
  2665 00002264 6572666C6F7720666C- <1>
  2666 0000226D 6167207365742E0A0D- <1>
  2667 00002276 00                  <1>
  2668                              <1> 		
  2669 00002277 426F756E6473206368- <1> err5	db "Bounds check:",10,13
  2670 00002280 65636B3A0A0D        <1>
  2671 00002286 5468652070726F6365- <1> 		db "The processor rebounded from a BOUND instruction run on an operand that was out",10,13
  2672 0000228F 73736F72207265626F- <1>
  2673 00002298 756E6465642066726F- <1>
  2674 000022A1 6D206120424F554E44- <1>
  2675 000022AA 20696E737472756374- <1>
  2676 000022B3 696F6E2072756E206F- <1>
  2677 000022BC 6E20616E206F706572- <1>
  2678 000022C5 616E64207468617420- <1>
  2679 000022CE 776173206F75740A0D  <1>
  2680 000022D7 6F6620626F756E6473- <1> 		db "of bounds.",10,13,0
  2681 000022E0 2E0A0D00            <1>
  2682                              <1> 		
  2683 000022E4 496E76616C6964206F- <1> err6	db "Invalid opcode:",10,13
  2684 000022ED 70636F64653A0A0D    <1>
  2685 000022F5 5468652070726F6365- <1> 		db "The processor has no idea what it was trying to execute. Don't run SSE4 code",10,13
  2686 000022FE 73736F722068617320- <1>
  2687 00002307 6E6F20696465612077- <1>
  2688 00002310 686174206974207761- <1>
  2689 00002319 7320747279696E6720- <1>
  2690 00002322 746F20657865637574- <1>
  2691 0000232B 652E20446F6E277420- <1>
  2692 00002334 72756E205353453420- <1>
  2693 0000233D 636F64650A0D        <1>
  2694 00002343 6F6E20343836277321- <1> 		db "on 486's!",10,13,0
  2695 0000234C 0A0D00              <1>
  2696                              <1> 		
  2697 0000234F 436F70726F63657373- <1> err7	db "Coprocessor not available:",10,13
  2698 00002358 6F72206E6F74206176- <1>
  2699 00002361 61696C61626C653A0A- <1>
  2700 0000236A 0D                  <1>
  2701 0000236B 446F6E277420796F75- <1> 		db "Don't you know they don't make those anymore!",10,13,0
  2702 00002374 206B6E6F7720746865- <1>
  2703 0000237D 7920646F6E2774206D- <1>
  2704 00002386 616B652074686F7365- <1>
  2705 0000238F 20616E796D6F726521- <1>
  2706 00002398 0A0D00              <1>
  2707                              <1> 		
  2708 0000239B 446F75626C65206661- <1> err8	db "Double fault:",10,13
  2709 000023A4 756C743A0A0D        <1>
  2710 000023AA 546865206578636570- <1> 		db "The exception handler could not handle that it could not handle an exception.",10,13,0
  2711 000023B3 74696F6E2068616E64- <1>
  2712 000023BC 6C657220636F756C64- <1>
  2713 000023C5 206E6F742068616E64- <1>
  2714 000023CE 6C6520746861742069- <1>
  2715 000023D7 7420636F756C64206E- <1>
  2716 000023E0 6F742068616E646C65- <1>
  2717 000023E9 20616E206578636570- <1>
  2718 000023F2 74696F6E2E0A0D00    <1>
  2719                              <1> 		
  2720 000023FA 436F70726F63657373- <1> err9	db "Coprocessor segment overrun:",10,13,0
  2721 00002403 6F72207365676D656E- <1>
  2722 0000240C 74206F76657272756E- <1>
  2723 00002415 3A0A0D00            <1>
  2724 00002419 54686973206E657665- <1> 		db "This never happens in modern computers, and never should.",10,13,0
  2725 00002422 722068617070656E73- <1>
  2726 0000242B 20696E206D6F646572- <1>
  2727 00002434 6E20636F6D70757465- <1>
  2728 0000243D 72732C20616E64206E- <1>
  2729 00002446 657665722073686F75- <1>
  2730 0000244F 6C642E0A0D00        <1>
  2731                              <1> 
  2732 00002455 496E76616C69642054- <1> err10	db "Invalid TSS:",10,13
  2733 0000245E 53533A0A0D          <1>
  2734 00002463 546865205453532074- <1> 		db "The TSS that was switched to is invalid. Nothing funny here.",10,13,0
  2735 0000246C 686174207761732073- <1>
  2736 00002475 776974636865642074- <1>
  2737 0000247E 6F20697320696E7661- <1>
  2738 00002487 6C69642E204E6F7468- <1>
  2739 00002490 696E672066756E6E79- <1>
  2740 00002499 20686572652E0A0D00  <1>
  2741                              <1> 		
  2742 000024A2 5365676D656E74206E- <1> err11	db "Segment not present:",10,13
  2743 000024AB 6F742070726573656E- <1>
  2744 000024B4 743A0A0D            <1>
  2745 000024B8 546865207072657365- <1> 		db "The present bit of the segment descriptor is set to zero.",10,13,0
  2746 000024C1 6E7420626974206F66- <1>
  2747 000024CA 20746865207365676D- <1>
  2748 000024D3 656E74206465736372- <1>
  2749 000024DC 6970746F7220697320- <1>
  2750 000024E5 73657420746F207A65- <1>
  2751 000024EE 726F2E0A0D00        <1>
  2752                              <1> 		
  2753 000024F4 537461636B20657863- <1> err12	db "Stack exception:",10,13
  2754 000024FD 657074696F6E3A0A0D  <1>
  2755 00002506 546865205353206465- <1> 		db "The SS descriptor is invalid or not present or its limit is too small.",10,13,0
  2756 0000250F 7363726970746F7220- <1>
  2757 00002518 697320696E76616C69- <1>
  2758 00002521 64206F72206E6F7420- <1>
  2759 0000252A 70726573656E74206F- <1>
  2760 00002533 7220697473206C696D- <1>
  2761 0000253C 697420697320746F6F- <1>
  2762 00002545 20736D616C6C2E0A0D- <1>
  2763 0000254E 00                  <1>
  2764                              <1> 		
  2765 0000254F 47656E6572616C2070- <1> err13	db "General protection violation:",10,13
  2766 00002558 726F74656374696F6E- <1>
  2767 00002561 2076696F6C6174696F- <1>
  2768 0000256A 6E3A0A0D            <1>
  2769 0000256E 596F752076696F6C61- <1> 		db "You violated the computer. Step away slowly. The FBI is on its way.",10,13,0
  2770 00002577 746564207468652063- <1>
  2771 00002580 6F6D70757465722E20- <1>
  2772 00002589 537465702061776179- <1>
  2773 00002592 20736C6F776C792E20- <1>
  2774 0000259B 546865204642492069- <1>
  2775 000025A4 73206F6E2069747320- <1>
  2776 000025AD 7761792E0A0D00      <1>
  2777                              <1> 		
  2778 000025B4 50616765206661756C- <1> err14	db "Page fault:",10,13
  2779 000025BD 743A0A0D            <1>
  2780 000025C1 546865207061676520- <1> 		db "The page that was requested was not available.",10,13,0
  2781 000025CA 746861742077617320- <1>
  2782 000025D3 726571756573746564- <1>
  2783 000025DC 20776173206E6F7420- <1>
  2784 000025E5 617661696C61626C65- <1>
  2785 000025EE 2E0A0D00            <1>
  2786                              <1> 		
  2787 000025F2 526573657276656420- <1> err15	db "Reserved for Plan R:",10,13
  2788 000025FB 666F7220506C616E20- <1>
  2789 00002604 523A0A0D            <1>
  2790 00002608 5468697320696E7465- <1> 		db "This interrupt is reserved for usage only by the military when it is necessary",10,13
  2791 00002611 727275707420697320- <1>
  2792 0000261A 726573657276656420- <1>
  2793 00002623 666F72207573616765- <1>
  2794 0000262C 206F6E6C7920627920- <1>
  2795 00002635 746865206D696C6974- <1>
  2796 0000263E 617279207768656E20- <1>
  2797 00002647 6974206973206E6563- <1>
  2798 00002650 6573736172790A0D    <1>
  2799 00002658 746F20696E69746961- <1> 		db "to initiate a full-scale coup d'",130,"tat.",10,13,0
  2800 00002661 746520612066756C6C- <1>
  2801 0000266A 2D7363616C6520636F- <1>
  2802 00002673 757020642782746174- <1>
  2803 0000267C 2E0A0D00            <1>
  2804                              <1> 		
  2805 00002680 576861742074686520- <1> unknownerror db "What the hell just happened? Is everyone okay? Hard drive? Video card?",10,13
  2806 00002689 68656C6C206A757374- <1>
  2807 00002692 2068617070656E6564- <1>
  2808 0000269B 3F2049732065766572- <1>
  2809 000026A4 796F6E65206F6B6179- <1>
  2810 000026AD 3F2048617264206472- <1>
  2811 000026B6 6976653F2056696465- <1>
  2812 000026BF 6F20636172643F0A0D  <1>
  2813 000026C8 4D656D6F72793F2041- <1> 			db	"Memory? Are you there?",10,13,0
  2814 000026D1 726520796F75207468- <1>
  2815 000026DA 6572653F0A0D00      <1>
  2816                                      %include 'source/ints.asm'
  2817                              <1> newints:	;;for great justice
  2818 000026E1 80FC00              <1> 	cmp ah, 0		;;originally 0
  2819 000026E4 0F845B000000        <1> 	je near intx0   ;;0=kills app
  2820 000026EA 80FC01              <1> 	cmp ah, 1		;;originally 1
  2821 000026ED 0F8457000000        <1> 	je near intx1   ;;3=print string
  2822 000026F3 80FC02              <1> 	cmp ah, 2		;;originally 2
  2823 000026F6 0F8458000000        <1> 	je near intx2	;;4=read string
  2824 000026FC 80FC03              <1> 	cmp ah, 3		;;originally 3
  2825 000026FF 0F8459000000        <1> 	je near intx3	;;6=clear screen
  2826 00002705 80FC04              <1> 	cmp ah, 4		;;originally 4
  2827 00002708 0F845A000000        <1> 	je near intx4	;;5=read and print string
  2828 0000270E 80FC05              <1> 	cmp ah, 5		;;originally 5		
  2829 00002711 0F845B000000        <1> 	je near intx5	;;2=get char
  2830 00002717 80FC06              <1> 	cmp ah, 6		;;originally 6
  2831 0000271A 0F845C000000        <1> 	je near intx6	;;1=print char
  2832 00002720 80FC07              <1> 	cmp ah, 7
  2833 00002723 0F845D000000        <1> 	je near intx7	;;read file
  2834 00002729 80FC09              <1> 	cmp ah, 9
  2835 0000272C 0F845E000000        <1> 	je near intx9	;;convert number to string
  2836 00002732 80FC0A              <1> 	cmp ah, 10
  2837 00002735 0F846D000000        <1> 	je near intx10	;;convert string to number
  2838 0000273B 80FC0B              <1> 	cmp ah, 11
  2839 0000273E 0F846A000000        <1> 	je near intx11	;;create thread
  2840 00002744 C3                  <1> 	ret
  2841                              <1> 	
  2842                              <1> ;;the jmp timerinterrupt's ensure that task switches occur
  2843                              <1> 	
  2844                              <1> intx0:
  2845 00002745 E910090000          <1> 	jmp nwcmd
  2846                              <1> intx1:
  2847 0000274A E894020000          <1> 	call int303
  2848 0000274F E9E5DCFFFF          <1> 	jmp timerinterrupt
  2849                              <1> intx2:
  2850 00002754 E8B5020000          <1> 	call int304
  2851 00002759 E9DBDCFFFF          <1> 	jmp timerinterrupt
  2852                              <1> intx3:
  2853 0000275E E8AB050000          <1> 	call int306
  2854 00002763 E9D1DCFFFF          <1> 	jmp timerinterrupt
  2855                              <1> intx4:
  2856 00002768 E8E0020000          <1> 	call int305
  2857 0000276D E9C7DCFFFF          <1> 	jmp timerinterrupt
  2858                              <1> intx5:
  2859 00002772 E813020000          <1> 	call int302
  2860 00002777 E9BDDCFFFF          <1> 	jmp timerinterrupt
  2861                              <1> intx6:
  2862 0000277C E83D000000          <1> 	call int301
  2863 00002781 E9B3DCFFFF          <1> 	jmp timerinterrupt
  2864                              <1> intx7:
  2865 00002786 E858430000          <1> 	call loadfile
  2866 0000278B E9A9DCFFFF          <1> 	jmp timerinterrupt
  2867                              <1> intx9:
  2868 00002790 3C00                <1> 	cmp al, 0
  2869 00002792 750A                <1> 	jne intx9B
  2870 00002794 E8C90E0000          <1> 	call showdec
  2871 00002799 E99BDCFFFF          <1> 	jmp timerinterrupt
  2872                              <1> intx9B:
  2873 0000279E E81B0E0000          <1> 	call showhex
  2874 000027A3 E991DCFFFF          <1> 	jmp timerinterrupt
  2875                              <1> intx10:
  2876 000027A8 E84E0F0000          <1> 	call cnvrttxt	;the string goes into esi, number into ecx
  2877 000027AD CF                  <1> 	iret
  2878                              <1> intx11:
  2879 000027AE E872490000          <1> 	call threadfork
  2880 000027B3 CF                  <1> 	iret
  2881                              <1> 	
  2882 000027B4 0000                <1> linebeginpos dw 0
  2883 000027B6 0000                <1> videobufpos: dw 0
  2884 000027B8 0000                <1> charpos db 0,0
  2885 000027BA 501E                <1> charxy db 80,30
  2886 000027BC 0000                <1> charbuf dw 0
  2887                              <1> 	
  2888                              <1> int301:	;;print char, char in al, modifier in bl, will run videobufcopy if called as is
  2889 000027BE E808000000          <1> 	call int301prnt
  2890 000027C3 E893050000          <1> 	call termcopy
  2891 000027C8 C3                  <1> 	ret
  2892 000027C9 00                  <1> termguion db 0
  2893 000027CA 00                  <1> termcopyon db 0
  2894                              <1> int301prnt:
  2895 000027CB 88DC                <1> 	mov ah, bl
  2896 000027CD 66A3[BC270000]      <1> 	mov [charbuf], ax
  2897 000027D3 31DB                <1> 	xor ebx, ebx
  2898 000027D5 668B1D[B6270000]    <1> 	mov bx, [videobufpos]
  2899 000027DC BF[8F1D0000]        <1> 	mov edi, videobuf
  2900 000027E1 01DF                <1> 	add edi, ebx
  2901 000027E3 66A1[592D0000]      <1> 	mov ax, [removedvideo]
  2902 000027E9 668907              <1> 	mov [edi], ax
  2903 000027EC 66A1[BC270000]      <1> 	mov ax, [charbuf]
  2904 000027F2 31D2                <1> 	xor edx, edx
  2905 000027F4 668B15[B8270000]    <1> 	mov dx, [charpos]
  2906 000027FB 31C9                <1> 	xor ecx, ecx
  2907 000027FD 668B0D[BA270000]    <1> 	mov cx, [charxy]
  2908 00002804 3C09                <1> 	cmp al, 9
  2909 00002806 0F8463000000        <1> 	je near int301tab
  2910 0000280C 3C0D                <1> 	cmp al, 13
  2911 0000280E 0F8477000000        <1> 	je near int301cr
  2912 00002814 3C0A                <1> 	cmp al, 10
  2913 00002816 0F84A9000000        <1> 	je near int301nl
  2914 0000281C 3C08                <1> 	cmp al, 8
  2915 0000281E 0F847E000000        <1> 	je near int301bs
  2916 00002824 3CFF                <1> 	cmp al, 255		;;null character
  2917 00002826 0F841B000000        <1> 	je near donescr
  2918 0000282C 668907              <1> 	mov [edi], ax
  2919 0000282F 81C702000000        <1> 	add edi, 2
  2920 00002835 FEC2                <1> 	inc dl
  2921                              <1> donecrnl:
  2922 00002837 38CA                <1> 	cmp dl, cl
  2923 00002839 0F83B7000000        <1> 	jae near int301eol
  2924                              <1> doneeol:
  2925 0000283F 38EE                <1> 	cmp dh, ch
  2926 00002841 0F83CD000000        <1> 	jae near int301scr	
  2927                              <1> donescr:
  2928 00002847 89FB                <1> 	mov ebx, edi
  2929 00002849 668B07              <1> 	mov ax, [edi]
  2930 0000284C 66A3[592D0000]      <1> 	mov [removedvideo], ax
  2931 00002852 81EB[8F1D0000]      <1> 	sub ebx, videobuf
  2932 00002858 66891D[B6270000]    <1> 	mov [videobufpos], bx
  2933 0000285F 668915[B8270000]    <1> 	mov [charpos], dx
  2934 00002866 66A1[BC270000]      <1> 	mov ax, [charbuf]
  2935 0000286C 88E3                <1> 	mov bl, ah
  2936 0000286E C3                  <1> 	ret
  2937                              <1> 	
  2938                              <1> 	int301tab:
  2939 0000286F 47                  <1> 		inc edi
  2940 00002870 C1EF04              <1> 		shr edi, 4
  2941 00002873 C1E704              <1> 		shl edi, 4
  2942 00002876 81C710000000        <1> 		add edi, 16
  2943 0000287C C0EA03              <1> 		shr dl, 3
  2944 0000287F C0E203              <1> 		shl dl, 3
  2945 00002882 80C208              <1> 		add dl, 8
  2946 00002885 4F                  <1> 		dec edi
  2947 00002886 E9ACFFFFFF          <1> 		jmp donecrnl
  2948                              <1> 	
  2949                              <1> 	int301cr:
  2950 0000288B 30D2                <1> 		xor dl, dl
  2951 0000288D 31DB                <1> 		xor ebx, ebx
  2952 0000288F BF[8F1D0000]        <1> 		mov edi, videobuf
  2953 00002894 668B1D[B4270000]    <1> 		mov bx, [linebeginpos]
  2954 0000289B 01DF                <1> 		add edi, ebx
  2955 0000289D E995FFFFFF          <1> 		jmp donecrnl
  2956                              <1> 			
  2957                              <1> 	int301bs:
  2958 000028A2 80FA00              <1> 		cmp dl, 0
  2959 000028A5 7410                <1> 		je int301backline
  2960                              <1> 	int301nobmr:
  2961 000028A7 FECA                <1> 		dec dl
  2962 000028A9 6631C0              <1> 		xor ax, ax
  2963 000028AC 81EF02000000        <1> 		sub edi, 2
  2964 000028B2 E980FFFFFF          <1> 		jmp donecrnl
  2965                              <1> 	int301backline:
  2966 000028B7 88CA                <1> 		mov dl, cl
  2967 000028B9 80FE00              <1> 		cmp dh, 0
  2968 000028BC 74E9                <1> 		je int301nobmr
  2969 000028BE FECE                <1> 		dec dh
  2970 000028C0 E9E2FFFFFF          <1> 		jmp int301nobmr
  2971                              <1> 		
  2972                              <1> 	int301nl:
  2973 000028C5 FEC6                <1> 		inc dh
  2974 000028C7 31DB                <1> 		xor ebx, ebx
  2975 000028C9 88CB                <1> 		mov bl, cl
  2976 000028CB 66D1E3              <1> 		shl bx, 1
  2977 000028CE BF[8F1D0000]        <1> 		mov edi, videobuf
  2978 000028D3 66031D[B6270000]    <1> 		add bx, [videobufpos]
  2979 000028DA 01DF                <1> 		add edi, ebx
  2980 000028DC 31DB                <1> 		xor ebx, ebx
  2981 000028DE 88CB                <1> 		mov bl, cl
  2982 000028E0 66D1E3              <1> 		shl bx, 1
  2983 000028E3 66031D[B4270000]    <1> 		add bx, [linebeginpos]
  2984 000028EA 66891D[B4270000]    <1> 		mov [linebeginpos], bx
  2985 000028F1 E941FFFFFF          <1> 		jmp donecrnl
  2986                              <1> 		
  2987                              <1> 	int301eol:
  2988 000028F6 30D2                <1> 		xor dl, dl
  2989 000028F8 FEC6                <1> 		inc dh
  2990 000028FA 31DB                <1> 		xor ebx, ebx
  2991 000028FC 88CB                <1> 		mov bl, cl
  2992 000028FE 66D1E3              <1> 		shl bx, 1
  2993 00002901 66031D[B4270000]    <1> 		add bx, [linebeginpos]
  2994 00002908 66891D[B4270000]    <1> 		mov [linebeginpos], bx
  2995 0000290F E92BFFFFFF          <1> 		jmp doneeol
  2996                              <1> 	int301scr:
  2997 00002914 FECE                <1> 		dec dh
  2998 00002916 BF[8F1D0000]        <1> 		mov edi, videobuf
  2999 0000291B 31DB                <1> 		xor ebx, ebx
  3000 0000291D 88CB                <1> 		mov bl, cl
  3001 0000291F 66D1E3              <1> 		shl bx, 1
  3002 00002922 01FB                <1> 		add ebx, edi
  3003                              <1> 	intscrollloop:
  3004 00002924 668B03              <1> 		mov ax, [ebx]
  3005 00002927 668907              <1> 		mov [edi], ax
  3006 0000292A 81C702000000        <1> 		add edi, 2
  3007 00002930 81C302000000        <1> 		add ebx, 2
  3008 00002936 FEC9                <1> 		dec cl
  3009 00002938 80F900              <1> 		cmp cl, 0
  3010 0000293B 75E7                <1> 		jne intscrollloop
  3011 0000293D 8A0D[BA270000]      <1> 		mov cl, [charxy]
  3012 00002943 FECD                <1> 		dec ch
  3013 00002945 80FD01              <1> 		cmp ch, 1
  3014 00002948 77DA                <1> 		ja intscrollloop
  3015 0000294A 6631C0              <1> 		xor ax, ax
  3016 0000294D 81EF[8F1D0000]      <1> 		sub edi, videobuf
  3017 00002953 66893D[B4270000]    <1> 		mov [linebeginpos], di
  3018 0000295A 81C7[8F1D0000]      <1> 		add edi, videobuf
  3019 00002960 89FB                <1> 		mov ebx, edi
  3020                              <1> 	intloopclear:
  3021 00002962 668903              <1> 		mov [ebx], ax
  3022 00002965 81C302000000        <1> 		add ebx, 2
  3023 0000296B FEC9                <1> 		dec cl
  3024 0000296D 80F900              <1> 		cmp cl, 0
  3025 00002970 75F0                <1> 		jne intloopclear
  3026 00002972 FECD                <1> 		dec ch
  3027 00002974 80FD00              <1> 		cmp ch, 0
  3028 00002977 75E9                <1> 		jne intloopclear
  3029 00002979 668B0D[BA270000]    <1> 		mov cx, [charxy]
  3030 00002980 E9C2FEFFFF          <1> 		jmp donescr
  3031                              <1> 		
  3032                              <1> 		
  3033 00002985 0000                <1> lastkey db 0,0
  3034 00002987 00                  <1> trans db 0
  3035                              <1> getkey:
  3036 00002988 30C0                <1> 	xor al, al
  3037                              <1> 	int302:		;;get char, if al is 0, wait for key
  3038 0000298A C605[87290000]01    <1> 		mov byte [trans], 1
  3039 00002991 3C01                <1> 		cmp al, 1
  3040 00002993 7307                <1> 		jae transcheck
  3041 00002995 C605[87290000]00    <1> 		mov byte [trans], 0
  3042                              <1> 	transcheck:
  3043 0000299C E8A11F0000          <1> 		call guistartin
  3044 000029A1 8A3D[87290000]      <1> 		mov bh, [trans]
  3045 000029A7 66A1[85290000]      <1> 		mov ax, [lastkey]
  3046 000029AD 80FC1C              <1> 		cmp ah, 1Ch
  3047 000029B0 7419                <1> 		je int302enter
  3048 000029B2 803D[1D490000]E0    <1> 		cmp byte [specialkey], 0xE0
  3049 000029B9 7504                <1> 		jne nospecialtrans
  3050 000029BB 88C3                <1> 		mov bl, al
  3051 000029BD 30C0                <1> 		xor al, al
  3052                              <1> 	nospecialtrans:
  3053 000029BF 08C7                <1> 		or bh, al
  3054 000029C1 80FF00              <1> 		cmp bh, 0
  3055 000029C4 74D6                <1> 		je transcheck
  3056 000029C6 E902000000          <1> 		jmp int302end
  3057                              <1> 	int302enter:
  3058 000029CB B00D                <1> 		mov al, 13
  3059                              <1> 	int302end:
  3060 000029CD C3                  <1> 		ret
  3061                              <1> 	
  3062 000029CE 00                  <1> endkey303 db 0
  3063                              <1> 	printquiet:
  3064 000029CF 6631C0              <1> 		xor ax, ax
  3065 000029D2 66BB0700            <1> 		mov bx, 7
  3066 000029D6 E818000000          <1> 		call int303b
  3067 000029DB C3                  <1> 		ret
  3068                              <1>     print:
  3069 000029DC 6631C0              <1> 		xor ax, ax
  3070 000029DF 66BB0700            <1> 		mov bx, 7
  3071                              <1> 	int303:	;;print line, al=last key,bl=modifier, esi=buffer
  3072 000029E3 A2[CE290000]        <1> 		mov [endkey303], al
  3073 000029E8 E806000000          <1> 		call int303b
  3074 000029ED E869030000          <1> 		call termcopy
  3075 000029F2 C3                  <1> 		ret
  3076                              <1> 	int303b:
  3077 000029F3 8A06                <1> 		mov al, [esi]
  3078 000029F5 3A05[CE290000]      <1> 		cmp al, [endkey303]
  3079 000029FB 740B                <1> 		je doneint303
  3080 000029FD E8C9FDFFFF          <1> 		call int301prnt
  3081 00002A02 46                  <1> 		inc esi
  3082 00002A03 E9EBFFFFFF          <1> 		jmp int303b
  3083                              <1> 	doneint303:
  3084 00002A08 C3                  <1> 		ret
  3085                              <1> 		
  3086 00002A09 00                  <1> endkey304 db 0
  3087 00002A0A 00000000            <1> endbuffer304 dd 0
  3088                              <1> 	int304:	;;get line, al=last key, esi = buffer, edi = endbuffer
  3089 00002A0E A2[092A0000]        <1> 		mov [endkey304], al
  3090 00002A13 893D[0A2A0000]      <1> 		mov [endbuffer304], edi
  3091                              <1> 	int304b:
  3092 00002A19 56                  <1> 		push esi
  3093 00002A1A 30C0                <1> 		xor al, al
  3094 00002A1C E869FFFFFF          <1> 		call int302
  3095 00002A21 5E                  <1> 		pop esi
  3096 00002A22 8806                <1> 		mov [esi], al
  3097 00002A24 46                  <1> 		inc esi
  3098 00002A25 3B35[0A2A0000]      <1> 		cmp esi, [endbuffer304]
  3099 00002A2B 7308                <1> 		jae int304done
  3100 00002A2D 3A05[092A0000]      <1> 		cmp al, [endkey304]
  3101 00002A33 75E4                <1> 		jne int304b
  3102                              <1> 	int304done:
  3103 00002A35 4E                  <1> 		dec esi
  3104 00002A36 C60600              <1> 		mov byte [esi], 0
  3105 00002A39 C3                  <1> 	ret
  3106                              <1> 	
  3107 00002A3A 00                  <1> endkey305 db 0
  3108 00002A3B 00                  <1> modkey305 db 0
  3109 00002A3C 00000000            <1> firstesi305 dd 0
  3110 00002A40 00                  <1> commandedit db 0
  3111 00002A41 00                  <1> txtmask db 0
  3112 00002A42 00000000            <1> buftxtloc dd 0
  3113 00002A46 00000000            <1> endbuffer305 dd 0
  3114 00002A4A 082000              <1> backcursor db 8," ",0
  3115                              <1> 	int305:	;;print and get line, al=last key, bl=modifier, esi=buffer, edi=bufferend
  3116 00002A4D 8935[422A0000]      <1> 		mov [buftxtloc], esi
  3117 00002A53 A2[3A2A0000]        <1> 		mov [endkey305], al
  3118 00002A58 881D[3B2A0000]      <1> 		mov [modkey305], bl
  3119 00002A5E 8935[3C2A0000]      <1> 		mov [firstesi305], esi
  3120 00002A64 893D[462A0000]      <1> 		mov [endbuffer305], edi
  3121                              <1> 	int305b:
  3122 00002A6A 56                  <1> 		push esi
  3123 00002A6B B001                <1> 		mov al, 1
  3124 00002A6D E818FFFFFF          <1> 		call int302	;then get it
  3125 00002A72 5E                  <1> 		pop esi
  3126 00002A73 80FC48              <1> 		cmp ah, 0x48
  3127 00002A76 0F8478010000        <1> 		je near int305up
  3128 00002A7C 80FC50              <1> 		cmp ah, 0x50
  3129 00002A7F 0F8452010000        <1> 		je near int305down
  3130 00002A85 80FC4D              <1> 		cmp ah, 0x4D
  3131 00002A88 0F8404010000        <1> 		je near int305right
  3132 00002A8E 80FC4B              <1> 		cmp ah, 0x4B
  3133 00002A91 0F84BF000000        <1> 		je near int305left
  3134 00002A97 3C08                <1> 		cmp al, 8
  3135 00002A99 0F8451020000        <1> 		je near int305bscheck
  3136 00002A9F 3C00                <1> 		cmp al, 0
  3137 00002AA1 74C7                <1> 		je int305b
  3138 00002AA3 80FC00              <1> 		cmp ah, 0
  3139 00002AA6 74C2                <1> 		je int305b
  3140 00002AA8 8806                <1> 		mov [esi], al
  3141 00002AAA 46                  <1> 		inc esi
  3142                              <1> 	bscheckequal:
  3143 00002AAB 8A1D[3B2A0000]      <1> 		mov bl, [modkey305]
  3144 00002AB1 8A3D[412A0000]      <1> 		mov bh, [txtmask]
  3145 00002AB7 80FF00              <1> 		cmp bh, 0
  3146 00002ABA 7402                <1> 		je nomasktxt
  3147 00002ABC 88F8                <1> 		mov al, bh
  3148                              <1> 	nomasktxt:
  3149 00002ABE E8FBFCFFFF          <1> 		call int301
  3150 00002AC3 56                  <1> 		push esi
  3151 00002AC4 66A3[542B0000]      <1> 		mov [int305axcache], ax
  3152 00002ACA 8A25[3A2A0000]      <1> 		mov ah, [endkey305]
  3153 00002AD0 38E0                <1> 		cmp al, ah
  3154 00002AD2 7429                <1> 		je nobackprintbuftxt2
  3155 00002AD4 BE[701A0000]        <1> 		mov esi, buftxt2
  3156 00002AD9 E8F1FEFFFF          <1> 		call printquiet
  3157 00002ADE B020                <1> 		mov al, " "
  3158 00002AE0 E8E6FCFFFF          <1> 		call int301prnt
  3159 00002AE5 B008                <1> 		mov al, 8
  3160 00002AE7 81FE[701A0000]      <1> 		cmp esi, buftxt2
  3161 00002AED 740E                <1> 		je nobackprintbuftxt2
  3162                              <1> 	backprintbuftxt2:
  3163 00002AEF E8D7FCFFFF          <1> 		call int301prnt
  3164 00002AF4 4E                  <1> 		dec esi
  3165 00002AF5 81FE[701A0000]      <1> 		cmp esi, buftxt2
  3166 00002AFB 77F2                <1> 		ja backprintbuftxt2
  3167                              <1> 	nobackprintbuftxt2:
  3168 00002AFD E8BCFCFFFF          <1> 		call int301
  3169 00002B02 5E                  <1> 		pop esi
  3170 00002B03 3B35[462A0000]      <1> 		cmp esi, [endbuffer305]
  3171 00002B09 0F8314000000        <1> 		jae near doneint305
  3172 00002B0F 66A1[542B0000]      <1> 		mov ax, [int305axcache]
  3173 00002B15 8A25[3A2A0000]      <1> 		mov ah, [endkey305]
  3174 00002B1B 38E0                <1> 		cmp al, ah
  3175 00002B1D 0F8547FFFFFF        <1> 		jne int305b
  3176                              <1> 	doneint305:
  3177 00002B23 4E                  <1> 		dec esi
  3178 00002B24 BF[701A0000]        <1> 		mov edi, buftxt2
  3179                              <1> 	copylaterstuff:
  3180 00002B29 8A07                <1> 		mov al, [edi]
  3181 00002B2B 3C00                <1> 		cmp al, 0
  3182 00002B2D 7409                <1> 		je nocopylaterstuff
  3183 00002B2F 8806                <1> 		mov [esi], al
  3184 00002B31 47                  <1> 		inc edi
  3185 00002B32 46                  <1> 		inc esi
  3186 00002B33 E9F1FFFFFF          <1> 		jmp copylaterstuff
  3187                              <1> 	nocopylaterstuff:
  3188 00002B38 C60600              <1> 		mov byte [esi], 0
  3189 00002B3B E801000000          <1> 		call clearbuftxt2
  3190 00002B40 C3                  <1> 		ret
  3191                              <1> 	
  3192                              <1> 	clearbuftxt2:
  3193 00002B41 30C0                <1> 		xor al, al
  3194 00002B43 BF[701A0000]        <1> 		mov edi, buftxt2
  3195                              <1> 	clearbuftxt2lp:
  3196 00002B48 8807                <1> 		mov [edi], al
  3197 00002B4A 47                  <1> 		inc edi
  3198 00002B4B 81FF[7A1B0000]      <1> 		cmp edi, buftxt
  3199 00002B51 75F5                <1> 		jne clearbuftxt2lp
  3200 00002B53 C3                  <1> 		ret
  3201                              <1> 		
  3202 00002B54 0000                <1> 	int305axcache dw 0
  3203                              <1> 		
  3204                              <1> 	int305left:
  3205 00002B56 3B35[422A0000]      <1> 		cmp esi, [buftxtloc]
  3206 00002B5C 0F8408FFFFFF        <1> 		je near int305b
  3207 00002B62 BF[701A0000]        <1> 		mov edi, buftxt2
  3208 00002B67 8A07                <1> 		mov al, [edi]
  3209                              <1> 	shiftbuftxt2:
  3210 00002B69 3C00                <1> 		cmp al, 0
  3211 00002B6B 740C                <1> 		je noshiftbuftxt2
  3212 00002B6D 47                  <1> 		inc edi
  3213 00002B6E 8A27                <1> 		mov ah, [edi]
  3214 00002B70 8807                <1> 		mov [edi], al
  3215 00002B72 88E0                <1> 		mov al, ah
  3216 00002B74 E9F0FFFFFF          <1> 		jmp shiftbuftxt2
  3217                              <1> 	noshiftbuftxt2:
  3218 00002B79 BF[701A0000]        <1> 		mov edi, buftxt2
  3219 00002B7E 4E                  <1> 		dec esi
  3220 00002B7F 8A06                <1> 		mov al, [esi]
  3221 00002B81 8807                <1> 		mov [edi], al
  3222 00002B83 C60600              <1> 		mov byte [esi], 0
  3223 00002B86 B008                <1> 		mov al, 8
  3224 00002B88 E831FCFFFF          <1> 		call int301
  3225 00002B8D E9D8FEFFFF          <1> 		jmp int305b
  3226                              <1> 		
  3227                              <1> 	int305right:
  3228 00002B92 BF[701A0000]        <1> 		mov edi, buftxt2
  3229 00002B97 8A07                <1> 		mov al, [edi]
  3230 00002B99 3C00                <1> 		cmp al, 0
  3231 00002B9B 0F84C9FEFFFF        <1> 		je near int305b
  3232 00002BA1 8806                <1> 		mov [esi], al
  3233                              <1> 	shiftbuftxt2lft:
  3234 00002BA3 3C00                <1> 		cmp al, 0
  3235 00002BA5 740B                <1> 		je noshiftbuftxt2lft
  3236 00002BA7 47                  <1> 		inc edi
  3237 00002BA8 8A07                <1> 		mov al, [edi]
  3238 00002BAA 8847FF              <1> 		mov [edi - 1], al
  3239 00002BAD E9F1FFFFFF          <1> 		jmp shiftbuftxt2lft
  3240                              <1> 	noshiftbuftxt2lft:
  3241 00002BB2 8A06                <1> 		mov al, [esi]
  3242 00002BB4 46                  <1> 		inc esi
  3243 00002BB5 8A1D[3B2A0000]      <1> 		mov bl, [modkey305]
  3244 00002BBB E8FEFBFFFF          <1> 		call int301
  3245 00002BC0 E9A5FEFFFF          <1> 		jmp int305b
  3246                              <1> 		
  3247                              <1> 	int305downbck:
  3248 00002BC5 FECC                <1> 		dec ah
  3249 00002BC7 8825[402A0000]      <1> 		mov [commandedit], ah
  3250 00002BCD E83A000000          <1> 		call int305bckspc
  3251 00002BD2 E993FEFFFF          <1> 		jmp int305b
  3252                              <1> 	
  3253                              <1> 	int305down:
  3254 00002BD7 8A25[402A0000]      <1> 		mov ah, [commandedit]
  3255 00002BDD 80FC01              <1> 		cmp ah, 1
  3256 00002BE0 0F8684FEFFFF        <1> 		jbe near int305b
  3257 00002BE6 80FC02              <1> 		cmp ah, 2
  3258 00002BE9 74DA                <1> 		je int305downbck
  3259 00002BEB 80EC02              <1> 		sub ah, 2
  3260 00002BEE 8825[402A0000]      <1> 		mov [commandedit], ah
  3261                              <1> 		
  3262                              <1> 	int305up:
  3263                              <1> 		;cmp bl, 0xE0
  3264                              <1> 		;jne int305b
  3265 00002BF4 30C0                <1> 		xor al, al
  3266 00002BF6 3805[402A0000]      <1> 		cmp [commandedit], al
  3267 00002BFC 0F8468FEFFFF        <1> 		je near int305b
  3268 00002C02 E805000000          <1> 		call int305bckspc
  3269 00002C07 E93F000000          <1> 		jmp getcurrentcommandstr
  3270                              <1> 	int305bckspc:
  3271 00002C0C 3B35[422A0000]      <1> 		cmp esi, [buftxtloc]
  3272 00002C12 7429                <1> 		je noint305upbck
  3273                              <1> 	int305upbckspclp:
  3274 00002C14 B008                <1> 		mov al, 8
  3275 00002C16 8A1D[3B2A0000]      <1> 		mov bl, [modkey305]
  3276 00002C1C E8AAFBFFFF          <1> 		call int301prnt
  3277 00002C21 B020                <1> 		mov al, " "
  3278 00002C23 E8A3FBFFFF          <1> 		call int301prnt
  3279 00002C28 B008                <1> 		mov al, 8
  3280 00002C2A E88FFBFFFF          <1> 		call int301
  3281 00002C2F 4E                  <1> 		dec esi
  3282 00002C30 3B35[422A0000]      <1> 		cmp esi, [buftxtloc]
  3283 00002C36 7405                <1> 		je noint305upbck
  3284 00002C38 E9D7FFFFFF          <1> 		jmp int305upbckspclp
  3285                              <1> 	noint305upbck:
  3286 00002C3D 8B3D[5B6E0000]      <1> 		mov edi, [currentcommandpos]
  3287 00002C43 81C7[5F6E0000]      <1> 		add edi, commandbuf
  3288 00002C49 4F                  <1> 		dec edi
  3289 00002C4A C3                  <1> 		ret
  3290                              <1> 	getcurrentcommandstr:
  3291 00002C4B 8A25[402A0000]      <1> 		mov ah, [commandedit]
  3292 00002C51 FE05[402A0000]      <1> 		inc byte [commandedit]
  3293                              <1> 	getccmdlp:
  3294 00002C57 4F                  <1> 		dec edi
  3295 00002C58 8A07                <1> 		mov al, [edi]
  3296 00002C5A 81FF[5F6E0000]      <1> 		cmp edi, commandbuf
  3297 00002C60 7231                <1> 		jb getcmdresetcommandbuf
  3298 00002C62 81EF[5F6E0000]      <1> 		sub edi, commandbuf
  3299 00002C68 3B3D[5B6E0000]      <1> 		cmp edi, [currentcommandpos]
  3300 00002C6E 0F84F6FDFFFF        <1> 		je near int305b
  3301 00002C74 81C7[5F6E0000]      <1> 		add edi, commandbuf
  3302 00002C7A 3C00                <1> 		cmp al, 0
  3303 00002C7C 75D9                <1> 		jne getccmdlp
  3304 00002C7E FECC                <1> 		dec ah
  3305 00002C80 80FC00              <1> 		cmp ah, 0
  3306 00002C83 77D2                <1> 		ja getccmdlp
  3307 00002C85 47                  <1> 		inc edi
  3308 00002C86 81FF[5F720000]      <1> 		cmp edi, commandbufend
  3309 00002C8C 7710                <1> 		ja fixcmdbufb4moreint305
  3310 00002C8E E918000000          <1> 		jmp moreint305up
  3311                              <1> 	getcmdresetcommandbuf:
  3312 00002C93 BF[5F720000]        <1> 		mov edi, commandbufend
  3313 00002C98 47                  <1> 		inc edi
  3314 00002C99 E9B9FFFFFF          <1> 		jmp getccmdlp
  3315                              <1> 	fixcmdbufb4moreint305:
  3316 00002C9E 4F                  <1> 		dec edi
  3317 00002C9F 81EF[5F720000]      <1> 		sub edi, commandbufend
  3318 00002CA5 81C7[5F6E0000]      <1> 		add edi, commandbuf
  3319                              <1> 	moreint305up:
  3320 00002CAB 8A07                <1> 		mov al, [edi]
  3321 00002CAD 47                  <1> 		inc edi
  3322 00002CAE 81EF[5F6E0000]      <1> 		sub edi, commandbuf
  3323 00002CB4 3C00                <1> 		cmp al, 0
  3324 00002CB6 0F84AEFDFFFF        <1> 		je near int305b
  3325 00002CBC 3B3D[5B6E0000]      <1> 		cmp edi, [currentcommandpos]
  3326 00002CC2 0F83A2FDFFFF        <1> 		jae near int305b
  3327 00002CC8 81C7[5F6E0000]      <1> 		add edi, commandbuf
  3328 00002CCE 8806                <1> 		mov [esi], al
  3329 00002CD0 46                  <1> 		inc esi
  3330 00002CD1 57                  <1> 		push edi
  3331 00002CD2 8A1D[3B2A0000]      <1> 		mov bl, [modkey305]
  3332 00002CD8 E8E1FAFFFF          <1> 		call int301
  3333 00002CDD 5F                  <1> 		pop edi
  3334 00002CDE 81FF[5F720000]      <1> 		cmp edi, commandbufend
  3335 00002CE4 76C5                <1> 		jbe moreint305up
  3336 00002CE6 BF[5F6E0000]        <1> 		mov edi, commandbuf
  3337 00002CEB E9BBFFFFFF          <1> 		jmp moreint305up
  3338                              <1> 	int305bscheck:
  3339 00002CF0 3B35[3C2A0000]      <1> 		cmp esi, [firstesi305]
  3340 00002CF6 7705                <1> 		ja goodbscheck
  3341 00002CF8 E96DFDFFFF          <1> 		jmp int305b
  3342                              <1> 	goodbscheck:
  3343 00002CFD 4E                  <1> 		dec esi
  3344 00002CFE C60600              <1> 		mov byte [esi], 0
  3345 00002D01 8A1D[3B2A0000]      <1> 		mov bl, [modkey305]
  3346 00002D07 B008                <1> 		mov al, 8
  3347 00002D09 E99DFDFFFF          <1> 		jmp bscheckequal
  3348                              <1> 	
  3349                              <1> 		
  3350                              <1> 	clear:		
  3351                              <1> 	
  3352                              <1> 	int306:	;;clear screen
  3353 00002D0E 668B0D[BA270000]    <1> 		mov cx, [charxy]
  3354 00002D15 BF[8F1D0000]        <1> 		mov edi, videobuf
  3355 00002D1A 6631C0              <1> 		xor ax, ax
  3356 00002D1D 66A3[B4270000]      <1> 		mov [linebeginpos], ax
  3357 00002D23 66A3[B6270000]      <1> 		mov [videobufpos], ax
  3358 00002D29 6631D2              <1> 		xor dx, dx
  3359 00002D2C 66A3[B8270000]      <1> 		mov [charpos], ax
  3360                              <1> 	int306b:
  3361 00002D32 668907              <1> 		mov [edi], ax
  3362 00002D35 81C702000000        <1> 		add edi, 2
  3363 00002D3B FEC9                <1> 		dec cl
  3364 00002D3D 80F900              <1> 		cmp cl, 0
  3365 00002D40 75F0                <1> 		jne int306b
  3366 00002D42 8A0D[BA270000]      <1> 		mov cl, [charxy]
  3367 00002D48 FECD                <1> 		dec ch
  3368 00002D4A 80FD00              <1> 		cmp ch, 0
  3369 00002D4D 75E3                <1> 		jne int306b
  3370 00002D4F E807000000          <1> 		call termcopy
  3371 00002D54 C3                  <1> 		ret
  3372                              <1> 		
  3373 00002D55 00000000            <1> 	termcursorpos dd 0
  3374 00002D59 0000                <1> 	removedvideo dw 0
  3375                              <1> termcopy:	
  3376 00002D5B 60                  <1> 	pusha
  3377 00002D5C BF[8F1D0000]        <1> 	mov edi, videobuf
  3378 00002D61 31DB                <1> 	xor ebx, ebx
  3379 00002D63 668B1D[B6270000]    <1> 	mov bx, [videobufpos]
  3380 00002D6A 01DF                <1> 	add edi, ebx
  3381 00002D6C 893D[552D0000]      <1> 	mov [termcursorpos], edi
  3382 00002D72 E8AF000000          <1> 	call switchtermcursor
  3383 00002D77 C605[4F500000]00    <1> 	mov byte [mouseselecton], 0
  3384 00002D7E C605[CA270000]01    <1> 	mov byte [termcopyon], 1
  3385 00002D85 803D[50500000]00    <1> 	cmp byte [guion], 0
  3386 00002D8C 0F8412000000        <1> 	je near nowincopy
  3387 00002D92 803D[C9270000]01    <1> 	cmp byte [termguion], 1
  3388 00002D99 0F84EB2E0000        <1> 	je near windowvideocopy
  3389 00002D9F E97B000000          <1> 	jmp nocopytermatall
  3390                              <1> nowincopy:
  3391 00002DA4 BE00000A00          <1> 	mov esi, 0xA0000
  3392 00002DA9 A1[31040000]        <1> 	mov eax, [basecache]
  3393 00002DAE C1E004              <1> 	shl eax, 4
  3394 00002DB1 29C6                <1> 	sub esi, eax
  3395 00002DB3 BF[8F1D0000]        <1> 	mov edi, videobuf
  3396 00002DB8 31C9                <1> 	xor ecx, ecx
  3397 00002DBA 668B0D[BA270000]    <1> 	mov cx, [charxy]
  3398                              <1> nowincopy2:
  3399 00002DC1 BB[94740000]        <1> 	mov ebx, fonts
  3400 00002DC6 31C0                <1> 	xor eax, eax
  3401 00002DC8 8A07                <1> 	mov al, [edi]
  3402 00002DCA C1E004              <1> 	shl eax, 4
  3403 00002DCD 01C3                <1> 	add ebx, eax
  3404 00002DCF 47                  <1> 	inc edi
  3405 00002DD0 8A27                <1> 	mov ah, [edi]
  3406 00002DD2 31D2                <1> 	xor edx, edx
  3407 00002DD4 8A15[BA270000]      <1> 	mov dl, [charxy]
  3408 00002DDA C1C110              <1> 	rol ecx, 16
  3409 00002DDD B110                <1> 	mov cl, 16
  3410                              <1> nowinfont:
  3411 00002DDF 8A03                <1> 	mov al, [ebx]
  3412 00002DE1 D0C8                <1> 	ror al, 1
  3413 00002DE3 80FC07              <1> 	cmp ah, 7
  3414 00002DE6 7602                <1> 	jbe notnotfont
  3415 00002DE8 F6D0                <1> 	not al
  3416                              <1> notnotfont:
  3417 00002DEA 8806                <1> 	mov [esi], al
  3418 00002DEC 01D6                <1> 	add esi, edx
  3419 00002DEE 43                  <1> 	inc ebx
  3420 00002DEF FEC9                <1> 	dec cl
  3421 00002DF1 80F900              <1> 	cmp cl, 0
  3422 00002DF4 75E9                <1> 	jne nowinfont
  3423 00002DF6 C1E204              <1> 	shl edx, 4
  3424 00002DF9 29D6                <1> 	sub esi, edx
  3425 00002DFB C1C110              <1> 	rol ecx, 16
  3426                              <1> nopresentwinfont:
  3427 00002DFE 47                  <1> 	inc edi
  3428 00002DFF 46                  <1> 	inc esi
  3429 00002E00 FEC9                <1> 	dec cl
  3430 00002E02 80F900              <1> 	cmp cl, 0
  3431 00002E05 75BA                <1> 	jne nowincopy2
  3432 00002E07 8A0D[BA270000]      <1> 	mov cl, [charxy]
  3433 00002E0D 31D2                <1> 	xor edx, edx
  3434 00002E0F 88CA                <1> 	mov dl, cl
  3435 00002E11 29D6                <1> 	sub esi, edx
  3436 00002E13 C1E204              <1> 	shl edx, 4
  3437 00002E16 01D6                <1> 	add esi, edx
  3438 00002E18 FECD                <1> 	dec ch
  3439 00002E1A 80FD00              <1> 	cmp ch, 0
  3440 00002E1D 75A2                <1> 	jne nowincopy2
  3441                              <1> nocopytermatall:
  3442 00002E1F E802000000          <1> 	call switchtermcursor
  3443 00002E24 61                  <1> 	popa
  3444 00002E25 C3                  <1> 	ret
  3445                              <1> 	
  3446                              <1> switchtermcursor:
  3447 00002E26 8B3D[552D0000]      <1> 	mov edi, [termcursorpos]
  3448 00002E2C 8A4701              <1> 	mov al, [edi + 1]
  3449 00002E2F 8A27                <1> 	mov ah, [edi]
  3450 00002E31 3C07                <1> 	cmp al, 7
  3451 00002E33 7607                <1> 	jbe movlargecursorterm
  3452 00002E35 B007                <1> 	mov al, 7
  3453 00002E37 E902000000          <1> 	jmp movedcursorterm
  3454                              <1> movlargecursorterm:
  3455 00002E3C B0F0                <1> 	mov al, 0xF0
  3456                              <1> movedcursorterm:
  3457 00002E3E 884701              <1> 	mov [edi + 1], al
  3458 00002E41 80FC00              <1> 	cmp ah, 0
  3459 00002E44 7504                <1> 	jne fixednocursorterm
  3460 00002E46 B420                <1> 	mov ah, " "
  3461 00002E48 8827                <1> 	mov [edi], ah
  3462                              <1> fixednocursorterm:
  3463 00002E4A C3                  <1> 	ret
  3464                              <1> 	
  3465                                      %include 'source/dosints.asm'
  3466                              <1> int21h:
  3467 00002E4B 80FC01              <1> 	cmp ah, 1
  3468 00002E4E 0F8437000000        <1> 	je near dosgchar
  3469 00002E54 80FC02              <1> 	cmp ah, 2
  3470 00002E57 0F8435000000        <1> 	je near doswchar
  3471 00002E5D 80FC09              <1> 	cmp ah, 9
  3472 00002E60 0F8433000000        <1> 	je near dosprintstr
  3473 00002E66 80FC0A              <1> 	cmp ah, 0xA
  3474 00002E69 0F8439000000        <1> 	je near dosgetstr
  3475 00002E6F 80FC2B              <1> 	cmp ah, 0x2B
  3476 00002E72 0F846E000000        <1> 	je near dosgetdate
  3477 00002E78 80FC2C              <1> 	cmp ah, 0x2C
  3478 00002E7B 0F8484000000        <1> 	je near dosgettime
  3479 00002E81 80FC4C              <1> 	cmp ah, 0x4C
  3480 00002E84 0F8495000000        <1> 	je near dosexit
  3481 00002E8A C3                  <1> 	ret
  3482                              <1> 
  3483                              <1> dosgchar:
  3484 00002E8B B405                <1> 	mov ah, 5
  3485 00002E8D 30C0                <1> 	xor al, al
  3486 00002E8F CD30                <1> 	int 30h
  3487 00002E91 C3                  <1> 	ret
  3488                              <1> 	
  3489                              <1> doswchar:
  3490 00002E92 B307                <1> 	mov bl, 7
  3491 00002E94 B406                <1> 	mov ah, 6
  3492 00002E96 CD30                <1> 	int 30h
  3493 00002E98 C3                  <1> 	ret
  3494                              <1> 	
  3495                              <1> dosprintstr:
  3496 00002E99 8B3424              <1> 	mov esi, [esp]
  3497 00002E9C 6689D6              <1> 	mov si, dx
  3498 00002E9F B024                <1> 	mov al, "$"
  3499 00002EA1 B401                <1> 	mov ah, 1
  3500 00002EA3 B307                <1> 	mov bl, 7
  3501 00002EA5 CD30                <1> 	int 30h
  3502 00002EA7 C3                  <1> 	ret
  3503                              <1> 	
  3504                              <1> dosgetstr:
  3505 00002EA8 8B3424              <1> 	mov esi, [esp]
  3506 00002EAB 6689D6              <1> 	mov si, dx
  3507 00002EAE B900000000          <1> 	mov ecx, 0
  3508 00002EB3 8A0E                <1> 	mov cl, [esi]
  3509 00002EB5 81C603000000        <1> 	add esi, 3
  3510 00002EBB 89F7                <1> 	mov edi, esi
  3511 00002EBD 8935[E22E0000]      <1> 	mov [stringstart], esi
  3512 00002EC3 01CF                <1> 	add edi, ecx
  3513 00002EC5 B00D                <1> 	mov al, 13
  3514 00002EC7 B404                <1> 	mov ah, 4
  3515 00002EC9 B307                <1> 	mov bl, 7
  3516 00002ECB CD30                <1> 	int 30h
  3517 00002ECD 89F1                <1> 	mov ecx, esi
  3518 00002ECF 2B0D[E22E0000]      <1> 	sub ecx, [stringstart]
  3519 00002ED5 8B35[E22E0000]      <1> 	mov esi, [stringstart]
  3520 00002EDB 884EFF              <1> 	mov [esi - 1], cl
  3521 00002EDE 884EFE              <1> 	mov [esi - 2], cl
  3522 00002EE1 C3                  <1> 	ret
  3523 00002EE2 00000000            <1> stringstart dd 0
  3524                              <1> 
  3525                              <1> dosgetdate:
  3526 00002EE6 E8DC160000          <1> 	call time
  3527 00002EEB 8A0D[9E470000]      <1> 	mov cl, [RTCtimeYear]
  3528 00002EF1 B500                <1> 	mov ch, 0
  3529 00002EF3 6681C1D007          <1> 	add cx, 2000
  3530 00002EF8 8A35[9D470000]      <1> 	mov dh, [RTCtimeMonth]
  3531 00002EFE 8A15[9C470000]      <1> 	mov dl, [RTCtimeDay]
  3532 00002F04 C3                  <1> 	ret
  3533                              <1> 
  3534                              <1> dosgettime:
  3535 00002F05 E8BD160000          <1> 	call time
  3536 00002F0A 8A2D[9B470000]      <1> 	mov ch, [RTCtimeHour]
  3537 00002F10 8A0D[9A470000]      <1> 	mov cl, [RTCtimeMinute]
  3538 00002F16 8A35[99470000]      <1> 	mov dh, [RTCtimeSecond]
  3539 00002F1C B200                <1> 	mov dl, 0
  3540 00002F1E C3                  <1> 	ret
  3541                              <1> 	
  3542                              <1> dosexit:
  3543 00002F1F 6631C0              <1> 	xor ax, ax
  3544 00002F22 CD30                <1> 	int 30h
  3545                                      %include 'source/solleros.asm'
  3546                              <1> 	;SOLLEROS.ASM
  3547                              <1> os:
  3548 00002F24 E8E5FDFFFF          <1> 	call clear
  3549 00002F29 BE[4B740000]        <1> 	mov esi, userask
  3550 00002F2E E8A9FAFFFF          <1> 	call print
  3551                              <1> usercheck:
  3552 00002F33 BE[7A1B0000]        <1> 	mov esi, buftxt
  3553 00002F38 BF[7A1D0000]        <1> 	mov edi, buftxtend
  3554 00002F3D B00D                <1> 	mov al, 13
  3555 00002F3F E809FBFFFF          <1> 	call int305
  3556 00002F44 56                  <1> 	push esi
  3557 00002F45 BE[6B740000]        <1> 	mov esi, line
  3558 00002F4A E88DFAFFFF          <1> 	call print
  3559 00002F4F BE[55740000]        <1> 	mov esi, pwdask
  3560 00002F54 E883FAFFFF          <1> 	call print
  3561 00002F59 5E                  <1> 	pop esi
  3562 00002F5A 46                  <1> 	inc esi
  3563 00002F5B 8935[1F300000]      <1> 	mov [esipass], esi
  3564                              <1> passcheck:
  3565 00002F61 30C0                <1> 	xor al, al
  3566 00002F63 E822FAFFFF          <1> 	call int302
  3567 00002F68 3C0D                <1> 	cmp al, 13
  3568 00002F6A 0F843C000000        <1> 	je near gotpass
  3569 00002F70 3C08                <1> 	cmp al, 8
  3570 00002F72 0F8413000000        <1> 	je near backpass
  3571 00002F78 8806                <1> 	mov [esi], al
  3572 00002F7A 46                  <1> 	inc esi
  3573 00002F7B B02A                <1> 	mov al, '*'
  3574 00002F7D E83CF8FFFF          <1> 	call int301
  3575 00002F82 E9DAFFFFFF          <1> 	jmp passcheck
  3576 00002F87 08200800            <1> backcursor2 db 8," ",8,0
  3577                              <1> backpass:
  3578 00002F8B 3B35[1F300000]      <1> 	cmp esi, [esipass]
  3579 00002F91 0F84CAFFFFFF        <1> 	je near passcheck
  3580 00002F97 4E                  <1> 	dec esi
  3581 00002F98 C60600              <1> 	mov byte [esi], 0
  3582 00002F9B 56                  <1> 	push esi
  3583 00002F9C BE[872F0000]        <1> 	mov esi, backcursor2
  3584 00002FA1 E836FAFFFF          <1> 	call print
  3585 00002FA6 5E                  <1> 	pop esi
  3586 00002FA7 E9B5FFFFFF          <1> 	jmp passcheck
  3587                              <1> gotpass:
  3588 00002FAC B000                <1> 	mov al,0
  3589 00002FAE 8806                <1> 	mov [esi], al
  3590 00002FB0 BE[6B740000]        <1> 	mov esi, line
  3591 00002FB5 E822FAFFFF          <1> 	call print
  3592 00002FBA BB[71740000]        <1> 	mov ebx, userlst
  3593                              <1> userfind:
  3594 00002FBF BE[7A1B0000]        <1> 	mov esi, buftxt
  3595 00002FC4 8A06                <1> 	mov al, [esi]
  3596 00002FC6 3C00                <1> 	cmp al, 0
  3597 00002FC8 0F8456FFFFFF        <1> 	je near os
  3598 00002FCE 891D[23300000]      <1> 	mov [usercache], ebx
  3599 00002FD4 E89D020000          <1> 	call tester
  3600 00002FD9 3C01                <1> 	cmp al, 1
  3601 00002FDB 7418                <1> 	je pwdtest
  3602                              <1> nxtuser:
  3603 00002FDD 43                  <1> 	inc ebx
  3604 00002FDE 8A03                <1> 	mov al, [ebx]
  3605 00002FE0 3C00                <1> 	cmp al, 0
  3606 00002FE2 74DB                <1> 	je userfind
  3607 00002FE4 81FB[94740000]      <1> 	cmp ebx, userlstend
  3608 00002FEA 0F8334FFFFFF        <1> 	jae near os
  3609 00002FF0 E9CAFFFFFF          <1> 	jmp userfind
  3610                              <1> pwdtest:
  3611 00002FF5 46                  <1> 	inc esi
  3612 00002FF6 43                  <1> 	inc ebx
  3613 00002FF7 E87A020000          <1> 	call tester
  3614 00002FFC 3C01                <1> 	cmp al, 1
  3615 00002FFE 7405                <1> 	je pwdrgt
  3616 00003000 E9D8FFFFFF          <1> 	jmp nxtuser
  3617 00003005 E804FDFFFF          <1> pwdrgt:	call clear
  3618 0000300A 66B90002            <1> 	mov cx, 200h
  3619 0000300E BE[7A1B0000]        <1> 	mov esi, buftxt
  3620 00003013 30C0                <1> 	xor al, al
  3621 00003015 8806                <1> bufclr:	mov [esi], al
  3622 00003017 46                  <1> 	inc esi
  3623 00003018 E2FB                <1> 	loop bufclr
  3624 0000301A E93B000000          <1> 	jmp nwcmd
  3625                              <1> 
  3626 0000301F 00000000            <1> esipass dd 0
  3627 00003023 [71740000]          <1> usercache dd userlst
  3628                              <1> 	
  3629                              <1> buftxtclear:
  3630 00003027 30C0                <1> 	xor al, al
  3631 00003029 BE[7A1B0000]        <1> 	mov esi, buftxt
  3632 0000302E 81FE[7A1D0000]      <1> clearbuftxt: cmp esi, buf2
  3633 00003034 7314                <1> 	jae retbufclr
  3634 00003036 8806                <1> 	mov [esi], al
  3635 00003038 46                  <1> 	inc esi
  3636 00003039 E9F0FFFFFF          <1> 	jmp clearbuftxt
  3637                              <1> 
  3638 0000303E 39DE                <1> clearitbuf: cmp esi, ebx
  3639 00003040 7308                <1> 	jae retbufclr
  3640 00003042 8806                <1> 	mov [esi], al
  3641 00003044 46                  <1> 	inc esi
  3642 00003045 E9F4FFFFFF          <1> 	jmp clearitbuf
  3643 0000304A C3                  <1> retbufclr: ret
  3644                              <1> 
  3645 0000304B E90A000000          <1> full:	jmp nwcmd
  3646                              <1> 
  3647                              <1> nwcmd2:
  3648 00003050 BE[6B740000]        <1> 	mov esi, line
  3649 00003055 E882F9FFFF          <1> 	call print
  3650                              <1> 
  3651                              <1> shush:	;SollerOS Hardly Unix-compatible Shell
  3652                              <1> nwcmd:	
  3653 0000305A 803D[1C6D0000]00    <1> 	cmp byte [threadson], 0
  3654 00003061 7408                <1> 	je noclinwcmd
  3655 00003063 FA                  <1> 	cli
  3656 00003064 C605[1C6D0000]00    <1> 	mov byte [threadson], 0
  3657                              <1> noclinwcmd:
  3658 0000306B B001                <1> 	mov al, 1
  3659 0000306D 3805[69150000]      <1> 	cmp [BATCHISON], al
  3660 00003073 7501                <1> 	jne cancel
  3661 00003075 C3                  <1> 	ret
  3662 00003076 30C0                <1> cancel:	xor al, al
  3663 00003078 A2[00150000]        <1> 	mov [IFON], al
  3664 0000307D A2[69150000]        <1> 	mov [BATCHISON], al
  3665 00003082 B05B                <1> 	mov al, '['
  3666 00003084 B406                <1> 	mov ah, 6
  3667 00003086 66BB0700            <1> 	mov bx, 7
  3668 0000308A E83CF7FFFF          <1> 	call int301prnt
  3669 0000308F 8B35[23300000]      <1> 	mov esi, [usercache]
  3670 00003095 E842F9FFFF          <1> 	call print
  3671 0000309A BE[5F740000]        <1> 	mov esi, location
  3672 0000309F E838F9FFFF          <1> 	call print
  3673 000030A4 E87EFFFFFF          <1> 	call buftxtclear
  3674 000030A9 BE[7A1B0000]        <1> 	mov esi, buftxt
  3675 000030AE C605[402A0000]01    <1> 	mov byte [commandedit], 1
  3676 000030B5 B00D                <1> 	mov al, 13
  3677 000030B7 66BB0700            <1> 	mov bx, 7
  3678 000030BB BF[7A1D0000]        <1> 	mov edi, buftxtend
  3679 000030C0 E888F9FFFF          <1> 	call int305
  3680 000030C5 C605[402A0000]00    <1> 	mov byte [commandedit], 0
  3681 000030CC 803D[7A1B0000]00    <1> 	cmp byte [buftxt], 0
  3682 000030D3 0F8477FFFFFF        <1> 	je near nwcmd2
  3683 000030D9 8B35[5B6E0000]      <1> gotcmd:	mov esi, [currentcommandpos]
  3684 000030DF 8935[576E0000]      <1> 	mov [lastcommandpos], esi
  3685 000030E5 BF[7A1B0000]        <1> 	mov edi, buftxt
  3686 000030EA 81C6[5F6E0000]      <1> 	add esi, commandbuf
  3687 000030F0 81FE[5F720000]      <1> 	cmp esi, commandbufend
  3688 000030F6 7605                <1> 	jbe copycommand
  3689 000030F8 BE[5F6E0000]        <1> 	mov esi, commandbuf
  3690                              <1> copycommand:
  3691 000030FD 8A07                <1> 	mov al, [edi]
  3692 000030FF 8806                <1> 	mov [esi], al
  3693 00003101 47                  <1> 	inc edi
  3694 00003102 46                  <1> 	inc esi
  3695 00003103 3C00                <1> 	cmp al, 0
  3696 00003105 7412                <1> 	je donecopy
  3697 00003107 81FE[5F720000]      <1> 	cmp esi, commandbufend
  3698 0000310D 76EE                <1> 	jbe copycommand
  3699 0000310F BE[5F6E0000]        <1> 	mov esi, commandbuf
  3700 00003114 E9E4FFFFFF          <1> 	jmp copycommand
  3701                              <1> donecopy:
  3702 00003119 81EE[5F6E0000]      <1> 	sub esi, commandbuf
  3703 0000311F 8935[5B6E0000]      <1> 	mov [currentcommandpos], esi
  3704 00003125 FB                  <1> 	sti
  3705 00003126 E996000000          <1> 	jmp run
  3706                              <1> 
  3707 0000312B E8F7FEFFFF          <1> input:	call buftxtclear
  3708 00003130 BE[7A1B0000]        <1> 	mov esi, buftxt		;puts input into buftxt AND onto screen
  3709 00003135 BF[7A1D0000]        <1> 	mov edi, buftxtend
  3710 0000313A B00D                <1> stdin:	mov al, 13
  3711 0000313C B307                <1> 	mov bl, 7
  3712 0000313E B404                <1> 	mov ah, 4
  3713 00003140 CD30                <1> 	int 30h
  3714 00003142 C3                  <1> 	ret
  3715                              <1> 
  3716                              <1> replacevariable:
  3717 00003143 56                  <1> 	push esi
  3718 00003144 81EE[7A1B0000]      <1> 	sub esi, buftxt
  3719 0000314A 89F7                <1> 	mov edi, esi
  3720 0000314C 81C6[7A1B0000]      <1> 	add esi, buftxt
  3721 00003152 47                  <1> 	inc edi
  3722 00003153 BB[6F150000]        <1> 	mov ebx, variables
  3723 00003158 E8F3070000          <1> 	call nxtvrech
  3724 0000315D 89F7                <1> 	mov edi, esi
  3725 0000315F 31DB                <1> 	xor ebx, ebx
  3726 00003161 4E                  <1> 	dec esi
  3727                              <1> findvarname:
  3728 00003162 4E                  <1> 	dec esi
  3729 00003163 8A06                <1> 	mov al, [esi]
  3730 00003165 43                  <1> 	inc ebx
  3731 00003166 3C04                <1> 	cmp al, 4
  3732 00003168 75F8                <1> 	jne findvarname
  3733 0000316A 5E                  <1> 	pop esi
  3734                              <1> replacevarloop:
  3735 0000316B 8A07                <1> 	mov al, [edi]
  3736 0000316D 81FB00000000        <1> 	cmp ebx, 0
  3737 00003173 0F8421000000        <1> 	je near expandbuftxt
  3738 00003179 3C00                <1> 	cmp al, 0
  3739 0000317B 0F840A000000        <1> 	je near compressbuftxt
  3740 00003181 8806                <1> 	mov [esi], al
  3741 00003183 4B                  <1> 	dec ebx
  3742 00003184 46                  <1> 	inc esi
  3743 00003185 47                  <1> 	inc edi
  3744 00003186 E9E0FFFFFF          <1> 	jmp replacevarloop
  3745                              <1> compressbuftxt:	
  3746 0000318B 8A041E              <1> 	mov al, [esi + ebx]
  3747 0000318E 8806                <1> 	mov [esi], al
  3748 00003190 46                  <1> 	inc esi
  3749 00003191 3C00                <1> 	cmp al, 0
  3750 00003193 75F6                <1> 	jne compressbuftxt
  3751 00003195 E936000000          <1> 	jmp fixvariables
  3752                              <1> expandbuftxt:
  3753 0000319A 89F1                <1> 	mov ecx, esi
  3754 0000319C 8A26                <1> 	mov ah, [esi]
  3755                              <1> expandbuftxtlp:
  3756 0000319E 8A1E                <1> 	mov bl, [esi]
  3757 000031A0 46                  <1> 	inc esi
  3758 000031A1 8A3E                <1> 	mov bh, [esi]
  3759 000031A3 8826                <1> 	mov [esi], ah
  3760 000031A5 88FC                <1> 	mov ah, bh
  3761 000031A7 80FB00              <1> 	cmp bl, 0
  3762 000031AA 75F2                <1> 	jne expandbuftxtlp
  3763 000031AC 89CE                <1> 	mov esi, ecx
  3764 000031AE 8806                <1> 	mov [esi], al
  3765 000031B0 47                  <1> 	inc edi
  3766 000031B1 8A07                <1> 	mov al, [edi]
  3767 000031B3 3C00                <1> 	cmp al, 0
  3768 000031B5 0F8415000000        <1> 	je near fixvariables
  3769 000031BB 46                  <1> 	inc esi
  3770 000031BC E9D9FFFFFF          <1> 	jmp expandbuftxt
  3771                              <1> 	
  3772                              <1> 	
  3773                              <1> run:	
  3774 000031C1 BE[6B740000]        <1> 	mov esi, line		;;I should add some sort of command line parsing before it is processed to replace variables with stuff-o I did!
  3775 000031C6 E811F8FFFF          <1> 	call print
  3776                              <1> progtest2:
  3777 000031CB BE[7A1B0000]        <1> 	mov esi, buftxt
  3778                              <1> fixvariables:
  3779 000031D0 46                  <1> 	inc esi
  3780 000031D1 8A06                <1> 	mov al, [esi]
  3781 000031D3 3C24                <1> 	cmp al, '$'
  3782 000031D5 0F8468FFFFFF        <1> 	je near replacevariable
  3783 000031DB 3C00                <1> 	cmp al, 0
  3784 000031DD 75F1                <1> 	jne fixvariables
  3785                              <1> 
  3786 000031DF 803D[29380000]00    <1> 	cmp byte [indexdone], 0
  3787 000031E6 7505                <1> 	jne progtest
  3788 000031E8 E89E050000          <1> 	call indexfiles
  3789                              <1> progtest:
  3790 000031ED BE[7A1B0000]        <1> 	mov esi, buftxt
  3791 000031F2 BB[00130000]        <1> 	mov ebx, fileindex
  3792 000031F7 668B03              <1> prgnxt:	mov ax, [ebx]
  3793 000031FA B105                <1> 	mov cl, 5
  3794 000031FC B504                <1> 	mov ch, 4
  3795 000031FE 6639C8              <1> 	cmp ax, cx
  3796 00003201 740E                <1> 	je fndprg
  3797 00003203 43                  <1> 	inc ebx
  3798 00003204 81FB[00150000]      <1> 	cmp ebx, fileindexend
  3799 0000320A 733E                <1> 	jae prgnf
  3800 0000320C E9E6FFFFFF          <1> 	jmp prgnxt
  3801 00003211 81C302000000        <1> fndprg: add ebx, 2
  3802 00003217 BE[7A1B0000]        <1> 	mov esi, buftxt
  3803 0000321C 6631C9              <1> 	xor cx, cx
  3804 0000321F E892000000          <1> 	call cndtest
  3805 00003224 3C01                <1> 	cmp al, 1
  3806 00003226 7305                <1> 	jae prggood
  3807 00003228 E9CAFFFFFF          <1> 	jmp prgnxt
  3808 0000322D 81FB[00150000]      <1> prggood: cmp ebx, fileindexend
  3809 00003233 733C                <1> 	jae prgdn
  3810 00003235 81C303000000        <1> 	add ebx, 3
  3811 0000323B 8B3B                <1> 	mov edi, [ebx]
  3812 0000323D C605[1C6D0000]02    <1> 	mov byte [threadson], 2
  3813 00003244 B020                <1> 	mov al, 0x20
  3814 00003246 E620                <1> 	out 0x20, al
  3815                              <1> 	;sti
  3816 00003248 FFE7                <1> 	jmp edi
  3817                              <1> prgnf:	
  3818 0000324A A0[7A1B0000]        <1> 	mov al, [buftxt]
  3819 0000324F 3C00                <1> 	cmp al, 0
  3820 00003251 741E                <1> 	je prgdn
  3821 00003253 BE[32740000]        <1> 	mov esi, notfound1
  3822 00003258 E87FF7FFFF          <1> 	call print
  3823 0000325D BE[7A1B0000]        <1> 	mov esi, buftxt
  3824 00003262 E875F7FFFF          <1> 	call print
  3825 00003267 BE[3C740000]        <1> 	mov esi, notfound2
  3826 0000326C E86BF7FFFF          <1> 	call print
  3827 00003271 E9E4FDFFFF          <1> prgdn:	jmp nwcmd
  3828                              <1> 
  3829                              <1> 
  3830                              <1> tester:			;si=user bx=prog returns 1 in al if true
  3831 00003276 30C0                <1> 	xor al, al
  3832 00003278 8A06                <1> retest:	mov al, [esi]
  3833 0000327A 8A23                <1> 	mov ah, [ebx]
  3834 0000327C 3C00                <1> 	cmp al, 0
  3835 0000327E 740B                <1> 	je testtrue
  3836 00003280 38E0                <1> 	cmp al, ah
  3837 00003282 750F                <1> 	jne testfalse
  3838 00003284 43                  <1> 	inc ebx
  3839 00003285 46                  <1> 	inc esi
  3840 00003286 E9EDFFFFFF          <1> 	jmp retest
  3841                              <1> testtrue:
  3842 0000328B 80FC00              <1> 	cmp ah, 0
  3843 0000328E 7503                <1> 	jne testfalse
  3844 00003290 B001                <1> 	mov al, 1
  3845 00003292 C3                  <1> 	ret
  3846                              <1> testfalse:
  3847 00003293 30C0                <1> 	xor al, al
  3848 00003295 C3                  <1> 	ret
  3849                              <1> 
  3850                              <1> optest:			;si=user bx=prog returns 1 in al if true
  3851 00003296 30C0                <1> 	xor al, al
  3852                              <1> opretest:
  3853 00003298 8A06                <1> 	mov al, [esi]
  3854 0000329A 8A23                <1> 	mov ah, [ebx]
  3855 0000329C 38E0                <1> 	cmp al, ah
  3856 0000329E 7513                <1> 	jne optestfalse
  3857 000032A0 80FC00              <1> 	cmp ah, 0
  3858 000032A3 7407                <1> 	je optesttrue
  3859 000032A5 43                  <1> 	inc ebx
  3860 000032A6 46                  <1> 	inc esi
  3861 000032A7 E9ECFFFFFF          <1> 	jmp opretest
  3862                              <1> optesttrue:
  3863 000032AC 3C00                <1> 	cmp al, 0
  3864 000032AE 7503                <1> 	jne optestfalse
  3865 000032B0 B001                <1> 	mov al, 1
  3866 000032B2 C3                  <1> 	ret
  3867                              <1> optestfalse:
  3868 000032B3 30C0                <1> 	xor al, al
  3869 000032B5 C3                  <1> 	ret
  3870                              <1> 
  3871                              <1> cndtest:			;si=user bx=prog cl=endchar returns 1 in al if true
  3872 000032B6 30C0                <1> 	xor al, al
  3873 000032B8 8A06                <1> cndretest:	mov al, [esi]
  3874 000032BA 8A23                <1> 	mov ah, [ebx]
  3875 000032BC 38CC                <1> 	cmp ah, cl
  3876 000032BE 740B                <1> 	je cndtesttrue
  3877 000032C0 38E0                <1> 	cmp al, ah
  3878 000032C2 750E                <1> 	jne cndtestfalse
  3879 000032C4 43                  <1> 	inc ebx
  3880 000032C5 46                  <1> 	inc esi
  3881 000032C6 E9EDFFFFFF          <1> 	jmp cndretest
  3882                              <1> cndtesttrue:
  3883 000032CB 38C8                <1> 	cmp al, cl
  3884 000032CD 7506                <1> 	jne cndtestalmost
  3885 000032CF B001                <1> 	mov al, 1
  3886 000032D1 C3                  <1> 	ret
  3887                              <1> cndtestfalse:
  3888 000032D2 30C0                <1> 	xor al, al
  3889 000032D4 C3                  <1> 	ret
  3890                              <1> cndtestalmost:
  3891 000032D5 B002                <1> 	mov al, 2
  3892 000032D7 C3                  <1> 	ret
  3893 000032D8 00                  <1> currentdir db 0
  3894 000032D9 BE[00130000]        <1> dir:	mov esi, fileindex
  3895 000032DE 8A06                <1> 	dirnxt:	mov al, [esi]
  3896 000032E0 30E4                <1> 		xor ah, ah
  3897 000032E2 3C05                <1> 		cmp al, 5
  3898 000032E4 7451                <1> 		je dirfnd
  3899 000032E6 3C07                <1> 		cmp al, 7
  3900 000032E8 7443                <1> 		je dirfnd3
  3901 000032EA 3C06                <1> 		cmp al, 6
  3902 000032EC 743F                <1> 		je dirfnd3
  3903 000032EE 46                  <1> 		inc esi
  3904 000032EF 81FE[00150000]      <1> 		cmp esi,  fileindexend
  3905 000032F5 0F8381000000        <1> 		jae dirdn
  3906 000032FB E9DEFFFFFF          <1> 		jmp dirnxt
  3907 00003300 060400626174636800- <1> 	typetable db 6,4,0,"batch",0,7,4,0,"document",0,10,4,0,"folder",0,5,4,0,"executable",0
  3908 00003309 070400646F63756D65- <1>
  3909 00003312 6E74000A0400666F6C- <1>
  3910 0000331B 646572000504006578- <1>
  3911 00003324 6563757461626C6500  <1>
  3912                              <1> 	dirfnd3:
  3913 0000332D 46                  <1> 		inc esi
  3914 0000332E 81FE[00150000]      <1> 		cmp esi, fileindexend
  3915 00003334 76A8                <1> 		jbe dirnxt
  3916 00003336 4E                  <1> 		dec esi
  3917 00003337 46                  <1> 	dirfnd:	inc esi
  3918 00003338 8A06                <1> 		mov al, [esi]
  3919 0000333A 30E4                <1> 		xor ah, ah
  3920 0000333C 3C04                <1> 		cmp al, 4
  3921 0000333E 740E                <1> 		je dirfnd2
  3922 00003340 46                  <1> 		inc esi
  3923 00003341 81FE[00150000]      <1> 		cmp esi,  fileindexend
  3924 00003347 7333                <1> 		jae dirdn
  3925 00003349 E990FFFFFF          <1> 		jmp dirnxt
  3926 0000334E 81C601000000        <1> 	dirfnd2: add esi, 1
  3927 00003354 E883F6FFFF          <1> 		call print
  3928 00003359 8935[8B330000]      <1> 		mov [esidir], esi
  3929 0000335F BE[6E740000]        <1> 		mov esi, dirtab
  3930 00003364 E873F6FFFF          <1> 		call print
  3931 00003369 8B35[8B330000]      <1> 		mov esi, [esidir]
  3932 0000336F 81FE[00150000]      <1> 		cmp esi,  fileindexend
  3933 00003375 7305                <1> 		jae dirdn
  3934 00003377 E962FFFFFF          <1> 		jmp dirnxt
  3935 0000337C BE[6B740000]        <1> 	dirdn:	mov esi, line
  3936 00003381 E856F6FFFF          <1> 			call print
  3937 00003386 E9CFFCFFFF          <1> 			jmp nwcmd
  3938 0000338B 00000000            <1> esidir dd 0
  3939                              <1> 
  3940                              <1> array:				;arraystart in si, arrayend in bx, arrayseperator in cx
  3941                              <1> 		                ;ends if array seperator is found backwards after 0
  3942                              <1> 	arnxt:	      
  3943 0000338F 88E8                <1> 		mov al, ch
  3944 00003391 88CC                <1> 		mov ah, cl        
  3945 00003393 663906              <1> 		cmp [esi], ax
  3946 00003396 7453                <1> 		je ardn
  3947 00003398 66390E              <1> 		cmp [esi], cx
  3948 0000339B 740A                <1> 		je arfnd
  3949 0000339D 46                  <1> 		inc esi
  3950 0000339E 39DE                <1> 		cmp esi, ebx
  3951 000033A0 7349                <1> 		jae ardn
  3952 000033A2 E9E8FFFFFF          <1> 		jmp arnxt
  3953 000033A7 81C602000000        <1> 	arfnd: add esi, 2
  3954 000033AD 891D[EC330000]      <1> 		mov [arbx], ebx
  3955 000033B3 890D[F0330000]      <1> 		mov [arcx], ecx
  3956 000033B9 E81EF6FFFF          <1> 		call print
  3957 000033BE 8935[F2330000]      <1> 		mov [arsi], esi
  3958 000033C4 BE[6B740000]        <1> 		mov esi, line
  3959 000033C9 E80EF6FFFF          <1> 		call print
  3960 000033CE 8B1D[EC330000]      <1> 		mov ebx, [arbx]
  3961 000033D4 668B0D[F0330000]    <1> 		mov cx, [arcx]
  3962 000033DB 8B35[F2330000]      <1> 		mov esi, [arsi]
  3963 000033E1 46                  <1> 		inc esi
  3964 000033E2 39DE                <1> 		cmp esi, ebx
  3965 000033E4 7305                <1> 		jae ardn
  3966 000033E6 E9A4FFFFFF          <1> 		jmp arnxt
  3967 000033EB C3                  <1> 	ardn:	ret
  3968 000033EC 00000000            <1> arbx:	dw 0,0
  3969 000033F0 0000                <1> arcx:	db 0,0
  3970 000033F2 00000000            <1> arsi:	dw 0,0
  3971                              <1> 
  3972                              <1> clearbuffer:
  3973 000033F6 BE[7A1D0000]        <1> 	mov esi, buf2
  3974 000033FB B030                <1> 	mov al, '0'
  3975 000033FD 81FE[8E1D0000]      <1> clearbuf: cmp esi, numbuf
  3976 00003403 7308                <1> 	jae doneclearbuff
  3977 00003405 8806                <1> 	mov [esi], al
  3978 00003407 46                  <1> 	inc esi
  3979 00003408 E9F0FFFFFF          <1> 	jmp clearbuf
  3980                              <1> doneclearbuff: 
  3981 0000340D C3                  <1> 		ret
  3982                              <1> 
  3983                              <1> convert:
  3984 0000340E 4E                  <1> 	dec esi
  3985 0000340F 89F3                <1> 	mov ebx, esi		;place to convert into must be in esi, number to convert must be in ecx
  3986                              <1> cnvrt:
  3987 00003411 89DE                <1> 	mov esi, ebx
  3988 00003413 81EE09000000        <1> 	sub esi, 9
  3989 00003419 81F900CA9A3B        <1> 	cmp ecx, 1000000000
  3990 0000341F 720D                <1> 	jb ten8
  3991 00003421 81E900CA9A3B        <1> 	sub ecx, 1000000000
  3992 00003427 FE06                <1> 	inc byte [esi]
  3993 00003429 E9E3FFFFFF          <1> 	jmp cnvrt
  3994 0000342E 46                  <1> ten8:	inc esi
  3995 0000342F 81F900E1F505        <1> 	cmp ecx, 100000000
  3996 00003435 720D                <1> 	jb ten7
  3997 00003437 81E900E1F505        <1> 	sub ecx, 100000000
  3998 0000343D FE06                <1> 	inc byte [esi]
  3999 0000343F E9CDFFFFFF          <1> 	jmp cnvrt
  4000 00003444 46                  <1> ten7:	inc esi
  4001 00003445 81F980969800        <1> 	cmp ecx, 10000000
  4002 0000344B 720D                <1> 	jb ten6
  4003 0000344D 81E980969800        <1> 	sub ecx, 10000000
  4004 00003453 FE06                <1> 	inc byte [esi]
  4005 00003455 E9B7FFFFFF          <1> 	jmp cnvrt
  4006 0000345A 46                  <1> ten6:	inc esi
  4007 0000345B 81F940420F00        <1> 	cmp ecx, 1000000
  4008 00003461 720D                <1> 	jb ten5
  4009 00003463 81E940420F00        <1> 	sub ecx, 1000000
  4010 00003469 FE06                <1> 	inc byte [esi]
  4011 0000346B E9A1FFFFFF          <1> 	jmp cnvrt
  4012 00003470 46                  <1> ten5:	inc esi
  4013 00003471 81F9A0860100        <1> 	cmp ecx, 100000
  4014 00003477 720D                <1> 	jb ten4
  4015 00003479 81E9A0860100        <1> 	sub ecx, 100000
  4016 0000347F FE06                <1> 	inc byte [esi]
  4017 00003481 E98BFFFFFF          <1> 	jmp cnvrt
  4018 00003486 46                  <1> ten4:	inc esi
  4019 00003487 81F910270000        <1> 	cmp ecx, 10000
  4020 0000348D 720D                <1> 	jb ten3
  4021 0000348F 81E910270000        <1> 	sub ecx, 10000
  4022 00003495 FE06                <1> 	inc byte [esi]
  4023 00003497 E975FFFFFF          <1> 	jmp cnvrt
  4024 0000349C 46                  <1> ten3:	inc esi
  4025 0000349D 81F9E8030000        <1> 	cmp ecx, 1000
  4026 000034A3 720D                <1> 	jb ten2
  4027 000034A5 81E9E8030000        <1> 	sub ecx, 1000
  4028 000034AB FE06                <1> 	inc byte [esi]
  4029 000034AD E95FFFFFFF          <1> 	jmp cnvrt
  4030 000034B2 46                  <1> ten2:	inc esi
  4031 000034B3 81F964000000        <1> 	cmp ecx, 100
  4032 000034B9 720D                <1> 	jb ten1
  4033 000034BB 81E964000000        <1> 	sub ecx, 100
  4034 000034C1 FE06                <1> 	inc byte [esi]
  4035 000034C3 E949FFFFFF          <1> 	jmp cnvrt
  4036 000034C8 46                  <1> ten1:	inc esi
  4037 000034C9 81F90A000000        <1> 	cmp ecx, 10
  4038 000034CF 720D                <1> 	jb ten0
  4039 000034D1 81E90A000000        <1> 	sub ecx, 10
  4040 000034D7 FE06                <1> 	inc byte [esi]
  4041 000034D9 E933FFFFFF          <1> 	jmp cnvrt
  4042 000034DE 46                  <1> ten0:	inc esi
  4043 000034DF 81F901000000        <1> 	cmp ecx, 1
  4044 000034E5 720D                <1> 	jb tendn
  4045 000034E7 81E901000000        <1> 	sub ecx, 1
  4046 000034ED FE06                <1> 	inc byte [esi]
  4047 000034EF E91DFFFFFF          <1> 	jmp cnvrt
  4048                              <1> tendn:
  4049 000034F4 C3                  <1> 	ret
  4050                              <1> 
  4051                              <1> 	
  4052                              <1> 
  4053 000034F5 00<rept>            <1> hexnumber times 8 db 0
  4054 000034FD 202000              <1> hexnumberend db "  ",0
  4055                              <1> 
  4056                              <1> 
  4057 00003500 00000000            <1> sibuf dw 0,0
  4058 00003504 00000000            <1> dibuf dw 0,0
  4059                              <1> 
  4060                              <1> converthex:
  4061                              <1> clearbufferhex:
  4062 00003508 B030                <1> 	mov al, '0'
  4063 0000350A 8935[00350000]      <1> 	mov [sibuf], esi
  4064 00003510 893D[04350000]      <1> 	mov [dibuf], edi
  4065 00003516 39FE                <1> clearbufhex: cmp esi, edi
  4066 00003518 7308                <1> 	jae doneclearbuffhex
  4067 0000351A 8806                <1> 	mov [esi], al
  4068 0000351C 46                  <1> 	inc esi
  4069 0000351D E9F4FFFFFF          <1> 	jmp clearbufhex
  4070                              <1> doneclearbuffhex:
  4071 00003522 8B35[04350000]      <1> 	mov esi, [dibuf]
  4072 00003528 89CA                <1> 	mov edx, ecx
  4073 0000352A 81FA00000000        <1> 	cmp edx, 0
  4074 00003530 7422                <1> 	je donenxtephx
  4075                              <1> nxtexphx:	;0x10^x
  4076 00003532 4E                  <1> 	dec esi
  4077 00003533 89F7                <1> 	mov edi, esi		;;location of 0x10^x
  4078 00003535 89D1                <1> 	mov ecx, edx
  4079 00003537 81E10F000000        <1> 	and ecx, 0xF		;;just this digit
  4080 0000353D E81F000000          <1> 	call cnvrtexphx		;;get this digit
  4081 00003542 89FE                <1> 	mov esi, edi
  4082 00003544 C1EA04              <1> 	shr edx, 4		;;next digit
  4083 00003547 81FA00000000        <1> 	cmp edx, 0
  4084 0000354D 7405                <1> 	je donenxtephx
  4085 0000354F E9DEFFFFFF          <1> 	jmp nxtexphx
  4086                              <1> donenxtephx:
  4087 00003554 8B35[00350000]      <1> 	mov esi, [sibuf]
  4088 0000355A 8B3D[04350000]      <1> 	mov edi, [dibuf]
  4089 00003560 C3                  <1> 	ret
  4090                              <1> cnvrtexphx:			;;convert this number
  4091 00003561 89F3                <1> 	mov ebx, esi		;place to convert to must be in si, number to convert must be in cx
  4092 00003563 81F900000000        <1> 	cmp ecx, 0
  4093 00003569 742C                <1> 	je zerohx
  4094 0000356B 8A06                <1> cnvrthx:  mov al, [esi]
  4095 0000356D 3C39                <1> 	cmp al, '9'
  4096 0000356F 741B                <1> 	je lettershx
  4097 00003571 3C46                <1> lttrhxdn: cmp al, 'F'
  4098 00003573 7422                <1> 	je zerohx
  4099 00003575 8A06                <1> 	mov al, [esi]
  4100 00003577 FEC0                <1> 	inc al
  4101 00003579 8806                <1> 	mov [esi], al
  4102 0000357B 89DE                <1> 	mov esi, ebx
  4103 0000357D 81E901000000        <1> cnvrtlphx: sub ecx, 1
  4104 00003583 81F900000000        <1> 	cmp ecx, 0
  4105 00003589 75E0                <1> 	jne cnvrthx
  4106 0000358B C3                  <1> 	ret
  4107                              <1> lettershx:
  4108 0000358C B041                <1> 	mov al, 'A'
  4109 0000358E 2C01                <1> 	sub al, 1
  4110 00003590 8806                <1> 	mov [esi], al
  4111 00003592 E9DAFFFFFF          <1> 	jmp lttrhxdn
  4112 00003597 B030                <1> zerohx:	mov al, '0'
  4113 00003599 8806                <1> 	mov [esi], al
  4114 0000359B 4E                  <1> 	dec esi
  4115 0000359C 8A06                <1> 	mov al, [esi]
  4116 0000359E 3C46                <1> 	cmp al, 'F'
  4117 000035A0 74F5                <1> 	je zerohx
  4118 000035A2 41                  <1> 	inc ecx
  4119 000035A3 E9D5FFFFFF          <1> 	jmp cnvrtlphx
  4120 000035A8 00                  <1> smallhex db 0
  4121 000035A9 01                  <1> firsthexshown db 1
  4122                              <1> showhexsmall:
  4123 000035AA C605[A8350000]01    <1> 	mov byte [smallhex], 1
  4124 000035B1 E808000000          <1> 	call showhex
  4125 000035B6 C605[A8350000]00    <1> 	mov byte [smallhex], 0
  4126 000035BD C3                  <1> 	ret
  4127                              <1> showhex:
  4128 000035BE 60                  <1> 	pusha
  4129 000035BF BE[F5340000]        <1> 	mov esi, hexnumber
  4130 000035C4 BF[FD340000]        <1> 	mov edi, hexnumberend
  4131 000035C9 E83AFFFFFF          <1> 	call converthex
  4132 000035CE 803D[A9350000]01    <1> 	cmp byte [firsthexshown], 1
  4133 000035D5 7503                <1> 	jne showthathex
  4134 000035D7 6631D2              <1> 	xor dx, dx
  4135                              <1> showthathex:
  4136 000035DA 803D[A9350000]03    <1> 	cmp byte [firsthexshown], 3
  4137 000035E1 750A                <1> 	jne nonewhexline
  4138 000035E3 BE[6B740000]        <1> 	mov esi, line
  4139 000035E8 E8EFF3FFFF          <1> 	call print
  4140                              <1> nonewhexline:
  4141 000035ED 803D[A9350000]04    <1> 	cmp byte [firsthexshown], 4
  4142 000035F4 7527                <1> 	jne notabfixhex
  4143 000035F6 B1A0                <1> 	mov cl, 160
  4144 000035F8 28D1                <1> 	sub cl, dl
  4145 000035FA C0E905              <1> 	shr cl, 5
  4146 000035FD C0E105              <1> 	shl cl, 5
  4147 00003600 80F900              <1> 	cmp cl, 0
  4148 00003603 750F                <1> 	jne nonewlinetabfixhex
  4149 00003605 BE[6B740000]        <1> 	mov esi, line
  4150 0000360A E8CDF3FFFF          <1> 	call print
  4151 0000360F E909000000          <1> 	jmp notabfixhex
  4152                              <1> nonewlinetabfixhex:
  4153 00003614 80C20F              <1> 	add dl, 15
  4154 00003617 C0EA04              <1> 	shr dl, 4
  4155 0000361A C0E204              <1> 	shl dl, 4
  4156                              <1> notabfixhex:
  4157 0000361D BE[F5340000]        <1> 	mov esi, hexnumber
  4158 00003622 803D[A8350000]01    <1> 	cmp byte [smallhex],1
  4159 00003629 7506                <1> 	jne printnosmallhex
  4160 0000362B 81C606000000        <1> 	add esi, 6
  4161                              <1> printnosmallhex:
  4162 00003631 E8A6F3FFFF          <1> 	call print
  4163 00003636 803D[A9350000]02    <1> 	cmp byte [firsthexshown], 2
  4164 0000363D 750A                <1> 	jne hexshown
  4165 0000363F BE[6B740000]        <1> 	mov esi, line
  4166 00003644 E893F3FFFF          <1> 	call print
  4167                              <1> hexshown:
  4168 00003649 C605[A9350000]00    <1> 	mov byte [firsthexshown], 0
  4169 00003650 61                  <1> 	popa
  4170 00003651 C3                  <1> 	ret
  4171                              <1> 
  4172                              <1> 
  4173 00003652 303030303030303030- <1> decnumber db "00000000000000"
  4174 0000365B 3030303030          <1>
  4175 00003660 2000                <1> decnumberend: db " ",0
  4176                              <1> 
  4177                              <1> showdec: ;;same as showhex, just uses decimal conversion
  4178 00003662 60                  <1> 	pusha
  4179 00003663 BF[52360000]        <1> 	mov edi, decnumber
  4180 00003668 BE[60360000]        <1> 	mov esi, decnumberend
  4181                              <1> cleardecbuf:
  4182 0000366D C60730              <1> 	mov byte [edi], '0'
  4183 00003670 47                  <1> 	inc edi
  4184 00003671 39F7                <1> 	cmp edi, esi
  4185 00003673 72F8                <1> 	jb cleardecbuf
  4186 00003675 BF[52360000]        <1> 	mov edi, decnumber
  4187 0000367A E88FFDFFFF          <1> 	call convert
  4188 0000367F 803D[A9350000]01    <1> 	cmp byte [firsthexshown], 1
  4189 00003686 7503                <1> 	jne showthatdec
  4190 00003688 6631D2              <1> 	xor dx, dx
  4191                              <1> showthatdec:
  4192 0000368B 803D[A9350000]03    <1> 	cmp byte [firsthexshown], 3
  4193 00003692 750A                <1> 	jne nonewdecline
  4194 00003694 BE[6B740000]        <1> 	mov esi, line
  4195 00003699 E83EF3FFFF          <1> 	call print
  4196                              <1> nonewdecline:
  4197 0000369E 803D[A9350000]04    <1> 	cmp byte [firsthexshown], 4
  4198 000036A5 7527                <1> 	jne notabfixdec
  4199 000036A7 B1A0                <1> 	mov cl, 160
  4200 000036A9 28D1                <1> 	sub cl, dl
  4201 000036AB C0E905              <1> 	shr cl, 5
  4202 000036AE C0E105              <1> 	shl cl, 5
  4203 000036B1 80F900              <1> 	cmp cl, 0
  4204 000036B4 750F                <1> 	jne nonewlinetabfixdec
  4205 000036B6 BE[6B740000]        <1> 	mov esi, line
  4206 000036BB E81CF3FFFF          <1> 	call print
  4207 000036C0 E909000000          <1> 	jmp notabfixdec
  4208                              <1> nonewlinetabfixdec:
  4209 000036C5 80C20F              <1> 	add dl, 15
  4210 000036C8 C0EA04              <1> 	shr dl, 4
  4211 000036CB C0E204              <1> 	shl dl, 4
  4212                              <1> notabfixdec:
  4213 000036CE BE[52360000]        <1> 	mov esi, decnumber
  4214 000036D3 4E                  <1> 	dec esi
  4215                              <1> sifind:
  4216 000036D4 46                  <1> 	inc esi
  4217 000036D5 803E30              <1> 	cmp byte [esi], '0'
  4218 000036D8 74FA                <1> 	je sifind
  4219 000036DA E8FDF2FFFF          <1> 	call print
  4220 000036DF 803D[A9350000]02    <1> 	cmp byte [firsthexshown], 2
  4221 000036E6 750A                <1> 	jne decshown
  4222 000036E8 BE[6B740000]        <1> 	mov esi, line
  4223 000036ED E8EAF2FFFF          <1> 	call print
  4224                              <1> decshown:
  4225 000036F2 C605[A9350000]00    <1> 	mov byte [firsthexshown], 0
  4226 000036F9 61                  <1> 	popa
  4227 000036FA C3                  <1> 	ret
  4228                              <1> 	
  4229                              <1> cnvrttxt: 
  4230 000036FB 31C9                <1> 	xor ecx, ecx
  4231 000036FD 31C0                <1> 	xor eax, eax
  4232 000036FF 31D2                <1> 	xor edx, edx
  4233 00003701 31DB                <1> 	xor ebx, ebx
  4234 00003703 4E                  <1> 	dec esi
  4235                              <1> cnvrtlptxt:
  4236 00003704 46                  <1> 	inc esi
  4237 00003705 8A06                <1> 	mov al, [esi]
  4238 00003707 3C00                <1> 	cmp al, 0
  4239 00003709 75F9                <1> 	jne cnvrtlptxt
  4240 0000370B 4E                  <1> 	dec esi
  4241 0000370C 8A06                <1> 	mov al, [esi]
  4242 0000370E 3C2E                <1> 	cmp al, '.'
  4243 00003710 7506                <1> 	jne nocnvrtdot
  4244 00003712 46                  <1> 	inc esi
  4245 00003713 E9ECFFFFFF          <1> 	jmp cnvrtlptxt
  4246                              <1> nocnvrtdot:
  4247 00003718 3C20                <1> 	cmp al, ' '
  4248 0000371A 7404                <1> 	je zerotest
  4249 0000371C 3C30                <1> 	cmp al, '0'
  4250 0000371E 7504                <1> 	jne txtlp
  4251                              <1> zerotest: 
  4252 00003720 39FE                <1> 		cmp esi, edi
  4253 00003722 745E                <1> 		je donecnvrt
  4254                              <1> txtlp:	
  4255 00003724 31C0                <1> 	xor eax, eax
  4256 00003726 8A06                <1> 	mov al, [esi]
  4257 00003728 3C3D                <1> 	cmp al, '='
  4258 0000372A 7456                <1> 	je donecnvrt
  4259 0000372C 3C30                <1> 	cmp al, 48
  4260 0000372E 7252                <1> 	jb donecnvrt
  4261 00003730 3C23                <1> 	cmp al, '#'
  4262 00003732 744E                <1> 	je donecnvrt
  4263 00003734 39FE                <1> 	cmp esi, edi
  4264 00003736 724A                <1> 	jb donecnvrt
  4265 00003738 81F900000000        <1> 	cmp ecx, 0
  4266 0000373E 770B                <1> 	ja exp
  4267 00003740 2C30                <1> noexp:	sub al, 48
  4268 00003742 01C2                <1> 	add edx, eax
  4269 00003744 4E                  <1> 	dec esi
  4270 00003745 41                  <1> 	inc ecx
  4271 00003746 E9D9FFFFFF          <1> 	jmp txtlp
  4272 0000374B 81F900000000        <1> exp:	cmp ecx, 0
  4273 00003751 74ED                <1> 	je noexp
  4274 00003753 2C30                <1> 	sub al, 48
  4275 00003755 51                  <1> 	push ecx
  4276 00003756 89C3                <1> expmul:	mov ebx, eax
  4277 00003758 01D8                <1> 	add eax, ebx
  4278 0000375A 01D8                <1> 	add eax, ebx
  4279 0000375C 01D8                <1> 	add eax, ebx
  4280 0000375E 01D8                <1> 	add eax, ebx
  4281 00003760 01D8                <1> 	add eax, ebx
  4282 00003762 01D8                <1> 	add eax, ebx
  4283 00003764 01D8                <1> 	add eax, ebx
  4284 00003766 01D8                <1> 	add eax, ebx
  4285 00003768 01D8                <1> 	add eax, ebx
  4286 0000376A 81E901000000        <1> 	sub ecx, 1
  4287 00003770 81F900000000        <1> 	cmp ecx, 0
  4288 00003776 77DE                <1> 	ja expmul
  4289 00003778 01C2                <1> 	add edx, eax
  4290 0000377A 59                  <1> 	pop ecx
  4291 0000377B 4E                  <1> 	dec esi
  4292 0000377C 41                  <1> 	inc ecx
  4293 0000377D E9A2FFFFFF          <1> 	jmp txtlp
  4294 00003782 89D1                <1> donecnvrt: mov ecx, edx
  4295 00003784 C3                  <1> 	ret
  4296                                      %include 'source/builtinprogs.asm'
  4297 00003785 050406040704        <1> filetypes db 5,4,6,4,7,4
  4298                              <1> progstart:		;programs start here
  4299                              <1> ;db 5,4,"index",0
  4300                              <1> ;	call indexfiles
  4301                              <1> ;	jmp nwcmd
  4302                              <1> 
  4303                              <1> 
  4304                              <1> indexfiles:
  4305 0000378B BE[8B370000]        <1> 	mov esi, progstart
  4306 00003790 BB[00130000]        <1> 	mov ebx, fileindex
  4307 00003795 BF[8B370000]        <1> 	mov edi, progstart
  4308 0000379A 81EF02000000        <1> 	sub edi, 2
  4309                              <1> indexloop:
  4310 000037A0 668B0E              <1> 	mov cx, [esi]
  4311                              <1> 	indexloop2:
  4312 000037A3 663B0F              <1> 		cmp cx, [edi]
  4313 000037A6 7427                <1> 		je indexloop2done
  4314 000037A8 81EF02000000        <1> 		sub edi, 2
  4315 000037AE 81FF[85370000]      <1> 		cmp edi, filetypes
  4316 000037B4 73ED                <1> 		jae indexloop2
  4317 000037B6 BF[8B370000]        <1> 	mov edi, progstart
  4318 000037BB 81EF02000000        <1> 	sub edi, 2
  4319 000037C1 46                  <1> 	inc esi
  4320 000037C2 81FE[9F480000]      <1> 	cmp esi, batchprogend
  4321 000037C8 7357                <1> 	jae indexloopdone
  4322 000037CA E9D1FFFFFF          <1> 	jmp indexloop
  4323                              <1> indexloop2done:
  4324 000037CF 66890B              <1> 	mov [ebx], cx
  4325 000037D2 81C302000000        <1> 	add ebx, 2
  4326 000037D8 81C602000000        <1> 	add esi, 2
  4327                              <1> 	nameindex:
  4328 000037DE 8A0E                <1> 		mov cl, [esi]
  4329 000037E0 80F900              <1> 		cmp cl, 0
  4330 000037E3 7409                <1> 		je nameindexdone
  4331 000037E5 880B                <1> 		mov [ebx], cl
  4332 000037E7 46                  <1> 		inc esi
  4333 000037E8 43                  <1> 		inc ebx
  4334 000037E9 E9F0FFFFFF          <1> 		jmp nameindex
  4335                              <1> 	nameindexdone:
  4336 000037EE 43                  <1> 		inc ebx
  4337 000037EF 66C7030000          <1> 		mov word [ebx], 0
  4338 000037F4 81C302000000        <1> 		add ebx, 2
  4339 000037FA 46                  <1> 		inc esi
  4340 000037FB 8933                <1> 		mov [ebx], esi
  4341 000037FD 81C304000000        <1> 		add ebx, 4
  4342 00003803 66C7030000          <1> 		mov word [ebx], 0
  4343 00003808 81C302000000        <1> 		add ebx, 2
  4344 0000380E 81FB[00150000]      <1> 		cmp ebx, fileindexend
  4345 00003814 730B                <1> 		jae indexloopdone
  4346 00003816 81C601000000        <1> 		add esi, 1
  4347 0000381C E97FFFFFFF          <1> 		jmp indexloop
  4348 00003821 C605[29380000]01    <1> indexloopdone: 	mov byte [indexdone], 1
  4349 00003828 C3                  <1> 		ret
  4350                              <1> 
  4351 00003829 00                  <1> indexdone db 0
  4352                              <1> 
  4353                              <1> 
  4354                              <1> ;db 5,4,"showindex",0
  4355                              <1> ;	mov esi, fileindex
  4356                              <1> ;	mov ebx, fileindexend
  4357                              <1> ;	mov cl, 5
  4358                              <1> ;	mov ch, 4
  4359                              <1> ;	call array
  4360                              <1> ;	mov esi, fileindex
  4361                              <1> ;	mov ebx, fileindexend
  4362                              <1> ;	mov cl, 6
  4363                              <1> ;	mov ch, 4
  4364                              <1> ;	call array
  4365                              <1> ;	mov esi, fileindex
  4366                              <1> ;	mov ebx, fileindexend
  4367                              <1> ;	mov cl, 7
  4368                              <1> ;	mov ch, 4
  4369                              <1> ;	call array
  4370                              <1> ;	jmp nwcmd
  4371                              <1> 
  4372 0000382A 0504736875736800    <1> db 5,4,"shush",0
  4373 00003832 BE[F5730000]        <1> 	mov esi, shushmsg
  4374 00003837 E8A0F1FFFF          <1> 	call print
  4375 0000383C E919F8FFFF          <1> 	jmp shush
  4376                              <1> 
  4377 00003841 05046C7300          <1> db 5,4,"ls",0
  4378 00003846 BE[8B370000]        <1> 	lscmd:	mov esi, progstart
  4379 0000384B BB[9F480000]        <1> 		mov ebx, progend
  4380 00003850 E984FAFFFF          <1> 		jmp dir
  4381                              <1> 		
  4382 00003855 05046469736B00      <1> db 5,4,"disk",0
  4383 0000385C 31C9                <1> 		xor ecx, ecx
  4384 0000385E 8A0D[83010000]      <1> 		mov cl, [DriveNumber]
  4385 00003864 C605[A9350000]00    <1> 		mov byte [firsthexshown], 0
  4386 0000386B E84EFDFFFF          <1> 		call showhex
  4387 00003870 BE[6B740000]        <1> 		mov esi, line
  4388 00003875 E862F1FFFF          <1> 		call print
  4389 0000387A BE[3E730000]        <1> 		mov esi, diskfileindex
  4390                              <1> 	diskindexdir:
  4391 0000387F E858F1FFFF          <1> 		call print
  4392 00003884 56                  <1> 		push esi
  4393 00003885 BE[B2380000]        <1> 		mov esi, disktab
  4394 0000388A E84DF1FFFF          <1> 		call print
  4395 0000388F 5E                  <1> 		pop esi
  4396 00003890 8B4E05              <1> 		mov ecx, [esi + 5]
  4397 00003893 C605[A9350000]02    <1> 		mov byte [firsthexshown], 2
  4398 0000389A E8C3FDFFFF          <1> 		call showdec
  4399 0000389F 81C609000000        <1> 		add esi, 9
  4400 000038A5 81FE[F5730000]      <1> 		cmp esi, enddiskfileindex
  4401 000038AB 72D2                <1> 		jb diskindexdir
  4402 000038AD E9A8F7FFFF          <1> 		jmp nwcmd
  4403                              <1> 		
  4404 000038B2 0D09090900          <1> 		disktab db 13,9,9,9,0
  4405                              <1> 
  4406 000038B7 0504636C65617200    <1> db 5,4,"clear",0
  4407 000038BF E84AF4FFFF          <1> 	cls:	call clear
  4408 000038C4 E991F7FFFF          <1> 		jmp nwcmd
  4409                              <1> 		
  4410 000038C9 05047761697400      <1> db 5,4,"wait",0
  4411 000038D0 30C0                <1> 		xor al, al
  4412 000038D2 E8B3F0FFFF          <1> 		call int302
  4413 000038D7 E97EF7FFFF          <1> 		jmp nwcmd
  4414                              <1> 
  4415 000038DC 05046563686F00      <1> db 5,4,"echo",0
  4416 000038E3 BE[7A1B0000]        <1> 	echo:	mov esi, buftxt
  4417 000038E8 81C605000000        <1> 		add esi, 5
  4418 000038EE 8A06                <1> 		mov al, [esi]
  4419                              <1> 		;cmp al, '$'
  4420                              <1> 		;je echovr		;;now unnecessary
  4421 000038F0 E8E7F0FFFF          <1> 		call print
  4422 000038F5 BE[6B740000]        <1> 		mov esi, line
  4423 000038FA E8DDF0FFFF          <1> 		call print
  4424 000038FF E956F7FFFF          <1> 		jmp nwcmd
  4425 00003904 BB[6F150000]        <1> 	echovr:	mov ebx, variables
  4426 00003909 BF06000000          <1> 		mov edi, 6
  4427 0000390E E83D000000          <1> 		call nxtvrech
  4428 00003913 E958000000          <1> 		jmp prntvr2
  4429 00003918 B13D                <1> 	echvar:	mov cl, '='
  4430 0000391A 43                  <1> 		inc ebx
  4431 0000391B 8A03                <1> 		mov al, [ebx]
  4432 0000391D 3C00                <1> 		cmp al, 0
  4433 0000391F 742F                <1> 		je nxtvrech
  4434 00003921 3C3D                <1> 		cmp al, '='
  4435 00003923 7420                <1> 		je nxtvrechb1
  4436 00003925 BE[7A1B0000]        <1> 		mov esi, buftxt
  4437 0000392A 01FE                <1> 		add esi, edi
  4438 0000392C E885F9FFFF          <1> 		call cndtest
  4439 00003931 3C02                <1> 		cmp al, 2
  4440 00003933 7437                <1> 		je prntvr
  4441 00003935 3C01                <1> 		cmp al, 1
  4442 00003937 7433                <1> 		je prntvr
  4443 00003939 BE[7A1B0000]        <1> 		mov esi, buftxt
  4444 0000393E 01FE                <1> 		add esi, edi
  4445 00003940 E90B000000          <1> 		jmp nxtvrech
  4446                              <1> 	nxtvrechb1:
  4447 00003945 81EB02000000        <1> 		sub ebx, 2
  4448 0000394B E9C8FFFFFF          <1> 		jmp echvar
  4449 00003950 8A03                <1> 	nxtvrech: mov al, [ebx]
  4450 00003952 3C05                <1> 		cmp al, 5
  4451 00003954 740A                <1> 		je nxtvrec2
  4452 00003956 43                  <1> 		inc ebx
  4453 00003957 81FB[6F1A0000]      <1> 		cmp ebx, varend
  4454 0000395D 72F1                <1> 		jb nxtvrech
  4455 0000395F C3                  <1> 		ret
  4456 00003960 43                  <1> 	nxtvrec2: inc ebx
  4457 00003961 8A03                <1> 		mov al, [ebx]
  4458 00003963 3C04                <1> 		cmp al, 4
  4459 00003965 74B1                <1> 		je echvar
  4460 00003967 E9E4FFFFFF          <1> 		jmp nxtvrech
  4461 0000396C 43                  <1> 	prntvr: inc ebx
  4462 0000396D 89DE                <1> 		mov esi, ebx
  4463 0000396F C3                  <1> 		ret
  4464 00003970 E867F0FFFF          <1> 	prntvr2: call print
  4465 00003975 BE[6B740000]        <1> 		mov esi, line
  4466 0000397A E85DF0FFFF          <1> 		call print
  4467 0000397F E9D6F6FFFF          <1> 		jmp nwcmd
  4468                              <1> 		
  4469                              <1> 
  4470 00003984 05042300            <1> db 5,4,"#",0
  4471                              <1> 	num:	
  4472 00003988 E869FAFFFF          <1> 		call clearbuffer
  4473 0000398D C605[1C3C0000]00    <1> 		mov byte [decimal], 0
  4474 00003994 C605[1D3C0000]00    <1> 		mov byte [decimal2], 0
  4475 0000399B BE[7A1B0000]        <1> 		mov esi, buftxt
  4476 000039A0 31C0                <1> 		xor eax, eax
  4477 000039A2 31C9                <1> 		xor ecx, ecx
  4478 000039A4 31DB                <1> 		xor ebx, ebx
  4479 000039A6 8A06                <1> 	num2:	mov al, [esi]
  4480 000039A8 3C2B                <1> 		cmp al, '+'
  4481 000039AA 741E                <1> 		je operatorfound
  4482 000039AC 3C2D                <1> 		cmp al, '-'
  4483 000039AE 741A                <1> 		je operatorfound
  4484 000039B0 3C2A                <1> 		cmp al, '*'
  4485 000039B2 7416                <1> 		je operatorfound
  4486 000039B4 3C2F                <1> 		cmp al, '/'
  4487 000039B6 7412                <1> 		je operatorfound
  4488 000039B8 3C5E                <1> 		cmp al, '^'
  4489 000039BA 740E                <1> 		je operatorfound
  4490 000039BC 46                  <1> 		inc esi
  4491 000039BD 3C00                <1> 		cmp al, 0
  4492 000039BF 0F8495F6FFFF        <1> 		je near nwcmd
  4493 000039C5 E9DCFFFFFF          <1> 		jmp num2
  4494 000039CA 50                  <1> 	operatorfound: push eax
  4495 000039CB 30E4                <1> 		xor ah, ah
  4496 000039CD 8826                <1> 		mov [esi], ah
  4497 000039CF 89F7                <1> 		mov edi, esi
  4498 000039D1 46                  <1> 		inc esi
  4499 000039D2 8A06                <1> 		mov al, [esi]
  4500                              <1> 		;cmp al, '$'
  4501                              <1> 		;je near varnum1	;;unnecessary
  4502 000039D4 3C25                <1> 		cmp al, '%'
  4503 000039D6 0F8461000000        <1> 		je near resultnum1
  4504                              <1> 	varnum2: 
  4505 000039DC 57                  <1> 		push edi
  4506 000039DD E8A9000000          <1> 		call checkdecimal
  4507 000039E2 5F                  <1> 		pop edi
  4508 000039E3 E813FDFFFF          <1> 		call cnvrttxt
  4509                              <1> 	vrnm2:
  4510 000039E8 89CB                <1> 		mov ebx, ecx
  4511 000039EA 53                  <1> 		push ebx
  4512 000039EB E806FAFFFF          <1> 		call clearbuffer
  4513 000039F0 BE[7A1B0000]        <1> 		mov esi, buftxt
  4514 000039F5 89F7                <1> 		mov edi, esi
  4515 000039F7 46                  <1> 		inc esi
  4516 000039F8 8A06                <1> 		mov al, [esi]
  4517                              <1> 		;cmp al, '$'
  4518                              <1> 		;je near varnum3	;;unnecessary
  4519 000039FA 3C25                <1> 		cmp al, '%'
  4520 000039FC 0F8452000000        <1> 		je near resultnum2
  4521                              <1> 	varnum4: 
  4522 00003A02 57                  <1> 		push edi
  4523 00003A03 E86F000000          <1> 		call checkdecimal2
  4524 00003A08 5F                  <1> 		pop edi
  4525 00003A09 E8EDFCFFFF          <1> 		call cnvrttxt
  4526                              <1> 	vrnm4:
  4527 00003A0E 5B                  <1> 		pop ebx
  4528 00003A0F 58                  <1> 		pop eax
  4529 00003A10 3C2B                <1> 		cmp al, '+'
  4530 00003A12 0F84A7000000        <1> 		je near plusnum
  4531 00003A18 3C2D                <1> 		cmp al, '-'
  4532 00003A1A 0F84AB000000        <1> 		je near subnum
  4533 00003A20 3C2A                <1> 		cmp al, '*'
  4534 00003A22 0F84AF000000        <1> 		je near mulnum
  4535 00003A28 3C2F                <1> 		cmp al, '/'
  4536 00003A2A 0F84BD000000        <1> 		je near divnum
  4537 00003A30 3C5E                <1> 		cmp al, '^'
  4538 00003A32 0F84D8000000        <1> 		je near expnum
  4539 00003A38 E91DF6FFFF          <1> 		jmp nwcmd
  4540                              <1> 	resultnum1:
  4541 00003A3D 8A0D[1E3C0000]      <1> 		mov cl, [decimalresult]
  4542 00003A43 880D[1C3C0000]      <1> 		mov [decimal], cl
  4543 00003A49 8B0D[1F3C0000]      <1> 		mov ecx, [result]
  4544 00003A4F E994FFFFFF          <1> 		jmp vrnm2
  4545                              <1> 	resultnum2:
  4546 00003A54 8A0D[1C3C0000]      <1> 		mov cl, [decimal]
  4547 00003A5A 880D[1D3C0000]      <1> 		mov [decimal2], cl
  4548 00003A60 8A0D[1E3C0000]      <1> 		mov cl, [decimalresult]
  4549 00003A66 880D[1C3C0000]      <1> 		mov [decimal], cl
  4550 00003A6C 8B0D[1F3C0000]      <1> 		mov ecx, [result]
  4551 00003A72 E997FFFFFF          <1> 		jmp vrnm4
  4552                              <1> ;	varnum1: sub esi, buftxt
  4553                              <1> ;		mov edi, esi
  4554                              <1> ;		add esi, buftxt
  4555                              <1> ;		inc edi
  4556                              <1> ;		mov ebx, variables
  4557                              <1> ;		call nxtvrech
  4558                              <1> ;		mov edi, esi
  4559                              <1> ;		dec edi
  4560                              <1> ;		jmp varnum2
  4561                              <1> ;	varnum3: sub esi, buftxt
  4562                              <1> ;		mov edi, esi
  4563                              <1> ;		add esi, buftxt
  4564                              <1> ;		inc edi
  4565                              <1> ;		mov ebx, variables
  4566                              <1> ;		call nxtvrech
  4567                              <1> ;		mov edi, esi
  4568                              <1> ;		dec edi
  4569                              <1> ;		jmp varnum4
  4570                              <1> 	checkdecimal2:
  4571 00003A77 8A25[1C3C0000]      <1> 		mov ah, [decimal]
  4572 00003A7D 8825[1D3C0000]      <1> 		mov [decimal2], ah
  4573 00003A83 30E4                <1> 		xor ah, ah
  4574 00003A85 8825[1C3C0000]      <1> 		mov [decimal], ah
  4575                              <1> 	checkdecimal:
  4576 00003A8B 89F7                <1> 		mov edi, esi
  4577                              <1> 	chkdec1:
  4578 00003A8D 8A07                <1> 		mov al, [edi]
  4579 00003A8F 3C2E                <1> 		cmp al, '.'
  4580 00003A91 0F840E000000        <1> 		je near fnddec
  4581 00003A97 3C00                <1> 		cmp al, 0
  4582 00003A99 0F841F000000        <1> 		je near nodecimal
  4583 00003A9F 47                  <1> 		inc edi
  4584 00003AA0 E9E8FFFFFF          <1> 		jmp chkdec1
  4585                              <1> 	fnddec:
  4586 00003AA5 8A4701              <1> 		mov al, [edi + 1]
  4587 00003AA8 8807                <1> 		mov [edi], al
  4588 00003AAA 3C00                <1> 		cmp al, 0
  4589 00003AAC 0F840C000000        <1> 		je near nodecimal
  4590 00003AB2 FE05[1C3C0000]      <1> 		inc byte [decimal]
  4591 00003AB8 47                  <1> 		inc edi
  4592 00003AB9 E9E7FFFFFF          <1> 		jmp fnddec
  4593                              <1> 	nodecimal:
  4594 00003ABE C3                  <1> 		ret
  4595                              <1> 	plusnum:
  4596 00003ABF E816010000          <1> 		call decaddfix
  4597 00003AC4 01D9                <1> 		add ecx, ebx
  4598 00003AC6 E988000000          <1> 		jmp retnum
  4599                              <1> 	subnum:
  4600 00003ACB E80A010000          <1> 		call decaddfix
  4601 00003AD0 29D9                <1> 		sub ecx, ebx
  4602 00003AD2 E97C000000          <1> 		jmp retnum
  4603                              <1> 	mulnum:
  4604 00003AD7 A0[1D3C0000]        <1> 		mov al, [decimal2]
  4605 00003ADC 0005[1C3C0000]      <1> 		add [decimal], al
  4606 00003AE2 89C8                <1> 		mov eax, ecx
  4607 00003AE4 F7E3                <1> 		mul ebx
  4608 00003AE6 89C1                <1> 		mov ecx, eax
  4609 00003AE8 E966000000          <1> 		jmp retnum
  4610                              <1> 	divnum:
  4611 00003AED E8E8000000          <1> 		call decaddfix
  4612 00003AF2 30C0                <1> 		xor al, al
  4613 00003AF4 A2[1C3C0000]        <1> 		mov [decimal], al
  4614 00003AF9 6689C8              <1> 		mov ax, cx
  4615 00003AFC 80FB00              <1> 		cmp bl, 0
  4616 00003AFF 0F844E000000        <1> 		je near retnum
  4617 00003B05 F6F3                <1> 		div bl
  4618 00003B07 31C9                <1> 		xor ecx, ecx
  4619 00003B09 88C1                <1> 		mov cl, al
  4620 00003B0B E943000000          <1> 		jmp retnum
  4621                              <1> 	expnum:
  4622 00003B10 8A15[1C3C0000]      <1> 		mov dl, [decimal]
  4623 00003B16 8815[1D3C0000]      <1> 		mov [decimal2], dl
  4624 00003B1C 31D2                <1> 		xor edx, edx
  4625 00003B1E 89C8                <1> 		mov eax, ecx
  4626 00003B20 89D9                <1> 		mov ecx, ebx
  4627 00003B22 89C3                <1> 		mov ebx, eax
  4628 00003B24 81F900000000        <1> 		cmp ecx, 0
  4629 00003B2A 7422                <1> 		je noexpnum
  4630 00003B2C 49                  <1> 		dec ecx
  4631 00003B2D 81F900000000        <1> 		cmp ecx, 0
  4632 00003B33 7412                <1> 		je noexpnumlp
  4633 00003B35 F7E3                <1> 	expnumlp: mul ebx
  4634 00003B37 8A15[1D3C0000]      <1> 		mov dl, [decimal2]
  4635 00003B3D 0015[1C3C0000]      <1> 		add [decimal], dl
  4636 00003B43 31D2                <1> 		xor edx, edx
  4637 00003B45 E2EE                <1> 		loop expnumlp
  4638                              <1> 	noexpnumlp:
  4639 00003B47 89C1                <1> 		mov ecx, eax
  4640 00003B49 E905000000          <1> 		jmp retnum
  4641                              <1> 	noexpnum:
  4642 00003B4E B901000000          <1> 		mov ecx, 1
  4643                              <1> 	retnum: 
  4644 00003B53 BE[8E1D0000]        <1> 		mov esi, numbuf
  4645 00003B58 890D[1F3C0000]      <1> 		mov [result], ecx
  4646 00003B5E E8ABF8FFFF          <1> 		call convert
  4647 00003B63 BE[8E1D0000]        <1> 		mov esi, numbuf
  4648 00003B68 8A25[1C3C0000]      <1> 		mov ah, [decimal]
  4649 00003B6E 8825[1E3C0000]      <1> 		mov [decimalresult], ah
  4650 00003B74 80FC00              <1> 		cmp ah, 0
  4651 00003B77 0F8425000000        <1> 		je near noputdecimal
  4652                              <1> 	putdecimal:
  4653 00003B7D 4E                  <1> 		dec esi
  4654 00003B7E FECC                <1> 		dec ah
  4655 00003B80 80FC00              <1> 		cmp ah, 0
  4656 00003B83 0F87F4FFFFFF        <1> 		ja near putdecimal
  4657 00003B89 4E                  <1> 		dec esi
  4658 00003B8A 8A06                <1> 		mov al, [esi]
  4659 00003B8C C6062E              <1> 		mov byte [esi], '.'
  4660                              <1> 	decputloop:
  4661 00003B8F 4E                  <1> 		dec esi
  4662 00003B90 8A26                <1> 		mov ah, [esi]
  4663 00003B92 8806                <1> 		mov [esi], al
  4664 00003B94 88E0                <1> 		mov al, ah
  4665 00003B96 81FE[7A1D0000]      <1> 		cmp esi, buf2
  4666 00003B9C 0F87EDFFFFFF        <1> 		ja near decputloop
  4667                              <1> 	noputdecimal:
  4668 00003BA2 BE[7A1D0000]        <1> 		mov esi, buf2
  4669 00003BA7 E809000000          <1> 		call chkadd
  4670 00003BAC E9A9F4FFFF          <1> 		jmp nwcmd
  4671 00003BB1 00000000            <1> edxnumbuf dw 0,0
  4672 00003BB5 8A06                <1> 	chkadd: mov al, [esi]
  4673 00003BB7 3C30                <1> 		cmp al, '0'
  4674 00003BB9 750F                <1> 		jne dnadd
  4675 00003BBB 46                  <1> 		inc esi
  4676 00003BBC 81FE[8E1D0000]      <1> 		cmp esi, numbuf
  4677 00003BC2 7405                <1> 		je dnaddm1
  4678 00003BC4 E9ECFFFFFF          <1> 		jmp chkadd
  4679 00003BC9 4E                  <1> 	dnaddm1: dec esi
  4680 00003BCA E80DEEFFFF          <1> 	dnadd:	call print
  4681 00003BCF BE[6B740000]        <1> 		mov esi, line
  4682 00003BD4 E803EEFFFF          <1> 		call print
  4683 00003BD9 C3                  <1> 		ret
  4684                              <1> 		
  4685                              <1> 	decaddfix:
  4686 00003BDA A0[1D3C0000]        <1> 		mov al, [decimal2]
  4687 00003BDF 8A25[1C3C0000]      <1> 		mov ah, [decimal]
  4688 00003BE5 38E0                <1> 		cmp al, ah
  4689 00003BE7 7432                <1> 		je gooddecadd
  4690 00003BE9 38E0                <1> 		cmp al, ah
  4691 00003BEB 721A                <1> 		jb lowdecadd
  4692                              <1> 	highdecadd:
  4693 00003BED FEC4                <1> 		inc ah
  4694 00003BEF 89CA                <1> 		mov edx, ecx
  4695 00003BF1 C1E103              <1> 		shl ecx, 3
  4696 00003BF4 01D1                <1> 		add ecx, edx
  4697 00003BF6 01D1                <1> 		add ecx, edx
  4698 00003BF8 38E0                <1> 		cmp al, ah
  4699 00003BFA 77F1                <1> 		ja highdecadd
  4700 00003BFC 8825[1C3C0000]      <1> 		mov [decimal], ah
  4701 00003C02 E914000000          <1> 		jmp gooddecadd
  4702                              <1> 	lowdecadd:
  4703 00003C07 FEC0                <1> 		inc al
  4704 00003C09 89DA                <1> 		mov edx, ebx
  4705 00003C0B C1E303              <1> 		shl ebx, 3
  4706 00003C0E 01D3                <1> 		add ebx, edx
  4707 00003C10 01D3                <1> 		add ebx, edx
  4708 00003C12 38E0                <1> 		cmp al, ah
  4709 00003C14 72F1                <1> 		jb lowdecadd
  4710 00003C16 A2[1C3C0000]        <1> 		mov [decimal], al
  4711                              <1> 	gooddecadd:
  4712 00003C1B C3                  <1> 		ret
  4713                              <1> 		
  4714 00003C1C 00                  <1> decimal db 0
  4715 00003C1D 00                  <1> decimal2 db 0
  4716 00003C1E 00                  <1> decimalresult db 0
  4717 00003C1F 00000000            <1> result db 0,0,0,0
  4718                              <1> 	
  4719 00003C23 05042500            <1> db 5,4,"%",0
  4720 00003C27 E8CAF7FFFF          <1> 	ans:	call clearbuffer
  4721 00003C2C 8B0D[1F3C0000]      <1> 		mov ecx, [result]
  4722 00003C32 BE[7A1D0000]        <1> 		mov esi, buf2
  4723 00003C37 E8D2F7FFFF          <1> 		call convert
  4724 00003C3C BE[7A1D0000]        <1> 		mov esi, buf2
  4725 00003C41 E86FFFFFFF          <1> 		call chkadd
  4726 00003C46 E90FF4FFFF          <1> 		jmp nwcmd
  4727                              <1> 
  4728 00003C4B 05042400            <1> db 5,4,"$",0
  4729 00003C4F BE[7A1B0000]        <1> var: mov esi, buftxt
  4730 00003C54 BB[6F150000]        <1> 	mov ebx, variables
  4731 00003C59 8A06                <1> lkeq:	mov al, [esi]
  4732 00003C5B 3C3D                <1> 	cmp al, '='
  4733 00003C5D 7422                <1> 	je eqfnd	;is there an '=' sign?
  4734 00003C5F 3C00                <1> 	cmp al, 0
  4735 00003C61 7406                <1> 	je echovars
  4736 00003C63 46                  <1> 	inc esi
  4737 00003C64 E9F0FFFFFF          <1> 	jmp lkeq
  4738 00003C69 BE[6F150000]        <1> echovars: mov esi, variables
  4739 00003C6E BB[6F1A0000]        <1> 	mov ebx, varend
  4740 00003C73 B105                <1> 	mov cl, 5
  4741 00003C75 B504                <1> 	mov ch, 4
  4742 00003C77 E813F7FFFF          <1> 	call array
  4743 00003C7C E9D9F3FFFF          <1> 	jmp nwcmd
  4744 00003C81 46                  <1> eqfnd:	inc esi
  4745 00003C82 8A06                <1> 	mov al, [esi]
  4746 00003C84 3C00                <1> 	cmp al, 0
  4747 00003C86 740F                <1> 	je readvar
  4748 00003C88 BE[7A1B0000]        <1> 	mov esi, buftxt
  4749 00003C8D BB[6F150000]        <1> 	mov ebx, variables
  4750 00003C92 E926000000          <1> 	jmp seek
  4751                              <1> readvar:
  4752 00003C97 B00D                <1> 	mov al, 13
  4753 00003C99 66BB0700            <1> 	mov bx, 7
  4754 00003C9D C605[402A0000]00    <1> 	mov byte [commandedit], 0
  4755 00003CA4 BF[7A1D0000]        <1> 	mov edi, buftxtend
  4756 00003CA9 E89FEDFFFF          <1> 	call int305
  4757 00003CAE BE[6B740000]        <1> 	mov esi, line
  4758 00003CB3 E824EDFFFF          <1> 	call print
  4759 00003CB8 E992FFFFFF          <1> 	jmp var
  4760 00003CBD 668B03              <1> seek:	mov ax, [ebx]
  4761 00003CC0 B105                <1> 	mov cl, 5
  4762 00003CC2 B504                <1> 	mov ch, 4
  4763 00003CC4 663D0000            <1> 	cmp ax, 0
  4764 00003CC8 0F8468000000        <1> 	je near save
  4765 00003CCE 6639C8              <1> 	cmp ax, cx
  4766 00003CD1 7406                <1> 	je skfnd
  4767 00003CD3 43                  <1> 	inc ebx
  4768 00003CD4 E9E4FFFFFF          <1> 	jmp seek
  4769 00003CD9 BE[7A1B0000]        <1> skfnd:	mov esi, buftxt
  4770 00003CDE 46                  <1> 	inc esi
  4771 00003CDF 81C302000000        <1> 	add ebx, 2
  4772 00003CE5 89DF                <1> 	mov edi, ebx
  4773 00003CE7 B13D                <1> 	mov cl, '='
  4774 00003CE9 E8C8F5FFFF          <1> 	call cndtest
  4775 00003CEE 3C01                <1> 	cmp al, 1	
  4776 00003CF0 741A                <1> 	je varfnd
  4777 00003CF2 89FB                <1> 	mov ebx, edi
  4778 00003CF4 BE[7A1B0000]        <1> 	mov esi, buftxt
  4779 00003CF9 668B03              <1> 	mov ax, [ebx]
  4780 00003CFC 663D0000            <1> 	cmp ax, 0
  4781 00003D00 0F8430000000        <1> 	je near save
  4782 00003D06 43                  <1> 	inc ebx
  4783 00003D07 E9B1FFFFFF          <1> 	jmp seek
  4784 00003D0C 8A03                <1> varfnd:	mov al, [ebx]
  4785 00003D0E 3C04                <1> 	cmp al, 4
  4786 00003D10 7407                <1> 	je save2
  4787 00003D12 4B                  <1> 	dec ebx
  4788 00003D13 4E                  <1> 	dec esi
  4789 00003D14 E9F3FFFFFF          <1> 	jmp varfnd
  4790 00003D19 4B                  <1> save2:	dec ebx
  4791 00003D1A 4E                  <1> 	dec esi
  4792 00003D1B 8A03                <1> 	mov al, [ebx]
  4793 00003D1D 3C05                <1> 	cmp al, 5
  4794 00003D1F 7405                <1> 	je remove
  4795 00003D21 E9E6FFFFFF          <1> 	jmp varfnd
  4796 00003D26 8A03                <1> remove: mov al, [ebx]
  4797 00003D28 3C00                <1> 	cmp al, 0
  4798 00003D2A 7491                <1> 	je seek
  4799 00003D2C 30C0                <1> 	xor al, al
  4800 00003D2E 8803                <1> 	mov [ebx], al
  4801 00003D30 43                  <1> 	inc ebx
  4802 00003D31 E9F0FFFFFF          <1> 	jmp remove	;do not need for now-need defragmentation
  4803 00003D36 BE[7A1B0000]        <1> save:	mov esi, buftxt
  4804 00003D3B 43                  <1> 	inc ebx
  4805 00003D3C B005                <1> 	mov al, 5
  4806 00003D3E B404                <1> 	mov ah, 4
  4807 00003D40 668903              <1> 	mov [ebx], ax
  4808 00003D43 43                  <1> 	inc ebx
  4809 00003D44 43                  <1> svhere:	inc ebx
  4810 00003D45 46                  <1> 	inc esi
  4811 00003D46 8A06                <1> 	mov al, [esi]
  4812 00003D48 3C00                <1> 	cmp al, 0
  4813 00003D4A 0F844E000000        <1> 	je near svdone
  4814 00003D50 3C25                <1> 	cmp al, '%'
  4815 00003D52 7407                <1> 	je ans2
  4816 00003D54 8803                <1> 	mov [ebx], al	
  4817 00003D56 E9E9FFFFFF          <1> 	jmp svhere
  4818 00003D5B 56                  <1> ans2:	push esi
  4819 00003D5C BE[7A1D0000]        <1> 	mov esi, buf2
  4820 00003D61 E82C000000          <1> 	call ansfnd
  4821 00003D66 E806000000          <1> 	call anscp
  4822 00003D6B 5E                  <1> 	pop esi
  4823 00003D6C E9D3FFFFFF          <1> 	jmp svhere
  4824 00003D71 8A06                <1> anscp:	mov al, [esi]
  4825 00003D73 8803                <1> 	mov [ebx], al
  4826 00003D75 81FE[8E1D0000]      <1> 	cmp esi, numbuf
  4827 00003D7B 74C7                <1> 	je svhere
  4828 00003D7D 3C00                <1> 	cmp al, 0
  4829 00003D7F 74C3                <1> 	je svhere
  4830 00003D81 43                  <1> 	inc ebx
  4831 00003D82 46                  <1> 	inc esi
  4832 00003D83 E9E9FFFFFF          <1> 	jmp anscp
  4833 00003D88 5E                  <1> ansnf:	pop esi
  4834 00003D89 8A06                <1> 	mov al, [esi]
  4835 00003D8B 8803                <1> 	mov [ebx], al
  4836 00003D8D E9B2FFFFFF          <1> 	jmp svhere
  4837 00003D92 46                  <1> ansfnd:	inc esi
  4838 00003D93 8A06                <1> 	mov al, [esi]
  4839 00003D95 3C00                <1> 	cmp al, 0
  4840 00003D97 74EF                <1> 	je ansnf
  4841 00003D99 3C30                <1> 	cmp al, '0'
  4842 00003D9B 74F5                <1> 	je ansfnd
  4843 00003D9D C3                  <1> 	ret
  4844 00003D9E 30C0                <1> svdone:	xor al, al
  4845 00003DA0 8803                <1> 	mov [ebx], al
  4846 00003DA2 E9B3F2FFFF          <1> 	jmp nwcmd
  4847                              <1> 	
  4848 00003DA7 05046C6F676F757400  <1> 	db 5,4,"logout",0
  4849                              <1> logout:
  4850 00003DB0 E96FF1FFFF          <1> 	jmp os
  4851                              <1> 	
  4852 00003DB5 05047265626F6F7400  <1> 	db 5,4,"reboot",0
  4853                              <1> rebootcomp:
  4854 00003DBE E997C4FFFF          <1> 	jmp coldboot
  4855                              <1> 
  4856 00003DC3 050473687574646F77- <1> 	db 5,4,"shutdown",0
  4857 00003DCC 6E00                <1>
  4858                              <1> shutdowncomp:
  4859 00003DCE E95DC4FFFF          <1> 	jmp shutdown
  4860                              <1> 
  4861 00003DD3 0504646F7300        <1> 	db 5,4,"dos",0
  4862                              <1> rundosprog:
  4863 00003DD9 BF[7A1B0000]        <1> 	mov edi, buftxt
  4864 00003DDE 81C704000000        <1> 	add edi, 4
  4865 00003DE4 BE00010000          <1> 	mov esi, 0x100
  4866 00003DE9 E8F52C0000          <1> 	call loadfile
  4867 00003DEE 81FA94010000        <1> 	cmp edx, 404
  4868 00003DF4 0F8480000000        <1> 	je near noprogfound
  4869 00003DFA BB80000000          <1> 	mov ebx, 0x80
  4870 00003DFF BF[7A1B0000]        <1> 	mov edi, buftxt
  4871 00003E04 81C704000000        <1> 	add edi, 4
  4872                              <1> finddosparams:
  4873 00003E0A 8A07                <1> 	mov al, [edi]
  4874 00003E0C 47                  <1> 	inc edi
  4875 00003E0D 3C20                <1> 	cmp al, " "
  4876 00003E0F 75F9                <1> 	jne finddosparams
  4877                              <1> copydosparams:
  4878 00003E11 8A07                <1> 	mov al, [edi]
  4879 00003E13 8803                <1> 	mov [ebx], al
  4880 00003E15 43                  <1> 	inc ebx
  4881 00003E16 47                  <1> 	inc edi
  4882 00003E17 81FB00010000        <1> 	cmp ebx, 0x100
  4883 00003E1D 7304                <1> 	jae nomoredosparams
  4884 00003E1F 3C00                <1> 	cmp al, 0
  4885 00003E21 75EE                <1> 	jne copydosparams
  4886                              <1> nomoredosparams:
  4887 00003E23 BB00010000          <1> 	mov ebx, 0x100
  4888 00003E28 FFE3                <1> 	jmp ebx
  4889                              <1> 	
  4890 00003E2A 05042E2F00          <1> 	db 5,4,"./",0
  4891                              <1> rundiskprog:
  4892 00003E2F BF[7A1B0000]        <1> 	mov edi, buftxt
  4893 00003E34 81C702000000        <1> 	add edi, 2
  4894 00003E3A BE00004000          <1> 	mov esi, 0x400000
  4895 00003E3F E89F2C0000          <1> 	call loadfile
  4896 00003E44 81FA94010000        <1> 	cmp edx, 404
  4897 00003E4A 742E                <1> 	je noprogfound
  4898 00003E4C BB00004000          <1> 	mov ebx, 0x400000
  4899 00003E51 66813B4558          <1> 	cmp word [ebx], "EX"
  4900 00003E56 754B                <1> 	jne progbatchfound
  4901 00003E58 81C302000000        <1> 	add ebx, 2
  4902 00003E5E BF[7A1B0000]        <1> 	mov edi, buftxt
  4903 00003E63 81C702000000        <1> 	add edi, 2
  4904                              <1> findspaceprog:
  4905 00003E69 8A07                <1> 	mov al, [edi]
  4906 00003E6B 47                  <1> 	inc edi
  4907 00003E6C 3C20                <1> 	cmp al, " "
  4908 00003E6E 75F9                <1> 	jne findspaceprog
  4909                              <1> findnonspaceprog:
  4910 00003E70 8A07                <1> 	mov al, [edi]
  4911 00003E72 47                  <1> 	inc edi
  4912 00003E73 3C20                <1> 	cmp al, " "
  4913 00003E75 74F9                <1> 	je findnonspaceprog
  4914 00003E77 4F                  <1> 	dec edi
  4915 00003E78 FFE3                <1> 	jmp ebx
  4916                              <1> noprogfound:
  4917 00003E7A BE[32740000]        <1> 	mov esi, notfound1
  4918 00003E7F E858EBFFFF          <1> 	call print
  4919 00003E84 BE[7A1B0000]        <1> 	mov esi, buftxt
  4920 00003E89 81C602000000        <1> 	add esi, 2
  4921 00003E8F E848EBFFFF          <1> 	call print
  4922 00003E94 BE[3C740000]        <1> 	mov esi, notfound2
  4923 00003E99 E83EEBFFFF          <1> 	call print
  4924 00003E9E E9B7F1FFFF          <1> 	jmp nwcmd
  4925                              <1> progbatchfound:
  4926 00003EA3 BF00004000          <1> 		mov edi, 0x400000
  4927 00003EA8 C605[69150000]01    <1> 		mov byte [BATCHISON], 1
  4928                              <1> 	batchrunloop:
  4929 00003EAF E873F1FFFF          <1> 		call buftxtclear
  4930 00003EB4 BE[7A1B0000]        <1> 		mov esi, buftxt
  4931                              <1> 	batchrunloop2:
  4932 00003EB9 B10D                <1> 		mov cl, 13
  4933 00003EBB B50A                <1> 		mov ch, 10
  4934 00003EBD 66390F              <1> 		cmp [edi], cx
  4935 00003EC0 0F8421000000        <1> 		je near nxtbatchrunline
  4936 00003EC6 66C1C108            <1> 		rol cx, 8
  4937 00003ECA 66390F              <1> 		cmp [edi], cx
  4938 00003ECD 0F8414000000        <1> 		je near nxtbatchrunline
  4939 00003ED3 803F00              <1> 		cmp byte [edi], 0
  4940 00003ED6 0F840B000000        <1> 		je near nxtbatchrunline
  4941 00003EDC 8A07                <1> 		mov al, [edi]
  4942 00003EDE 8806                <1> 		mov [esi], al
  4943 00003EE0 46                  <1> 		inc esi
  4944 00003EE1 47                  <1> 		inc edi
  4945 00003EE2 E9D2FFFFFF          <1> 		jmp batchrunloop2
  4946                              <1> 	nxtbatchrunline:
  4947 00003EE7 81C702000000        <1> 		add edi, 2
  4948 00003EED 893D[4F3F0000]      <1> 		mov [batchedi], edi
  4949 00003EF3 893D[65150000]      <1> 		mov [BATCHPOS], edi
  4950 00003EF9 C60600              <1> 		mov byte [esi], 0
  4951 00003EFC BE[7A1B0000]        <1> 		mov esi, buftxt
  4952 00003F01 803E00              <1> 		cmp byte [esi], 0
  4953 00003F04 0F8439000000        <1> 		je near nobatchfoundrun
  4954 00003F0A 31DB                <1> 		xor ebx, ebx
  4955 00003F0C 8A1D[00150000]      <1> 		mov bl, [IFON]
  4956 00003F12 80FB00              <1> 		cmp bl, 0
  4957 00003F15 0F8538000000        <1> 		jne near iftestbatch
  4958                              <1> 	doneiftest:
  4959 00003F1B 803D[3D400000]00    <1> 		cmp byte [runnextline], 0
  4960 00003F22 0F8405000000        <1> 		je near noruniftest
  4961 00003F28 E89EF2FFFF          <1> 		call progtest2
  4962                              <1> 	noruniftest:
  4963 00003F2D C605[3D400000]01    <1> 		mov byte [runnextline], 1
  4964 00003F34 8B3D[4F3F0000]      <1> 		mov edi, [batchedi]
  4965 00003F3A 803F00              <1> 		cmp byte [edi], 0
  4966 00003F3D 0F856CFFFFFF        <1> 		jne near batchrunloop
  4967                              <1> 	nobatchfoundrun:
  4968 00003F43 C605[69150000]00    <1> 		mov byte [BATCHISON], 0
  4969 00003F4A E90BF1FFFF          <1> 		jmp nwcmd
  4970                              <1> 	
  4971 00003F4F 00000000            <1> batchedi dd 0	
  4972                              <1> 	
  4973                              <1> 	iftestbatch:
  4974 00003F53 BE[01150000]        <1> 		mov esi, IFTRUE
  4975 00003F58 01DE                <1> 		add esi, ebx
  4976 00003F5A 803E00              <1> 		cmp byte [esi], 0
  4977 00003F5D 0F85B8FFFFFF        <1> 		jne near doneiftest
  4978 00003F63 881D[3E400000]      <1> 		mov [iffalsebuf], bl
  4979 00003F69 803D[6A150000]01    <1> 		cmp byte [LOOPON], 1
  4980 00003F70 0F8513000000        <1> 		jne near fifindbatch
  4981 00003F76 E934FFFFFF          <1> 		jmp batchrunloop
  4982                              <1> 	elsetestbatch:
  4983 00003F7B C60601              <1> 		mov byte [esi], 1
  4984 00003F7E 81C706000000        <1> 		add edi, 6
  4985 00003F84 E926FFFFFF          <1> 		jmp batchrunloop
  4986                              <1> 	fifindbatch:
  4987 00003F89 66B96966            <1> 		mov cx, "if"
  4988 00003F8D 66B86669            <1> 		mov ax, "fi"
  4989 00003F91 663907              <1> 		cmp [edi], ax
  4990 00003F94 0F842A000000        <1> 		je near fifoundbatch
  4991 00003F9A 66390F              <1> 		cmp [edi], cx
  4992 00003F9D 0F847D000000        <1> 		je near iffoundbatch
  4993 00003FA3 803F00              <1> 		cmp byte [edi], 0
  4994 00003FA6 0F8418000000        <1> 		je near fifoundbatch
  4995 00003FAC B8656C7365          <1> 		mov eax, "else"
  4996 00003FB1 3907                <1> 		cmp [edi], eax
  4997 00003FB3 0F84C2FFFFFF        <1> 		je near elsetestbatch
  4998 00003FB9 81C702000000        <1> 		add edi, 2
  4999 00003FBF E9C5FFFFFF          <1> 		jmp fifindbatch
  5000                              <1> 	fifoundbatch:
  5001 00003FC4 81C702000000        <1> 		add edi, 2
  5002 00003FCA B00D                <1> 		mov al, 13
  5003 00003FCC B40A                <1> 		mov ah, 10
  5004 00003FCE 663907              <1> 		cmp [edi], ax
  5005 00003FD1 0F841B000000        <1> 		je near goodfibatch
  5006 00003FD7 66C1C008            <1> 		rol ax, 8
  5007 00003FDB 663907              <1> 		cmp [edi], ax
  5008 00003FDE 0F840E000000        <1> 		je near goodfibatch
  5009 00003FE4 803F00              <1> 		cmp byte [edi], 0
  5010 00003FE7 0F8456FFFFFF        <1> 		je near nobatchfoundrun
  5011 00003FED E997FFFFFF          <1> 		jmp fifindbatch
  5012                              <1> 	goodfibatch:
  5013 00003FF2 B001                <1> 		mov al, 1
  5014 00003FF4 2805[00150000]      <1> 		sub [IFON], al 
  5015 00003FFA A0[00150000]        <1> 		mov al, [IFON]
  5016 00003FFF 8A1D[3E400000]      <1> 		mov bl, [iffalsebuf]
  5017 00004005 38D8                <1> 		cmp al, bl
  5018 00004007 7780                <1> 		ja fifindbatch
  5019 00004009 BE[7A1B0000]        <1> 		mov esi, buftxt
  5020 0000400E 81EF02000000        <1> 		sub edi, 2
  5021 00004014 C605[3D400000]00    <1> 		mov byte [runnextline], 0
  5022 0000401B E98FFEFFFF          <1> 		jmp batchrunloop
  5023                              <1> 	iffoundbatch:
  5024 00004020 B020                <1> 		mov al, ' '
  5025 00004022 81C702000000        <1> 		add edi, 2
  5026 00004028 3807                <1> 		cmp [edi], al
  5027 0000402A 0F8559FFFFFF        <1> 		jne near fifindbatch
  5028 00004030 B001                <1> 		mov al, 1
  5029 00004032 0005[00150000]      <1> 		add [IFON], al
  5030 00004038 E94CFFFFFF          <1> 		jmp fifindbatch
  5031                              <1> 		
  5032                              <1> 		
  5033 0000403D 01                  <1> runnextline db 1
  5034 0000403E 00                  <1> iffalsebuf db 0
  5035                              <1> 
  5036 0000403F E916F0FFFF          <1> notbatch: jmp nwcmd
  5037                              <1> 
  5038 00004044 050472656D00        <1> 	db 5,4,"rem",0	;this lets you rem stuff
  5039 0000404A E90BF0FFFF          <1> 	jmp nwcmd
  5040                              <1> 
  5041 0000404F 05047768696C6500    <1> 	db 5,4,"while",0
  5042 00004057 30C0                <1> whilecmd:  xor al, al
  5043 00004059 3805[69150000]      <1> 	cmp [BATCHISON], al
  5044 0000405F 0F84DAFFFFFF        <1> 	je near notbatch
  5045 00004065 8B35[65150000]      <1> 	mov esi, [BATCHPOS]
  5046 0000406B 81EE02000000        <1> 	sub esi, 2
  5047 00004071 4E                  <1> whilefnd: dec esi
  5048 00004072 8A06                <1> 	mov al, [esi]
  5049 00004074 3C0A                <1> 	cmp al, 10
  5050 00004076 0F8415000000        <1> 	je near whilefnd2
  5051 0000407C 3C0D                <1> 	cmp al, 13
  5052 0000407E 0F840D000000        <1> 	je near whilefnd2
  5053 00004084 3C00                <1> 	cmp al, 0
  5054 00004086 0F8405000000        <1> 	je near whilefnd2
  5055 0000408C E9E0FFFFFF          <1> 	jmp whilefnd
  5056                              <1> whilefnd2:
  5057 00004091 46                  <1> 	inc esi
  5058 00004092 8935[6B150000]      <1> 	mov [LOOPPOS], esi
  5059 00004098 C605[6A150000]01    <1> 	mov BYTE [LOOPON], 1
  5060 0000409F BE[7A1B0000]        <1> 	mov esi, buftxt
  5061 000040A4 BB[7A1B0000]        <1> 	mov ebx, buftxt
  5062 000040A9 81C306000000        <1> 	add ebx, 6
  5063 000040AF E923000000          <1> 	jmp chkeqsn
  5064                              <1> 
  5065                              <1> 
  5066 000040B4 0504696600          <1> 	db 5,4,"if",0
  5067 000040B9 30C0                <1> ifcmd:	xor al, al
  5068 000040BB 3805[69150000]      <1> 	cmp [BATCHISON], al
  5069 000040C1 0F8478FFFFFF        <1> 	je near notbatch
  5070 000040C7 BE[7A1B0000]        <1> 	mov esi, buftxt
  5071 000040CC BB[7A1B0000]        <1> 	mov ebx, buftxt
  5072 000040D1 81C303000000        <1> 	add ebx, 3
  5073 000040D7 8A06                <1> chkeqsn: mov al, [esi]
  5074 000040D9 3C00                <1> 	cmp al, 0
  5075 000040DB 0F845EFFFFFF        <1> 	je near notbatch
  5076 000040E1 3C3D                <1> 	cmp al, '='
  5077 000040E3 0F8406000000        <1> 	je near chkeqdn
  5078 000040E9 46                  <1> 	inc esi
  5079 000040EA E9E8FFFFFF          <1> 	jmp chkeqsn
  5080 000040EF B000                <1> chkeqdn: mov al, 0 
  5081 000040F1 8806                <1> 	mov [esi], al
  5082 000040F3 46                  <1> 	inc esi
  5083 000040F4 8A06                <1> 	mov al, [esi]
  5084 000040F6 3C24                <1> 	cmp al, '$'
  5085 000040F8 0F845C000000        <1> 	je near ifvar1
  5086 000040FE 8A03                <1> ifvar2: mov al, [ebx]
  5087 00004100 3C24                <1> 	cmp al, '$'
  5088 00004102 0F8475000000        <1> 	je near ifvar3
  5089 00004108 E869F1FFFF          <1> ifvar4:	call tester
  5090 0000410D 3C01                <1> 	cmp al, 1
  5091 0000410F 0F8405000000        <1> 	je near trueif
  5092 00004115 E920000000          <1> 	jmp falseif
  5093 0000411A 31C0                <1> trueif:	xor eax, eax
  5094 0000411C A0[00150000]        <1> 	mov al, [IFON]
  5095 00004121 FEC0                <1> 	inc al
  5096 00004123 A2[00150000]        <1> 	mov [IFON], al
  5097 00004128 30E4                <1> 	xor ah, ah
  5098 0000412A BE[01150000]        <1> 	mov esi, IFTRUE
  5099 0000412F 01C6                <1> 	add esi, eax
  5100 00004131 B401                <1> 	mov ah, 1
  5101 00004133 8826                <1> 	mov [esi], ah
  5102 00004135 E920EFFFFF          <1> 	jmp nwcmd
  5103 0000413A 31C0                <1> falseif: xor eax, eax
  5104 0000413C A0[00150000]        <1> 	mov al, [IFON]
  5105 00004141 FEC0                <1> 	inc al
  5106 00004143 A2[00150000]        <1> 	mov [IFON], al
  5107 00004148 30E4                <1> 	xor ah, ah
  5108 0000414A BE[01150000]        <1> 	mov esi, IFTRUE
  5109 0000414F 01C6                <1> 	add esi, eax
  5110 00004151 30E4                <1> 	xor ah, ah
  5111 00004153 8826                <1> 	mov [esi], ah
  5112 00004155 E900EFFFFF          <1> 	jmp nwcmd
  5113 0000415A 89F7                <1> ifvar1: mov edi, esi
  5114 0000415C 81EF[7A1B0000]      <1> 	sub edi, buftxt
  5115 00004162 47                  <1> 	inc edi
  5116 00004163 BB[6F150000]        <1> 	mov ebx, variables
  5117 00004168 E8E3F7FFFF          <1> 	call nxtvrech
  5118 0000416D BB[7A1B0000]        <1> 	mov ebx, buftxt
  5119 00004172 81C303000000        <1> 	add ebx, 3
  5120 00004178 E981FFFFFF          <1> 	jmp ifvar2
  5121 0000417D 8935[9D410000]      <1> ifvar3: mov [esiif], esi
  5122 00004183 BF04000000          <1> 	mov edi, 4
  5123 00004188 BB[6F150000]        <1> 	mov ebx, variables
  5124 0000418D E8BEF7FFFF          <1> 	call nxtvrech
  5125 00004192 8B35[9D410000]      <1> 	mov esi, [esiif]
  5126 00004198 E96BFFFFFF          <1> 	jmp ifvar4
  5127                              <1> 
  5128 0000419D 00000000            <1> esiif dd 0
  5129                              <1> 	
  5130 000041A1 0504656C736500      <1> 	db 5,4,"else",0
  5131 000041A8 31C0                <1> elsecmd:	xor eax, eax
  5132 000041AA A0[00150000]        <1> 	mov al, [IFON]
  5133 000041AF BE[01150000]        <1> 	mov esi, IFTRUE
  5134 000041B4 01C6                <1> 	add esi, eax
  5135 000041B6 8A06                <1> 	mov al, [esi]
  5136 000041B8 3401                <1> 	xor al, 1
  5137 000041BA 8806                <1> 	mov [esi], al
  5138 000041BC E999EEFFFF          <1> 	jmp nwcmd
  5139                              <1> 
  5140 000041C1 05046C6F6F7000      <1> 	db 5,4,"loop",0
  5141 000041C8 803D[6A150000]00    <1> 	cmp byte [LOOPON], 0
  5142 000041CF 0F8505000000        <1> 	jne near filoop
  5143 000041D5 E980EEFFFF          <1> 	jmp nwcmd
  5144 000041DA 8B35[6B150000]      <1> filoop: mov esi, [LOOPPOS]
  5145 000041E0 FE0D[00150000]      <1> 	dec byte [IFON]
  5146 000041E6 C605[6A150000]00    <1> 	mov byte [LOOPON], 0
  5147 000041ED 8935[65150000]      <1> 	mov [BATCHPOS], esi
  5148 000041F3 8935[4F3F0000]      <1> 	mov [batchedi], esi
  5149 000041F9 E95CEEFFFF          <1> 	jmp nwcmd
  5150                              <1> 	
  5151                              <1> 
  5152 000041FE 0504666900          <1> 	db 5,4,"fi",0
  5153 00004203 30C0                <1> 	xor al, al
  5154 00004205 3805[69150000]      <1> 	cmp [BATCHISON], al
  5155 0000420B 0F842EFEFFFF        <1> 	je near notbatch
  5156 00004211 B001                <1> fi:	mov al, 1
  5157 00004213 2805[00150000]      <1> 	sub [IFON],al
  5158 00004219 E93CEEFFFF          <1> 	jmp nwcmd
  5159                              <1> 
  5160 0000421E 050473746F7000      <1> 	db 5,4,"stop",0
  5161 00004225 30C0                <1> stop:	xor al, al
  5162 00004227 A2[69150000]        <1> 	mov [BATCHISON], al
  5163 0000422C A2[00150000]        <1> 	mov [IFON], al
  5164 00004231 A2[01150000]        <1> 	mov [IFTRUE], al
  5165 00004236 A2[6A150000]        <1> 	mov [LOOPON], al
  5166 0000423B E91AEEFFFF          <1> 	jmp nwcmd
  5167                                      %include 'source/programs.asm'
  5168                              <1> ;db 5,4,"internet",0
  5169                              <1> 	internettest: 			;;initialize network card, lets hope this is right
  5170                              <1> 							;;^^used to^^, now tests int 30h functions		
  5171 00004240 B403                <1> 		mov ah, 3
  5172 00004242 CD30                <1> 		int 30h
  5173 00004244 B401                <1> 		mov ah, 1
  5174                              <1> 		;mov esi, datmsg
  5175 00004246 66BB0700            <1> 		mov bx, 7
  5176 0000424A 30C0                <1> 		xor al, al
  5177 0000424C CD30                <1> 		int 30h
  5178                              <1> 	    ;jmp packettest
  5179 0000424E E907EEFFFF          <1> 		jmp nwcmd
  5180                              <1> ;datmsg: db "Internet has not been implemented yet.",10,13,0
  5181                              <1> 	
  5182 00004253 050474687265616473- <1> db 5,4,"threads",0
  5183 0000425C 00                  <1>
  5184 0000425D E96E2A0000          <1> 	jmp threadstarttest
  5185                              <1> 	
  5186 00004262 050472656700        <1> db 5,4,"reg",0
  5187 00004268 CD03                <1> 	int 3
  5188 0000426A E9EBEDFFFF          <1> 	jmp nwcmd
  5189                              <1> 	
  5190 0000426F 0504636861726D6170- <1> db 5,4,"charmap",0
  5191 00004278 00                  <1>
  5192 00004279 30C0                <1> 	xor al, al
  5193 0000427B 66BB0700            <1> 	mov bx, 7
  5194                              <1> charmapcopy:
  5195 0000427F FEC0                <1> 	inc al
  5196 00004281 3C08                <1> 	cmp al, 8
  5197 00004283 7429                <1> 	je charmapnocopy
  5198 00004285 3C09                <1> 	cmp al, 9
  5199 00004287 7425                <1> 	je charmapnocopy
  5200 00004289 3C0A                <1> 	cmp al, 10
  5201 0000428B 7421                <1> 	je charmapnocopy
  5202 0000428D 3C0D                <1> 	cmp al, 13
  5203 0000428F 741D                <1> 	je charmapnocopy
  5204 00004291 3C00                <1> 	cmp al, 0
  5205 00004293 740A                <1> 	je nomorecharmap
  5206 00004295 E831E5FFFF          <1> 	call int301prnt
  5207 0000429A E9E0FFFFFF          <1> 	jmp charmapcopy
  5208                              <1> nomorecharmap:
  5209 0000429F BE[6B740000]        <1> 	mov esi, line
  5210 000042A4 E833E7FFFF          <1> 	call print
  5211 000042A9 E9ACEDFFFF          <1> 	jmp nwcmd
  5212                              <1> charmapnocopy:
  5213 000042AE 6650                <1> 	push ax
  5214 000042B0 B020                <1> 	mov al, " "
  5215 000042B2 E814E5FFFF          <1> 	call int301prnt
  5216 000042B7 6658                <1> 	pop ax
  5217 000042B9 E9C1FFFFFF          <1> 	jmp charmapcopy
  5218                              <1> 	
  5219 000042BE 05046B6579636F6465- <1> db 5,4,"keycode",0
  5220 000042C7 00                  <1>
  5221                              <1> keycode:
  5222 000042C8 C605[87290000]00    <1> 	mov byte [trans], 0
  5223 000042CF E86E060000          <1> 	call guistartin
  5224 000042D4 31C0                <1> 	xor eax, eax
  5225 000042D6 31C9                <1> 	xor ecx, ecx
  5226 000042D8 8A0D[1D490000]      <1> 	mov cl, [specialkey]
  5227 000042DE 80F900              <1> 	cmp cl, 0
  5228 000042E1 0F8405000000        <1> 	je near nospecialkeycode
  5229 000042E7 E8BEF2FFFF          <1> 	call showhexsmall
  5230                              <1> nospecialkeycode:
  5231 000042EC 66A1[85290000]      <1> 	mov ax, [lastkey]
  5232 000042F2 88E1                <1> 	mov cl, ah
  5233 000042F4 E8B1F2FFFF          <1> 	call showhexsmall
  5234 000042F9 E9CAFFFFFF          <1> 	jmp keycode
  5235                              <1> 
  5236 000042FE 050470636900        <1> db 5,4,"pci",0
  5237                              <1> 	pcishow:
  5238 00004304 E830260000          <1> 	call pcidump
  5239 00004309 E94CEDFFFF          <1> 	jmp nwcmd
  5240                              <1> 	
  5241 0000430E 050461727000        <1> db 5,4,"arp",0
  5242 00004314 E81B250000          <1> 	call arptest
  5243 00004319 E93CEDFFFF          <1> 	jmp nwcmd
  5244                              <1> 
  5245 0000431E 0504626174636800    <1> db 5,4,"batch",0
  5246                              <1> 	batchst: 
  5247 00004326 BF[7A1B0000]        <1> 		mov edi, buftxt
  5248 0000432B 81C706000000        <1> 		add edi, 6
  5249 00004331 803F00              <1> 		cmp byte [edi], 0
  5250 00004334 0F8473000000        <1> 		je near nonamefound
  5251 0000433A BE00004000          <1> 		mov esi, 0x400000
  5252 0000433F E89F270000          <1> 		call loadfile
  5253 00004344 89D0                <1> 		mov eax, edx
  5254 00004346 3D94010000          <1> 		cmp eax, 404
  5255 0000434B 746F                <1> 		je goodbatchname
  5256 0000434D BE[5C430000]        <1> 		mov esi, badbatchname
  5257 00004352 E885E6FFFF          <1> 		call print
  5258 00004357 E9FEECFFFF          <1> 		jmp nwcmd
  5259 0000435C 546869732066696C65- <1> 		badbatchname db "This file already exists!",10,13,0
  5260 00004365 20616C726561647920- <1>
  5261 0000436E 657869737473210A0D- <1>
  5262 00004377 00                  <1>
  5263 00004378 596F75206861766520- <1> 		namenotfoundbatch db "You have to type a name after the command.",10,13,0
  5264 00004381 746F20747970652061- <1>
  5265 0000438A 206E616D6520616674- <1>
  5266 00004393 65722074686520636F- <1>
  5267 0000439C 6D6D616E642E0A0D00  <1>
  5268 000043A5 00000000            <1> 		esicache3 dd 0
  5269 000043A9 00000000            <1> 		esicache2 dd 0
  5270                              <1> 	nonamefound:
  5271 000043AD BE[78430000]        <1> 		mov esi, namenotfoundbatch
  5272 000043B2 E825E6FFFF          <1> 		call print
  5273 000043B7 E99EECFFFF          <1> 		jmp nwcmd
  5274                              <1> 	goodbatchname:
  5275 000043BC BE00004000          <1> 		mov esi, 0x400000
  5276                              <1> 	batchcreate:
  5277 000043C1 8935[A5430000]      <1> 		mov [esicache3], esi
  5278 000043C7 BF00008000          <1> 		mov edi, 0x800000
  5279 000043CC B00D                <1> 		mov al, 13
  5280 000043CE B307                <1> 		mov bl, 7
  5281 000043D0 B404                <1> 		mov ah, 4
  5282 000043D2 CD30                <1> 		int 30h
  5283 000043D4 8935[A9430000]      <1> 		mov [esicache2], esi
  5284 000043DA 8A0E                <1> 		mov cl, [esi]
  5285 000043DC 8B35[A5430000]      <1> 		mov esi, [esicache3]
  5286 000043E2 BB[39440000]        <1> 		mov ebx, exitword
  5287 000043E7 E8CAEEFFFF          <1> 		call cndtest
  5288 000043EC 3C01                <1> 		cmp al, 1
  5289 000043EE 7426                <1> 		je endbatchcreate
  5290 000043F0 3C02                <1> 		cmp al, 2
  5291 000043F2 7422                <1> 		je endbatchcreate
  5292 000043F4 BE[6B740000]        <1> 		mov esi, line
  5293 000043F9 E8DEE5FFFF          <1> 		call print
  5294 000043FE 8B35[A9430000]      <1> 		mov esi, [esicache2]
  5295 00004404 B00D                <1> 		mov al, 13
  5296 00004406 B40A                <1> 		mov ah, 10
  5297 00004408 668906              <1> 		mov [esi], ax
  5298 0000440B 81C602000000        <1> 		add esi, 2
  5299 00004411 E9ABFFFFFF          <1> 		jmp batchcreate
  5300                              <1> 	endbatchcreate:
  5301 00004416 8B35[A5430000]      <1> 		mov esi, [esicache3]
  5302 0000441C 31C0                <1> 		xor eax, eax
  5303 0000441E 8806                <1> 		mov [esi], al
  5304 00004420 BE[6B740000]        <1> 		mov esi, line
  5305 00004425 E8B2E5FFFF          <1> 		call print
  5306 0000442A BE00004000          <1> 		mov esi, 0x400000
  5307 0000442F E8A8E5FFFF          <1> 		call print
  5308 00004434 E921ECFFFF          <1> 		jmp nwcmd
  5309                              <1> 	
  5310 00004439 5C7800              <1> 	exitword db "\x",0
  5311 0000443C 54797065205C782074- <1> 	wordmsg db "Type \x to exit.",10,13,0
  5312 00004445 6F20657869742E0A0D- <1>
  5313 0000444E 00                  <1>
  5314                              <1> 		
  5315 0000444F 050473686F7700      <1> db 5,4,"show",0
  5316 00004456 BF[7A1B0000]        <1> 		mov edi, buftxt
  5317 0000445B 81C705000000        <1> 		add edi, 5
  5318 00004461 BE00004000          <1> 		mov esi, 0x400000
  5319 00004466 E878260000          <1> 		call loadfile
  5320 0000446B BE00004000          <1> 		mov esi, 0x400000
  5321 00004470 66813E424D          <1> 		cmp word [esi], "BM"
  5322 00004475 7414                <1> 		je bmpfound
  5323 00004477 E860E5FFFF          <1> 		call print
  5324 0000447C BE[6B740000]        <1> 		mov esi, line
  5325 00004481 E856E5FFFF          <1> 		call print
  5326 00004486 E9CFEBFFFF          <1> 		jmp nwcmd
  5327                              <1> bmpfound:
  5328 0000448B 803D[50500000]00    <1> 		cmp byte [guion], 0
  5329 00004492 0F8446000000        <1> 		je near noguibmp
  5330 00004498 BE00004000          <1> 		mov esi, 0x400000
  5331 0000449D 31C9                <1> 		xor ecx, ecx
  5332 0000449F 31D2                <1> 		xor edx, edx
  5333 000044A1 31C0                <1> 		xor eax, eax
  5334 000044A3 31DB                <1> 		xor ebx, ebx
  5335 000044A5 E8A11C0000          <1> 		call showbmp
  5336 000044AA 30C0                <1> 		xor al, al
  5337 000044AC B405                <1> 		mov ah, 5
  5338 000044AE CD30                <1> 		int 30h
  5339 000044B0 E8260A0000          <1> 		call guiclear
  5340 000044B5 E8970B0000          <1> 		call clearmousecursor
  5341 000044BA E804120000          <1> 		call reloadallgraphics
  5342 000044BF BE[7A1B0000]        <1> 		mov esi, buftxt
  5343 000044C4 81C605000000        <1> 		add esi, 5
  5344 000044CA E80DE5FFFF          <1> 		call print
  5345 000044CF BE[61450000]        <1> 		mov esi, loadedbmpmsg
  5346 000044D4 E803E5FFFF          <1> 		call print
  5347 000044D9 E97CEBFFFF          <1> 		jmp nwcmd
  5348                              <1> noguibmp:
  5349 000044DE BE[ED440000]        <1> 		mov esi, warnguibmp
  5350 000044E3 E8F4E4FFFF          <1> 		call print
  5351 000044E8 E96DEBFFFF          <1> 		jmp nwcmd
  5352 000044ED 546869732063616E20- <1> warnguibmp db "This can not be done without the gui.",10,13,0
  5353 000044F6 6E6F7420626520646F- <1>
  5354 000044FF 6E6520776974686F75- <1>
  5355 00004508 742074686520677569- <1>
  5356 00004511 2E0A0D00            <1>
  5357                              <1> 
  5358                              <1> 		
  5359                              <1> filenotfound:
  5360 00004515 BE[3E450000]        <1> 		mov esi, filenf
  5361 0000451A E8BDE4FFFF          <1> 		call print
  5362 0000451F BE[7A1B0000]        <1> 		mov esi, buftxt
  5363 00004524 81C608000000        <1> 		add esi, 8
  5364 0000452A E8ADE4FFFF          <1> 		call print
  5365 0000452F BE[49450000]        <1> 		mov esi, filenf2
  5366 00004534 E8A3E4FFFF          <1> 		call print
  5367 00004539 E91CEBFFFF          <1> 		jmp nwcmd
  5368 0000453E 5468652066696C6520- <1> filenf db "The file ",34,0
  5369 00004547 2200                <1>
  5370 00004549 2220636F756C64206E- <1> filenf2 db 34," could not be found.",13,10,0
  5371 00004552 6F7420626520666F75- <1>
  5372 0000455B 6E642E0D0A00        <1>
  5373                              <1> 		
  5374 00004561 206C6F616465642E0D- <1> loadedbmpmsg db " loaded.",13,10,0
  5375 0000456A 0A00                <1>
  5376                              <1> 
  5377 0000456C 050464756D7000      <1> 	db 5,4,"dump",0
  5378 00004573 BE[7A1B0000]        <1> 	mov esi, buftxt
  5379 00004578 81C605000000        <1> 	add esi, 5
  5380 0000457E 31C9                <1> 	xor ecx, ecx
  5381 00004580 E876F1FFFF          <1> 	call cnvrttxt
  5382 00004585 89CF                <1> 	mov edi, ecx
  5383 00004587 89FE                <1> 	mov esi, edi
  5384 00004589 81C680030000        <1> 	add esi, 896
  5385 0000458F C605[A9350000]00    <1> 	mov byte [firsthexshown],0
  5386                              <1> dumphexloop:
  5387 00004596 8B0F                <1> 	mov ecx, [edi]
  5388 00004598 E821F0FFFF          <1> 	call showhex
  5389 0000459D 81C704000000        <1> 	add edi, 4
  5390 000045A3 39F7                <1> 	cmp edi, esi
  5391 000045A5 72EF                <1> 	jb dumphexloop
  5392 000045A7 E9AEEAFFFF          <1> 	jmp nwcmd
  5393                              <1> 
  5394 000045AC 050474696D6500      <1> db 5,4,"time",0
  5395 000045B3 E80F000000          <1> 	call time
  5396 000045B8 BE[A2470000]        <1> 	mov esi, timeshow
  5397 000045BD E81AE4FFFF          <1> 	call print
  5398 000045C2 E9C1000000          <1> 	jmp findday
  5399                              <1> time:
  5400 000045C7 E85E010000          <1> 	call tstackput1
  5401 000045CC B00A                <1> 	mov al,10			;Get RTC register A
  5402 000045CE E888010000          <1> 	call tget1
  5403 000045D3 A880                <1> 	test al,0x80			;Is update in progress?
  5404 000045D5 75F0                <1> 	jne time				; yes, wait
  5405                              <1> 
  5406 000045D7 B000                <1> 	mov al,0			;Get seconds (00 to 59)
  5407 000045D9 E87D010000          <1> 	call tget1
  5408 000045DE A2[99470000]        <1> 	mov [RTCtimeSecond],al
  5409                              <1> 
  5410 000045E3 B002                <1> 	mov al,0x02			;Get minutes (00 to 59)
  5411 000045E5 E871010000          <1> 	call tget1
  5412 000045EA A2[9A470000]        <1> 	mov [RTCtimeMinute],al
  5413                              <1> 
  5414 000045EF B004                <1> 	mov al,0x04			;Get hours (see notes)
  5415 000045F1 E865010000          <1> 	call tget1
  5416 000045F6 A2[9B470000]        <1> 	mov [RTCtimeHour],al
  5417                              <1> 
  5418 000045FB B007                <1> 	mov al,0x07			;Get day of month (01 to 31)
  5419 000045FD E859010000          <1> 	call tget1
  5420                              <1> ;	mov ah, 0			;;fix day
  5421                              <1> ;	mov ah, al
  5422                              <1> ;	shr ah, 4
  5423                              <1> ;	shl al, 4
  5424                              <1> ;	shr al, 4
  5425                              <1> ;	cmp al, 0
  5426                              <1> ;	jne nodecahday
  5427                              <1> ;	mov al, 10
  5428                              <1> ;	dec ah
  5429                              <1> ;nodecahday:
  5430                              <1> ;	dec al
  5431                              <1> ;	shl ah, 4
  5432                              <1> ;	or al, ah
  5433 00004602 A2[9C470000]        <1> 	mov [RTCtimeDay],al
  5434                              <1> 
  5435 00004607 B008                <1> 	mov al,0x08			;Get month (01 to 12)
  5436 00004609 E84D010000          <1> 	call tget1
  5437 0000460E A2[9D470000]        <1> 	mov [RTCtimeMonth],al
  5438                              <1> 
  5439 00004613 B009                <1> 	mov al,0x09			;Get year (00 to 99)
  5440 00004615 E841010000          <1> 	call tget1
  5441 0000461A A2[9E470000]        <1> 	mov [RTCtimeYear],al
  5442                              <1> 	
  5443 0000461F BE[A2470000]        <1> 	mov esi, timeshow
  5444 00004624 8A2D[9B470000]      <1> 	mov ch, [RTCtimeHour]
  5445 0000462A E837010000          <1> 	call tput1
  5446 0000462F 8A2D[9A470000]      <1> 	mov ch, [RTCtimeMinute]
  5447 00004635 E82C010000          <1> 	call tput1
  5448 0000463A 8A2D[99470000]      <1> 	mov ch, [RTCtimeSecond]
  5449 00004640 E821010000          <1> 	call tput1
  5450 00004645 BE[AC470000]        <1> 	mov esi, dateshow
  5451 0000464A 8A2D[9D470000]      <1> 	mov ch, [RTCtimeMonth]
  5452 00004650 E811010000          <1> 	call tput1
  5453 00004655 8A2D[9C470000]      <1> 	mov ch, [RTCtimeDay]
  5454 0000465B E806010000          <1> 	call tput1
  5455 00004660 B520                <1> 	mov ch, 0x20
  5456 00004662 E8FF000000          <1> 	call tput1
  5457 00004667 4E                  <1> 	dec esi
  5458 00004668 8A2D[9E470000]      <1> 	mov ch, [RTCtimeYear]
  5459 0000466E E8F3000000          <1> 	call tput1
  5460 00004673 E8CC000000          <1> 	call tstackget1
  5461 00004678 C3                  <1> 	ret
  5462 00004679 BE[A2470000]        <1> 	mov esi, timeshow
  5463 0000467E 66BB0700            <1> 	mov bx, 7
  5464 00004682 B401                <1> 	mov ah, 1
  5465 00004684 30C0                <1> 	xor al, al
  5466 00004686 CD30                <1> 	int 30h
  5467                              <1> ;;get day of week
  5468                              <1> ;;add these:
  5469                              <1> ;;century value
  5470                              <1> ;;last 2 digits of year
  5471                              <1> ;;last 2 digits of year right shifted twice
  5472                              <1> ;;month table value
  5473                              <1> ;;day of the month
  5474                              <1> ;;divide these by 7
  5475                              <1> ;;the remainder is the day
  5476                              <1> findday:
  5477 00004688 31C0                <1> 	xor eax, eax
  5478                              <1> ;;first convert the values from BCD to hex
  5479 0000468A A0[9C470000]        <1> 	mov al, [RTCtimeDay]
  5480 0000468F E87D000000          <1> 	call converttohex
  5481 00004694 8825[9F470000]      <1> 	mov [dayhex], ah
  5482 0000469A A0[9D470000]        <1> 	mov al, [RTCtimeMonth]
  5483 0000469F E86D000000          <1> 	call converttohex
  5484 000046A4 8825[A0470000]      <1> 	mov [monthhex], ah
  5485 000046AA A0[9E470000]        <1> 	mov al, [RTCtimeYear]
  5486 000046AF E85D000000          <1> 	call converttohex
  5487 000046B4 8825[A1470000]      <1> 	mov [yearhex], ah
  5488 000046BA 31C0                <1> 	xor eax, eax
  5489 000046BC A0[A1470000]        <1> 	mov al, [yearhex]
  5490 000046C1 C0E802              <1> 	shr al, 2
  5491 000046C4 0205[A1470000]      <1> 	add al, [yearhex]
  5492 000046CA 0506000000          <1> 	add eax, 6
  5493 000046CF 31DB                <1> 	xor ebx, ebx
  5494 000046D1 8A1D[A0470000]      <1> 	mov bl, [monthhex]
  5495 000046D7 FECB                <1> 	dec bl
  5496 000046D9 81C3[C2470000]      <1> 	add ebx, month
  5497 000046DF 31C9                <1> 	xor ecx, ecx
  5498 000046E1 8A0B                <1> 	mov cl, [ebx]
  5499 000046E3 01C8                <1> 	add eax, ecx
  5500 000046E5 8A0D[9F470000]      <1> 	mov cl, [dayhex]
  5501 000046EB 01C8                <1> 	add eax, ecx
  5502 000046ED 66BB0700            <1> 	mov bx, 7
  5503 000046F1 31D2                <1> 	xor edx, edx
  5504 000046F3 66F7F3              <1> 	div bx
  5505 000046F6 C1E202              <1> 	shl edx, 2
  5506 000046F9 81C2[CE470000]      <1> 	add edx, day
  5507 000046FF 8B32                <1> 	mov esi, [edx]
  5508 00004701 66BB0700            <1> 	mov bx, 7
  5509 00004705 B401                <1> 	mov ah, 1
  5510 00004707 30C0                <1> 	xor al, al
  5511 00004709 CD30                <1> 	int 30h
  5512 0000470B 6631C0              <1> 	xor ax, ax
  5513 0000470E CD30                <1> 	int 30h
  5514 00004710 F4                  <1> 	hlt
  5515                              <1> 	
  5516                              <1> converttohex:
  5517 00004711 88C4                <1> 	mov ah, al
  5518 00004713 C0E804              <1> 	shr al, 4
  5519 00004716 C0E404              <1> 	shl ah, 4
  5520 00004719 C0EC04              <1> 	shr ah, 4
  5521 0000471C 3C00                <1> 	cmp al, 0
  5522 0000471E 7409                <1> 	je noconverttohex
  5523                              <1> converttohexlp:
  5524 00004720 80C40A              <1> 	add ah, 10
  5525 00004723 FEC8                <1> 	dec al
  5526 00004725 3C00                <1> 	cmp al, 0
  5527 00004727 75F7                <1> 	jne converttohexlp
  5528                              <1> noconverttohex:
  5529 00004729 C3                  <1> 	ret
  5530                              <1> 	
  5531                              <1> tstackput1:
  5532 0000472A 8935[95470000]      <1> 	mov [tstack + 20], esi
  5533 00004730 BE[81470000]        <1> 	mov esi, tstack
  5534 00004735 8906                <1> 	mov [esi], eax
  5535 00004737 895E04              <1> 	mov [esi + 4], ebx
  5536 0000473A 894E08              <1> 	mov [esi + 8], ecx
  5537 0000473D 89560C              <1> 	mov [esi + 12], edx
  5538 00004740 897E10              <1> 	mov [esi + 16], edi
  5539 00004743 C3                  <1> 	ret
  5540                              <1> 	
  5541                              <1> tstackget1:
  5542 00004744 BE[81470000]        <1> 	mov esi, tstack
  5543 00004749 8B06                <1> 	mov eax, [esi]
  5544 0000474B 8B5E04              <1> 	mov ebx, [esi + 4]
  5545 0000474E 8B4E08              <1> 	mov ecx, [esi + 8]
  5546 00004751 8B560C              <1> 	mov edx, [esi + 12]
  5547 00004754 8B7E10              <1> 	mov edi, [esi + 16]
  5548 00004757 8B7614              <1> 	mov esi, [esi + 20]
  5549 0000475A C3                  <1> 	ret
  5550                              <1> 	
  5551                              <1> tget1:
  5552 0000475B 66BA7000            <1> 	mov dx, 0x70
  5553 0000475F EE                  <1> 	out dx, al
  5554 00004760 6642                <1> 	inc dx
  5555 00004762 EC                  <1> 	in al, dx
  5556 00004763 664A                <1> 	dec dx
  5557 00004765 C3                  <1> 	ret
  5558                              <1> 	
  5559                              <1> tput1:
  5560 00004766 66C1E904            <1> 	shr cx, 4
  5561 0000476A B030                <1> 	mov al, 48
  5562 0000476C 00E8                <1> 	add al, ch
  5563 0000476E 8806                <1> 	mov [esi], al
  5564 00004770 46                  <1> 	inc esi
  5565 00004771 B030                <1> 	mov al, 48
  5566 00004773 C0E904              <1> 	shr cl, 4
  5567 00004776 00C8                <1> 	add al, cl
  5568 00004778 8806                <1> 	mov [esi], al
  5569 0000477A 81C602000000        <1> 	add esi, 2
  5570 00004780 C3                  <1> 	ret
  5571                              <1> 		
  5572 00004781 000000000000000000- <1> 	tstack dd 0,0,0,0,0,0
  5573 0000478A 000000000000000000- <1>
  5574 00004793 000000000000        <1>
  5575 00004799 00                  <1> 	RTCtimeSecond db 0
  5576 0000479A 00                  <1> 	RTCtimeMinute db 0
  5577 0000479B 00                  <1> 	RTCtimeHour db 0
  5578 0000479C 00                  <1> 	RTCtimeDay db 0
  5579 0000479D 00                  <1> 	RTCtimeMonth db 0
  5580 0000479E 00                  <1> 	RTCtimeYear db 0
  5581 0000479F 00                  <1> 	dayhex db 0
  5582 000047A0 00                  <1> 	monthhex db 0
  5583 000047A1 00                  <1> 	yearhex db 0
  5584 000047A2 30303A30303A30300D- <1> 	timeshow db "00:00:00",13,10
  5585 000047AB 0A                  <1>
  5586 000047AC 30302D30302D303030- <1> 	dateshow db "00-00-0000",13,10,0
  5587 000047B5 300D0A00            <1>
  5588                              <1> 	oldcentury:	;;from 1700 to 1900
  5589 000047B9 040200              <1> 	db 4,2,0
  5590                              <1> 	century:	;;from 2000 to 2500
  5591 000047BC 060402000604        <1> 	db 6,4,2,0,6,4
  5592                              <1> 	month:
  5593 000047C2 000303060104060205- <1> 	db 0,3,3,6,1,4,6,2,5,0,3,5
  5594 000047CB 000305              <1>
  5595                              <1> 	day:
  5596 000047CE [EA470000]          <1> 	dd sunday
  5597 000047D2 [F3470000]          <1> 	dd monday
  5598 000047D6 [FC470000]          <1> 	dd tuesday
  5599 000047DA [06480000]          <1> 	dd wednesday
  5600 000047DE [12480000]          <1> 	dd thursday
  5601 000047E2 [1D480000]          <1> 	dd friday
  5602 000047E6 [26480000]          <1> 	dd saturday
  5603                              <1> sunday:
  5604 000047EA 53756E6461790D0A00  <1> 	db "Sunday",13,10,0
  5605                              <1> monday:
  5606 000047F3 4D6F6E6461790D0A00  <1> 	db "Monday",13,10,0
  5607                              <1> tuesday:
  5608 000047FC 547565736461790D0A- <1> 	db "Tuesday",13,10,0
  5609 00004805 00                  <1>
  5610                              <1> wednesday:
  5611 00004806 5765646E6573646179- <1> 	db "Wednesday",13,10,0
  5612 0000480F 0D0A00              <1>
  5613                              <1> thursday:
  5614 00004812 54687572736461790D- <1> 	db "Thursday",13,10,0
  5615 0000481B 0A00                <1>
  5616                              <1> friday:
  5617 0000481D 4672696461790D0A00  <1> 	db "Friday",13,10,0
  5618                              <1> saturday:
  5619 00004826 53617475726461790D- <1> 	db "Saturday",13,10,0
  5620 0000482F 0A00                <1>
  5621                              <1> 
  5622 00004831 0504637075696400    <1> db 5,4,"cpuid",0
  5623 00004839 31C0                <1> 	xor eax, eax
  5624 0000483B 0FA2                <1> 	cpuid
  5625 0000483D 891D[92480000]      <1> 	mov [cpuidbuf], ebx
  5626 00004843 8915[96480000]      <1> 	mov [cpuidbuf + 4], edx
  5627 00004849 890D[9A480000]      <1> 	mov [cpuidbuf + 8], ecx
  5628 0000484F BE[92480000]        <1> 	mov esi, cpuidbuf
  5629 00004854 E883E1FFFF          <1> 	call print
  5630 00004859 BE[6B740000]        <1> 	mov esi, line
  5631 0000485E E879E1FFFF          <1> 	call print
  5632 00004863 B801000000          <1> 	mov eax, 1
  5633 00004868 0FA2                <1> 	cpuid
  5634 0000486A 89C1                <1> 	mov ecx, eax
  5635 0000486C C605[A9350000]02    <1> 	mov byte [firsthexshown], 2
  5636 00004873 E846EDFFFF          <1> 	call showhex
  5637 00004878 B808000080          <1> 	mov eax, 0x80000008
  5638 0000487D 0FA2                <1> 	cpuid
  5639 0000487F 89C1                <1> 	mov ecx, eax
  5640 00004881 C605[A9350000]02    <1> 	mov byte [firsthexshown], 2
  5641 00004888 E831EDFFFF          <1> 	call showhex
  5642 0000488D E9C8E7FFFF          <1> 	jmp nwcmd
  5643                              <1> 	
  5644 00004892 00<rept>            <1> cpuidbuf times 13 db 0
  5645                              <1> cpuidvendorend:
  5646                              <1> 	
  5647                              <1> progend:		;programs end here	
  5648                              <1> batchprogend:
  5649                                      %include 'source/input.asm'
  5650                              <1> PS2SET:
  5651 0000489F B0A8                <1>   mov  al, 0xa8		; enable mouse port
  5652 000048A1 E664                <1>   out  0x64, al		; write to keyboardcontroller
  5653 000048A3 E801000000          <1>   call CHKPRT		; check if command is progressed (demand!)
  5654 000048A8 C3                  <1> ret
  5655                              <1> 
  5656                              <1> CHKPRT:
  5657 000048A9 66B96400            <1>   mov  cx, 100
  5658                              <1>  .again:
  5659 000048AD E464                <1>   in   al, 0x64		; read from keyboardcontroller
  5660 000048AF A802                <1>   test al, 2		; Check if input buffer is empty
  5661 000048B1 7402                <1>   je .go
  5662 000048B3 E2F8                <1>   loop .again
  5663                              <1>  .go:
  5664 000048B5 C3                  <1> ret
  5665                              <1> 
  5666                              <1> WMOUS:
  5667 000048B6 B0D4                <1>   mov  al, 0xd4		; write to mouse device instead of to keyboard
  5668 000048B8 E664                <1>   out  0x64, al		; write to keyboardcontroller
  5669 000048BA E8EAFFFFFF          <1>   call CHKPRT		; check if command is progressed (demand!)
  5670 000048BF C3                  <1> ret
  5671                              <1> 
  5672                              <1> MBUFFUL:
  5673 000048C0 66B96400            <1>   mov cx, 100
  5674                              <1>  .mn:
  5675 000048C4 E464                <1>   in   al, 0x64		; read from keyboardcontroller
  5676 000048C6 A820                <1>   test al, 0x20		; check if mouse output buffer is full
  5677 000048C8 7402                <1>   jz  .mnn
  5678 000048CA E2F8                <1>   loop .mn
  5679                              <1>  .mnn:
  5680 000048CC C3                  <1> ret
  5681                              <1> 
  5682                              <1> 
  5683                              <1> ACTMOUS:
  5684 000048CD E8E4FFFFFF          <1>   call WMOUS
  5685 000048D2 B0F4                <1>   mov  al, 0xf4 	; Command to activate mouse itselve (Stream mode)
  5686 000048D4 E660                <1>   out  0x60, al		; write ps/2 controller output port (activate mouse)
  5687 000048D6 E8CEFFFFFF          <1>   call CHKPRT		; check if command is progressed (demand!)
  5688 000048DB E801000000          <1>   call CHKMOUS		; check if a byte is available
  5689 000048E0 C3                  <1> ret
  5690                              <1> 
  5691                              <1> CHKMOUS:
  5692 000048E1 B300                <1>   mov  bl, 0
  5693 000048E3 66B96400            <1>   mov cx, 100
  5694                              <1>  .vrd:
  5695 000048E7 E464                <1>   in   al, 0x64		; read from keyboardcontroller
  5696 000048E9 A801                <1>   test al, 1		; check if controller buffer (60h) has data
  5697 000048EB 7504                <1>   jnz .yy
  5698 000048ED E2F8                <1>   loop .vrd
  5699 000048EF B301                <1>   mov  bl, 1
  5700                              <1>  .yy:
  5701 000048F1 C3                  <1> ret
  5702                              <1> 
  5703                              <1> GETB:
  5704                              <1>  .cagain:
  5705 000048F2 E8EAFFFFFF          <1>   call CHKMOUS		; check if a byte is available
  5706 000048F7 08DB                <1>   or bl, bl
  5707 000048F9 75F7                <1>   jnz .cagain
  5708 000048FB B0AD                <1>   mov  al, 0xad		; Disable Keyboard
  5709 000048FD E664                <1>   out  0x64, al		; write to keyboardcontroller
  5710 000048FF E8A5FFFFFF          <1>   call CHKPRT		; check if command is progressed (demand!)
  5711 00004904 6631C0              <1>   xor  ax, ax
  5712 00004907 E460                <1>   in   al, 0x60		; read ps/2 controller output port (mousebyte)
  5713 00004909 88C2                <1>   mov  dl, al
  5714 0000490B B0AE                <1>   mov  al, 0xae		; Enable Keyboard
  5715 0000490D E664                <1>   out  0x64, al		; write to keyboardcontroller
  5716 0000490F E895FFFFFF          <1>   call CHKPRT		; check if command is progressed (demand!)
  5717 00004914 88D0                <1>   mov  al, dl
  5718 00004916 C3                  <1> ret
  5719                              <1> 
  5720 00004917 00                  <1> LBUTTON db 0x00	;	Left   button status 1=PRESSED 0=RELEASED
  5721 00004918 00                  <1> RBUTTON db 0x00	;	Right  button status 1=PRESSED 0=RELEASED
  5722 00004919 00                  <1> MBUTTON db 0x00	;	Middle button status 1=PRESSED 0=RELEASED
  5723 0000491A 00                  <1> XCOORD  db 0x00	;	the moved distance  (horizontal)
  5724 0000491B 00                  <1> YCOORD  db 0x00	;	the moved distance  (vertical)
  5725 0000491C 00                  <1> mousedisabled db 0
  5726 0000491D 00                  <1> specialkey db 0
  5727                              <1> guistartin2:		;;this is basically the idle process
  5728                              <1> 					;;this halts the cpu for a small amount of time and then sees if there was a keypress
  5729                              <1> 					;;this lets the cpu stay at close to 0% instead of 100%
  5730 0000491E 66B800A0            <1> 	mov ax, 0xA000	;;this is the divider for the PIT
  5731 00004922 E640                <1> 	out 0x40, al
  5732 00004924 66C1C008            <1> 	rol ax, 8
  5733 00004928 E640                <1> 	out 0x40, al
  5734 0000492A A0[1C6D0000]        <1> 	mov al, [threadson]
  5735 0000492F C605[1C6D0000]00    <1> 	mov byte [threadson], 0
  5736 00004936 FB                  <1> 	sti
  5737 00004937 F4                  <1> 	hlt
  5738 00004938 A2[1C6D0000]        <1> 	mov [threadson], al
  5739 0000493D 3C02                <1> 	cmp al, 2
  5740 0000493F 7401                <1> 	je guistartin
  5741 00004941 FA                  <1> 	cli
  5742                              <1> guistartin:
  5743 00004942 31C0                <1> 		xor eax, eax
  5744 00004944 A2[1D490000]        <1> 		mov [specialkey], al
  5745 00004949 66A3[85290000]      <1> 		mov [lastkey], ax
  5746 0000494F E464                <1> 		in al, 64h ; Status
  5747 00004951 A820                <1> 		test al, 20h ; PS2-Mouse?
  5748 00004953 0F85EA010000        <1> 		jnz near maincall2
  5749 00004959 A801                <1> 		test al, 1 
  5750 0000495B 74C1                <1> 		jz guistartin2 ; if output buffer full or no keypress, jump to idle process (only works when it is jz guistartin2, use jz guistartin to disable)
  5751                              <1> 	guigetkey:
  5752 0000495D E460                <1> 		in al, 60h
  5753 0000495F 88C4                <1> 		mov ah, al
  5754 00004961 30C0                <1> 		xor al, al
  5755 00004963 8825[86290000]      <1> 		mov [lastkey + 1], ah
  5756 00004969 88E0                <1> 		mov al, ah
  5757 0000496B BF[7F4D0000]        <1> 		mov edi, scancode
  5758                              <1> 	guisearchscan: 
  5759 00004970 3C3A                <1> 		cmp al, 3Ah
  5760 00004972 731A                <1> 		jae guiscanother
  5761 00004974 30E4                <1> 		xor ah, ah
  5762 00004976 C0E002              <1> 		shl al, 2
  5763 00004979 01C7                <1> 		add edi, eax
  5764 0000497B D0E8                <1> 		shr al, 1
  5765 0000497D 01C7                <1> 		add edi, eax
  5766 0000497F D0E8                <1> 		shr al, 1
  5767 00004981 8A27                <1> 		mov ah, [edi]
  5768 00004983 80FC00              <1> 		cmp ah, 0
  5769 00004986 7406                <1> 		je guiscanother
  5770 00004988 E9D7000000          <1> 		jmp guiscanfound
  5771 0000498D 00                  <1> guiupper db 0
  5772                              <1> guiscanother:
  5773 0000498E 88C4                <1> 		mov ah, al
  5774 00004990 30C0                <1> 		xor al, al
  5775 00004992 66A3[85290000]      <1> 		mov [lastkey], ax
  5776 00004998 80FCE0              <1> 		cmp ah, 0E0h
  5777 0000499B 0F847D000000        <1> 		je near guigetkeyspecial
  5778 000049A1 803D[1D490000]E0    <1> 		cmp byte [specialkey], 0xE0
  5779 000049A8 752B                <1> 		jne nospecialkey
  5780 000049AA 80FC38              <1> 		cmp ah, 38h
  5781 000049AD 0F84A0000000        <1> 		je near guialton
  5782 000049B3 80FCB8              <1> 		cmp ah, 0B8h
  5783 000049B6 0F849F000000        <1> 		je near guialtoff
  5784 000049BC 80FC1D              <1> 		cmp ah, 1Dh
  5785 000049BF 0F847E000000        <1> 		je near guictron
  5786 000049C5 80FC9D              <1> 		cmp ah, 9Dh
  5787 000049C8 0F847D000000        <1> 		je near guictroff
  5788 000049CE 66A3[85290000]      <1> 		mov [lastkey], ax
  5789 000049D4 C3                  <1> 		ret
  5790                              <1> nospecialkey:
  5791                              <1> 		;cmp ah, 4Dh
  5792                              <1> 		;je near nextimage
  5793 000049D5 80FC2A              <1> 		cmp ah, 2Ah
  5794 000049D8 0F8455000000        <1> 		je near guishifton
  5795 000049DE 80FC36              <1> 		cmp ah, 36h
  5796 000049E1 0F844C000000        <1> 		je near guishifton
  5797 000049E7 80FC1C              <1> 		cmp ah, 1Ch
  5798 000049EA 0F8473000000        <1> 		je near guientdown
  5799 000049F0 80FCAA              <1> 		cmp ah, 0AAh
  5800 000049F3 0F8442000000        <1> 		je near guishiftoff
  5801 000049F9 80FCB6              <1> 		cmp ah, 0B6h
  5802 000049FC 0F8439000000        <1> 		je near guishiftoff
  5803 00004A02 80FC3A              <1> 		cmp ah, 3Ah
  5804 00004A05 0F84A5000000        <1> 		je near guicaps
  5805 00004A0B 80FC45              <1> 		cmp ah, 0x45
  5806 00004A0E 0F84AD000000        <1> 		je near guinumlock
  5807 00004A14 80FC46              <1> 		cmp ah, 0x46
  5808 00004A17 0F84BC000000        <1> 		je near guiscrolllock
  5809 00004A1D C3                  <1> 		ret
  5810                              <1> 	guigetkeyspecial:
  5811 00004A1E C605[1D490000]E0    <1> 		mov byte [specialkey], 0xE0
  5812 00004A25 E933FFFFFF          <1> 		jmp guigetkey
  5813                              <1> 	guishift:
  5814 00004A2A A0[8D490000]        <1> 		mov al, [guiupper]
  5815 00004A2F 3C01                <1> 		cmp al, 1
  5816 00004A31 7308                <1> 		jae guishiftoff
  5817                              <1> 	guishifton:
  5818 00004A33 C605[8D490000]01    <1> 		mov byte [guiupper], 1
  5819 00004A3A C3                  <1> 		ret
  5820                              <1> 		;jmp guistartin
  5821                              <1> 	guishiftoff:
  5822 00004A3B C605[8D490000]00    <1> 		mov byte [guiupper], 0
  5823 00004A42 C3                  <1> 		ret
  5824                              <1> 		;jmp guistartin
  5825                              <1> 	guictron:
  5826 00004A43 C605[AF4A0000]01    <1> 		mov byte [guictr], 1
  5827 00004A4A C3                  <1> 		ret
  5828                              <1> 	guictroff:
  5829 00004A4B C605[AF4A0000]00    <1> 		mov byte [guictr], 0
  5830 00004A52 C3                  <1> 		ret
  5831                              <1> 	guialton:
  5832 00004A53 C605[AE4A0000]01    <1> 		mov byte [guialt], 1
  5833 00004A5A C3                  <1> 		ret
  5834                              <1> 		;jmp guistartin
  5835                              <1> 	guialtoff:
  5836 00004A5B C605[AE4A0000]00    <1> 		mov byte [guialt], 0
  5837 00004A62 C3                  <1> 		ret
  5838                              <1> 		;jmp guistartin
  5839                              <1> 	guientdown:
  5840 00004A63 C3                  <1> 		ret
  5841                              <1> 	guiscanfound:
  5842 00004A64 81C704000000        <1> 		add edi, 4
  5843 00004A6A 803D[AF4A0000]01    <1> 		cmp byte [guictr], 1
  5844 00004A71 731B                <1> 		jae altguiin
  5845 00004A73 81EF04000000        <1> 		sub edi, 4
  5846 00004A79 81C702000000        <1> 		add edi, 2
  5847 00004A7F 803D[AE4A0000]01    <1> 		cmp byte [guialt], 1
  5848 00004A86 7306                <1> 		jae altguiin
  5849 00004A88 81EF02000000        <1> 		sub edi, 2
  5850                              <1> altguiin:
  5851 00004A8E 81C701000000        <1> 		add edi, 1
  5852 00004A94 803D[8D490000]01    <1> 		cmp byte [guiupper], 1
  5853 00004A9B 7306                <1> 		jae uppercasegui
  5854 00004A9D 81EF01000000        <1> 		sub edi, 1
  5855                              <1> uppercasegui:
  5856 00004AA3 8A07                <1> 		mov al,[edi]
  5857 00004AA5 A2[85290000]        <1> 		mov [lastkey], al
  5858 00004AAA C3                  <1> 		ret
  5859                              <1> 		
  5860 00004AAB 00                  <1> keyboardstatus db 0
  5861 00004AAC 00                  <1> numlockstatus db 0
  5862 00004AAD 00                  <1> scrolllockstatus db 0
  5863 00004AAE 00                  <1> guialt db 0
  5864 00004AAF 00                  <1> guictr db 0
  5865                              <1> 	guicaps:
  5866 00004AB0 8035[AB4A0000]04    <1> 		xor byte [keyboardstatus], 00000100b
  5867 00004AB7 E835000000          <1> 		call updatekblights
  5868 00004ABC E969FFFFFF          <1> 		jmp guishift
  5869                              <1> 		
  5870                              <1> 	guinumlock:
  5871 00004AC1 8035[AB4A0000]02    <1> 		xor byte [keyboardstatus], 00000010b
  5872 00004AC8 8035[AC4A0000]01    <1> 		xor byte [numlockstatus], 1
  5873 00004ACF E81D000000          <1> 		call updatekblights
  5874 00004AD4 E969FEFFFF          <1> 		jmp guistartin
  5875                              <1> 	
  5876                              <1> 	guiscrolllock:
  5877 00004AD9 8035[AB4A0000]01    <1> 		xor byte [keyboardstatus], 00000001b
  5878 00004AE0 8035[AD4A0000]01    <1> 		xor byte [scrolllockstatus], 1
  5879 00004AE7 E805000000          <1> 		call updatekblights
  5880 00004AEC E951FEFFFF          <1> 		jmp guistartin
  5881                              <1> 		
  5882                              <1> 	updatekblights:
  5883 00004AF1 B0ED                <1> 		mov al, 0xED
  5884 00004AF3 66BA6000            <1> 		mov dx, 0x60
  5885 00004AF7 EE                  <1> 		out dx, al
  5886                              <1> 	chkkbdack:
  5887 00004AF8 EC                  <1> 		in al, dx
  5888 00004AF9 3CFA                <1> 		cmp al, 0xFA
  5889 00004AFB 75FB                <1> 		jne chkkbdack
  5890 00004AFD A0[AB4A0000]        <1> 		mov al, [keyboardstatus]
  5891 00004B02 EE                  <1> 		out dx, al
  5892 00004B03 C3                  <1> 		ret
  5893                              <1> 	
  5894                              <1> 	cursorgui:
  5895 00004B04 803D[E8610000]01    <1> 		cmp byte [mouseon], 1
  5896 00004B0B 0F8432000000        <1> 		je near maincall2
  5897 00004B11 803D[50500000]00    <1> 		cmp byte [guion], 0
  5898 00004B18 0F8445FFFFFF        <1> 		je guientdown
  5899                              <1> 	initmouse:
  5900 00004B1E 803D[50500000]00    <1> 		cmp byte [guion], 0
  5901 00004B25 7405                <1> 		je noswmsposinit
  5902 00004B27 E8DF050000          <1> 		call switchmousepos2
  5903                              <1> 	noswmsposinit:
  5904 00004B2C E86EFDFFFF          <1> 	  	call PS2SET
  5905 00004B31 E897FDFFFF          <1> 		call ACTMOUS
  5906 00004B36 C605[E8610000]01    <1> 		mov byte [mouseon],1
  5907 00004B3D E8B0FDFFFF          <1> 		call GETB 	;;Get the responce byte of the mouse (like: Hey i am active)
  5908                              <1> 				;;If the bytes are mixed up,
  5909                              <1> 				;;remove this line or add another of this line.
  5910                              <1> 		;call GETB
  5911                              <1> 	nomouse:
  5912 00004B42 C3                  <1> 		ret
  5913                              <1> 	maincall2:
  5914 00004B43 803D[1C490000]01    <1> 		cmp byte [mousedisabled], 1
  5915 00004B4A 74F6                <1> 		je nomouse
  5916 00004B4C 803D[E8610000]01    <1> 		  cmp byte [mouseon], 1
  5917 00004B53 75C9                <1> 		  jne initmouse
  5918 00004B55 E898FDFFFF          <1> 		  call GETB
  5919 00004B5A 88C3                <1> 		  mov  bl, al
  5920 00004B5C 80E301              <1> 		  and  bl, 1
  5921 00004B5F 881D[17490000]      <1> 		  mov  BYTE [LBUTTON], bl
  5922 00004B65 88C3                <1> 		  mov  bl, al
  5923 00004B67 80E302              <1> 		  and  bl, 2
  5924 00004B6A D0EB                <1> 		  shr  bl, 1
  5925 00004B6C 881D[18490000]      <1> 		  mov  BYTE [RBUTTON], bl
  5926 00004B72 88C3                <1> 		  mov  bl, al
  5927 00004B74 80E304              <1> 		  and  bl, 4
  5928 00004B77 C0EB02              <1> 		  shr  bl, 2
  5929 00004B7A 881D[19490000]      <1> 		  mov  BYTE [MBUTTON], bl
  5930 00004B80 E86DFDFFFF          <1> 		  call GETB
  5931 00004B85 A2[1A490000]        <1> 		  mov  BYTE [XCOORD], al
  5932 00004B8A E863FDFFFF          <1> 		  call GETB
  5933 00004B8F A2[1B490000]        <1> 		  mov  BYTE [YCOORD], al
  5934                              <1> 
  5935                              <1> 	showpixelcursor:
  5936 00004B94 668B15[E64C0000]    <1> 		mov dx, [mousecursorposition]
  5937 00004B9B 668B0D[E84C0000]    <1> 		mov cx, [mousecursorposition + 2]
  5938 00004BA2 668915[E24C0000]    <1> 		mov [lastmouseposition], dx
  5939 00004BA9 66890D[E44C0000]    <1> 		mov [lastmouseposition + 2], cx
  5940 00004BB0 A0[1A490000]        <1> 		mov al, [XCOORD]
  5941 00004BB5 3C80                <1> 		cmp al, 128
  5942 00004BB7 730C                <1> 		jae subxcoord
  5943 00004BB9 00C0                <1> 		add al, al
  5944 00004BBB 30E4                <1> 		xor ah, ah
  5945 00004BBD 6601C2              <1> 		add dx, ax
  5946 00004BC0 E90B000000          <1> 		jmp subxcoorddn
  5947                              <1> 	subxcoord:
  5948 00004BC5 00C0                <1> 		add al, al
  5949 00004BC7 30DB                <1> 		xor bl, bl
  5950 00004BC9 28C3                <1> 		sub bl, al
  5951 00004BCB 30FF                <1> 		xor bh, bh
  5952 00004BCD 6629DA              <1> 		sub dx, bx
  5953                              <1> 	subxcoorddn:
  5954 00004BD0 8A1D[1B490000]      <1> 		mov bl, [YCOORD]
  5955 00004BD6 30C0                <1> 		xor al, al
  5956 00004BD8 28D8                <1> 		sub al, bl
  5957 00004BDA 3C80                <1> 		cmp al, 128
  5958 00004BDC 730A                <1> 		jae subycoord
  5959 00004BDE 30E4                <1> 		xor ah, ah
  5960 00004BE0 6601C1              <1> 		add cx, ax
  5961 00004BE3 E909000000          <1> 		jmp subycoorddn
  5962                              <1> 	subycoord:
  5963 00004BE8 30DB                <1> 		xor bl, bl
  5964 00004BEA 28C3                <1> 		sub bl, al
  5965 00004BEC 30FF                <1> 		xor bh, bh
  5966 00004BEE 6629D9              <1> 		sub cx, bx
  5967                              <1> 	subycoorddn:
  5968 00004BF1 6681FA204E          <1> 		cmp dx, 20000
  5969 00004BF6 7603                <1> 		jbe nooriginx2
  5970 00004BF8 6631D2              <1> 		xor dx, dx
  5971                              <1> 	nooriginx2:
  5972 00004BFB 6681F9204E          <1> 		cmp cx, 20000
  5973 00004C00 7603                <1> 		jbe nooriginy2
  5974 00004C02 6631C9              <1> 		xor cx, cx
  5975                              <1> 	nooriginy2:
  5976 00004C05 6681FA0000          <1> 		cmp dx, 0
  5977 00004C0A 7415                <1> 		je nofixxcolumn2
  5978 00004C0C 663B15[255F0000]    <1> 		cmp dx, [resolutionx2]
  5979 00004C13 720C                <1> 		jb nofixxcolumn2
  5980 00004C15 668B15[255F0000]    <1> 		mov dx, [resolutionx2]
  5981 00004C1C 6681EA0200          <1> 		sub dx, 2
  5982                              <1> 	nofixxcolumn2:
  5983 00004C21 6681F90000          <1> 		cmp cx, 0
  5984 00004C26 7415                <1> 		je nofixyrow2
  5985 00004C28 663B0D[215F0000]    <1> 		cmp cx, [resolutiony]
  5986 00004C2F 720C                <1> 		jb nofixyrow2
  5987 00004C31 668B0D[215F0000]    <1> 		mov cx, [resolutiony]
  5988 00004C38 6681E90100          <1> 		sub cx, 1
  5989                              <1> 	nofixyrow2:
  5990 00004C3D 668915[E64C0000]    <1> 		mov [mousecursorposition], dx
  5991 00004C44 66890D[E84C0000]    <1> 		mov [mousecursorposition + 2], cx
  5992 00004C4B 803D[50500000]00    <1> 		cmp byte [guion], 0
  5993 00004C52 0F8492000000        <1> 		je near termmouse
  5994 00004C58 E84E040000          <1> 		call switchmousepos ;;use dragging code to ensure proper icon drag
  5995 00004C5D 803D[17490000]01    <1> 		cmp byte [LBUTTON], 1
  5996 00004C64 0F8415050000        <1> 		je near clickicon
  5997 00004C6A 803D[18490000]01    <1> 		cmp byte [RBUTTON], 1
  5998 00004C71 0F8408050000        <1> 		je near clickicon
  5999 00004C77 A0[6C510000]        <1> 		mov al, [pbutton]
  6000 00004C7C C705[6F510000]0000- <1> 		mov dword [dragging], 0
  6001 00004C84 0000                <1>
  6002 00004C86 3C00                <1> 		cmp al, 0
  6003 00004C88 740F                <1> 		je nopreviousbutton
  6004 00004C8A E8C2030000          <1> 		call clearmousecursor
  6005 00004C8F E82F0A0000          <1> 		call reloadallgraphics
  6006                              <1> 	windowtermcopyend:
  6007 00004C94 E872040000          <1> 		call switchmousepos2
  6008                              <1> 	nopreviousbutton:
  6009 00004C99 30C0                <1> 		xor al, al
  6010 00004C9B A2[6C510000]        <1> 		mov [pbutton], al
  6011 00004CA0 A0[17490000]        <1> 		mov al, [LBUTTON]
  6012 00004CA5 A2[6D510000]        <1> 		mov [pLBUTTON], al
  6013 00004CAA A0[18490000]        <1> 		mov al, [RBUTTON]
  6014 00004CAF A2[6E510000]        <1> 		mov [pRBUTTON], al
  6015 00004CB4 31C9                <1> 		xor ecx, ecx
  6016 00004CB6 31D2                <1> 		xor edx, edx
  6017 00004CB8 668B15[E64C0000]    <1> 		mov dx, [mousecursorposition]
  6018 00004CBF 668B0D[E84C0000]    <1> 		mov cx, [mousecursorposition + 2]
  6019 00004CC6 66BB18C7            <1> 		mov bx, 1100011100011000b
  6020 00004CCA 30E4                <1> 		xor ah, ah
  6021 00004CCC B0FE                <1> 		mov al, 254
  6022 00004CCE C605[4D500000]01    <1> 		mov byte [showcursorfonton], 1
  6023 00004CD5 E85B120000          <1> 		call showfontvesa
  6024 00004CDA C605[4D500000]00    <1> 		mov byte [showcursorfonton], 0
  6025 00004CE1 C3                  <1> 		ret
  6026                              <1> 
  6027 00004CE2 84008400            <1> lastmouseposition dw 132,132
  6028 00004CE6 84008400            <1> mousecursorposition dw 132,132	
  6029                              <1> 
  6030                              <1> termmouse:
  6031 00004CEA BE[8F1D0000]        <1> 		mov esi, videobuf
  6032 00004CEF 31D2                <1> 		xor edx, edx
  6033 00004CF1 668B15[E24C0000]    <1> 		mov dx, [lastmouseposition]
  6034 00004CF8 668B0D[E44C0000]    <1> 		mov cx, [lastmouseposition + 2]
  6035 00004CFF 66A1[7D4D0000]      <1> 		mov ax, [cursorcache]
  6036 00004D05 663D0000            <1> 		cmp ax, 0
  6037 00004D09 7425                <1> 		je nocopycursorcache
  6038 00004D0B 66C1E104            <1> 		shl cx, 4
  6039 00004D0F 66C1E203            <1> 		shl dx, 3
  6040 00004D13 01D6                <1> 		add esi, edx
  6041 00004D15 6631D2              <1> 		xor dx, dx
  6042 00004D18 8A15[BA270000]      <1> 		mov dl, [charxy]
  6043 00004D1E 6641                <1> 		inc cx
  6044                              <1> termmousecplp1:
  6045 00004D20 01D6                <1> 		add esi, edx
  6046 00004D22 6649                <1> 		dec cx
  6047 00004D24 6681F90000          <1> 		cmp cx, 0
  6048 00004D29 75F5                <1> 		jne termmousecplp1
  6049 00004D2B 29D6                <1> 		sub esi, edx
  6050 00004D2D 668906              <1> 		mov [esi], ax
  6051                              <1> nocopycursorcache:
  6052 00004D30 BE[8F1D0000]        <1> 		mov esi, videobuf
  6053 00004D35 31D2                <1> 		xor edx, edx
  6054 00004D37 668B15[E64C0000]    <1> 		mov dx, [mousecursorposition]
  6055 00004D3E 668B0D[E84C0000]    <1> 		mov cx, [mousecursorposition + 2]
  6056 00004D45 66C1E104            <1> 		shl cx, 4
  6057 00004D49 66C1E203            <1> 		shl dx, 3
  6058 00004D4D 01D6                <1> 		add esi, edx
  6059 00004D4F 6631D2              <1> 		xor dx, dx
  6060 00004D52 8A15[BA270000]      <1> 		mov dl, [charxy]
  6061 00004D58 6641                <1> 		inc cx
  6062                              <1> termmousecplp2:
  6063 00004D5A 01D6                <1> 		add esi, edx
  6064 00004D5C 6649                <1> 		dec cx
  6065 00004D5E 6681F90000          <1> 		cmp cx, 0
  6066 00004D63 75F5                <1> 		jne termmousecplp2
  6067 00004D65 29D6                <1> 		sub esi, edx
  6068 00004D67 668B06              <1> 		mov ax, [esi]
  6069 00004D6A 66A3[7D4D0000]      <1> 		mov [cursorcache], ax
  6070 00004D70 B080                <1> 		mov al, 128
  6071 00004D72 B407                <1> 		mov ah, 7
  6072 00004D74 668906              <1> 		mov [esi], ax
  6073 00004D77 E8DFDFFFFF          <1> 		call termcopy
  6074 00004D7C C3                  <1> 		ret
  6075 00004D7D 0000                <1> cursorcache db 0,0
  6076                              <1> 	
  6077                              <1> scancode:
  6078 00004D7F 000000000000        <1> 	db 0,0,0,0,0,0			;,0h
  6079 00004D85 000000000000        <1> 	db 0,0,0,0,0,0			;,1h
  6080 00004D8B 3121AD000000        <1> 	db '1','!',173,0,0,0	;,2h
  6081 00004D91 3240FDFB0000        <1> 	db '2','@',253,251,0,0	;,3h
  6082 00004D97 332300000000        <1> 	db '3','#',0,0,0,0		;,4h
  6083 00004D9D 34249B9C0000        <1> 	db '4','$',155,156,0,0	;,5h
  6084 00004DA3 3525EE000000        <1> 	db '5','%',238,0,0,0	;,6h
  6085 00004DA9 365EAC000000        <1> 	db '6','^',172,0,0,0	;,7h
  6086 00004DAF 3726AB000000        <1> 	db '7','&',171,0,0,0	;,8h
  6087 00004DB5 382A00000000        <1> 	db '8','*',0,0,0,0		;,9h
  6088 00004DBB 392800000000        <1> 	db '9','(',0,0,0,0		;,0Ah
  6089 00004DC1 302900000000        <1> 	db '0',')',0,0,0,0		;,0Bh
  6090 00004DC7 2D5F9DF10000        <1> 	db '-','_',157,241,0,0	;,0Ch
  6091 00004DCD 3D2BF7F60000        <1> 	db '=','+',247,246,0,0	;,0Dh
  6092 00004DD3 080800000000        <1> 	db 8,8,0,0,0,0			;,0Eh
  6093 00004DD9 000000000000        <1> 	db 0,0,0,0,0,0			;,0Fh
  6094 00004DDF 7151848E0000        <1> 	db 'q','Q',132,142,0,0	;,10h
  6095 00004DE5 7757868F0000        <1> 	db 'w','W',134,143,0,0	;,11h
  6096 00004DEB 65458290EE45        <1> 	db 'e','E',130,144,238,'E'	;,12h
  6097 00004DF1 7252898A7050        <1> 	db 'r','R',137,138,'p','P'		;,13h
  6098 00004DF7 7454819AE754        <1> 	db 't','T',129,154,231,'T'		;,14h
  6099 00004DFD 795998007559        <1> 	db 'y','Y',152,0,'u','Y'	;,15h
  6100 00004E03 7555A3970000        <1> 	db 'u','U',163,151,0,0	;,16h
  6101 00004E09 6949A18D6949        <1> 	db 'i','I',161,141,'i','I'	;,17h
  6102 00004E0F 6F4FA29577EA        <1> 	db 'o','O',162,149,'w',234	;,18h
  6103 00004E15 70509499E3EF        <1> 	db 'p','P',148,153,227,239	;,19h
  6104 00004E1B 5B7BF4000000        <1> 	db '[','{',244,0,0,0		;,1Ah
  6105 00004E21 5D7DF5000000        <1> 	db ']','}',245,0,0,0		;,1Bh
  6106 00004E27 000000000000        <1> 	db 0,0,0,0,0,0			;,1Ch
  6107 00004E2D 000000000000        <1> 	db 0,0,0,0,0,0			;,1Dh
  6108 00004E33 6141A085E041        <1> 	db 'a','A',160,133,224,'A'	;,1Eh
  6109 00004E39 73531500E5E4        <1> 	db 's','S',21,0,229,228		;,1Fh
  6110 00004E3F 6444F800EB7F        <1> 	db 'd','D',248,0,235,127	;,20h
  6111 00004E45 66469F00EDE8        <1> 	db 'f','F',159,0,237,232	;,21h
  6112 00004E4B 6747000079E2        <1> 	db 'g','G',0,0,'y',226		;,22h
  6113 00004E51 684800006E48        <1> 	db 'h','H',0,0,'n','H'		;,23h
  6114 00004E57 6A4A00000000        <1> 	db 'j','J',0,0,0,0		;,24h
  6115 00004E5D 6B4B00006B4B        <1> 	db 'k','K',0,0,'k','K'		;,25h
  6116 00004E63 6C4C0000E9E9        <1> 	db 'l','L',0,0,233,233		;,26h
  6117 00004E69 3B3A14000000        <1> 	db ';',':',20,0,0,0		;,27h
  6118 00004E6F 272200000000        <1> 	db 27h,22h,0,0,0,0		;,28h
  6119 00004E75 607E00000000        <1> 	db '`','~',0,0,0,0		;,29h
  6120 00004E7B 000000000000        <1> 	db 0,0,0,0,0,0			;,2Ah
  6121 00004E81 5C7CAAB30000        <1> 	db '\','|',170,179,0,0	;,2Bh
  6122 00004E87 7A5A91927A5A        <1> 	db 'z','Z',145,146,'z','Z'	;,2Ch
  6123 00004E8D 7858000000F0        <1> 	db 'x','X',0,0,0,240		;,2Dh
  6124 00004E93 634387800000        <1> 	db 'c','C',135,128,0,0	;,2Eh
  6125 00004E99 765600000000        <1> 	db 'v','V',0,0,0,0		;,2Fh
  6126 00004E9F 62420000E142        <1> 	db 'b','B',0,0,225,'B'	;,30h
  6127 00004EA5 6E4EA4A5764E        <1> 	db 'n','N',164,165,'v','N'	;,31h
  6128 00004EAB 6D4D0000E64D        <1> 	db 'm','M',0,0,230,'M'		;,32h
  6129 00004EB1 2C3CF3AE0000        <1> 	db ',','<',243,174,0,0	;,33h
  6130 00004EB7 2E3EF2AF0000        <1> 	db '.','>',242,175,0,0	;,34h
  6131 00004EBD 2F3FA8000000        <1> 	db '/','?',168,0,0,0	;,35h
  6132 00004EC3 000000000000        <1> 	db 0,0,0,0,0,0			;,36h
  6133 00004EC9 000000000000        <1> 	db 0,0,0,0,0,0			;,37h
  6134 00004ECF 000000000000        <1> 	db 0,0,0,0,0,0			;,38h
  6135 00004ED5 202000000000        <1> 	db ' ',' ',0,0,0,0		;,39h
  6136                              <1> noscan:
  6137                                      %include 'source/gui.asm'
  6138                              <1> guiclear:
  6139 00004EDB 8B3D[CC860000]      <1> 	mov edi, [physbaseptr]
  6140 00004EE1 668B15[235F0000]    <1> 	mov dx, [resolutionx]
  6141 00004EE8 668B0D[215F0000]    <1> 	mov cx, [resolutiony]
  6142 00004EEF 66A1[184F0000]      <1> 	mov ax, [background]
  6143                              <1> guiclearloop:
  6144 00004EF5 668907              <1> 	mov [edi], ax
  6145 00004EF8 81C702000000        <1> 	add edi, 2
  6146 00004EFE 664A                <1> 	dec dx
  6147 00004F00 6681FA0000          <1> 	cmp dx, 0
  6148 00004F05 77EE                <1> 	ja guiclearloop
  6149 00004F07 6649                <1> 	dec cx
  6150 00004F09 668B15[235F0000]    <1> 	mov dx, [resolutionx]
  6151 00004F10 6681F90000          <1> 	cmp cx, 0
  6152 00004F15 77DE                <1> 	ja guiclearloop
  6153 00004F17 C3                  <1> 	ret
  6154                              <1> 
  6155 00004F18 CF7B                <1> background dw 0111101111001111b
  6156                              <1> 
  6157                              <1> gui:	;Let's see what I can do, I am going to try to make this as freestanding as possible
  6158 00004F1A 31C0                <1> 	xor eax, eax
  6159 00004F1C 31DB                <1> 	xor ebx, ebx
  6160 00004F1E 31C9                <1> 	xor ecx, ecx
  6161 00004F20 31D2                <1> 	xor edx, edx
  6162 00004F22 8B3D[CC860000]      <1> 	mov edi, [physbaseptr]
  6163 00004F28 668B15[235F0000]    <1> 	mov dx, [resolutionx]
  6164 00004F2F 668B0D[215F0000]    <1> 	mov cx, [resolutiony]
  6165 00004F36 668B1D[184F0000]    <1> 	mov bx, [background]
  6166                              <1> guiclearloop2:
  6167 00004F3D 66891F              <1> 	mov [edi], bx
  6168 00004F40 81C702000000        <1> 	add edi, 2
  6169 00004F46 664A                <1> 	dec dx
  6170 00004F48 6681FA0000          <1> 	cmp dx, 0
  6171 00004F4D 0F85EAFFFFFF        <1> 	jne near guiclearloop2
  6172 00004F53 6649                <1> 	dec cx
  6173 00004F55 668B15[235F0000]    <1> 	mov dx, [resolutionx]
  6174 00004F5C 6681F90000          <1> 	cmp cx, 0
  6175 00004F61 0F85D6FFFFFF        <1> 	jne near guiclearloop2
  6176 00004F67 C605[50500000]01    <1> 	mov byte [guion], 1
  6177 00004F6E C605[4F500000]00    <1> 	mov byte [mouseselecton], 0
  6178 00004F75 31C0                <1> 	xor eax, eax
  6179 00004F77 31DB                <1> 	xor ebx, ebx
  6180 00004F79 31C9                <1> 	xor ecx, ecx
  6181 00004F7B 31D2                <1> 	xor edx, edx
  6182                              <1> 	
  6183 00004F7D BE[FD610000]        <1> 	mov esi, pacmsg
  6184 00004F82 6631C0              <1> 	xor ax, ax
  6185 00004F85 31DB                <1> 	xor ebx, ebx
  6186 00004F87 66B99000            <1> 	mov cx, 144
  6187 00004F8B 66BA0400            <1> 	mov dx, 4
  6188 00004F8F E8820A0000          <1> 	call showstring
  6189                              <1> 	
  6190 00004F94 BE[6C630000]        <1> 	mov esi, interneticon
  6191 00004F99 6631C0              <1> 	xor ax, ax
  6192 00004F9C BB[6A620000]        <1> 	mov ebx, noie
  6193 00004FA1 66B91800            <1> 	mov cx, 24
  6194 00004FA5 66BA0400            <1> 	mov dx, 4
  6195 00004FA9 E8A70E0000          <1> 	call showicon
  6196                              <1> 	
  6197 00004FAE BE[EE630000]        <1> 	mov esi, wordicon
  6198 00004FB3 6631C0              <1> 	xor ax, ax
  6199 00004FB6 31DB                <1> 	xor ebx, ebx
  6200 00004FB8 66B91800            <1> 	mov cx, 24
  6201 00004FBC 66BA3000            <1> 	mov dx, 48
  6202 00004FC0 E8900E0000          <1> 	call showicon
  6203                              <1> 	
  6204 00004FC5 BE[70640000]        <1> 	mov esi, pacmanpellet
  6205 00004FCA 6631C0              <1> 	xor ax, ax
  6206 00004FCD 31DB                <1> 	xor ebx, ebx
  6207 00004FCF 66B94000            <1> 	mov cx, 64
  6208 00004FD3 66BA0400            <1> 	mov dx, 4
  6209 00004FD7 E8790E0000          <1> 	call showicon
  6210                              <1> 	
  6211 00004FDC BE[74650000]        <1> 	mov esi, pacman
  6212 00004FE1 6631C0              <1> 	xor ax, ax
  6213 00004FE4 BB[53620000]        <1> 	mov ebx, pacmannomnom
  6214 00004FE9 66B94000            <1> 	mov cx, 64
  6215 00004FED 66BA3000            <1> 	mov dx, 48
  6216 00004FF1 E85F0E0000          <1> 	call showicon
  6217                              <1> 	
  6218 00004FF6 BE[F2640000]        <1> 	mov esi, ghostie
  6219 00004FFB 6631C0              <1> 	xor ax, ax
  6220 00004FFE BB[3C620000]        <1> 	mov ebx, boo
  6221 00005003 66B96C00            <1> 	mov cx, 108
  6222 00005007 66BA0400            <1> 	mov dx, 4
  6223 0000500B E8450E0000          <1> 	call showicon
  6224                              <1> 
  6225 00005010 BE[E9610000]        <1> 	mov esi, start
  6226 00005015 668B0D[215F0000]    <1> 	mov cx, [resolutiony]
  6227 0000501C 6681E91000          <1> 	sub cx, 16
  6228 00005021 66BA0200            <1> 	mov dx, 2
  6229 00005025 30E4                <1> 	xor ah, ah
  6230 00005027 B010                <1> 	mov al, 00010000b
  6231 00005029 BB[19630000]        <1> 	mov ebx, winblows
  6232 0000502E E8E3090000          <1> 	call showstring
  6233                              <1> 	
  6234 00005033 E8CCFAFFFF          <1> 	call cursorgui
  6235                              <1> guistart:
  6236 00005038 E805F9FFFF          <1> 	call guistartin
  6237 0000503D C605[49500000]00    <1> 	mov byte [copygui], 0
  6238 00005044 E9EFFFFFFF          <1> 	jmp guistart
  6239                              <1> 	
  6240                              <1> ;guicopy:	;;for double buffering
  6241                              <1> ;	mov byte [copygui], 1
  6242                              <1> ;	mov edi, [offscreenmemoffset]
  6243                              <1> ;	xor edx, edx
  6244                              <1> ;	xor ecx, ecx
  6245                              <1> ;	mov dx, [mousecursorposition]
  6246                              <1> ;	mov cx, [mousecursorposition + 2]
  6247                              <1> ;	add edi, edx
  6248                              <1> ;	mov dx, [resolutionx2]
  6249                              <1> ;	inc cx
  6250                              <1> ;guicp2:
  6251                              <1> ;	add edi, edx
  6252                              <1> ;	dec cx
  6253                              <1> ;	cmp cx, 0
  6254                              <1> ;	jne guicp2
  6255                              <1> ;	sub edi, edx
  6256                              <1> ;	mov [cursorloc], edi
  6257                              <1> ;	mov ebx, cursorbmp
  6258                              <1> ;	mov cx, [resolutiony]
  6259                              <1> ;	rol ecx, 16
  6260                              <1> ;	mov cx, [resolutionx]
  6261                              <1> ;	mov esi, [physbaseptr]
  6262                              <1> ;	mov edi, [offscreenmemoffset]
  6263                              <1> ;guicp1:
  6264                              <1> ;	mov ax, [esi]
  6265                              <1> ;	mov [edi], ax
  6266                              <1> ;	add esi, 2
  6267                              <1> ;	add edi, 2
  6268                              <1> ;	cmp edi, [cursorloc]
  6269                              <1> ;	je copycursor
  6270                              <1> ;dncopycursor:
  6271                              <1> ;	dec cx
  6272                              <1> ;	cmp cx, 0
  6273                              <1> ;	jne guicp1
  6274                              <1> ;	mov cx, [resolutionx]
  6275                              <1> ;	rol ecx, 16
  6276                              <1> ;	dec cx
  6277                              <1> ;	cmp cx, 0
  6278                              <1> ;	rol ecx, 16
  6279                              <1> ;	jne guicp1
  6280                              <1> ;	mov byte [copygui], 0
  6281                              <1> ;	ret
  6282                              <1> ;copycursor:
  6283                              <1> ;	cmp ebx, cursorbmpend
  6284                              <1> ;	jae dncopycursor
  6285                              <1> ;	mov dx, [resolutionx2]
  6286                              <1> ;	add edi, edx
  6287                              <1> ;	mov [cursorloc], edi
  6288                              <1> ;	sub edi, edx
  6289                              <1> ;	dec ebx
  6290                              <1> ;	sub edi, 2
  6291                              <1> ;	sub esi, 2
  6292                              <1> ;	mov dx, 9
  6293                              <1> ;curscplp:
  6294                              <1> ;	inc ebx
  6295                              <1> ;	add esi, 2
  6296                              <1> ;	add edi, 2
  6297                              <1> ;	mov ax, [esi]
  6298                              <1> ;	mov [edi], ax
  6299                              <1> ;	mov al, [ebx]
  6300                              <1> ;	cmp al, 0
  6301                              <1> ;	je curscplp2
  6302                              <1> ;	mov word [edi], 1110011110011100b
  6303                              <1> ;curscplp2:
  6304                              <1> ;	dec cx
  6305                              <1> ;	cmp cx, 0
  6306                              <1> ;	je dncopycursor
  6307                              <1> ;	dec dx
  6308                              <1> ;	cmp dx, 0
  6309                              <1> ;	jne curscplp
  6310                              <1> ;	jmp dncopycursor
  6311                              <1> 	
  6312                              <1> 	
  6313                              <1> ;cursorloc: dd 0
  6314                              <1> 		
  6315                              <1> ;nextimage:	
  6316                              <1> ;	call guiclear
  6317                              <1> ;	mov esi, [bmpend]
  6318                              <1> ;	xor eax, eax
  6319                              <1> ;	xor ebx, ebx
  6320                              <1> ;	xor ecx, ecx
  6321                              <1> ;	xor edx, edx
  6322                              <1> ;	call showbmp
  6323                              <1> ;	jmp guistartin
  6324                              <1> 		
  6325 00005049 00                  <1> copygui db 0
  6326 0000504A 00                  <1> graphicsset db 0
  6327 0000504B 0000                <1> graphicspos db 0,0
  6328 0000504D 00                  <1> showcursorfonton db 0
  6329 0000504E 00                  <1> savefonton db 0
  6330 0000504F 00                  <1> mouseselecton db 0
  6331 00005050 00                  <1> guion db 0
  6332                              <1> 
  6333                              <1> 		
  6334                              <1> clearmousecursor:
  6335 00005051 BE[184F0000]        <1> 		mov esi, background
  6336 00005056 8B3D[CC860000]      <1> 		mov edi, [physbaseptr]
  6337 0000505C 31D2                <1> 		xor edx, edx
  6338 0000505E 31C9                <1> 		xor ecx, ecx
  6339 00005060 668B15[E24C0000]    <1> 		mov dx, [lastmouseposition]
  6340 00005067 668B0D[E44C0000]    <1> 		mov cx, [lastmouseposition + 2]
  6341 0000506E 01D7                <1> 		add edi, edx
  6342 00005070 31D2                <1> 		xor edx, edx
  6343 00005072 668B15[255F0000]    <1> 		mov dx, [resolutionx2]
  6344 00005079 6681F90000          <1> 		cmp cx, 0
  6345 0000507E 740B                <1> 		je noyclr
  6346 00005080 01D7                <1> yclr:	add edi, edx
  6347 00005082 6649                <1> 		dec cx
  6348 00005084 6681F90000          <1> 		cmp cx, 0
  6349 00005089 75F5                <1> 		jne yclr
  6350 0000508B 668B06              <1> noyclr:	mov ax, [esi]
  6351 0000508E C1C010              <1> 		rol eax, 16
  6352 00005091 668B06              <1> 		mov ax, [esi]
  6353 00005094 8907                <1> 		mov [edi], eax
  6354 00005096 894704              <1> 		mov [edi + 4], eax
  6355 00005099 894708              <1> 		mov [edi + 8], eax
  6356 0000509C 89470C              <1> 		mov [edi + 12], eax
  6357 0000509F 01D7                <1> 		add edi, edx
  6358 000050A1 6641                <1> 		inc cx
  6359 000050A3 6681F91000          <1> 		cmp cx, 16
  6360 000050A8 72E1                <1> 		jb noyclr
  6361 000050AA C3                  <1> 		ret
  6362                              <1> 
  6363                              <1> switchmousepos:		;;switch were the mouse is located
  6364 000050AB BE[00120000]        <1> 		mov esi, mousecolorbuf
  6365 000050B0 8B3D[CC860000]      <1> 		mov edi, [physbaseptr]
  6366 000050B6 31D2                <1> 		xor edx, edx
  6367 000050B8 31C9                <1> 		xor ecx, ecx
  6368 000050BA 668B15[E24C0000]    <1> 		mov dx, [lastmouseposition]
  6369 000050C1 668B0D[E44C0000]    <1> 		mov cx, [lastmouseposition + 2]
  6370 000050C8 01D7                <1> 		add edi, edx
  6371 000050CA 31D2                <1> 		xor edx, edx
  6372 000050CC 668B15[255F0000]    <1> 		mov dx, [resolutionx2]
  6373 000050D3 6681F90000          <1> 		cmp cx, 0
  6374 000050D8 740B                <1> 		je noswmsy
  6375 000050DA 01D7                <1> swmsy:		add edi, edx
  6376 000050DC 6649                <1> 		dec cx
  6377 000050DE 6681F90000          <1> 		cmp cx, 0
  6378 000050E3 75F5                <1> 		jne swmsy
  6379 000050E5 8B06                <1> noswmsy:	mov eax, [esi]
  6380 000050E7 8B5E04              <1> 		mov ebx, [esi + 4]
  6381 000050EA 8907                <1> 		mov [edi], eax
  6382 000050EC 895F04              <1> 		mov [edi + 4], ebx
  6383 000050EF 8B4608              <1> 		mov eax, [esi + 8]
  6384 000050F2 8B5E0C              <1> 		mov ebx, [esi + 12]
  6385 000050F5 894708              <1> 		mov [edi + 8], eax
  6386 000050F8 895F0C              <1> 		mov [edi + 12], ebx
  6387 000050FB 01D7                <1> 		add edi, edx
  6388 000050FD 81C610000000        <1> 		add esi, 16
  6389 00005103 81FE[00130000]      <1> 		cmp esi, mcolorend
  6390 00005109 72DA                <1> 		jb noswmsy
  6391                              <1> 		
  6392                              <1> switchmousepos2:
  6393 0000510B BE[00120000]        <1> 		mov esi, mousecolorbuf
  6394 00005110 8B3D[CC860000]      <1> 		mov edi, [physbaseptr]
  6395 00005116 31D2                <1> 		xor edx, edx
  6396 00005118 31C9                <1> 		xor ecx, ecx
  6397 0000511A 668B15[E64C0000]    <1> 		mov dx, [mousecursorposition]
  6398 00005121 668B0D[E84C0000]    <1> 		mov cx, [mousecursorposition + 2]
  6399 00005128 01D7                <1> 		add edi, edx
  6400 0000512A 31D2                <1> 		xor edx, edx
  6401 0000512C 668B15[255F0000]    <1> 		mov dx, [resolutionx2]
  6402 00005133 6681F90000          <1> 		cmp cx, 0
  6403 00005138 740B                <1> 		je noswmsy2
  6404 0000513A 01D7                <1> swmsy2:		add edi, edx
  6405 0000513C 6649                <1> 		dec cx
  6406 0000513E 6681F90000          <1> 		cmp cx, 0
  6407 00005143 75F5                <1> 		jne swmsy2
  6408 00005145 8B07                <1> noswmsy2:	mov eax, [edi]
  6409 00005147 8B5F04              <1> 		mov ebx, [edi + 4]
  6410 0000514A 8906                <1> 		mov [esi], eax
  6411 0000514C 895E04              <1> 		mov [esi + 4], ebx
  6412 0000514F 8B4708              <1> 		mov eax, [edi + 8]
  6413 00005152 8B5F0C              <1> 		mov ebx, [edi + 12]
  6414 00005155 894608              <1> 		mov [esi + 8], eax
  6415 00005158 895E0C              <1> 		mov [esi + 12], ebx
  6416 0000515B 01D7                <1> 		add edi, edx
  6417 0000515D 81C610000000        <1> 		add esi, 16
  6418 00005163 81FE[00130000]      <1> 		cmp esi, mcolorend
  6419 00005169 72DA                <1> 		jb noswmsy2
  6420 0000516B C3                  <1> 		ret
  6421                              <1> 
  6422 0000516C 00                  <1> pbutton db 0
  6423 0000516D 00                  <1> pLBUTTON db 0
  6424 0000516E 00                  <1> pRBUTTON db 0
  6425 0000516F 00000000            <1> dragging dw 0,0
  6426 00005173 0000000000000000    <1> lastpos dw 0,0,0,0
  6427 0000517B 00000000            <1> colorbuf dw 0,0
  6428                              <1> 	
  6429                              <1> 	clickicon:
  6430 0000517F B001                <1> 		mov al, 1
  6431 00005181 A2[6C510000]        <1> 		mov [pbutton], al
  6432 00005186 A0[6D510000]        <1> 		mov al, [pLBUTTON]
  6433 0000518B 2205[17490000]      <1> 		and al, [LBUTTON]
  6434 00005191 8A25[6E510000]      <1> 		mov ah, [pRBUTTON]
  6435 00005197 2225[18490000]      <1> 		and ah, [RBUTTON]
  6436 0000519D 08E0                <1> 		or al, ah
  6437 0000519F 3C00                <1> 		cmp al, 0
  6438 000051A1 741B                <1> 		je nodragclick
  6439 000051A3 813D[6F510000]0100- <1> 		cmp dword [dragging], 1
  6440 000051AB 0000                <1>
  6441 000051AD 732D                <1> 		jae dragclick
  6442 000051AF C705[6F510000]0100- <1> 		mov dword [dragging], 1
  6443 000051B7 0000                <1>
  6444 000051B9 E91E000000          <1> 		jmp dragclick
  6445                              <1> 	nodragclick:
  6446 000051BE C705[6F510000]0000- <1> 		mov dword [dragging], 0
  6447 000051C6 0000                <1>
  6448 000051C8 A0[17490000]        <1> 		mov al, [LBUTTON]
  6449 000051CD A2[6D510000]        <1> 		mov [pLBUTTON], al
  6450 000051D2 A0[18490000]        <1> 		mov al, [RBUTTON]
  6451 000051D7 A2[6E510000]        <1> 		mov [pRBUTTON], al
  6452                              <1> 	dragclick:
  6453 000051DC 6631C0              <1> 		xor ax, ax
  6454 000051DF BE[00100000]        <1> 		mov esi, graphicstable
  6455 000051E4 C705[37620000]0000- <1> 		mov dword [codepointer], 0
  6456 000051EC 0000                <1>
  6457                              <1> 	clicon2:
  6458 000051EE 31D2                <1> 		xor edx, edx
  6459 000051F0 31C9                <1> 		xor ecx, ecx
  6460 000051F2 66813E0100          <1> 		cmp word [esi], 1
  6461 000051F7 0F841B000000        <1> 		je near iconselect
  6462 000051FD 66813E0200          <1> 		cmp word [esi], 2
  6463 00005202 0F8472010000        <1> 		je near textselected
  6464 00005208 66813E0300          <1> 		cmp word [esi], 3
  6465 0000520D 0F84CA020000        <1> 		je near windowselect
  6466 00005213 E90E040000          <1> 		jmp nexticonsel
  6467                              <1> 	iconselect:
  6468 00005218 668B5606            <1> 		mov dx, [esi + 6]
  6469 0000521C 6689D0              <1> 		mov ax, dx
  6470 0000521F 668B4E08            <1> 		mov cx, [esi + 8]
  6471 00005223 6689CB              <1> 		mov bx, cx
  6472 00005226 6681C32000          <1> 		add bx, 32
  6473 0000522B 6601D0              <1> 		add ax, dx
  6474 0000522E 813D[6F510000]0100- <1> 		cmp dword [dragging], 1
  6475 00005236 0000                <1>
  6476 00005238 746F                <1> 		je dragicon
  6477 0000523A 813D[6F510000]0000- <1> 		cmp dword [dragging], 0
  6478 00005242 0000                <1>
  6479 00005244 7411                <1> 		je nodragiconcheck
  6480 00005246 3935[6F510000]      <1> 		cmp dword [dragging], esi
  6481 0000524C 0F85D4030000        <1> 		jne near nexticonsel
  6482 00005252 E952000000          <1> 		jmp dragicon
  6483                              <1> 	nodragiconcheck:
  6484 00005257 663905[E64C0000]    <1> 		cmp [mousecursorposition], ax
  6485 0000525E 0F82C2030000        <1> 		jb near nexticonsel
  6486 00005264 66054000            <1> 		add ax, 64
  6487 00005268 663905[E64C0000]    <1> 		cmp [mousecursorposition], ax
  6488 0000526F 0F87B1030000        <1> 		ja near nexticonsel
  6489 00005275 6629D0              <1> 		sub ax, dx
  6490 00005278 66390D[E84C0000]    <1> 		cmp [mousecursorposition + 2], cx
  6491 0000527F 0F82A1030000        <1> 		jb near nexticonsel
  6492 00005285 66391D[E84C0000]    <1> 		cmp [mousecursorposition + 2], bx
  6493 0000528C 0F8794030000        <1> 		ja near nexticonsel
  6494 00005292 668B460A            <1> 		mov ax, [esi + 10]
  6495 00005296 66250100            <1> 		and ax, 1
  6496 0000529A 663D0100            <1> 		cmp ax, 1
  6497 0000529E 0F84B6000000        <1> 		je near unselecticon
  6498 000052A4 E98D000000          <1> 		jmp nodragicon
  6499                              <1> 	dragicon:
  6500 000052A9 663905[E24C0000]    <1> 		cmp [lastmouseposition], ax
  6501 000052B0 0F8270030000        <1> 		jb near nexticonsel
  6502 000052B6 66054000            <1> 		add ax, 64
  6503 000052BA 663905[E24C0000]    <1> 		cmp [lastmouseposition], ax
  6504 000052C1 0F875F030000        <1> 		ja near nexticonsel
  6505 000052C7 6629D0              <1> 		sub ax, dx
  6506 000052CA 66390D[E44C0000]    <1> 		cmp [lastmouseposition + 2], cx
  6507 000052D1 0F824F030000        <1> 		jb near nexticonsel
  6508 000052D7 66391D[E44C0000]    <1> 		cmp [lastmouseposition + 2], bx
  6509 000052DE 0F8742030000        <1> 		ja near nexticonsel
  6510 000052E4 668B460A            <1> 		mov ax, [esi + 10]
  6511 000052E8 2410                <1> 		and al, 00010000b
  6512 000052EA 3C10                <1> 		cmp al, 00010000b
  6513 000052EC 7448                <1> 		je nodragicon
  6514 000052EE 8935[6F510000]      <1> 		mov [dragging], esi
  6515 000052F4 66D1E2              <1> 		shl dx, 1
  6516 000052F7 662B15[E24C0000]    <1> 		sub dx, [lastmouseposition]
  6517 000052FE 660315[E64C0000]    <1> 		add dx, [mousecursorposition]
  6518 00005305 66D1EA              <1> 		shr dx, 1
  6519 00005308 66030D[E84C0000]    <1> 		add cx, [mousecursorposition + 2]
  6520 0000530F 662B0D[E44C0000]    <1> 		sub cx, [lastmouseposition + 2]
  6521 00005316 663B15[255F0000]    <1> 		cmp dx, [resolutionx2]
  6522 0000531D 7607                <1> 		jbe chkyresdrgicn
  6523 0000531F 668B15[E64C0000]    <1> 		mov dx, [mousecursorposition]
  6524                              <1> 	chkyresdrgicn:
  6525 00005326 663B0D[215F0000]    <1> 		cmp cx, [resolutiony]
  6526 0000532D 7607                <1> 		jbe nodragicon
  6527 0000532F 668B0D[E84C0000]    <1> 		mov cx, [mousecursorposition + 2]
  6528                              <1> 	nodragicon:
  6529 00005336 66814E0A0100        <1> 		or word [esi + 10], 1
  6530 0000533C 8B5E0C              <1> 		mov ebx, [esi + 12]
  6531 0000533F 668B460A            <1> 		mov ax, [esi + 10]
  6532 00005343 8B7602              <1> 		mov esi, [esi + 2]
  6533 00005346 C705[37620000]0000- <1> 		mov dword [codepointer], 0
  6534 0000534E 0000                <1>
  6535 00005350 E8000B0000          <1> 		call showicon
  6536 00005355 E9E5020000          <1> 		jmp doneiconsel
  6537                              <1> 	unselecticon:
  6538 0000535A 6681660AFEFF        <1> 		and word [esi + 10], 0xFFFE
  6539 00005360 8B5E0C              <1> 		mov ebx, [esi + 12]
  6540 00005363 668B460A            <1> 		mov ax, [esi + 10]
  6541 00005367 8B7602              <1> 		mov esi, [esi + 2]
  6542 0000536A 891D[37620000]      <1> 		mov [codepointer], ebx
  6543 00005370 E8E00A0000          <1> 		call showicon
  6544 00005375 E9C5020000          <1> 		jmp doneiconsel
  6545                              <1> 	textselected:
  6546 0000537A 8B5E02              <1> 		mov ebx, [esi + 2]
  6547 0000537D 668B5606            <1> 		mov dx, [esi + 6]
  6548 00005381 6689D0              <1> 		mov ax, dx
  6549 00005384 668B4E08            <1> 		mov cx, [esi + 8]
  6550                              <1> 	lengthtesttext:
  6551 00005388 803B00              <1> 		cmp byte [ebx], 0
  6552 0000538B 740A                <1> 		je donetesttextlength
  6553 0000538D 43                  <1> 		inc ebx
  6554 0000538E 66051000            <1> 		add ax, 16
  6555 00005392 E9F1FFFFFF          <1> 		jmp lengthtesttext
  6556                              <1> 	donetesttextlength:
  6557 00005397 6689CB              <1> 		mov bx, cx
  6558 0000539A 6681C30F00          <1> 		add bx, 15
  6559 0000539F 813D[6F510000]0100- <1> 		cmp dword [dragging], 1
  6560 000053A7 0000                <1>
  6561 000053A9 7468                <1> 		je dragtext
  6562 000053AB 813D[6F510000]0000- <1> 		cmp dword [dragging], 0
  6563 000053B3 0000                <1>
  6564 000053B5 7411                <1> 		je nodragtextcheck
  6565 000053B7 3935[6F510000]      <1> 		cmp dword [dragging], esi
  6566 000053BD 0F8563020000        <1> 		jne near nexticonsel
  6567 000053C3 E94B000000          <1> 		jmp dragtext
  6568                              <1> 	nodragtextcheck:
  6569 000053C8 663915[E64C0000]    <1> 		cmp [mousecursorposition], dx
  6570 000053CF 0F8251020000        <1> 		jb near nexticonsel
  6571 000053D5 663905[E64C0000]    <1> 		cmp [mousecursorposition], ax
  6572 000053DC 0F8744020000        <1> 		ja near nexticonsel
  6573 000053E2 66390D[E84C0000]    <1> 		cmp [mousecursorposition + 2], cx
  6574 000053E9 0F8237020000        <1> 		jb near nexticonsel
  6575 000053EF 66391D[E84C0000]    <1> 		cmp [mousecursorposition + 2], bx
  6576 000053F6 0F872A020000        <1> 		ja near nexticonsel
  6577 000053FC 668B460A            <1> 		mov ax, [esi + 10]
  6578 00005400 66250100            <1> 		and ax, 1
  6579 00005404 663D0100            <1> 		cmp ax, 1
  6580 00005408 0F84AB000000        <1> 		je near unselecttext
  6581 0000540E E986000000          <1> 		jmp nodragtext
  6582                              <1> 	dragtext:
  6583 00005413 663915[E24C0000]    <1> 		cmp [lastmouseposition], dx
  6584 0000541A 0F8206020000        <1> 		jb near nexticonsel
  6585 00005420 663905[E24C0000]    <1> 		cmp [lastmouseposition], ax
  6586 00005427 0F87F9010000        <1> 		ja near nexticonsel
  6587 0000542D 66390D[E44C0000]    <1> 		cmp [lastmouseposition + 2], cx
  6588 00005434 0F82EC010000        <1> 		jb near nexticonsel
  6589 0000543A 66391D[E44C0000]    <1> 		cmp [lastmouseposition + 2], bx
  6590 00005441 0F87DF010000        <1> 		ja near nexticonsel
  6591 00005447 668B460A            <1> 		mov ax, [esi + 10]
  6592 0000544B 2410                <1> 		and al, 00010000b
  6593 0000544D 663D1000            <1> 		cmp ax, 00010000b
  6594 00005451 0F8442000000        <1> 		je near nodragtext
  6595 00005457 8935[6F510000]      <1> 		mov [dragging], esi
  6596 0000545D 662B15[E24C0000]    <1> 		sub dx, [lastmouseposition]
  6597 00005464 660315[E64C0000]    <1> 		add dx, [mousecursorposition]
  6598 0000546B 66030D[E84C0000]    <1> 		add cx, [mousecursorposition + 2]
  6599 00005472 662B0D[E44C0000]    <1> 		sub cx, [lastmouseposition + 2]
  6600 00005479 663B15[255F0000]    <1> 		cmp dx, [resolutionx2]
  6601 00005480 7607                <1> 		jbe chkyresdrgtxt
  6602 00005482 668B15[E64C0000]    <1> 		mov dx, [mousecursorposition]
  6603                              <1> 	chkyresdrgtxt:
  6604 00005489 663B0D[215F0000]    <1> 		cmp cx, [resolutiony]
  6605 00005490 7607                <1> 		jbe nodragtext
  6606 00005492 668B0D[E84C0000]    <1> 		mov cx, [mousecursorposition + 2]
  6607                              <1> 	nodragtext:
  6608 00005499 66814E0A0100        <1> 		or word [esi + 10], 1
  6609 0000549F 8B5E0C              <1> 		mov ebx, [esi + 12]
  6610 000054A2 891D[37620000]      <1> 		mov [codepointer], ebx
  6611 000054A8 668B460A            <1> 		mov ax, [esi + 10]
  6612 000054AC 8B7602              <1> 		mov esi, [esi + 2]
  6613 000054AF E862050000          <1> 		call showstring
  6614 000054B4 E986010000          <1> 		jmp doneiconsel
  6615                              <1> 	unselecttext:
  6616 000054B9 6681660AFEFF        <1> 		and word [esi + 10], 0xFFFE
  6617 000054BF 8B5E0C              <1> 		mov ebx, [esi + 12]
  6618 000054C2 668B460A            <1> 		mov ax, [esi + 10]
  6619 000054C6 8B7602              <1> 		mov esi, [esi + 2]
  6620 000054C9 C705[37620000]0000- <1> 		mov dword [codepointer], 0
  6621 000054D1 0000                <1>
  6622 000054D3 E83E050000          <1> 		call showstring
  6623 000054D8 E962010000          <1> 		jmp doneiconsel
  6624                              <1> windowselect:
  6625 000054DD 8B7E02              <1> 		mov edi, [esi + 2]
  6626 000054E0 668B5606            <1> 		mov dx, [esi + 6]
  6627 000054E4 6689D0              <1> 		mov ax, dx
  6628 000054E7 668B4E08            <1> 		mov cx, [esi + 8]
  6629 000054EB 6689CB              <1> 		mov bx, cx
  6630 000054EE 6681C31000          <1> 		add bx, 16
  6631 000054F3 813D[6F510000]0100- <1> 		cmp dword [dragging], 1
  6632 000054FB 0000                <1>
  6633 000054FD 746D                <1> 		je dragwin
  6634 000054FF 813D[6F510000]0000- <1> 		cmp dword [dragging], 0
  6635 00005507 0000                <1>
  6636 00005509 7411                <1> 		je nodragwincheck
  6637 0000550B 3935[6F510000]      <1> 		cmp dword [dragging], esi
  6638 00005511 0F850F010000        <1> 		jne near nexticonsel
  6639 00005517 E950000000          <1> 		jmp dragwin
  6640                              <1> 	nodragwincheck:
  6641 0000551C 663905[E64C0000]    <1> 		cmp [mousecursorposition], ax
  6642 00005523 0F82FD000000        <1> 		jb near nexticonsel
  6643 00005529 660307              <1> 		add ax, [edi]
  6644 0000552C 660307              <1> 		add ax, [edi]
  6645 0000552F 663905[E64C0000]    <1> 		cmp [mousecursorposition], ax
  6646 00005536 0F87EA000000        <1> 		ja near nexticonsel
  6647 0000553C 66390D[E84C0000]    <1> 		cmp [mousecursorposition + 2], cx
  6648 00005543 0F82DD000000        <1> 		jb near nexticonsel
  6649 00005549 66391D[E84C0000]    <1> 		cmp [mousecursorposition + 2], bx
  6650 00005550 0F87D0000000        <1> 		ja near nexticonsel
  6651 00005556 662D1400            <1> 		sub ax, 20
  6652 0000555A 663905[E64C0000]    <1> 		cmp [mousecursorposition], ax
  6653 00005561 0F8795000000        <1> 		ja near killwin
  6654 00005567 E97C000000          <1> 		jmp nodragwin
  6655                              <1> 	dragwin:
  6656 0000556C 663905[E24C0000]    <1> 		cmp [lastmouseposition], ax
  6657 00005573 0F82AD000000        <1> 		jb near nexticonsel
  6658 00005579 660307              <1> 		add ax, [edi]
  6659 0000557C 660307              <1> 		add ax, [edi]
  6660 0000557F 663905[E24C0000]    <1> 		cmp [lastmouseposition], ax
  6661 00005586 0F879A000000        <1> 		ja near nexticonsel
  6662 0000558C 66390D[E44C0000]    <1> 		cmp [lastmouseposition + 2], cx
  6663 00005593 0F828D000000        <1> 		jb near nexticonsel
  6664 00005599 66391D[E44C0000]    <1> 		cmp [lastmouseposition + 2], bx
  6665 000055A0 0F8780000000        <1> 		ja near nexticonsel
  6666 000055A6 8935[6F510000]      <1> 		mov [dragging], esi
  6667 000055AC 662B15[E24C0000]    <1> 		sub dx, [lastmouseposition]
  6668 000055B3 660315[E64C0000]    <1> 		add dx, [mousecursorposition]
  6669 000055BA 66030D[E84C0000]    <1> 		add cx, [mousecursorposition + 2]
  6670 000055C1 662B0D[E44C0000]    <1> 		sub cx, [lastmouseposition + 2]
  6671 000055C8 663B15[255F0000]    <1> 		cmp dx, [resolutionx2]
  6672 000055CF 7607                <1> 		jbe chkyresdrgwin
  6673 000055D1 668B15[E64C0000]    <1> 		mov dx, [mousecursorposition]
  6674                              <1> 	chkyresdrgwin:
  6675 000055D8 663B0D[215F0000]    <1> 		cmp cx, [resolutiony]
  6676 000055DF 7607                <1> 		jbe nodragwin
  6677 000055E1 668B0D[E84C0000]    <1> 		mov cx, [mousecursorposition + 2]
  6678                              <1> 	nodragwin:
  6679 000055E8 8B5E0C              <1> 		mov ebx, [esi + 12]
  6680 000055EB 668B460A            <1> 		mov ax, [esi + 10]
  6681 000055EF 8B7602              <1> 		mov esi, [esi + 2]
  6682 000055F2 E88E040000          <1> 		call showwindow
  6683 000055F7 E943000000          <1> 		jmp doneiconsel
  6684                              <1> 	killwin:
  6685 000055FC 66C7060000          <1> 		mov word [esi], 0
  6686 00005601 C705[2D040000]0000- <1> 		mov dword [user2codepoint], 0
  6687 00005609 0000                <1>
  6688 0000560B C605[C9270000]00    <1> 		mov byte [termguion], 0
  6689 00005612 E8C4F8FFFF          <1> 		call guiclear
  6690 00005617 E8A7000000          <1> 		call reloadallgraphics
  6691 0000561C E917FAFFFF          <1> 		jmp guistart
  6692 00005621 E93A000000          <1> 		jmp doneiconsel2
  6693                              <1> 	nexticonsel:
  6694 00005626 6681660AFEFF        <1> 		and word [esi + 10], 0xFFFE
  6695 0000562C 81C610000000        <1> 		add esi, 16
  6696 00005632 81FE[00120000]      <1> 		cmp esi, graphicstableend
  6697 00005638 7305                <1> 		jae doneiconsel
  6698 0000563A E9AFFBFFFF          <1> 		jmp clicon2
  6699                              <1> 	doneiconsel:
  6700 0000563F 813D[6F510000]0100- <1> 		cmp dword [dragging], 1
  6701 00005647 0000                <1>
  6702 00005649 7315                <1> 		jae doneiconsel2
  6703 0000564B 813D[37620000]0000- <1> 		cmp dword [codepointer], 0
  6704 00005653 0000                <1>
  6705 00005655 7409                <1> 		je doneiconsel2
  6706 00005657 8B1D[37620000]      <1> 		mov ebx, [codepointer]
  6707 0000565D FFD3                <1> 		call ebx 
  6708 0000565F C3                  <1> 		ret
  6709                              <1> 	doneiconsel2:
  6710 00005660 A0[17490000]        <1> 		mov al, [LBUTTON]
  6711 00005665 A2[6D510000]        <1> 		mov [pLBUTTON], al
  6712 0000566A A0[18490000]        <1> 		mov al, [RBUTTON]
  6713 0000566F A2[6E510000]        <1> 		mov [pRBUTTON], al
  6714 00005674 66813D[6F510000]01- <1> 		cmp word [dragging], 1
  6715 0000567C 00                  <1>
  6716 0000567D 0F860A000000        <1> 		jbe near noreloadgraphicsclick
  6717 00005683 E8C9F9FFFF          <1> call clearmousecursor
  6718 00005688 E836000000          <1> call reloadallgraphics
  6719                              <1> noreloadgraphicsclick:
  6720 0000568D 31C9                <1> 		xor ecx, ecx
  6721 0000568F 31D2                <1> 		xor edx, edx
  6722 00005691 30E4                <1> 		xor ah, ah
  6723 00005693 B0FE                <1> 		mov al, 254
  6724 00005695 668B15[E64C0000]    <1> 		mov dx, [mousecursorposition]
  6725 0000569C 668B0D[E84C0000]    <1> 		mov cx, [mousecursorposition + 2]
  6726 000056A3 66BBE738            <1> 		mov bx, 0011100011100111b
  6727 000056A7 C605[4D500000]01    <1> 		mov byte [showcursorfonton], 1
  6728 000056AE E882080000          <1> 		call showfontvesa
  6729 000056B3 C605[4D500000]00    <1> 		mov byte [showcursorfonton], 0
  6730 000056BA C3                  <1> 		ret
  6731 000056BB 00000000            <1> lastdrag dw 0,0
  6732 000056BF 00000000            <1> grpctblpos dw 0,0
  6733                              <1> 
  6734                              <1> reloadallgraphics:
  6735 000056C3 BF[00100000]        <1> 		mov edi, graphicstable
  6736                              <1> reloadgraphicsloop:
  6737 000056C8 8B7702              <1> 		mov esi, [edi + 2]
  6738 000056CB 668B5706            <1> 		mov dx, [edi + 6]
  6739 000056CF 668B4F08            <1> 		mov cx, [edi + 8]
  6740 000056D3 668B07              <1> 		mov ax, [edi]
  6741 000056D6 668B5F0A            <1> 		mov bx, [edi + 10]
  6742 000056DA 893D[BF560000]      <1> 		mov [grpctblpos], edi
  6743 000056E0 3B3D[6F510000]      <1> 		cmp edi, [dragging]
  6744 000056E6 741E                <1> 		je loadedgraphic
  6745 000056E8 663D0100            <1> 		cmp ax, 1
  6746 000056EC 0F8437000000        <1> 		je near icongraphic
  6747 000056F2 663D0200            <1> 		cmp ax, 2
  6748 000056F6 0F8440000000        <1> 		je near stringgraphic
  6749 000056FC 663D0300            <1> 		cmp ax, 3
  6750 00005700 0F8419000000        <1> 		je near windowgraphic
  6751 00005706 8B3D[BF560000]      <1> loadedgraphic:  mov edi, [grpctblpos]
  6752 0000570C 81C710000000        <1> 		add edi, 16
  6753 00005712 81FF[00120000]      <1> 		cmp edi, graphicstableend
  6754 00005718 7335                <1> 		jae donereloadgraphics
  6755 0000571A E9A9FFFFFF          <1> 		jmp reloadgraphicsloop
  6756 0000571F E809040000          <1> windowgraphic:	call showwindow2
  6757 00005724 E9DDFFFFFF          <1> 		jmp loadedgraphic
  6758 00005729 80E301              <1> icongraphic:	and bl, 1
  6759 0000572C 881D[3B620000]      <1> 		mov [iconselected], bl
  6760 00005732 E831070000          <1> 		call showicon2
  6761 00005737 E9CAFFFFFF          <1> 		jmp loadedgraphic
  6762 0000573C 80E301              <1> stringgraphic:  and bl, 1
  6763 0000573F 881D[4F500000]      <1> 		mov [mouseselecton], bl
  6764 00005745 E8DF020000          <1> 		call showstring2
  6765 0000574A E9B7FFFFFF          <1> 		jmp loadedgraphic
  6766                              <1> donereloadgraphics:
  6767 0000574F 8B3D[6F510000]      <1> 		mov edi, [dragging]
  6768 00005755 81FF[00100000]      <1> 		cmp edi, graphicstable
  6769 0000575B 7226                <1> 		jb notcorrectdrag
  6770 0000575D 668B07              <1> 		mov ax, [edi]
  6771 00005760 8B7702              <1> 		mov esi, [edi + 2]
  6772 00005763 668B5706            <1> 		mov dx, [edi + 6]
  6773 00005767 668B4F08            <1> 		mov cx, [edi + 8]
  6774 0000576B 668B5F0A            <1> 		mov bx, [edi + 10]
  6775 0000576F 663D0100            <1> 		cmp ax, 1
  6776 00005773 750F                <1> 		jne noticondragging
  6777 00005775 80E301              <1> 		and bl, 1
  6778 00005778 881D[3B620000]      <1> 		mov [iconselected], bl
  6779 0000577E E8E5060000          <1> 		call showicon2
  6780                              <1> notcorrectdrag:
  6781 00005783 C3                  <1> 		ret
  6782                              <1> 
  6783                              <1> 	noticondragging:
  6784 00005784 663D0200            <1> 		cmp ax, 2
  6785 00005788 75F9                <1> 		jne notcorrectdrag
  6786 0000578A 80E301              <1> 		and bl, 1
  6787 0000578D 881D[4F500000]      <1> 		mov [mouseselecton], bl
  6788 00005793 E891020000          <1> 		call showstring2
  6789 00005798 E9E6FFFFFF          <1> 		jmp notcorrectdrag
  6790                              <1> 
  6791 0000579D 00<rept>            <1> grphbuf times 16 db 0
  6792                              <1> 	graphicsadd:
  6793 000057AD BF[00100000]        <1> 		mov edi, graphicstable
  6794                              <1> 	shwgrph1:
  6795 000057B2 397702              <1> 		cmp dword [edi + 2], esi
  6796 000057B5 7417                <1> 		je showgraphicsreplace2
  6797 000057B7 81C710000000        <1> 		add edi, 16
  6798 000057BD 81FF[00120000]      <1> 		cmp edi, graphicstableend
  6799 000057C3 0F8332020000        <1> 		jae near showgraphicsnew
  6800 000057C9 E9E4FFFFFF          <1> 		jmp shwgrph1
  6801                              <1> 	showgraphicsreplace2:
  6802 000057CE 8935[9F570000]      <1> 		mov [grphbuf + 2], esi
  6803 000057D4 668915[A3570000]    <1> 		mov [grphbuf + 6], dx
  6804 000057DB 66890D[A5570000]    <1> 		mov [grphbuf + 8], cx
  6805 000057E2 891D[A9570000]      <1> 		mov [grphbuf + 12], ebx
  6806 000057E8 30FF                <1> 		xor bh, bh
  6807 000057EA 88E3                <1> 		mov bl, ah
  6808 000057EC 30E4                <1> 		xor ah, ah
  6809 000057EE 66A3[A7570000]      <1> 		mov [grphbuf + 10], ax	
  6810 000057F4 66891D[9D570000]    <1> 		mov [grphbuf], bx
  6811 000057FB 66A1[9D570000]      <1> 		mov ax, [grphbuf]
  6812 00005801 663D0100            <1> 		cmp ax, 1
  6813 00005805 0F8419000000        <1> 		je near replaceicon
  6814 0000580B 663D0200            <1> 		cmp ax, 2
  6815 0000580F 0F8493000000        <1> 		je near replacestring
  6816 00005815 663D0300            <1> 		cmp ax, 3
  6817 00005819 0F840F010000        <1> 		je near replacewindow
  6818 0000581F E9B4010000          <1> 		jmp showgraphicsreplace
  6819                              <1> 	replaceicon:
  6820 00005824 893D[73510000]      <1> 		mov [lastpos], edi
  6821 0000582A 8935[77510000]      <1> 		mov [lastpos + 4], esi
  6822 00005830 8B7702              <1> 		mov esi, [edi + 2]
  6823 00005833 668B5F0C            <1> 		mov bx, [edi + 12]
  6824 00005837 668B5706            <1> 		mov dx, [edi + 6]
  6825 0000583B 668B4F08            <1> 		mov cx, [edi + 8]
  6826 0000583F 668B06              <1> 		mov ax, [esi]
  6827 00005842 66A3[7B510000]      <1> 		mov [colorbuf], ax
  6828 00005848 66A1[184F0000]      <1> 		mov ax, [background]
  6829 0000584E 668906              <1> 		mov [esi], ax
  6830 00005851 8B5F0C              <1> 		mov ebx, [edi + 12]
  6831 00005854 668B470A            <1> 		mov ax, [edi + 10]
  6832 00005858 2401                <1> 		and al, 1
  6833 0000585A A2[3B620000]        <1> 		mov [iconselected], al
  6834 0000585F 668B470A            <1> 		mov ax, [edi + 10]
  6835 00005863 E800060000          <1> 		call showicon2
  6836 00005868 8B3D[73510000]      <1> 		mov edi, [lastpos]
  6837 0000586E 8B7702              <1> 		mov esi, [edi + 2]
  6838 00005871 66A1[7B510000]      <1> 		mov ax, [colorbuf]
  6839 00005877 668906              <1> 		mov [esi], ax
  6840 0000587A 8B35[77510000]      <1> 		mov esi, [lastpos + 4]
  6841 00005880 668B15[A3570000]    <1> 		mov dx, [grphbuf + 6]
  6842 00005887 668B0D[A5570000]    <1> 		mov cx, [grphbuf + 8]
  6843 0000588E 668B1D[9D570000]    <1> 		mov bx, [grphbuf]
  6844 00005895 66A1[A7570000]      <1> 		mov ax, [grphbuf + 10]
  6845 0000589B 88DC                <1> 		mov ah, bl
  6846 0000589D 8B1D[A9570000]      <1> 		mov ebx, [grphbuf + 12]
  6847 000058A3 E930010000          <1> 		jmp showgraphicsreplace
  6848                              <1> 	replacestring:
  6849 000058A8 893D[73510000]      <1> 		mov [lastpos], edi
  6850 000058AE 8935[77510000]      <1> 		mov [lastpos + 4], esi
  6851 000058B4 8B5F0C              <1> 		mov ebx, [edi + 12]
  6852 000058B7 8B7702              <1> 		mov esi, [edi + 2]
  6853 000058BA 668B5706            <1> 		mov dx, [edi + 6]
  6854 000058BE 668B4F08            <1> 		mov cx, [edi + 8]
  6855 000058C2 66A1[685A0000]      <1> 		mov ax, [colorfont2]
  6856 000058C8 66A3[7B510000]      <1> 		mov [colorbuf], ax
  6857 000058CE 66A1[184F0000]      <1> 		mov ax, [background]
  6858 000058D4 66A3[685A0000]      <1> 		mov [colorfont2], ax		
  6859 000058DA 8B5F0C              <1> 		mov ebx, [edi + 12]
  6860 000058DD 668B470A            <1> 		mov ax, [edi + 10]
  6861 000058E1 2401                <1> 		and al, 1
  6862 000058E3 A2[4F500000]        <1> 		mov [mouseselecton], al
  6863 000058E8 668B470A            <1> 		mov ax, [edi + 10]
  6864 000058EC E838010000          <1> 		call showstring2
  6865 000058F1 66A1[7B510000]      <1> 		mov ax, [colorbuf]
  6866 000058F7 66A3[685A0000]      <1> 		mov [colorfont2], ax
  6867 000058FD 8B3D[73510000]      <1> 		mov edi, [lastpos]
  6868 00005903 8B7702              <1> 		mov esi, [edi + 2]
  6869 00005906 668B15[A3570000]    <1> 		mov dx, [grphbuf + 6]
  6870 0000590D 668B0D[A5570000]    <1> 		mov cx, [grphbuf + 8]
  6871 00005914 668B1D[9D570000]    <1> 		mov bx, [grphbuf]
  6872 0000591B 66A1[A7570000]      <1> 		mov ax, [grphbuf + 10]
  6873 00005921 88DC                <1> 		mov ah, bl
  6874 00005923 8B1D[A9570000]      <1> 		mov ebx, [grphbuf + 12]
  6875 00005929 E9AA000000          <1> 		jmp showgraphicsreplace
  6876                              <1> 	replacewindow:
  6877 0000592E 893D[73510000]      <1> 		mov [lastpos], edi
  6878 00005934 8935[77510000]      <1> 		mov [lastpos + 4], esi
  6879 0000593A 8B7702              <1> 		mov esi, [edi + 2]
  6880 0000593D 8B3D[775A0000]      <1> 		mov edi, [windowbufloc]
  6881 00005943 31D2                <1> 		xor edx, edx
  6882 00005945 668B15[255F0000]    <1> 		mov dx, [resolutionx2]
  6883 0000594C C1E204              <1> 		shl edx, 4
  6884 0000594F 29D7                <1> 		sub edi, edx
  6885 00005951 31D2                <1> 		xor edx, edx
  6886 00005953 668B16              <1> 		mov dx, [esi]
  6887 00005956 660316              <1> 		add dx, [esi]
  6888 00005959 668B4E02            <1> 		mov cx, [esi + 2]
  6889 0000595D 6681C11000          <1> 		add cx, 16
  6890 00005962 66A1[184F0000]      <1> 		mov ax, [background]
  6891                              <1> 	clearwindow:
  6892 00005968 668907              <1> 		mov [edi], ax
  6893 0000596B 81C702000000        <1> 		add edi, 2
  6894 00005971 81EA02000000        <1> 		sub edx, 2
  6895 00005977 81FA00000000        <1> 		cmp edx, 0
  6896 0000597D 75E9                <1> 		jne clearwindow
  6897 0000597F 6649                <1> 		dec cx
  6898 00005981 668B15[255F0000]    <1> 		mov dx, [resolutionx2]
  6899 00005988 662B16              <1> 		sub dx, [esi]
  6900 0000598B 662B16              <1> 		sub dx, [esi]
  6901 0000598E 01D7                <1> 		add edi, edx
  6902 00005990 668B16              <1> 		mov dx, [esi]
  6903 00005993 660316              <1> 		add dx, [esi]
  6904 00005996 6681F90000          <1> 		cmp cx, 0
  6905 0000599B 75CB                <1> 		jne clearwindow
  6906 0000599D C605[CA270000]00    <1> 		mov byte [termcopyon], 0
  6907 000059A4 8B3D[73510000]      <1> 		mov edi, [lastpos]
  6908 000059AA 8B35[9F570000]      <1> 		mov esi, [grphbuf + 2]
  6909 000059B0 668B15[A3570000]    <1> 		mov dx, [grphbuf + 6]
  6910 000059B7 668B0D[A5570000]    <1> 		mov cx, [grphbuf + 8]
  6911 000059BE 668B1D[9D570000]    <1> 		mov bx, [grphbuf]
  6912 000059C5 66A1[A7570000]      <1> 		mov ax, [grphbuf + 10]
  6913 000059CB 88DC                <1> 		mov ah, bl
  6914 000059CD 8B1D[A9570000]      <1> 		mov ebx, [grphbuf + 12]
  6915 000059D3 E900000000          <1> 		jmp showgraphicsreplace
  6916                              <1> 	showgraphicsreplace:
  6917 000059D8 897702              <1> 		mov [edi + 2], esi
  6918 000059DB 66895706            <1> 		mov [edi + 6], dx
  6919 000059DF 66894F08            <1> 		mov [edi + 8], cx
  6920 000059E3 895F0C              <1> 		mov [edi + 12], ebx
  6921 000059E6 30FF                <1> 		xor bh, bh
  6922 000059E8 88E3                <1> 		mov bl, ah
  6923 000059EA 30E4                <1> 		xor ah, ah
  6924 000059EC 6689470A            <1> 		mov [edi + 10], ax
  6925 000059F0 66891F              <1> 		mov [edi], bx
  6926 000059F3 8B5F0C              <1> 		mov ebx, [edi + 12]
  6927 000059F6 668B470A            <1> 		mov ax, [edi + 10]
  6928 000059FA C3                  <1> 		ret
  6929                              <1> 	showgraphicsnew:
  6930 000059FB BF[00100000]        <1> 		mov edi, graphicstable
  6931                              <1> 	shwgrph2:
  6932 00005A00 66813F0000          <1> 		cmp word [edi], 0
  6933 00005A05 74D1                <1> 		je showgraphicsreplace
  6934 00005A07 81C710000000        <1> 		add edi, 16
  6935 00005A0D 81FF[00120000]      <1> 		cmp edi, graphicstableend
  6936 00005A13 72EB                <1> 		jb shwgrph2
  6937                              <1> 	showgraphicsdone:
  6938 00005A15 C3                  <1> 		ret
  6939                              <1> 
  6940                              <1> 	showstring:
  6941 00005A16 A2[4F500000]        <1> 		mov [mouseselecton], al
  6942 00005A1B 8025[4F500000]01    <1> 		and byte [mouseselecton], 1
  6943 00005A22 B402                <1> 		mov ah, 2
  6944 00005A24 E884FDFFFF          <1> 		call graphicsadd
  6945                              <1> 	showstring2:
  6946 00005A29 30E4                <1> 		xor ah, ah
  6947 00005A2B 8A06                <1> 		mov al, [esi]
  6948 00005A2D 3C00                <1> 		cmp al, 0
  6949 00005A2F 742F                <1> 		je doneshowstring
  6950 00005A31 46                  <1> 		inc esi
  6951 00005A32 3CFF                <1> 		cmp al, 255
  6952 00005A34 74F3                <1> 		je showstring2
  6953 00005A36 8935[E4610000]      <1> 		mov [showstringesi], esi
  6954 00005A3C 668B1D[685A0000]    <1> 		mov bx, [colorfont2]
  6955 00005A43 E8ED040000          <1> 		call showfontvesa
  6956 00005A48 3C0D                <1> 		cmp al, 13
  6957 00005A4A 7409                <1> 		je noproceedshst
  6958 00005A4C 3C0A                <1> 		cmp al, 10
  6959 00005A4E 7405                <1> 		je noproceedshst
  6960 00005A50 6681C20800          <1> 		add dx, 8
  6961                              <1> 		noproceedshst
  6962 00005A55 8B35[E4610000]      <1> 		mov esi, [showstringesi]
  6963 00005A5B E9C9FFFFFF          <1> 		jmp showstring2
  6964                              <1> 	doneshowstring:
  6965 00005A60 C605[4F500000]00    <1> 		mov byte [mouseselecton], 0
  6966 00005A67 C3                  <1> 		ret
  6967                              <1> 
  6968 00005A68 FFFF                <1> colorfont2 dw 0xFFFF
  6969 00005A6A 00                  <1> colorcache db 0
  6970 00005A6B 0000                <1> winvcopystx dw 0
  6971 00005A6D 0000                <1> winvcopysty dw 0
  6972 00005A6F 0000                <1> winvcopydx dw 0
  6973 00005A71 0000                <1> winvcopycx dw 0
  6974 00005A73 FFFF0000            <1> windowcolor dw 0xFFFF,0x0
  6975 00005A77 00000000            <1> windowbufloc: dw 0,0
  6976 00005A7B 00000000            <1> windowinfobuf dd 0
  6977 00005A7F 0000                <1> termcol dw 0
  6978 00005A81 00000000            <1> wincopyendpos dd 0
  6979                              <1> 
  6980                              <1> 	showwindow:	;;windowstuff in si, position in (dx, cx), nothing in ax, code in bx
  6981 00005A85 C605[C9270000]01    <1> 		mov byte [termguion], 1
  6982 00005A8C 6681C11000          <1> 		add cx, 16
  6983 00005A91 668915[6B5A0000]    <1> 		mov [winvcopystx], dx
  6984 00005A98 66890D[6D5A0000]    <1> 		mov [winvcopysty], cx
  6985 00005A9F 8935[7B5A0000]      <1> 		mov [windowinfobuf], esi
  6986 00005AA5 668B16              <1> 		mov dx, [esi]
  6987 00005AA8 668B4E02            <1> 		mov cx, [esi + 2]
  6988 00005AAC 31C0                <1> 		xor eax, eax
  6989 00005AAE 31DB                <1> 		xor ebx, ebx
  6990 00005AB0 6689D0              <1> 		mov ax, dx
  6991 00005AB3 6689CB              <1> 		mov bx, cx
  6992 00005AB6 66C1E803            <1> 		shr ax, 3
  6993 00005ABA 66C1EB04            <1> 		shr bx, 4
  6994 00005ABE 66A3[7F5A0000]      <1> 		mov [termcol], ax
  6995 00005AC4 A2[BA270000]        <1> 		mov [charxy], al
  6996 00005AC9 881D[BB270000]      <1> 		mov [charxy + 1], bl
  6997 00005ACF BF[8F1D0000]        <1> 		mov edi, videobuf
  6998 00005AD4 81FB00000000        <1> 		cmp ebx, 0
  6999 00005ADA 0F8456030000        <1> 		je near donewincopynow	;AAAAAAAAA!!!!!
  7000                              <1> 	findendposwin:
  7001 00005AE0 01C7                <1> 		add edi, eax
  7002 00005AE2 01C7                <1> 		add edi, eax
  7003 00005AE4 4B                  <1> 		dec ebx
  7004 00005AE5 81FB00000000        <1> 		cmp ebx, 0
  7005 00005AEB 77F3                <1> 		ja findendposwin
  7006 00005AED 893D[815A0000]      <1> 		mov [wincopyendpos], edi
  7007 00005AF3 31FF                <1> 		xor edi, edi
  7008 00005AF5 6631C0              <1> 		xor ax, ax
  7009 00005AF8 6631DB              <1> 		xor bx, bx
  7010 00005AFB 6601D2              <1> 		add dx, dx
  7011 00005AFE 668915[6F5A0000]    <1> 		mov [winvcopydx], dx
  7012 00005B05 66890D[715A0000]    <1> 		mov [winvcopycx], cx
  7013 00005B0C 668B0D[6D5A0000]    <1> 		mov cx, [winvcopysty]
  7014 00005B13 6681E91000          <1> 		sub cx, 16
  7015 00005B18 668B15[6B5A0000]    <1> 		mov dx, [winvcopystx]
  7016 00005B1F C605[CA270000]00    <1> 		mov byte [termcopyon], 0
  7017 00005B26 B403                <1> 		mov ah, 3
  7018 00005B28 E880FCFFFF          <1> 		call graphicsadd
  7019                              <1> 	showwindow2:
  7020 00005B2D 6681C11000          <1> 		add cx, 16
  7021 00005B32 668915[6B5A0000]    <1> 		mov [winvcopystx], dx
  7022 00005B39 66890D[6D5A0000]    <1> 		mov [winvcopysty], cx
  7023 00005B40 668B16              <1> 		mov dx, [esi]
  7024 00005B43 668B4E02            <1> 		mov cx, [esi + 2]
  7025 00005B47 6601D2              <1> 		add dx, dx
  7026 00005B4A 668915[6F5A0000]    <1> 		mov [winvcopydx], dx
  7027 00005B51 66890D[715A0000]    <1> 		mov [winvcopycx], cx
  7028 00005B58 8B3D[775A0000]      <1> 		mov edi, [windowbufloc]
  7029 00005B5E 31D2                <1> 		xor edx, edx
  7030 00005B60 668B15[255F0000]    <1> 		mov dx, [resolutionx2]
  7031 00005B67 C1E204              <1> 		shl edx, 4
  7032 00005B6A 29D7                <1> 		sub edi, edx
  7033 00005B6C 803D[CA270000]00    <1> 		cmp byte [termcopyon], 0
  7034 00005B73 7538                <1> 		jne nocleartitlebarpos
  7035 00005B75 8B3D[CC860000]      <1> 		mov edi, [physbaseptr]
  7036 00005B7B 31D2                <1> 		xor edx, edx
  7037 00005B7D 668B15[6B5A0000]    <1> 		mov dx, [winvcopystx]
  7038 00005B84 01D7                <1> 		add edi, edx
  7039 00005B86 668B0D[6D5A0000]    <1> 		mov cx, [winvcopysty]
  7040 00005B8D 6681E91000          <1> 		sub cx, 16
  7041 00005B92 6681F90000          <1> 		cmp cx, 0
  7042 00005B97 7414                <1> 		je nocleartitlebarpos
  7043                              <1> 	cleartitlebarpos:
  7044 00005B99 31D2                <1> 		xor edx, edx
  7045 00005B9B 668B15[255F0000]    <1> 		mov dx, [resolutionx2]
  7046 00005BA2 01D7                <1> 		add edi, edx
  7047 00005BA4 6649                <1> 		dec cx
  7048 00005BA6 6681F90000          <1> 		cmp cx, 0
  7049 00005BAB 75EC                <1> 		jne cleartitlebarpos
  7050                              <1> 	nocleartitlebarpos:
  7051 00005BAD 66B91000            <1> 		mov cx, 16
  7052 00005BB1 668B15[6F5A0000]    <1> 		mov dx, [winvcopydx]
  7053 00005BB8 6681F90000          <1> 		cmp cx, 0
  7054 00005BBD 0F8448000000        <1> 		je near canceltitlebarput
  7055 00005BC3 6681FA0000          <1> 		cmp dx, 0
  7056 00005BC8 0F843D000000        <1> 		je near canceltitlebarput
  7057                              <1> 	titlebarput:
  7058 00005BCE 66A1[735A0000]      <1> 		mov ax, [windowcolor]
  7059 00005BD4 668907              <1> 		mov [edi], ax
  7060 00005BD7 6681EA0200          <1> 		sub dx, 2
  7061 00005BDC 81C702000000        <1> 		add edi, 2
  7062 00005BE2 6681FA0000          <1> 		cmp dx, 0
  7063 00005BE7 75E5                <1> 		jne titlebarput
  7064 00005BE9 31D2                <1> 		xor edx, edx
  7065 00005BEB 668B15[255F0000]    <1> 		mov dx, [resolutionx2]
  7066 00005BF2 6649                <1> 		dec cx
  7067 00005BF4 662B15[6F5A0000]    <1> 		sub dx, [winvcopydx]
  7068 00005BFB 01D7                <1> 		add edi, edx
  7069 00005BFD 668B15[6F5A0000]    <1> 		mov dx, [winvcopydx]
  7070 00005C04 6681F90000          <1> 		cmp cx, 0
  7071 00005C09 75C3                <1> 		jne titlebarput
  7072                              <1> 	canceltitlebarput:
  7073 00005C0B 893D[775A0000]      <1> 		mov [windowbufloc], edi
  7074 00005C11 803D[CA270000]02    <1> 		cmp byte [termcopyon], 2
  7075 00005C18 0F8461000000        <1> 		je near winvcpst
  7076 00005C1E 6631C0              <1> 		xor ax, ax
  7077 00005C21 81C604000000        <1> 		add esi, 4
  7078 00005C27 668B15[6B5A0000]    <1> 		mov dx, [winvcopystx]
  7079 00005C2E 668B0D[6D5A0000]    <1> 		mov cx, [winvcopysty]
  7080 00005C35 6681E91000          <1> 		sub cx, 16
  7081 00005C3A 6631DB              <1> 		xor bx, bx
  7082 00005C3D C605[4F500000]01    <1> 		mov byte [mouseselecton], 1
  7083 00005C44 E8E0FDFFFF          <1> 		call showstring2
  7084 00005C49 B058                <1> 		mov al, "X"
  7085 00005C4B 30E4                <1> 		xor ah, ah
  7086 00005C4D 668B1D[685A0000]    <1> 		mov bx, [colorfont2]
  7087 00005C54 668B15[6B5A0000]    <1> 		mov dx, [winvcopystx]
  7088 00005C5B 668B0D[6D5A0000]    <1> 		mov cx, [winvcopysty]
  7089 00005C62 6681E91000          <1> 		sub cx, 16
  7090 00005C67 6681EA1400          <1> 		sub dx, 20
  7091 00005C6C 660315[6F5A0000]    <1> 		add dx, [winvcopydx]
  7092 00005C73 C605[4F500000]01    <1> 		mov byte [mouseselecton], 1
  7093 00005C7A E8B6020000          <1> 		call showfontvesa
  7094                              <1> 	winvcpst:
  7095 00005C7F 8B3D[775A0000]      <1> 		mov edi, [windowbufloc]
  7096 00005C85 E97E000000          <1> 		jmp windowvideocopyset
  7097                              <1> 
  7098                              <1> 	windowvideocopy:
  7099 00005C8A 8B35[7B5A0000]      <1> 		mov esi, [windowinfobuf]
  7100 00005C90 668B16              <1> 		mov dx, [esi]
  7101 00005C93 668B4E02            <1> 		mov cx, [esi + 2]
  7102 00005C97 31C0                <1> 		xor eax, eax
  7103 00005C99 31DB                <1> 		xor ebx, ebx
  7104 00005C9B 6689D0              <1> 		mov ax, dx
  7105 00005C9E 6689CB              <1> 		mov bx, cx
  7106 00005CA1 66C1E803            <1> 		shr ax, 3
  7107 00005CA5 66C1EB04            <1> 		shr bx, 4
  7108 00005CA9 66A3[7F5A0000]      <1> 		mov [termcol], ax
  7109 00005CAF A2[BA270000]        <1> 		mov [charxy], al
  7110 00005CB4 881D[BB270000]      <1> 		mov [charxy + 1], bl
  7111 00005CBA 8B3D[775A0000]      <1> 		mov edi, [windowbufloc]
  7112 00005CC0 3B3D[CC860000]      <1> 		cmp edi, [physbaseptr]
  7113 00005CC6 0F833C000000        <1> 		jae near windowvideocopyset
  7114 00005CCC 31C9                <1> 		xor ecx, ecx
  7115 00005CCE 31D2                <1> 		xor edx, edx
  7116 00005CD0 668B15[6B5A0000]    <1> 		mov dx, [winvcopystx]
  7117 00005CD7 668B0D[6D5A0000]    <1> 		mov cx, [winvcopysty]
  7118 00005CDE 8B3D[CC860000]      <1> 		mov edi, [physbaseptr]
  7119 00005CE4 01D7                <1> 		add edi, edx
  7120 00005CE6 81F900000000        <1> 		cmp ecx, 0
  7121 00005CEC 741A                <1> 		je windowvideocopyset
  7122                              <1> 	yrescopylp:
  7123 00005CEE 31D2                <1> 		xor edx, edx
  7124 00005CF0 668B15[255F0000]    <1> 		mov dx, [resolutionx2]
  7125 00005CF7 01D7                <1> 		add edi, edx
  7126 00005CF9 6649                <1> 		dec cx
  7127 00005CFB 6681F90000          <1> 		cmp cx, 0
  7128 00005D00 75EC                <1> 		jne yrescopylp
  7129 00005D02 893D[775A0000]      <1> 		mov [windowbufloc], edi
  7130                              <1> 	windowvideocopyset:
  7131 00005D08 6631C9              <1> 		xor cx, cx
  7132 00005D0B 66890D[4D5E0000]    <1> 		mov [charposline], cx
  7133 00005D12 BE[8F1D0000]        <1> 		mov esi, videobuf
  7134 00005D17 8935[4F5E0000]      <1> 		mov [charposvbuf], esi
  7135 00005D1D 8A5E01              <1> 		mov bl, [esi + 1]
  7136 00005D20 881D[6A5A0000]      <1> 		mov [colorcache], bl
  7137 00005D26 8A1E                <1> 		mov bl, [esi]
  7138 00005D28 30FF                <1> 		xor bh, bh
  7139 00005D2A 66C1E304            <1> 		shl bx, 4
  7140 00005D2E 678AB7[9474]        <1> 		mov dh, [fonts + bx]
  7141 00005D33 D0CE                <1> 		ror dh, 1
  7142 00005D35 89FE                <1> 		mov esi, edi
  7143                              <1> 	copywindow:
  7144 00005D37 B201                <1> 		mov dl, 1
  7145 00005D39 D0C6                <1> 		rol dh, 1
  7146 00005D3B 20F2                <1> 		and dl, dh
  7147 00005D3D 803D[6A5A0000]10    <1> 		cmp byte [colorcache], 0x10
  7148 00005D44 731C                <1> 		jae switchwincolors
  7149 00005D46 66A1[755A0000]      <1> 		mov ax, [windowcolor + 2]
  7150 00005D4C 668907              <1> 		mov [edi], ax
  7151 00005D4F 80FA00              <1> 		cmp dl, 0
  7152 00005D52 7425                <1> 		je nowritewin
  7153 00005D54 66A1[735A0000]      <1> 		mov ax, [windowcolor]
  7154 00005D5A 668907              <1> 		mov [edi], ax
  7155 00005D5D E917000000          <1> 		jmp nowritewin
  7156                              <1> 	switchwincolors:
  7157 00005D62 66A1[735A0000]      <1> 		mov ax, [windowcolor]
  7158 00005D68 668907              <1> 		mov [edi], ax
  7159 00005D6B 80FA00              <1> 		cmp dl, 0
  7160 00005D6E 7409                <1> 		je nowritewin
  7161 00005D70 66A1[755A0000]      <1> 		mov ax, [windowcolor + 2]
  7162 00005D76 668907              <1> 		mov [edi], ax
  7163                              <1> 	nowritewin:
  7164 00005D79 81C702000000        <1> 		add edi, 2
  7165 00005D7F FEC1                <1> 		inc cl
  7166 00005D81 80F908              <1> 		cmp cl, 8
  7167 00005D84 75B1                <1> 		jne copywindow
  7168 00005D86 6643                <1> 		inc bx
  7169 00005D88 30C9                <1> 		xor cl, cl
  7170 00005D8A 31D2                <1> 		xor edx, edx
  7171 00005D8C 668B15[255F0000]    <1> 		mov dx, [resolutionx2]
  7172 00005D93 01D6                <1> 		add esi, edx
  7173 00005D95 89F7                <1> 		mov edi, esi
  7174 00005D97 678AB7[9474]        <1> 		mov dh, [fonts + bx]
  7175 00005D9C D0CE                <1> 		ror dh, 1
  7176 00005D9E FEC5                <1> 		inc ch
  7177 00005DA0 80FD10              <1> 		cmp ch, 16
  7178 00005DA3 7592                <1> 		jne copywindow
  7179 00005DA5 6631C9              <1> 		xor cx, cx
  7180 00005DA8 8B3D[4F5E0000]      <1> 		mov edi, [charposvbuf]
  7181 00005DAE 81C702000000        <1> 		add edi, 2
  7182 00005DB4 3B3D[815A0000]      <1> 		cmp edi, [wincopyendpos]
  7183 00005DBA 737A                <1> 		jae donewincopynow
  7184 00005DBC 8A5F01              <1> 		mov bl, [edi + 1]
  7185 00005DBF 881D[6A5A0000]      <1> 		mov [colorcache], bl
  7186 00005DC5 8A1F                <1> 		mov bl, [edi]
  7187 00005DC7 30FF                <1> 		xor bh, bh
  7188 00005DC9 66C1E304            <1> 		shl bx, 4
  7189 00005DCD 893D[4F5E0000]      <1> 		mov [charposvbuf], edi
  7190 00005DD3 31D2                <1> 		xor edx, edx
  7191 00005DD5 668B15[255F0000]    <1> 		mov dx, [resolutionx2]
  7192 00005DDC C1E204              <1> 		shl edx, 4
  7193 00005DDF 29D6                <1> 		sub esi, edx
  7194 00005DE1 81C610000000        <1> 		add esi, 16
  7195 00005DE7 89F7                <1> 		mov edi, esi
  7196 00005DE9 668B0D[4D5E0000]    <1> 		mov cx, [charposline]
  7197 00005DF0 6641                <1> 		inc cx
  7198 00005DF2 663B0D[7F5A0000]    <1> 		cmp cx, [termcol]
  7199 00005DF9 0F8316000000        <1> 		jae near fixwindowcopy
  7200 00005DFF 66890D[4D5E0000]    <1> 		mov [charposline], cx
  7201 00005E06 6631C9              <1> 		xor cx, cx
  7202 00005E09 678AB7[9474]        <1> 		mov dh, [fonts + bx]
  7203 00005E0E D0CE                <1> 		ror dh, 1
  7204 00005E10 E922FFFFFF          <1> 		jmp copywindow
  7205                              <1> fixwindowcopy:
  7206 00005E15 6631C9              <1> 		xor cx, cx
  7207 00005E18 66890D[4D5E0000]    <1> 		mov [charposline], cx
  7208 00005E1F 662B15[6F5A0000]    <1> 		sub dx, [winvcopydx]
  7209 00005E26 01D6                <1> 		add esi, edx
  7210 00005E28 89F7                <1> 		mov edi, esi
  7211 00005E2A 678AB7[9474]        <1> 		mov dh, [fonts + bx]
  7212 00005E2F D0CE                <1> 		ror dh, 1
  7213 00005E31 E901FFFFFF          <1> 		jmp copywindow
  7214                              <1> donewincopynow:
  7215 00005E36 E8EBCFFFFF          <1> 		call switchtermcursor
  7216 00005E3B 803D[CA270000]01    <1> 		cmp byte [termcopyon], 1
  7217 00005E42 7501                <1> 		jne forgetresetstuff
  7218 00005E44 61                  <1> 		popa
  7219                              <1> forgetresetstuff:
  7220 00005E45 C605[CA270000]00    <1> 		mov byte [termcopyon], 0
  7221 00005E4C C3                  <1> 		ret
  7222                              <1> 
  7223 00005E4D 0000                <1> charposline dw 0
  7224 00005E4F 00000000            <1> charposvbuf dw 0,0
  7225 00005E53 0000                <1> iconcolor dw 0
  7226                              <1> 	showicon:	;;icon in si, position in (dx,cx), selected in ax, code in bx
  7227 00005E55 A2[3B620000]        <1> 		mov [iconselected], al
  7228 00005E5A 8025[3B620000]01    <1> 		and byte [iconselected], 1
  7229 00005E61 B401                <1> 		mov ah, 1
  7230 00005E63 E845F9FFFF          <1> 		call graphicsadd
  7231                              <1> 	showicon2:
  7232 00005E68 8B3D[CC860000]      <1> 		mov edi, [physbaseptr]
  7233 00005E6E 6601D2              <1> 		add dx, dx
  7234 00005E71 663B15[255F0000]    <1> 		cmp dx, [resolutionx2]
  7235 00005E78 720C                <1> 		jb screenxgood
  7236 00005E7A 668B15[255F0000]    <1> 		mov dx, [resolutionx2]
  7237 00005E81 6681EA4000          <1> 		sub dx, 64
  7238                              <1> 	screenxgood:
  7239 00005E86 6681F90000          <1> 		cmp cx, 0
  7240 00005E8B 7422                <1> 		je noscreenygoodchk
  7241 00005E8D 663B0D[215F0000]    <1> 		cmp cx, [resolutiony]
  7242 00005E94 720C                <1> 		jb screenygood
  7243 00005E96 668B0D[215F0000]    <1> 		mov cx, [resolutiony]
  7244 00005E9D 6681E92000          <1> 		sub cx, 32
  7245                              <1> 	screenygood:
  7246 00005EA2 31DB                <1> 		xor ebx, ebx
  7247 00005EA4 668B1D[255F0000]    <1> 		mov bx, [resolutionx2]
  7248 00005EAB 01DF                <1> 		add edi, ebx
  7249 00005EAD E2F3                <1> 		loop screenygood
  7250                              <1> 	noscreenygoodchk:
  7251 00005EAF 31DB                <1> 		xor ebx, ebx
  7252 00005EB1 6689D3              <1> 		mov bx, dx
  7253 00005EB4 01DF                <1> 		add edi, ebx
  7254 00005EB6 6631C9              <1> 		xor cx, cx
  7255 00005EB9 668B06              <1> 		mov ax, [esi]
  7256 00005EBC 81C602000000        <1> 		add esi, 2
  7257 00005EC2 66A3[535E0000]      <1> 		mov [iconcolor], ax
  7258                              <1> 	writeicon:
  7259 00005EC8 8B06                <1> 		mov eax, [esi]
  7260 00005ECA D1C0                <1> 		rol eax, 1
  7261 00005ECC 30C9                <1> 		xor cl, cl
  7262                              <1> 	writeiconline:
  7263 00005ECE B201                <1> 		mov dl, 1
  7264 00005ED0 20C2                <1> 		and dl, al
  7265 00005ED2 3215[3B620000]      <1> 		xor dl, [iconselected]
  7266 00005ED8 668B1D[184F0000]    <1> 		mov bx, [background]
  7267 00005EDF 66891F              <1> 		mov [edi], bx
  7268 00005EE2 80FA00              <1> 		cmp dl, 0
  7269 00005EE5 740A                <1> 		je noiconline
  7270 00005EE7 668B15[535E0000]    <1> 		mov dx, [iconcolor]
  7271 00005EEE 668917              <1> 		mov [edi], dx
  7272                              <1> 	noiconline:
  7273 00005EF1 81C702000000        <1> 		add edi, 2
  7274 00005EF7 D1C0                <1> 		rol eax, 1
  7275 00005EF9 FEC1                <1> 		inc cl
  7276 00005EFB 80F920              <1> 		cmp cl, 32
  7277 00005EFE 72CE                <1> 		jb writeiconline
  7278 00005F00 81C604000000        <1> 		add esi, 4
  7279 00005F06 FEC5                <1> 		inc ch
  7280 00005F08 31D2                <1> 		xor edx, edx
  7281 00005F0A 668B15[255F0000]    <1> 		mov dx, [resolutionx2]
  7282 00005F11 01D7                <1> 		add edi, edx
  7283 00005F13 81EF40000000        <1> 		sub edi, 64
  7284 00005F19 80FD20              <1> 		cmp ch, 32
  7285 00005F1C 72AA                <1> 		jb writeicon
  7286 00005F1E 31C0                <1> 		xor eax, eax
  7287 00005F20 C3                  <1> 		ret
  7288                              <1> 
  7289 00005F21 0000                <1> resolutiony dw 0
  7290 00005F23 0000                <1> resolutionx dw 0
  7291 00005F25 0000                <1> resolutionx2 dw 0
  7292 00005F27 02                  <1> resolutionbytes db 2
  7293 00005F28 0000                <1> posxvesa dw 0
  7294 00005F2A 0000                <1> posyvesa dw 0
  7295 00005F2C FFFF                <1> colorfont dw 0xFFFF
  7296                              <1> savefontvesa:		;;same rules as showfontvesa
  7297 00005F2E C605[4E500000]01    <1> 	mov byte [savefonton], 1
  7298                              <1> showfontvesa:		;;position in (dx,cx), color in bx, char in al
  7299 00005F35 3CFF                <1> 	cmp al, 255
  7300 00005F37 7501                <1> 	jne nostopshowfont
  7301 00005F39 C3                  <1> 	ret
  7302                              <1> nostopshowfont:
  7303 00005F3A 66890D[2A5F0000]    <1> 	mov [posyvesa], cx
  7304 00005F41 3C0A                <1> 	cmp al, 10
  7305 00005F43 0F8431000000        <1> 	je near goodvesafontx
  7306 00005F49 3C0D                <1> 	cmp al, 13
  7307 00005F4B 0F8429000000        <1> 	je near goodvesafontx
  7308 00005F51 31C9                <1> 	xor ecx, ecx
  7309 00005F53 668B0D[255F0000]    <1> 	mov cx, [resolutionx2]
  7310 00005F5A 6681E91000          <1> 	sub cx, 16
  7311 00005F5F 6639CA              <1> 	cmp dx, cx
  7312 00005F62 7616                <1> 	jbe goodvesafontx
  7313 00005F64 6631D2              <1> 	xor dx, dx
  7314 00005F67 668B0D[2A5F0000]    <1> 	mov cx, [posyvesa]
  7315 00005F6E 6681C11000          <1> 	add cx, 16
  7316 00005F73 66890D[2A5F0000]    <1> 	mov [posyvesa], cx
  7317                              <1> goodvesafontx:
  7318 00005F7A 668B0D[2A5F0000]    <1> 	mov cx, [posyvesa]
  7319 00005F81 668915[285F0000]    <1> 	mov [posxvesa], dx
  7320 00005F88 8B3D[CC860000]      <1> 	mov edi, [physbaseptr]
  7321 00005F8E 66891D[2C5F0000]    <1> 	mov [colorfont], bx
  7322 00005F95 31DB                <1> 	xor ebx, ebx
  7323 00005F97 88C3                <1> 	mov bl, al
  7324 00005F99 31C0                <1> 	xor eax, eax
  7325 00005F9B 88D8                <1> 	mov al, bl
  7326 00005F9D 6689D3              <1> 	mov bx, dx
  7327 00005FA0 89DA                <1> 	mov edx, ebx
  7328 00005FA2 31DB                <1> 	xor ebx, ebx
  7329 00005FA4 6681F90000          <1> 	cmp cx, 0
  7330 00005FA9 7415                <1> 	je vesaposloopdn
  7331 00005FAB 668B1D[255F0000]    <1> 	mov bx, [resolutionx2]
  7332                              <1> vesaposloop:
  7333 00005FB2 01DA                <1> 	add edx, ebx
  7334 00005FB4 6681E90100          <1> 	sub cx, 1
  7335 00005FB9 6681F90000          <1> 	cmp cx, 0
  7336 00005FBE 75F2                <1> 	jne vesaposloop
  7337                              <1> vesaposloopdn:
  7338 00005FC0 01D7                <1> 	add edi, edx
  7339 00005FC2 BE[94740000]        <1> 	mov esi, fonts
  7340                              <1> findfontvesa:
  7341 00005FC7 30E4                <1> 	xor ah, ah
  7342 00005FC9 3C0A                <1> 	cmp al, 10
  7343 00005FCB 0F8406010000        <1> 	je near nwlinevesa
  7344 00005FD1 3C0D                <1> 	cmp al, 13
  7345 00005FD3 0F8416010000        <1> 	je near cretvesa
  7346 00005FD9 C1E004              <1> 	shl eax, 4
  7347 00005FDC 01C6                <1> 	add esi, eax
  7348 00005FDE C1E804              <1> 	shr eax, 4
  7349 00005FE1 81FE[94840000]      <1> 	cmp esi, fontend
  7350 00005FE7 0F83B9000000        <1> 	jae near donefontvesa
  7351 00005FED 4E                  <1> 	dec esi
  7352                              <1> foundfontvesa:
  7353 00005FEE 46                  <1> 	inc esi
  7354 00005FEF 803D[4E500000]01    <1> 	cmp byte [savefonton], 1
  7355 00005FF6 0F8409010000        <1> 	je near vesafontsaver
  7356 00005FFC 30C9                <1> 	xor cl, cl
  7357 00005FFE 8A06                <1> 	mov al, [esi]
  7358 00006000 668B15[255F0000]    <1> 	mov dx, [resolutionx2]
  7359 00006007 662B15[285F0000]    <1> 	sub dx, [posxvesa]
  7360 0000600E 6681FA1000          <1> 	cmp dx, 16
  7361 00006013 7708                <1> 	ja paintfontvesa
  7362 00006015 D0EA                <1> 	shr dl, 1
  7363 00006017 8815[D6600000]      <1> 	mov [charwidth], dl
  7364                              <1> paintfontvesa:
  7365 0000601D B201                <1> 	mov dl, 1
  7366 0000601F 20C2                <1> 	and dl, al
  7367 00006021 803D[4D500000]01    <1> 	cmp byte [showcursorfonton], 1
  7368 00006028 0F8435000000        <1> 	je near nodelpaintedfont
  7369 0000602E 803D[4D500000]02    <1> 	cmp byte [showcursorfonton], 2
  7370 00006035 0F8518000000        <1> 	jne near noswitchcursorfonton
  7371 0000603B 80FA00              <1> 	cmp dl, 0
  7372 0000603E 0F842E000000        <1> 	je near nopixelset
  7373 00006044 668B1D[2C5F0000]    <1> 	mov bx, [colorfont]
  7374 0000604B 66891F              <1> 	mov [edi], bx
  7375 0000604E E91F000000          <1> 	jmp nopixelset
  7376                              <1> noswitchcursorfonton:
  7377 00006053 3215[4F500000]      <1> 	xor dl, [mouseselecton]
  7378 00006059 668B1D[184F0000]    <1> 	mov bx, [background]
  7379 00006060 66891F              <1> 	mov [edi], bx
  7380                              <1> nodelpaintedfont:
  7381 00006063 80FA00              <1> 	cmp dl, 0
  7382 00006066 740A                <1> 	je nopixelset
  7383 00006068 668B15[2C5F0000]    <1> 	mov dx, [colorfont]
  7384 0000606F 668917              <1> 	mov [edi], dx
  7385                              <1> nopixelset:
  7386 00006072 81C702000000        <1> 	add edi, 2
  7387 00006078 D0C0                <1> 	rol al, 1
  7388 0000607A FEC1                <1> 	inc cl
  7389 0000607C 3A0D[D6600000]      <1> 	cmp cl, [charwidth]
  7390 00006082 7299                <1> 	jb paintfontvesa
  7391 00006084 FEC5                <1> 	inc ch
  7392 00006086 31D2                <1> 	xor edx, edx
  7393 00006088 668B15[255F0000]    <1> 	mov dx, [resolutionx2]
  7394 0000608F 01D7                <1> 	add edi, edx
  7395 00006091 31D2                <1> 	xor edx, edx
  7396 00006093 8A15[D6600000]      <1> 	mov dl, [charwidth]
  7397 00006099 00D2                <1> 	add dl, dl
  7398 0000609B 29D7                <1> 	sub edi, edx
  7399 0000609D 80FD10              <1> 	cmp ch, 16
  7400 000060A0 0F8248FFFFFF        <1> 	jb foundfontvesa
  7401                              <1> donefontvesa:
  7402 000060A6 B208                <1> 	mov dl, 8
  7403 000060A8 8815[D6600000]      <1> 	mov [charwidth], dl
  7404 000060AE 668B15[285F0000]    <1> 	mov dx, [posxvesa]
  7405 000060B5 8A1D[D6600000]      <1> 	mov bl, [charwidth]
  7406 000060BB 30FF                <1> 	xor bh, bh
  7407 000060BD 6601DA              <1> 	add dx, bx
  7408 000060C0 668B1D[2C5F0000]    <1> 	mov bx, [colorfont]
  7409 000060C7 668B0D[2A5F0000]    <1> 	mov cx, [posyvesa]
  7410 000060CE C605[4E500000]00    <1> 	mov byte [savefonton], 0
  7411 000060D5 C3                  <1> 	ret
  7412 000060D6 08                  <1> charwidth db 8
  7413                              <1> nwlinevesa:
  7414 000060D7 668B0D[2A5F0000]    <1> 	mov cx, [posyvesa]
  7415 000060DE 6681C11000          <1> 	add cx, 16
  7416 000060E3 66890D[2A5F0000]    <1> 	mov [posyvesa], cx
  7417 000060EA E9B7FFFFFF          <1> 	jmp donefontvesa
  7418                              <1> cretvesa:
  7419 000060EF 668B15[285F0000]    <1> 	mov dx, [posxvesa]
  7420 000060F6 6631D2              <1> 	xor dx, dx
  7421 000060F9 668915[285F0000]    <1> 	mov [posxvesa], dx
  7422 00006100 E9A1FFFFFF          <1> 	jmp donefontvesa
  7423                              <1> vesafontsaver:
  7424 00006105 30C0                <1> 	xor al, al
  7425 00006107 30C9                <1> 	xor cl, cl
  7426                              <1> vesafontsaver2:
  7427 00006109 668B17              <1> 	mov dx, [edi]
  7428 0000610C 663B15[2C5F0000]    <1> 	cmp dx, [colorfont]
  7429 00006113 742F                <1> 	je colorfontmatch
  7430                              <1> donecolormatch:
  7431 00006115 81C702000000        <1> 	add edi, 2
  7432 0000611B D0C0                <1> 	rol al, 1
  7433 0000611D FEC1                <1> 	inc cl
  7434 0000611F 80F908              <1> 	cmp cl, 8
  7435 00006122 72E5                <1> 	jb vesafontsaver2
  7436 00006124 8806                <1> 	mov [esi], al
  7437 00006126 46                  <1> 	inc esi
  7438 00006127 FEC5                <1> 	inc ch
  7439 00006129 31D2                <1> 	xor edx, edx
  7440 0000612B 668B15[255F0000]    <1> 	mov dx, [resolutionx2]
  7441 00006132 01D7                <1> 	add edi, edx
  7442 00006134 81EF10000000        <1> 	sub edi, 16
  7443 0000613A 80FD10              <1> 	cmp ch, 16
  7444 0000613D 72C6                <1> 	jb vesafontsaver
  7445 0000613F E962FFFFFF          <1> 	jmp donefontvesa
  7446                              <1> colorfontmatch:
  7447 00006144 0401                <1> 	add al, 1
  7448 00006146 E9CAFFFFFF          <1> 	jmp donecolormatch
  7449                              <1> 	
  7450                              <1> showbmp:
  7451 0000614B 668B06              <1> 	mov ax, [esi]
  7452 0000614E 663D424D            <1> 	cmp ax, "BM"
  7453 00006152 0F8582000000        <1> 	jne near endedbmp
  7454 00006158 8B3D[CC860000]      <1> 	mov edi, [physbaseptr]
  7455 0000615E 6689D0              <1> 	mov ax, dx
  7456 00006161 6689CB              <1> 	mov bx, cx
  7457 00006164 31C9                <1> 	xor ecx, ecx
  7458 00006166 31D2                <1> 	xor edx, edx
  7459 00006168 6689D9              <1> 	mov cx, bx
  7460 0000616B 6689C2              <1> 	mov dx, ax
  7461 0000616E 01D7                <1> 	add edi, edx
  7462 00006170 01D7                <1> 	add edi, edx
  7463 00006172 31D2                <1> 	xor edx, edx
  7464 00006174 668B15[255F0000]    <1> 	mov dx, [resolutionx2]
  7465 0000617B 41                  <1> 	inc ecx
  7466 0000617C 034E16              <1> 	add ecx, [esi + 22]
  7467                              <1> bmplocloop:
  7468 0000617F 01D7                <1> 	add edi, edx
  7469 00006181 E2FC                <1> 	loop bmplocloop
  7470 00006183 29D7                <1> 	sub edi, edx
  7471 00006185 8B5612              <1> 	mov edx, [esi + 18]
  7472 00006188 8B4E16              <1> 	mov ecx, [esi + 22]
  7473 0000618B 8B460A              <1> 	mov eax, [esi + 10]
  7474 0000618E 8B5E02              <1> 	mov ebx, [esi + 2]
  7475 00006191 01F3                <1> 	add ebx, esi
  7476 00006193 891D[E0610000]      <1> 	mov [bmpend], ebx
  7477 00006199 89D3                <1> 	mov ebx, edx
  7478 0000619B 01C6                <1> 	add esi, eax
  7479                              <1> ldxbmp:
  7480 0000619D 668B06              <1> 	mov ax, [esi]
  7481 000061A0 668907              <1> 	mov [edi], ax
  7482 000061A3 81C702000000        <1> 	add edi, 2
  7483 000061A9 81C602000000        <1> 	add esi, 2
  7484 000061AF 3B35[E0610000]      <1> 	cmp esi, [bmpend]
  7485 000061B5 7723                <1> 	ja endedbmp
  7486 000061B7 4A                  <1> 	dec edx
  7487 000061B8 81FA00000000        <1> 	cmp edx, 0
  7488 000061BE 77DD                <1> 	ja ldxbmp
  7489 000061C0 31D2                <1> 	xor edx, edx
  7490 000061C2 668B15[255F0000]    <1> 	mov dx, [resolutionx2]
  7491 000061C9 29DF                <1> 	sub edi, ebx
  7492 000061CB 29DF                <1> 	sub edi, ebx
  7493 000061CD 29D7                <1> 	sub edi, edx
  7494 000061CF 49                  <1> 	dec ecx
  7495 000061D0 89DA                <1> 	mov edx, ebx
  7496 000061D2 81F900000000        <1> 	cmp ecx, 0
  7497 000061D8 77C3                <1> 	ja ldxbmp
  7498                              <1> endedbmp:
  7499 000061DA E82CEFFFFF          <1> 	call switchmousepos2
  7500 000061DF C3                  <1> 	ret
  7501                              <1> 	
  7502 000061E0 00000000            <1> 	bmpend dd 0
  7503                              <1> 
  7504                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Here are some vars;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  7505 000061E4 00000000            <1> 	showstringesi dw 0,0
  7506 000061E8 00                  <1> 	mouseon db 0
  7507 000061E9 737461727400        <1> 	start	db "start",0
  7508 000061EF 536F6C6C65724F5300  <1> 	gotomenu db "SollerOS",0
  7509 000061F8 426F6F2100          <1> 	boomsg db "Boo!",0
  7510 000061FD 5061636D616E207761- <1> 	pacmsg	db "Pacman was easy to draw.",0
  7511 00006206 73206561737920746F- <1>
  7512 0000620F 20647261772E00      <1>
  7513 00006216 4F6D206E6F6D206E6F- <1> 	pacnom  db "Om nom nom nom",0
  7514 0000621F 6D206E6F6D00        <1>
  7515 00006225 77696E646F77732073- <1> 	winmsg	db "windows sucks",0
  7516 0000622E 75636B7300          <1>
  7517 00006233 5800                <1> 	xmsg db "X",0
  7518 00006235 0000                <1> 	icon dw 0	;pointer to icon
  7519 00006237 00000000            <1> 	codepointer dw 0,0 ;pointer to code
  7520 0000623B 00                  <1> 	iconselected db 0
  7521                              <1> 	
  7522                              <1> 	boo:
  7523 0000623C BE[F8610000]        <1> 		mov esi, boomsg
  7524 00006241 66BA6400            <1> 		mov dx, 100
  7525 00006245 66B94001            <1> 		mov cx, 320
  7526 00006249 31DB                <1> 		xor ebx, ebx
  7527 0000624B 6631C0              <1> 		xor ax, ax
  7528 0000624E E9C3F7FFFF          <1> 		jmp showstring
  7529                              <1> 
  7530                              <1> 	pacmannomnom:
  7531 00006253 BE[16620000]        <1> 		mov esi, pacnom
  7532 00006258 66BA8200            <1> 		mov dx, 130
  7533 0000625C 66B93C00            <1> 		mov cx, 60
  7534 00006260 31DB                <1> 		xor ebx, ebx
  7535 00006262 6631C0              <1> 		xor ax, ax
  7536 00006265 E9ACF7FFFF          <1> 		jmp showstring	
  7537                              <1> 	
  7538                              <1> 	noie:
  7539 0000626A 31D2                <1> 		xor edx, edx
  7540 0000626C 31C9                <1> 		xor ecx, ecx
  7541 0000626E 668B15[235F0000]    <1> 		mov dx, [resolutionx]
  7542 00006275 668B0D[215F0000]    <1> 		mov cx, [resolutiony]
  7543 0000627C 66C1EA03            <1> 		shr dx, 3
  7544 00006280 66C1E904            <1> 		shr cx, 4
  7545 00006284 6681EA0400          <1> 		sub dx, 4
  7546 00006289 6681E90400          <1> 		sub cx, 4
  7547 0000628E 66C1E203            <1> 		shl dx, 3
  7548 00006292 66C1E104            <1> 		shl cx, 4
  7549 00006296 668915[5A630000]    <1> 		mov [termwindow], dx
  7550 0000629D 66890D[5C630000]    <1> 		mov [termwindow + 2], cx	;the previous lines of code make a large terminal window that is 4 characters smaller than the screen
  7551 000062A4 BE[5A630000]        <1> 		mov esi, termwindow
  7552 000062A9 66BA1000            <1> 		mov dx, 16
  7553 000062AD 66B91000            <1> 		mov cx, 16
  7554 000062B1 BB[242F0000]        <1> 		mov ebx, os
  7555 000062B6 891D[2D040000]      <1> 		mov [user2codepoint], ebx
  7556 000062BC 6631C0              <1> 		xor ax, ax
  7557 000062BF E8C1F7FFFF          <1> 		call showwindow
  7558 000062C4 E95BCCFFFF          <1> 		jmp os
  7559                              <1> 
  7560                              <1> 	gotomenuboot:
  7561 000062C9 31D2                <1> 		xor edx, edx
  7562 000062CB 31C9                <1> 		xor ecx, ecx
  7563 000062CD 668B15[235F0000]    <1> 		mov dx, [resolutionx]
  7564 000062D4 668B0D[215F0000]    <1> 		mov cx, [resolutiony]
  7565 000062DB 66C1E904            <1> 		shr cx, 4
  7566 000062DF 6681E90100          <1> 		sub cx, 1
  7567 000062E4 66C1E104            <1> 		shl cx, 4
  7568 000062E8 668915[5A630000]    <1> 		mov [termwindow], dx
  7569 000062EF 66890D[5C630000]    <1> 		mov [termwindow + 2], cx	;the previous lines of code make a large terminal window that is fullscreen
  7570 000062F6 BE[5A630000]        <1> 		mov esi, termwindow
  7571 000062FB 6631D2              <1> 		xor dx, dx
  7572 000062FE 6631C9              <1> 		xor cx, cx
  7573 00006301 BB[242F0000]        <1> 		mov ebx, os
  7574 00006306 891D[2D040000]      <1> 		mov [user2codepoint], ebx
  7575 0000630C 6631C0              <1> 		xor ax, ax
  7576 0000630F E871F7FFFF          <1> 		call showwindow
  7577 00006314 E90BCCFFFF          <1> 		jmp os
  7578                              <1> 		;ret
  7579                              <1> 
  7580                              <1> 	winblows:
  7581 00006319 BE[25620000]        <1> 		mov esi, winmsg
  7582 0000631E 6631D2              <1> 		xor dx, dx
  7583 00006321 668B0D[215F0000]    <1> 		mov cx, [resolutiony]
  7584 00006328 6681E92000          <1> 		sub cx, 32
  7585 0000632D 31DB                <1> 		xor ebx, ebx
  7586 0000632F 30E4                <1> 		xor ah, ah
  7587 00006331 B011                <1> 		mov al, 00010001b
  7588 00006333 E8DEF6FFFF          <1> 		call showstring
  7589 00006338 BE[EF610000]        <1> 		mov esi, gotomenu
  7590 0000633D 668B0D[215F0000]    <1> 		mov cx, [resolutiony]
  7591 00006344 6681E93000          <1> 		sub cx, 48
  7592 00006349 6631D2              <1> 		xor dx, dx
  7593 0000634C 30E4                <1> 		xor ah, ah
  7594 0000634E B010                <1> 		mov al, 00010000b
  7595 00006350 BB[C9620000]        <1> 		mov ebx, gotomenuboot
  7596 00006355 E9BCF6FFFF          <1> 		jmp showstring
  7597                              <1> 
  7598 0000635A 20035802            <1> 	termwindow:	dw 800,600	;;window size
  7599 0000635E 53757065725465726D- <1> 	termmsg:	db "SuperTerminal",0	;;window title
  7600 00006367 696E616C00          <1>
  7601                              <1> 	
  7602 0000636C <incbin>            <1> interneticon: 	incbin 'source/precompiled/interneticon.pak'
  7603 000063EE <incbin>            <1> wordicon: 	incbin 'source/precompiled/wordicon.pak'
  7604 00006470 <incbin>            <1> pacmanpellet: incbin 'source/precompiled/pacmanpellet.pak'
  7605 000064F2 <incbin>            <1> ghostie	incbin 'source/precompiled/ghostie.pak'
  7606 00006574 <incbin>            <1> pacman	incbin 'source/precompiled/pacman.pak'
  7607                                      ;%include 'source/network.asm'
  7608                                  	%include 'source/rtl8139.asm'
  7609                              <1> ;;rtl8139.asm
  7610                              <1> initcard:	;;should find card, get mac, and initialize card
  7611 000065F6 31C0                <1> 	xor eax, eax
  7612 000065F8 A2[2A690000]        <1> 	mov [pcifunction], al
  7613 000065FD A2[28690000]        <1> 	mov [pcibus], al
  7614 00006602 A2[29690000]        <1> 	mov [pcidevice], al
  7615 00006607 B002                <1> 	mov al, 0x02 ;;type code
  7616 00006609 A2[AB690000]        <1> 	mov [pcitype], al
  7617 0000660E E81A030000          <1> 	call getpciport
  7618                              <1> initnic:		;;;;Here i tried the rtl8139 interface, fuck it
  7619 00006613 8915[FF670000]      <1> 	mov [basenicaddr], edx
  7620 00006619 89D1                <1> 	mov ecx, edx
  7621 0000661B C605[A9350000]03    <1> 	mov byte [firsthexshown], 3
  7622 00006622 E897CFFFFF          <1> 	call showhex	;;for debugging, please remove
  7623 00006627 BE[5F720000]        <1> 	mov esi, rbuffstart
  7624 0000662C B900200000          <1> 	mov ecx, 8192
  7625 00006631 31C0                <1> 	xor eax, eax
  7626                              <1> clearrbuff:		;;clear receive buffer which starts at rbuffstart
  7627 00006633 8806                <1> 	mov [esi], al
  7628 00006635 46                  <1> 	inc esi
  7629 00006636 6649                <1> 	dec cx
  7630 00006638 6681F90000          <1> 	cmp cx, 0
  7631 0000663D 75F4                <1> 	jne clearrbuff
  7632                              <1> findmac:
  7633 0000663F 8B15[FF670000]      <1> 	mov edx, [basenicaddr]
  7634 00006645 BF[07680000]        <1> 	mov edi, sysmac
  7635 0000664A B906000000          <1> 	mov ecx, 6
  7636                              <1> macputloop:
  7637 0000664F EC                  <1> 	in al, dx
  7638 00006650 8807                <1> 	mov [edi], al
  7639 00006652 47                  <1> 	inc edi
  7640 00006653 42                  <1> 	inc edx
  7641 00006654 49                  <1> 	dec ecx
  7642 00006655 75F8                <1> 	jnz macputloop
  7643 00006657 B9[07680000]        <1> 	mov ecx, sysmac
  7644 0000665C E837010000          <1> 	call showmac
  7645                              <1> resetnic:
  7646 00006661 8B15[FF670000]      <1> 	mov edx, [basenicaddr]
  7647 00006667 81C252000000        <1> 	add edx, 0x52
  7648 0000666D 30C0                <1> 	xor al, al
  7649 0000666F EE                  <1> 	out dx, al	;;WAKE UP!!!!
  7650 00006670 8B15[FF670000]      <1> 	mov edx, [basenicaddr]
  7651 00006676 81C237000000        <1> 	add edx, 0x37
  7652 0000667C B010                <1> 	mov al, 0x10
  7653 0000667E EE                  <1> 	out dx, al	;;Reset
  7654                              <1> resetnicwait:
  7655 0000667F 8B15[FF670000]      <1> 	mov edx, [basenicaddr]
  7656 00006685 81C237000000        <1> 	add edx, 0x37
  7657 0000668B EC                  <1> 	in al, dx
  7658 0000668C 2410                <1> 	and al, 0x10
  7659 0000668E 3C10                <1> 	cmp al, 0x10
  7660 00006690 0F84E9FFFFFF        <1> 	je near resetnicwait
  7661 00006696 8B15[FF670000]      <1> 	mov edx, [basenicaddr]
  7662 0000669C 81C230000000        <1> 	add edx, 0x30
  7663 000066A2 B8[5F720000]        <1> 	mov eax, rbuffstart
  7664 000066A7 EF                  <1> 	out dx, eax	;;give nic receive buffer location
  7665 000066A8 8B15[FF670000]      <1> 	mov edx, [basenicaddr]
  7666 000066AE 81C23C000000        <1> 	add edx, 0x3C
  7667 000066B4 66B80500            <1> 	mov ax, 0x0005
  7668 000066B8 66EF                <1> 	out dx, ax	;;set TOK and ROK
  7669 000066BA 8B15[FF670000]      <1> 	mov edx, [basenicaddr]
  7670 000066C0 81C244000000        <1> 	add edx, 0x44
  7671 000066C6 B80F000000          <1> 	mov eax, 0xf
  7672 000066CB EF                  <1> 	out dx, eax	;;recieve packets from all matches
  7673 000066CC 8B15[FF670000]      <1> 	mov edx, [basenicaddr]
  7674 000066D2 81C237000000        <1> 	add edx, 0x37
  7675 000066D8 B00C                <1> 	mov al, 0x0C
  7676 000066DA EE                  <1> 	out dx, al	;;use transmit and receive
  7677 000066DB C605[E8670000]01    <1> 	mov byte [nicconfig], 1
  7678 000066E2 C3                  <1> 	ret
  7679                              <1> 	
  7680                              <1> sendframe:	;;padded frame with beginning in edi and end in esi
  7681 000066E3 56                  <1> 	push esi
  7682 000066E4 57                  <1> 	push edi
  7683                              <1> nic2:		;;here come the low level drivers :(
  7684                              <1> 			;;frame begins at esi, ends at edi 			;;0x0200 is the class code for ethernet cards
  7685 000066E5 803D[E8670000]01    <1> 	cmp byte [nicconfig], 1
  7686 000066EC 7405                <1> 	je sendcachedata
  7687 000066EE E803FFFFFF          <1> 	call initcard
  7688                              <1> sendcachedata:
  7689 000066F3 8B15[FF670000]      <1> 	mov edx, [basenicaddr]
  7690 000066F9 81C210000000        <1> 	add edx, 0x10
  7691 000066FF ED                  <1> 	in eax, dx
  7692 00006700 89C1                <1> 	mov ecx, eax
  7693 00006702 E8B7CEFFFF          <1> 	call showhex
  7694 00006707 8B15[FF670000]      <1> 	mov edx, [basenicaddr]
  7695 0000670D 81C213000000        <1> 	add edx, 0x13
  7696 00006713 ED                  <1> 	in eax, dx
  7697 00006714 89C1                <1> 	mov ecx, eax
  7698 00006716 E8A3CEFFFF          <1> 	call showhex
  7699 0000671B 8B15[FF670000]      <1> 	mov edx, [basenicaddr]
  7700 00006721 81C223000000        <1> 	add edx, 0x23	;;23 or 20?
  7701 00006727 5F                  <1> 	pop edi
  7702 00006728 89F8                <1> 	mov eax, edi
  7703 0000672A EF                  <1> 	out dx, eax	;;here's Johnny!
  7704 0000672B 5E                  <1> 	pop esi
  7705 0000672C 29FE                <1> 	sub esi, edi
  7706 0000672E 89F0                <1> 	mov eax, esi
  7707 00006730 8B15[FF670000]      <1> 	mov edx, [basenicaddr]
  7708 00006736 81C213000000        <1> 	add edx, 0x13	;;13 or 10?
  7709 0000673C EF                  <1> 	out dx, eax
  7710                              <1> checknicstatus1:
  7711 0000673D 8B15[FF670000]      <1> 	mov edx, [basenicaddr]
  7712 00006743 81C213000000        <1> 	add edx, 0x13	;;13 or 10?
  7713 00006749 ED                  <1> 	in eax, dx
  7714 0000674A 2500200000          <1> 	and eax, 0x2000
  7715 0000674F 3D00200000          <1> 	cmp eax, 0x2000
  7716 00006754 75E7                <1> 	jne checknicstatus1
  7717                              <1> checknicstatus:
  7718 00006756 8B15[FF670000]      <1> 	mov edx, [basenicaddr]
  7719 0000675C 81C213000000        <1> 	add edx, 0x13	;;13 or 10?
  7720 00006762 ED                  <1> 	in eax, dx
  7721 00006763 2500800000          <1> 	and eax, 0x8000
  7722 00006768 3D00800000          <1> 	cmp eax, 0x8000
  7723 0000676D 75E7                <1> 	jne checknicstatus
  7724 0000676F 8B15[FF670000]      <1> 	mov edx, [basenicaddr]
  7725 00006775 81C210000000        <1> 	add edx, 0x10
  7726 0000677B ED                  <1> 	in eax, dx
  7727 0000677C 89C1                <1> 	mov ecx, eax
  7728 0000677E E83BCEFFFF          <1> 	call showhex
  7729 00006783 8B15[FF670000]      <1> 	mov edx, [basenicaddr]
  7730 00006789 81C213000000        <1> 	add edx, 0x13
  7731 0000678F ED                  <1> 	in eax, dx
  7732 00006790 89C1                <1> 	mov ecx, eax
  7733 00006792 E827CEFFFF          <1> 	call showhex
  7734 00006797 C3                  <1> 	ret
  7735                              <1> 	
  7736                              <1> showmac:	;;mac begins in [ecx]
  7737 00006798 BE[D0670000]        <1> 	mov esi, macprint
  7738 0000679D 89CF                <1> 	mov edi, ecx
  7739 0000679F 81C106000000        <1> 	add ecx, 6
  7740                              <1> showmacloop:
  7741 000067A5 8A07                <1> 	mov al, [edi]
  7742 000067A7 8A27                <1> 	mov ah, [edi]
  7743 000067A9 C0E804              <1> 	shr al, 4
  7744 000067AC C0E404              <1> 	shl ah, 4
  7745 000067AF C0EC04              <1> 	shr ah, 4
  7746 000067B2 0430                <1> 	add al, 48
  7747 000067B4 80C430              <1> 	add ah, 48
  7748 000067B7 668906              <1> 	mov [esi], ax
  7749 000067BA 81C603000000        <1> 	add esi, 3
  7750 000067C0 47                  <1> 	inc edi
  7751 000067C1 39CF                <1> 	cmp edi, ecx
  7752 000067C3 72E0                <1> 	jb showmacloop
  7753 000067C5 BE[D0670000]        <1> 	mov esi, macprint
  7754 000067CA E80DC2FFFF          <1> 	call print
  7755 000067CF C3                  <1> 	ret
  7756                              <1> 	
  7757 000067D0 30302D30302D30302D- <1> macprint db "00-00-00-00-00-00  ",0
  7758 000067D9 30302D30302D303020- <1>
  7759 000067E2 2000                <1>
  7760 000067E4 00000000            <1> ethernetend dw 0,0
  7761 000067E8 00                  <1> nicconfig db 0
  7762 000067E9 4E4F204E494300      <1> nonicfoundmsg db "NO NIC",0
  7763 000067F0 496E6974696174696E- <1> initnicmsg	db "Initiating NIC",0
  7764 000067F9 67204E494300        <1>
  7765 000067FF 00000000            <1> basenicaddr	db 0,0,0,0
  7766 00006803 C0A80005            <1> sysip db 192,168,0,5
  7767 00006807 000000000000        <1> sysmac	db 0,0,0,0,0,0		;;my mac address
  7768                                  	%include 'source/arp.asm'
  7769                              <1> ;;let's try something else
  7770                              <1> ;;arp.asm
  7771                              <1> arpinit:
  7772 0000680D BE[C4680000]        <1> 	mov esi, arptable
  7773 00006812 BF[07680000]        <1> 	mov edi, sysmac
  7774 00006817 BB[03680000]        <1> 	mov ebx, sysip
  7775 0000681C 8B0F                <1> 	mov ecx, [edi]
  7776 0000681E 890E                <1> 	mov [esi], ecx
  7777 00006820 668B4F04            <1> 	mov cx, [edi + 4]
  7778 00006824 894E04              <1> 	mov [esi + 4], ecx
  7779 00006827 8B0B                <1> 	mov ecx, [ebx]
  7780 00006829 894E06              <1> 	mov [esi + 6], ecx
  7781 0000682C C605[C3680000]01    <1> 	mov byte [arpconfig], 1
  7782 00006833 C3                  <1> 	ret
  7783                              <1> arptest:
  7784 00006834 803D[C3680000]01    <1> 	cmp byte [arpconfig], 1
  7785 0000683B 7405                <1> 	je arptest2
  7786 0000683D E8CBFFFFFF          <1> 	call arpinit
  7787                              <1> arptest2:	;;try to reach 192.168.0.1
  7788 00006842 8B0D[07680000]      <1> 	mov ecx, [sysmac]
  7789 00006848 668B1D[0B680000]    <1> 	mov bx, [sysmac + 4]
  7790 0000684F 890D[89680000]      <1> 	mov [sourcemac], ecx
  7791 00006855 66891D[8D680000]    <1> 	mov [sourcemac + 4],bx
  7792 0000685C 890D[99680000]      <1> 	mov [arpsenderinfo], ecx
  7793 00006862 66891D[9D680000]    <1> 	mov [arpsenderinfo + 4], bx
  7794 00006869 BF[83680000]        <1> 	mov edi, frame
  7795 0000686E BE[C3680000]        <1> 	mov esi, framend
  7796 00006873 E86BFEFFFF          <1> 	call sendframe
  7797 00006878 BE[6B740000]        <1> 	mov esi, line
  7798 0000687D E85AC1FFFF          <1> 	call print
  7799 00006882 C3                  <1> 	ret
  7800                              <1> 	
  7801                              <1> ;;example frame
  7802                              <1> frame:
  7803 00006883 FFFFFFFFFFFF        <1> destinationmac:	db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
  7804 00006889 000000000000        <1> sourcemac:		db 0,0,0,0,0,0
  7805 0000688F 0608                <1> ethertype:		dw 0x0806			;;arp
  7806                              <1> 	;;example packet
  7807 00006891 0100                <1> 	arppacket: 		dw 1				;;ethernet is 1
  7808 00006893 0008                <1> 	arpprotocol: 	dw 0x0800			;;ip is 0x800
  7809 00006895 0604                <1> 					db 6,4				;;length of mac, length of ip
  7810 00006897 0100                <1> 	arpoperation: 	dw 1				;;one for arp request
  7811 00006899 000000000000        <1> 	arpsenderinfo:	db 0x00,0x00,0x00,0x00,0x00,0x00	;;mac
  7812 0000689F C0A80005            <1> 					db 192,168,0,5			;;ip
  7813 000068A3 000000000000        <1> 	arptargetinfo:	db 0x00,0x00,0x00,0x00,0x00,0x00	;;ignored in requests
  7814 000068A9 C0A80001            <1> 					db 192,168,0,1			;;ip
  7815 000068AD 00<rept>            <1> padding:		times (64-($-frame)) db 0
  7816                              <1> framend:
  7817                              <1> 
  7818 000068C3 00                  <1> arpconfig db 0
  7819                              <1> arptable:	;;mac,ip
  7820 000068C4 000000000000000000- <1> 	times 10 db 0,0,0,0,0,0,0,0,0,0
  7821 000068CD 00<rept>            <1>
  7822                              <1> arptableend:
  7823                                  	%include 'source/pci.asm'
  7824 00006928 00                  <1> pcibus		db 0
  7825 00006929 00                  <1> pcidevice	db 0
  7826 0000692A 00                  <1> pcifunction	db 0
  7827 0000692B 00                  <1> pciregister	db 0
  7828 0000692C 00                  <1> pcireqtype db 0
  7829                              <1> 
  7830                              <1> getpciport:
  7831 0000692D B001                <1> 	mov al, 1
  7832 0000692F A2[2C690000]        <1> 	mov [pcireqtype], al
  7833 00006934 E916000000          <1> 	jmp searchpci
  7834                              <1> pcidump:
  7835 00006939 31C0                <1> 	xor eax, eax
  7836 0000693B A2[2A690000]        <1> 	mov [pcifunction], al
  7837 00006940 A2[28690000]        <1> 	mov [pcibus], al
  7838 00006945 A2[29690000]        <1> 	mov [pcidevice], al
  7839 0000694A A2[2C690000]        <1> 	mov [pcireqtype], al
  7840                              <1> searchpci:		;;return in ebx, start X in pciX
  7841 0000694F 30C0                <1> 	xor al, al
  7842 00006951 A2[2B690000]        <1> 	mov [pciregister], al
  7843 00006956 E853010000          <1> 	call getpciaddr
  7844 0000695B BAF80C0000          <1> 	mov edx, 0xCF8
  7845 00006960 EF                  <1> 	out dx, eax	;;request pci config
  7846 00006961 BAFC0C0000          <1> 	mov edx, 0xCFC
  7847 00006966 ED                  <1> 	in eax, dx 	;;read in pci config
  7848 00006967 3D0000FFFF          <1> 	cmp eax, 0xFFFF0000
  7849 0000696C 0F823D000000        <1> 	jb near checkpcidevice
  7850                              <1> searchpciret:
  7851                              <1> nextpcidevice:
  7852 00006972 30C0                <1> 	xor al, al
  7853 00006974 A2[2A690000]        <1> 	mov [pcifunction], al
  7854 00006979 A0[29690000]        <1> 	mov al, [pcidevice]
  7855 0000697E 3C1F                <1> 	cmp al, 11111b
  7856 00006980 0F83BC000000        <1> 	jae near nextpcibus
  7857 00006986 FEC0                <1> 	inc al
  7858 00006988 A2[29690000]        <1> 	mov [pcidevice], al
  7859 0000698D E9BDFFFFFF          <1> 	jmp searchpci
  7860 00006992 A0[2A690000]        <1> 	mov al, [pcifunction]
  7861 00006997 3C07                <1> 	cmp al, 111b
  7862 00006999 0F83D3FFFFFF        <1> 	jae near nextpcidevice
  7863 0000699F FEC0                <1> 	inc al
  7864 000069A1 A2[2A690000]        <1> 	mov [pcifunction], al
  7865 000069A6 E9A4FFFFFF          <1> 	jmp searchpci
  7866 000069AB 00000000            <1> pcitype: db 0,0,0,0
  7867                              <1> checkpcidevice:
  7868 000069AF 30C0                <1> 	xor al, al
  7869 000069B1 3805[2C690000]      <1> 	cmp [pcireqtype], al
  7870 000069B7 0F842E000000        <1> 	je near dumppcidevice
  7871 000069BD B008                <1> 	mov al, 0x08
  7872 000069BF A2[2B690000]        <1> 	mov [pciregister], al	;;class code, subclass, revision id
  7873 000069C4 E8E5000000          <1> 	call getpciaddr
  7874 000069C9 BAF80C0000          <1> 	mov edx, 0xCF8
  7875 000069CE EF                  <1> 	out dx, eax
  7876 000069CF BAFC0C0000          <1> 	mov edx, 0xCFC
  7877 000069D4 ED                  <1> 	in eax, dx
  7878 000069D5 C1C008              <1> 	rol eax, 8
  7879 000069D8 8A1D[AB690000]      <1> 	mov bl, [pcitype]
  7880 000069DE 38D8                <1> 	cmp al, bl
  7881 000069E0 0F847B000000        <1> 	je near foundpciaddr
  7882 000069E6 E987FFFFFF          <1> 	jmp searchpciret
  7883                              <1> dumppcidevice:
  7884 000069EB 30C0                <1> 	xor al, al
  7885 000069ED A2[2B690000]        <1> 	mov [pciregister], al
  7886 000069F2 E8B7000000          <1> 	call getpciaddr
  7887 000069F7 89C1                <1> 	mov ecx, eax
  7888 000069F9 E8C0CBFFFF          <1> 	call showhex
  7889                              <1> dumppcidevicelp:
  7890 000069FE A2[2B690000]        <1> 	mov [pciregister], al
  7891 00006A03 E8A6000000          <1> 	call getpciaddr
  7892 00006A08 BAF80C0000          <1> 	mov edx, 0xCF8
  7893 00006A0D EF                  <1> 	out dx, eax
  7894 00006A0E BAFC0C0000          <1> 	mov edx, 0xCFC
  7895 00006A13 ED                  <1> 	in eax, dx
  7896 00006A14 89C1                <1> 	mov ecx, eax
  7897 00006A16 A0[2B690000]        <1> 	mov al, [pciregister]
  7898 00006A1B 0404                <1> 	add al, 4
  7899 00006A1D E89CCBFFFF          <1> 	call showhex
  7900 00006A22 3C3C                <1> 	cmp al, 0x3C
  7901 00006A24 72D8                <1> 	jb dumppcidevicelp
  7902                              <1> dumppcidn:
  7903 00006A26 803D[B8270000]00    <1> 	cmp byte [charpos], 0
  7904 00006A2D 0F843FFFFFFF        <1> 	je near searchpciret
  7905 00006A33 BE[6B740000]        <1> 	mov esi, line
  7906 00006A38 E89FBFFFFF          <1> 	call print
  7907 00006A3D E930FFFFFF          <1> 	jmp searchpciret
  7908                              <1> nextpcibus:
  7909 00006A42 30C0                <1> 	xor al, al
  7910 00006A44 A2[29690000]        <1> 	mov [pcidevice], al
  7911 00006A49 A0[28690000]        <1> 	mov al, [pcibus]
  7912 00006A4E 3C7F                <1> 	cmp al, 1111111b
  7913 00006A50 730C                <1> 	jae donesearchpci
  7914 00006A52 FEC0                <1> 	inc al
  7915 00006A54 A2[28690000]        <1> 	mov [pcibus], al
  7916 00006A59 E9F1FEFFFF          <1> 	jmp searchpci
  7917                              <1> donesearchpci:
  7918 00006A5E 31D2                <1> 	xor edx, edx
  7919 00006A60 C3                  <1> 	ret
  7920                              <1> foundpciaddr:
  7921 00006A61 B010                <1> 	mov al, 0x10
  7922 00006A63 A2[2B690000]        <1> 	mov [pciregister], al
  7923                              <1> findpciioaddr:
  7924 00006A68 E841000000          <1> 	call getpciaddr
  7925 00006A6D BAF80C0000          <1> 	mov edx, 0xCF8
  7926 00006A72 EF                  <1> 	out dx, eax
  7927 00006A73 BAFC0C0000          <1> 	mov edx, 0xCFC
  7928 00006A78 ED                  <1> 	in eax, dx
  7929 00006A79 89C3                <1> 	mov ebx, eax
  7930 00006A7B 81E301000000        <1> 	and ebx, 1
  7931 00006A81 81FB00000000        <1> 	cmp ebx, 0
  7932 00006A87 0F8408000000        <1> 	je near notpciioaddr
  7933 00006A8D 2D01000000          <1> 	sub eax, 1
  7934 00006A92 89C2                <1> 	mov edx, eax
  7935 00006A94 C3                  <1> 	ret
  7936                              <1> notpciioaddr:
  7937 00006A95 A0[2B690000]        <1> 	mov al, [pciregister]
  7938 00006A9A 0404                <1> 	add al, 4
  7939 00006A9C 3C28                <1> 	cmp al, 0x28
  7940 00006A9E 0F87CEFEFFFF        <1> 	ja near searchpciret
  7941 00006AA4 A2[2B690000]        <1> 	mov [pciregister], al
  7942 00006AA9 E9BAFFFFFF          <1> 	jmp findpciioaddr
  7943                              <1> getpciaddr:		;;puts it in eax and ebx
  7944 00006AAE 31C0                <1> 			xor eax, eax
  7945 00006AB0 BB00000080          <1> 			mov ebx, 0x80000000
  7946 00006AB5 A0[28690000]        <1> 			mov al, [pcibus]
  7947 00006ABA C1E010              <1> 			shl eax, 16
  7948 00006ABD 01C3                <1> 			add ebx, eax
  7949 00006ABF 31C0                <1> 			xor eax, eax
  7950 00006AC1 A0[29690000]        <1> 			mov al, [pcidevice]
  7951 00006AC6 C1E00B              <1> 			shl eax, 11
  7952 00006AC9 01C3                <1> 			add ebx, eax
  7953 00006ACB 31C0                <1> 			xor eax, eax
  7954 00006ACD A0[2A690000]        <1> 			mov al, [pcifunction]
  7955 00006AD2 C1E008              <1> 			shl eax, 8
  7956 00006AD5 01C3                <1> 			add ebx, eax
  7957 00006AD7 31C0                <1> 			xor eax, eax
  7958 00006AD9 A0[2B690000]        <1> 			mov al, [pciregister]
  7959 00006ADE 01C3                <1> 			add ebx, eax
  7960 00006AE0 89D8                <1> 			mov eax, ebx
  7961 00006AE2 C3                  <1> 			ret
  7962                                  	;%include 'source/process.asm'
  7963                                      %include 'source/disk.asm'
  7964                              <1> ;;disk.asm - new - using lba
  7965                              <1> loadfile:	;;loads a file with the name buffer's location in edi into location in esi
  7966 00006AE3 803F00              <1> 	cmp byte [edi], 0
  7967 00006AE6 0F8444000000        <1> 	je near nofileload
  7968 00006AEC 89FA                <1> 	mov edx, edi
  7969 00006AEE BB[3E730000]        <1> 	mov ebx, diskfileindex
  7970                              <1> nextnamechar:
  7971 00006AF3 8A07                <1> 	mov al, [edi]
  7972 00006AF5 8A23                <1> 	mov ah, [ebx]
  7973 00006AF7 47                  <1> 	inc edi
  7974 00006AF8 43                  <1> 	inc ebx
  7975 00006AF9 88C1                <1> 	mov cl, al
  7976 00006AFB 08E1                <1> 	or cl, ah
  7977 00006AFD 80F900              <1> 	cmp cl, 0
  7978 00006B00 744E                <1> 	je equalfilenames
  7979 00006B02 80F920              <1> 	cmp cl, ' '
  7980 00006B05 7449                <1> 	je equalfilenames
  7981 00006B07 3C2A                <1> 	cmp al, '*'
  7982 00006B09 742B                <1> 	je equalfilenames2
  7983 00006B0B 80FC00              <1> 	cmp ah, 0
  7984 00006B0E 7410                <1> 	je nextfilename
  7985 00006B10 3C00                <1> 	cmp al, 0
  7986 00006B12 740C                <1> 	je nextfilename
  7987 00006B14 38E0                <1> 	cmp al, ah
  7988 00006B16 74DB                <1> 	je nextnamechar
  7989                              <1> getebxzero:
  7990 00006B18 8A23                <1> 	mov ah, [ebx]
  7991 00006B1A 43                  <1> 	inc ebx
  7992 00006B1B 80FC00              <1> 	cmp ah, 0
  7993 00006B1E 75F8                <1> 	jne getebxzero
  7994                              <1> nextfilename:
  7995 00006B20 81C308000000        <1> 	add ebx, 8		;;next descriptor
  7996 00006B26 89D7                <1> 	mov edi, edx
  7997 00006B28 81FB[F5730000]      <1> 	cmp ebx, enddiskfileindex
  7998 00006B2E 72C3                <1> 	jb nextnamechar
  7999                              <1> nofileload:
  8000 00006B30 BA94010000          <1> 	mov edx, 404	;;indicate not found error
  8001 00006B35 C3                  <1> 	ret
  8002                              <1> equalfilenames2:
  8003 00006B36 81EB02000000        <1> 	sub ebx, 2
  8004                              <1> eqfilefind:
  8005 00006B3C 43                  <1> 	inc ebx
  8006 00006B3D 81FB[F5730000]      <1> 	cmp ebx, enddiskfileindex
  8007 00006B43 0F83E7FFFFFF        <1> 	jae near nofileload
  8008 00006B49 8A03                <1> 	mov al, [ebx]
  8009 00006B4B 3C00                <1> 	cmp al, 0
  8010 00006B4D 75ED                <1> 	jne eqfilefind
  8011 00006B4F 43                  <1> 	inc ebx
  8012                              <1> equalfilenames:
  8013 00006B50 8B4304              <1> 	mov eax, [ebx + 4] 	;;put file size in eax
  8014 00006B53 8B1B                <1> 	mov ebx, [ebx]		;;put file beginning in ebx
  8015 00006B55 031D[84010000]      <1> 	add ebx, [lbaad]	;;add offset to solleros
  8016 00006B5B 31C9                <1> 	xor ecx, ecx
  8017 00006B5D 88C1                <1> 	mov cl, al			;;get excess number of sectors
  8018 00006B5F D0E1                <1> 	shl cl, 1
  8019 00006B61 D0E9                <1> 	shr cl, 1			;;cut off at 128
  8020 00006B63 29C8                <1> 	sub eax, ecx		;;get rid of excess sectors
  8021 00006B65 B500                <1> 	mov ch, 0			;;drive 0
  8022 00006B67 C1E807              <1> 	shr eax, 7			;;get number of 128 sector tracks
  8023                              <1> loaddiskfile:		;;tracks in eax, excess sectors in cl, drive in ch, buffer in esi, address in ebx
  8024 00006B6A A3[AB6B0000]        <1> 	mov [filetracks], eax
  8025 00006B6F 89F7                <1> 	mov edi, esi		;;just in case cl is 0
  8026 00006B71 89DA                <1> 	mov edx, ebx
  8027 00006B73 80F900              <1> 	cmp cl, 0
  8028 00006B76 7405                <1> 	je copytracksforfile
  8029 00006B78 E83A000000          <1> 	call diskr		;;take care of excess sectors
  8030                              <1> copytracksforfile:
  8031 00006B7D A1[AB6B0000]        <1> 	mov eax, [filetracks]
  8032 00006B82 3D00000000          <1> 	cmp eax, 0
  8033 00006B87 741C                <1> 	je donecopyfile
  8034 00006B89 48                  <1> 	dec eax
  8035 00006B8A A3[AB6B0000]        <1> 	mov [filetracks], eax
  8036 00006B8F 89D3                <1> 	mov ebx, edx	;;get end lba
  8037 00006B91 B180                <1> 	mov cl, 0x80
  8038 00006B93 8A2D[83010000]      <1> 	mov ch, [DriveNumber]
  8039 00006B99 89FE                <1> 	mov esi, edi	;;reset buffer
  8040 00006B9B E817000000          <1> 	call diskr
  8041 00006BA0 E9D8FFFFFF          <1> 	jmp copytracksforfile
  8042                              <1> donecopyfile:
  8043 00006BA5 BA00000000          <1> 	mov edx, 0	;;no error
  8044 00006BAA C3                  <1> 	ret
  8045                              <1> 	
  8046 00006BAB 00000000            <1> filetracks dd 0
  8047 00006BAF 00                  <1> lbad1 db 0
  8048 00006BB0 00                  <1> lbad2 db 0
  8049 00006BB1 00                  <1> lbad3 db 0
  8050 00006BB2 00                  <1> lbad4 db 0
  8051 00006BB3 00                  <1> lbad5 db 0
  8052 00006BB4 00                  <1> lbad6 db 0
  8053 00006BB5 6400                <1> segments dw 100
  8054                              <1> 
  8055                              <1> diskr:		;;sector count in cl, disk number in ch, 48 bit address with last 32 bits in ebx, buffer in esi, puts end buffer in edi and end lba in edx
  8056                              <1> 
  8057 00006BB7 8935[CC6C0000]      <1> 	mov [bufferstartesi], esi
  8058 00006BBD 891D[C86C0000]      <1> 	mov [lbaadstartebx], ebx
  8059 00006BC3 31D2                <1> 	xor edx, edx
  8060 00006BC5 88CA                <1> 	mov dl, cl
  8061 00006BC7 01DA                <1> 	add edx, ebx
  8062 00006BC9 8915[C46C0000]      <1> 	mov [lbaadend], edx
  8063 00006BCF 881D[AF6B0000]      <1> 	mov [lbad1], bl
  8064 00006BD5 883D[B06B0000]      <1> 	mov [lbad2], bh
  8065 00006BDB C1C310              <1> 	rol ebx, 16
  8066 00006BDE 881D[B16B0000]      <1> 	mov [lbad3], bl
  8067 00006BE4 883D[B26B0000]      <1> 	mov [lbad4], bh
  8068 00006BEA C1CB10              <1> 	ror ebx, 16
  8069                              <1> 
  8070 00006BED B840000000          <1> 	mov eax, 0x40
  8071 00006BF2 66BAF601            <1> 	mov dx, 0x1F6
  8072 00006BF6 EE                  <1> 	out dx, al	;;send magic bits-add drive indicator later
  8073                              <1> 	
  8074 00006BF7 30C0                <1> 	xor al, al
  8075 00006BF9 66BAF201            <1> 	mov dx, 0x1F2
  8076 00006BFD EE                  <1> 	out dx, al	;;16 bit sector count-last byte now 0
  8077                              <1> 	
  8078 00006BFE A0[B26B0000]        <1> 	mov al, [lbad4]
  8079 00006C03 6642                <1> 	inc dx
  8080 00006C05 EE                  <1> 	out dx, al
  8081                              <1> 	
  8082 00006C06 A0[B36B0000]        <1> 	mov al, [lbad5]
  8083 00006C0B 6642                <1> 	inc dx
  8084 00006C0D EE                  <1> 	out dx, al
  8085                              <1> 	
  8086 00006C0E A0[B46B0000]        <1> 	mov al, [lbad6]
  8087 00006C13 6642                <1> 	inc dx
  8088 00006C15 EE                  <1> 	out dx, al
  8089                              <1> 	
  8090 00006C16 88C8                <1> 	mov al, cl
  8091 00006C18 66BAF201            <1> 	mov dx, 0x1F2
  8092 00006C1C EE                  <1> 	out dx, al	;;low byte of 16 bit sector count
  8093                              <1> 	
  8094 00006C1D A0[AF6B0000]        <1> 	mov al, [lbad1]
  8095 00006C22 6642                <1> 	inc dx
  8096 00006C24 EE                  <1> 	out dx, al
  8097                              <1> 	
  8098 00006C25 A0[B06B0000]        <1> 	mov al, [lbad2]
  8099 00006C2A 6642                <1> 	inc dx
  8100 00006C2C EE                  <1> 	out dx, al
  8101                              <1> 	
  8102 00006C2D A0[B16B0000]        <1> 	mov al, [lbad3]
  8103 00006C32 6642                <1> 	inc dx
  8104 00006C34 EE                  <1> 	out dx, al
  8105                              <1> 	
  8106 00006C35 B024                <1> 	mov al, 0x24
  8107 00006C37 66BAF701            <1> 	mov dx, 0x1F7
  8108 00006C3B EE                  <1> 	out dx, al	;;READ!!!
  8109 00006C3C 66BBFFFF            <1> 	mov bx, 0xFFFF		;;try 65536 times before forcing
  8110                              <1> diskrwait:
  8111 00006C40 66BAF701            <1> 	mov dx, 0x1F7
  8112 00006C44 EC                  <1> 	in al, dx
  8113 00006C45 2408                <1> 	and al, 0x08
  8114 00006C47 664B                <1> 	dec bx
  8115 00006C49 6681FB0000          <1> 	cmp bx, 0
  8116 00006C4E 7404                <1> 	je nomorediskwait
  8117 00006C50 3C08                <1> 	cmp al, 0x08
  8118 00006C52 75EC                <1> 	jne diskrwait
  8119                              <1> nomorediskwait:
  8120 00006C54 66BB0001            <1> 	mov bx, 256
  8121                              <1> diskdataread:
  8122 00006C58 66BAF001            <1> 	mov dx, 0x1F0
  8123 00006C5C 66ED                <1> 	in ax, dx
  8124 00006C5E 668906              <1> 	mov [esi], ax
  8125 00006C61 81C602000000        <1> 	add esi, 2
  8126 00006C67 664B                <1> 	dec bx
  8127 00006C69 6681FB0000          <1> 	cmp bx, 0
  8128 00006C6E 75E8                <1> 	jne diskdataread		;;read a sector
  8129 00006C70 FEC9                <1> 	dec cl
  8130 00006C72 80F900              <1> 	cmp cl, 0
  8131 00006C75 75C9                <1> 	jne diskrwait
  8132 00006C77 89F7                <1> 	mov edi, esi
  8133 00006C79 8B15[C46C0000]      <1> 	mov edx, [lbaadend]
  8134 00006C7F 8B35[CC6C0000]      <1> 	mov esi, [bufferstartesi]
  8135 00006C85 8B1D[C86C0000]      <1> 	mov ebx, [lbaadstartebx]
  8136 00006C8B C3                  <1> 	ret
  8137                              <1> 	
  8138                              <1> 	
  8139                              <1> diskold: ;;28 bits
  8140 00006C8C 6631C0              <1> 	xor ax, ax
  8141 00006C8F 66BAF101            <1> 	mov dx, 0x1F1
  8142 00006C93 EE                  <1> 	out dx, al	;;send null byte to port
  8143 00006C94 6642                <1> 	inc dx	;;0x1F2
  8144 00006C96 88C8                <1> 	mov al, cl	;;get sector count
  8145 00006C98 EE                  <1> 	out dx, al	;;send sector count
  8146 00006C99 6642                <1> 	inc dx	;;0x1F3
  8147 00006C9B 88D8                <1> 	mov al, bl	;;get first 8 bits of address
  8148 00006C9D EE                  <1> 	out dx, al	;;send them
  8149 00006C9E 6642                <1> 	inc dx	;;0x1F4
  8150 00006CA0 C1CB08              <1> 	ror ebx, 8	;;get next 8 bits
  8151 00006CA3 88D8                <1> 	mov al, bl
  8152 00006CA5 EE                  <1> 	out dx, al
  8153 00006CA6 6642                <1> 	inc dx	;;0x1F5
  8154 00006CA8 C1CB08              <1> 	ror ebx, 8	;;again
  8155 00006CAB 88D8                <1> 	mov al, bl
  8156 00006CAD EE                  <1> 	out dx, al
  8157 00006CAE 6642                <1> 	inc dx	;;0x1F6
  8158 00006CB0 C1CB08              <1> 	ror ebx, 8
  8159 00006CB3 88D8                <1> 	mov al, bl
  8160 00006CB5 240F                <1> 	and al, 00001111b	;;last 4 bits of address
  8161 00006CB7 0CE0                <1> 	or al, 0xE0			;;majic number
  8162 00006CB9 C0E504              <1> 	shl ch, 4
  8163 00006CBC 08E8                <1> 	or al, ch
  8164 00006CBE EE                  <1> 	out dx, al			;;send drive indicator, magic bits, and highest 4 bits of address
  8165 00006CBF 6642                <1> 	inc dx	;;0x1F7
  8166 00006CC1 B020                <1> 	mov al, 0x20
  8167 00006CC3 EE                  <1> 	out dx, al			;;execute read command
  8168                              <1> 	
  8169 00006CC4 00000000            <1> lbaadend dd 0
  8170 00006CC8 00000000            <1> lbaadstartebx dd 0
  8171 00006CCC 00000000            <1> bufferstartesi dd 0
  8172                                  	%include 'source/threads.asm'
  8173                              <1> ;;THIS IS MY FIRST ATTEMPT AT IMPLEMENTING THREADS
  8174                              <1> threadstarttest:
  8175 00006CD0 E9E5040000          <1>     jmp startthreads
  8176                              <1> mainthread:
  8177 00006CD5 F4                  <1> 	hlt		;;this does not work properly
  8178 00006CD6 E9FAFFFFFF          <1> 	jmp mainthread
  8179                              <1> 	
  8180                              <1> nwcmdst:
  8181 00006CDB B0FD                <1> 	mov al, 11111101b
  8182 00006CDD E621                <1> 	out 0x21, al
  8183 00006CDF C605[1C6D0000]00    <1> 	mov byte [threadson], 0
  8184 00006CE6 E96FC3FFFF          <1> 	jmp nwcmd
  8185                              <1> 	
  8186                              <1> modelthread:
  8187 00006CEB 668B1D[3C730000]    <1> 	mov bx, [currentthread]
  8188 00006CF2 B001                <1> 	mov al, 1
  8189 00006CF4 B409                <1> 	mov ah, 9
  8190 00006CF6 31C9                <1> 	xor ecx, ecx
  8191 00006CF8 6689D9              <1> 	mov cx, bx
  8192 00006CFB CD30                <1> 	int 0x30
  8193                              <1> 	
  8194 00006CFD B90000DEC0          <1> 	mov ecx, 0xC0DE0000
  8195 00006D02 6689D9              <1> 	mov cx, bx
  8196 00006D05 CD30                <1> 	int 0x30
  8197                              <1> 	
  8198 00006D07 B90000ADDE          <1> 	mov ecx, 0xDEAD0000
  8199 00006D0C 6689D9              <1> 	mov cx, bx
  8200 00006D0F CD30                <1> 	int 0x30
  8201                              <1> 	
  8202 00006D11 CD40                <1> 	int 0x40	;;skip this thread three times to ensure that all threads run
  8203 00006D13 CD40                <1> 	int 0x40
  8204 00006D15 CD40                <1> 	int 0x40
  8205                              <1> 	
  8206 00006D17 E9BFFFFFFF          <1> 	jmp nwcmdst
  8207                              <1> 	
  8208                              <1> 	
  8209 00006D1C 00                  <1> threadson db 0
  8210 00006D1D 04000000            <1> lastthread dd 4
  8211                              <1> 
  8212                              <1> thrdtst:
  8213 00006D21 [EB6C0000]<rept>    <1> times 256 dd modelthread	;;could go up to 2048, but that takes too long
  8214                              <1> thrdtstend:
  8215                              <1> 
  8216 00007121 00000000            <1> 	espold dd 0
  8217                              <1> 
  8218                              <1> threadfork:
  8219 00007125 C605[1C6D0000]01    <1> 	mov byte [threadson], 1
  8220 0000712C 60                  <1> 	pushad
  8221 0000712D 66B80040            <1> 	mov ax, 0x4000	;;this is the divider for the PIT
  8222 00007131 E640                <1> 	out 0x40, al
  8223 00007133 66C1C008            <1> 	rol ax, 8
  8224 00007137 E640                <1> 	out 0x40, al
  8225                              <1> 	
  8226 00007139 8CC8                <1> 	mov eax, cs
  8227 0000713B 89C2                <1> 	mov edx, eax
  8228 0000713D 8B4C2428            <1> 	mov ecx, [esp + 40]
  8229 00007141 81C900020000        <1> 	or ecx, 0x200
  8230 00007147 89E3                <1> 	mov ebx, esp
  8231 00007149 BC[67960000]        <1> 	mov esp, stackdummy
  8232 0000714E 90                  <1> 	nop
  8233                              <1> 	
  8234 0000714F 60                  <1> 	pushad
  8235 00007150 B8[D56C0000]        <1> 	mov eax, mainthread
  8236 00007155 89442420            <1> 	mov [esp + 32], eax
  8237 00007159 89542424            <1> 	mov [esp + 36], edx
  8238 0000715D 894C2428            <1> 	mov [esp + 40], ecx
  8239 00007161 8925[5F720000]      <1> 	mov [threadlist], esp
  8240                              <1> 	
  8241 00007167 891D[21710000]      <1> 	mov [espold], ebx
  8242 0000716D 89F0                <1> 	mov eax, esi
  8243 0000716F BC[679A0000]        <1> 	mov esp, stack1
  8244 00007174 8B1D[1D6D0000]      <1> 	mov ebx, [lastthread]
  8245 0000717A C1E30A              <1> 	shl ebx, 10
  8246 0000717D 01DC                <1> 	add esp, ebx
  8247 0000717F C1EB0A              <1> 	shr ebx, 10
  8248 00007182 90                  <1> 	nop
  8249 00007183 60                  <1> 	pushad
  8250 00007184 89442420            <1> 	mov [esp + 32], eax
  8251 00007188 89542424            <1> 	mov [esp + 36], edx
  8252 0000718C 894C2428            <1> 	mov [esp + 40], ecx
  8253 00007190 89A3[5F720000]      <1> 	mov [threadlist + ebx], esp
  8254 00007196 8B25[21710000]      <1> 	mov esp, [espold]
  8255 0000719C 81C304000000        <1> 	add ebx, 4
  8256 000071A2 89A3[5F720000]      <1> 	mov [threadlist + ebx], esp
  8257 000071A8 81C304000000        <1> 	add ebx, 4
  8258 000071AE 891D[1D6D0000]      <1> 	mov [lastthread], ebx
  8259 000071B4 B020                <1> 	mov al, 0x20
  8260 000071B6 E620                <1> 	out 0x20, al
  8261 000071B8 61                  <1> 	popad
  8262 000071B9 C3                  <1> 	ret
  8263                              <1> 
  8264                              <1> startthreads:
  8265 000071BA C605[1C6D0000]01    <1> 	mov byte [threadson], 1
  8266 000071C1 60                  <1> 	pushad
  8267 000071C2 66B800A0            <1> 	mov ax, 0xA000	;;this is the divider for the PIT
  8268 000071C6 E640                <1> 	out 0x40, al
  8269 000071C8 66C1C008            <1> 	rol ax, 8
  8270 000071CC E640                <1> 	out 0x40, al
  8271                              <1> 	
  8272 000071CE 8CC8                <1> 	mov eax, cs
  8273 000071D0 89C2                <1> 	mov edx, eax
  8274 000071D2 8B4C2428            <1> 	mov ecx, [esp + 40]
  8275 000071D6 81C900020000        <1> 	or ecx, 0x200
  8276 000071DC 89E3                <1> 	mov ebx, esp
  8277 000071DE BC[67960000]        <1> 	mov esp, stackdummy
  8278 000071E3 90                  <1> 	nop
  8279                              <1> 	
  8280 000071E4 60                  <1> 	pushad
  8281 000071E5 B8[D56C0000]        <1> 	mov eax, mainthread
  8282 000071EA 89442420            <1> 	mov [esp + 32], eax
  8283 000071EE 89542424            <1> 	mov [esp + 36], edx
  8284 000071F2 894C2428            <1> 	mov [esp + 40], ecx
  8285 000071F6 8925[5F720000]      <1> 	mov [threadlist], esp
  8286                              <1> 
  8287                              <1> 			;;that above setup the dummy thread which for some reason does not run
  8288                              <1> 			;;this below will setup the threads found in thrdtst
  8289                              <1> 
  8290                              <1> testthreads:
  8291 000071FC BE[216D0000]        <1> 	mov esi, thrdtst
  8292 00007201 BC[679A0000]        <1> 	mov esp, stack1
  8293 00007206 BF[5F720000]        <1> 	mov edi, threadlist
  8294 0000720B 81C704000000        <1> 	add edi, 4
  8295                              <1> nxtthreadld:
  8296 00007211 60                  <1> 	pushad
  8297 00007212 8B06                <1> 	mov eax, [esi]
  8298 00007214 89442420            <1> 	mov [esp + 32], eax
  8299 00007218 89542424            <1> 	mov [esp + 36], edx
  8300 0000721C 894C2428            <1> 	mov [esp + 40], ecx
  8301 00007220 8927                <1> 	mov [edi], esp
  8302 00007222 81C400040000        <1> 	add esp, 1024
  8303 00007228 81C604000000        <1> 	add esi, 4
  8304 0000722E 81C704000000        <1> 	add edi, 4
  8305 00007234 81FF[67920000]      <1> 	cmp edi, threadlistend
  8306 0000723A 0F8325000000        <1> 	jae near nomorethreadspace
  8307 00007240 81FC[67A22000]      <1> 	cmp esp, bssend
  8308 00007246 0F8353000000        <1> 	jae near nomorestackspace
  8309 0000724C 81FE[21710000]      <1> 	cmp esi, thrdtstend
  8310 00007252 72BD                <1> 	jb nxtthreadld
  8311 00007254 89DC                <1> 	mov esp, ebx	
  8312                              <1> 	;mov al, 0xFE
  8313                              <1> 	;out 0x21, al
  8314 00007256 30C0                <1> 	xor al, al
  8315 00007258 E621                <1> 	out 0x21, al
  8316 0000725A B020                <1> 	mov al, 0x20
  8317 0000725C E620                <1> 	out 0x20, al
  8318 0000725E 61                  <1> 	popad
  8319 0000725F FB                  <1> 	sti
  8320 00007260 E9FBFFFFFF          <1> 	jmp $	;;wait for the irq to hook
  8321                              <1> 	
  8322                              <1> nomorethreadspace:
  8323 00007265 BE[7B720000]        <1> 	mov esi, nmts
  8324 0000726A E86DB7FFFF          <1> 	call print
  8325 0000726F C605[1C6D0000]00    <1> 	mov byte [threadson], 0
  8326 00007276 E9DFBDFFFF          <1> 	jmp nwcmd
  8327 0000727B 74656820636F6C6F6E- <1> nmts	db "teh colonel no can haz moar treds",13,10,0
  8328 00007284 656C206E6F2063616E- <1>
  8329 0000728D 2068617A206D6F6172- <1>
  8330 00007296 2074726564730D0A00  <1>
  8331                              <1> 
  8332                              <1> nomorestackspace:
  8333 0000729F BE[B5720000]        <1> 	mov esi, nmss
  8334 000072A4 E833B7FFFF          <1> 	call print
  8335 000072A9 C605[1C6D0000]00    <1> 	mov byte [threadson], 0
  8336 000072B0 E9A5BDFFFF          <1> 	jmp nwcmd
  8337 000072B5 74656820636F6C6F6E- <1> nmss	db "teh colonel no can haz moar staqz",13,10,0
  8338 000072BE 656C206E6F2063616E- <1>
  8339 000072C7 2068617A206D6F6172- <1>
  8340 000072D0 20737461717A0D0A00  <1>
  8341                              <1> 	
  8342                              <1> threadswitch:
  8343 000072D9 FA                  <1> 	cli
  8344 000072DA 60                  <1> 	pushad
  8345 000072DB BF[5F720000]        <1> 	mov edi, threadlist
  8346 000072E0 31C0                <1> 	xor eax, eax
  8347 000072E2 66A1[3C730000]      <1> 	mov ax, [currentthread]
  8348 000072E8 6640                <1> 	inc ax
  8349 000072EA 66A3[3C730000]      <1> 	mov [currentthread], ax
  8350 000072F0 6648                <1> 	dec ax
  8351 000072F2 C1E002              <1> 	shl eax, 2
  8352 000072F5 01C7                <1> 	add edi, eax
  8353 000072F7 8927                <1> 	mov [edi], esp
  8354 000072F9 81C704000000        <1> 	add edi, 4
  8355 000072FF 81FF[67920000]      <1> 	cmp edi, threadlistend
  8356 00007305 0F830D000000        <1> 	jae near nookespthread
  8357 0000730B 8B07                <1> 	mov eax, [edi]
  8358 0000730D 3D00000000          <1> 	cmp eax, 0
  8359 00007312 0F851B000000        <1> 	jne near okespthread
  8360                              <1> nookespthread:
  8361 00007318 BF[5F720000]        <1> 	mov edi, threadlist
  8362 0000731D 6631C0              <1> 	xor ax, ax
  8363 00007320 66A3[3C730000]      <1> 	mov [currentthread], ax
  8364 00007326 8B07                <1> 	mov eax, [edi]
  8365 00007328 3D00000000          <1> 	cmp eax, 0
  8366 0000732D 0F84A8F9FFFF        <1> 	je near nwcmdst
  8367                              <1> okespthread:
  8368 00007333 89C4                <1> 	mov esp, eax
  8369 00007335 B020                <1> 	mov al, 0x20
  8370 00007337 E620                <1> 	out 0x20, al
  8371 00007339 61                  <1> 	popad
  8372 0000733A FB                  <1> 	sti
  8373 0000733B CF                  <1> 	iretd
  8374                              <1> 	
  8375 0000733C 0000                <1> currentthread dw 0
  8376                                      %include 'fileindex.asm'
  8377                              <1> diskfileindex:
  8378 0000733E 646F7370726F6700    <1> db "dosprog",0
  8379 00007346 44000000            <1> dd (f0-$$)/512
  8380 0000734A 01000000            <1> dd (f1-f0)/512
  8381 0000734E 65787000            <1> db "exp",0
  8382 00007352 45000000            <1> dd (f1-$$)/512
  8383 00007356 01000000            <1> dd (f2-f1)/512
  8384 0000735A 666F726B00          <1> db "fork",0
  8385 0000735F 46000000            <1> dd (f2-$$)/512
  8386 00007363 01000000            <1> dd (f3-f2)/512
  8387 00007367 66707500            <1> db "fpu",0
  8388 0000736B 47000000            <1> dd (f3-$$)/512
  8389 0000736F 01000000            <1> dd (f4-f3)/512
  8390 00007373 6C696E757800        <1> db "linux",0
  8391 00007379 48000000            <1> dd (f4-$$)/512
  8392 0000737D 01000000            <1> dd (f5-f4)/512
  8393 00007381 736F6C6C65726F732E- <1> db "solleros.bmp",0
  8394 0000738A 626D7000            <1>
  8395 0000738E 49000000            <1> dd (f5-$$)/512
  8396 00007392 B0020000            <1> dd (f6-f5)/512
  8397 00007396 736F6C6C65726F732E- <1> db "solleros.txt",0
  8398 0000739F 74787400            <1>
  8399 000073A3 F9020000            <1> dd (f6-$$)/512
  8400 000073A7 01000000            <1> dd (f7-f6)/512
  8401 000073AB 736F756E6400        <1> db "sound",0
  8402 000073B1 FA020000            <1> dd (f7-$$)/512
  8403 000073B5 01000000            <1> dd (f8-f7)/512
  8404 000073B9 74656C7900          <1> db "tely",0
  8405 000073BE FB020000            <1> dd (f8-$$)/512
  8406 000073C2 01000000            <1> dd (f9-f8)/512
  8407 000073C6 74696D6500          <1> db "time",0
  8408 000073CB FC020000            <1> dd (f9-$$)/512
  8409 000073CF 02000000            <1> dd (f10-f9)/512
  8410 000073D3 7475746F7269616C2E- <1> db "tutorial.bat",0
  8411 000073DC 62617400            <1>
  8412 000073E0 FE020000            <1> dd (f10-$$)/512
  8413 000073E4 03000000            <1> dd (f11-f10)/512
  8414 000073E8 756E667300          <1> db "unfs",0
  8415 000073ED 01030000            <1> dd (f11-$$)/512
  8416 000073F1 B9020000            <1> dd (f12-f11)/512
  8417                              <1> enddiskfileindex:
  8418                              <1> 
  8419                                  	%include 'source/msg.asm'
  8420 000073F5 57656C636F6D652074- <1> 	shushmsg db "Welcome to the SollerOS Hardly Unix-Compatible Shell!",10,13,0
  8421 000073FE 6F2074686520536F6C- <1>
  8422 00007407 6C65724F5320486172- <1>
  8423 00007410 646C7920556E69782D- <1>
  8424 00007419 436F6D70617469626C- <1>
  8425 00007422 65205368656C6C210A- <1>
  8426 0000742B 0D00                <1>
  8427 0000742D 6578697400          <1> 	exitmsg db	"exit",0
  8428 00007432 50726F6772616D2022- <1> 	notfound1 db "Program ",34,0
  8429 0000743B 00                  <1>
  8430 0000743C 22206E6F7420666F75- <1> 	notfound2 db  34," not found.",13,10,0
  8431 00007445 6E642E0D0A00        <1>
  8432 0000744B 757365726E616D653A- <1> 	userask db "username:",0
  8433 00007454 00                  <1>
  8434 00007455 70617373776F72643A- <1> 	pwdask	db	"password:",0
  8435 0000745E 00                  <1>
  8436 0000745F 40536F6C6C65724F53- <1> 	location	db	"@SollerOS]:",0
  8437 00007468 5D3A00              <1>
  8438 0000746B 0D0A00              <1> 	line	db	13,10,0
  8439 0000746E 200900              <1> 	dirtab 	db " ",9,0
  8440                              <1> 	userlst:
  8441 00007471 7573657200          <1> 			db "user",0
  8442 00007476 70617373776F726400  <1> 			db "password",0
  8443 0000747F 726F6F7400          <1> 			db "root",0
  8444 00007484 617765736F6D65706F- <1> 			db "awesomepower",0
  8445 0000748D 77657200            <1>
  8446 00007491 6E00                <1> 			db "n",0	;;abuse for quick entry-a quick double n followed by a double enter will get you in
  8447 00007493 00                  <1> 			db 0
  8448                              <1> 	userlstend:
  8449                              <1> 	
  8450 00007494 <incbin>            <1> fonts:	incbin 'source/precompiled/fonts.pak'
  8451                              <1> fontend:
  8452                              <1> 
  8453                              <1> 
  8454                              <1> mcursor:
  8455 00008494 01                  <1> 	db	00000001b
  8456 00008495 81                  <1> 	db	10000001b
  8457 00008496 C1                  <1> 	db	11000001b
  8458 00008497 E1                  <1> 	db	11100001b
  8459 00008498 F1                  <1> 	db	11110001b
  8460 00008499 F9                  <1> 	db	11111001b
  8461 0000849A FD                  <1> 	db	11111101b
  8462 0000849B FF                  <1> 	db	11111111b
  8463 0000849C F9                  <1> 	db	11111001b
  8464 0000849D B9                  <1> 	db	10111001b
  8465 0000849E 39                  <1> 	db	00111001b
  8466 0000849F 1C                  <1> 	db	00011100b
  8467 000084A0 1C                  <1> 	db	00011100b
  8468 000084A1 0E                  <1> 	db	00001110b
  8469 000084A2 0E                  <1> 	db	00001110b
  8470 000084A3 0C                  <1> 	db	00001100b
  8471                              <1> 
  8472                              <1> VBEMODEBLOCK:
  8473 000084A4 00<rept>            <1> vbesignature 		times 4 db 0	;VBE Signature
  8474 000084A8 00<rept>            <1> vbeversion  		times 2 db 0	;VBE Version
  8475 000084AA 00<rept>            <1> oemstringptr  		times 4 db 0	;Pointer to OEM String
  8476 000084AE 00<rept>            <1> capabilities 		times 4 db 0	;Capabilities of graphics cont.
  8477 000084B2 00<rept>            <1> videomodeptr 		times 4 db 0	;Pointer to Video Mode List
  8478 000084B6 00<rept>            <1> totalmemory   		times 2 db 0	;number of 64Kb memory blocks
  8479 000084B8 00<rept>            <1> oemsoftwarerev  	times 2 db 0	;VBE implementation Software revision
  8480 000084BA 00<rept>            <1> oemvendornameptr 	times 4 db 0	;Pointer to Vendor Name String
  8481 000084BE 00<rept>            <1> oemproductnameptr 	times 4 db 0	;Pointer to Product Name String
  8482 000084C2 00<rept>            <1> oemproductrevptr 	times 4 db 0	;Pointer to Product Revision String
  8483 000084C6 00<rept>            <1> reserved			times 222 db 0	;Reserved for VBE implementation scratch area
  8484 000085A4 00<rept>            <1> oemdata 			times 256 db 0	;Data Area for OEM Strings
  8485                              <1> 
  8486                              <1> 
  8487                              <1> VBEMODEINFOBLOCK:
  8488                              <1> ;Mandatory information for all VBE revision
  8489 000086A4 00<rept>            <1> modeattributes   	times 2 db 0	;Mode attributes
  8490 000086A6 00                  <1> winaattributes   	times 1 db 0	;Window A attributes
  8491 000086A7 00                  <1> winbattributes   	times 1 db 0	;Window B attributes
  8492 000086A8 00<rept>            <1> wingranularity   	times 2 db 0	;Window granularity
  8493 000086AA 00<rept>            <1> winsize          	times 2 db 0	;Window size
  8494 000086AC 00<rept>            <1> winasegment      	times 2 db 0	;Window A start segment
  8495 000086AE 00<rept>            <1> winbsegment      	times 2 db 0	;Window B start segment
  8496 000086B0 00<rept>            <1> winfuncptr       	times 4 db 0	;pointer to window function
  8497 000086B4 00<rept>            <1> bytesperscanline 	times 2 db 0	;Bytes per scan line
  8498                              <1> 
  8499                              <1> ;Mandatory information for VBE 1.2 and above
  8500 000086B6 00<rept>            <1> xresolution     	times 2 db 0	;Horizontal resolution in pixel or chars
  8501 000086B8 00<rept>            <1> yresolution	    	times 2 db 0	;Vertical resolution in pixel or chars
  8502 000086BA 00                  <1> xcharsize       	times 1 db 0	;Character cell width in pixel
  8503 000086BB 00                  <1> ycharsize       	times 1 db 0	;Character cell height in pixel
  8504 000086BC 00                  <1> numberofplanes  	times 1 db 0	;Number of memory planes
  8505 000086BD 00                  <1> bitsperpixel    	times 1 db 0	;Bits per pixel
  8506 000086BE 00                  <1> numberofbanks   	times 1 db 0	;Number of banks
  8507 000086BF 00                  <1> memorymodel     	times 1 db 0	;Memory model type
  8508 000086C0 00                  <1> banksize        	times 1 db 0	;Bank size in KB
  8509 000086C1 00                  <1> numberofimagepages	times 1 db 0	;Number of images
  8510 000086C2 00                  <1> reserved1       	times 1 db 0	;Reserved for page function
  8511                              <1> 
  8512                              <1> ;Direct Color fields (required for direct/6 and YUV/7 memory models)
  8513 000086C3 00                  <1> redmasksize			times 1 db 0	;Size of direct color red mask in bits
  8514 000086C4 00                  <1> redfieldposition	times 1 db 0	;Bit position of lsb of red bask
  8515 000086C5 00                  <1> greenmasksize   	times 1 db 0	;Size of direct color green mask in bits
  8516 000086C6 00                  <1> greenfieldposition	times 1 db 0	;Bit position of lsb of green bask
  8517 000086C7 00                  <1> bluemasksize		times 1 db 0	;Size of direct color blue mask in bits
  8518 000086C8 00                  <1> bluefieldposition	times 1 db 0	;Bit position of lsb of blue bask
  8519 000086C9 00                  <1> rsvdmasksize        times 1	db 0	;Size of direct color reserved mask in bits
  8520 000086CA 00                  <1> rsvdfieldposition	times 1	db 0	;Bit position of lsb of reserved bask
  8521 000086CB 00                  <1> directcolormodeinfo	times 1 db 0	;Direct color mode attributes
  8522                              <1> 
  8523                              <1> ;Mandatory information for VBE 2.0 and above
  8524 000086CC 00<rept>            <1> physbaseptr 		times 4 db 0	;Physical address for flat frame buffer
  8525 000086D0 00<rept>            <1> offscreenmemoffset 	times 4 db 0	;Pointer to start of off screen memory
  8526 000086D4 00<rept>            <1> offscreenmemsize 	times 2 db 0    ;Amount of off screen memory in 1Kb units
  8527 000086D6 00<rept>            <1> reserved2 			times 206 db 0  ;Remainder of ModeInfoBlock
  8528                                  	;%include 'source/memory.asm'
  8529                                  	%include 'source/buf.asm'
  8530 000087A4 4255465354415254    <1> db "BUFSTART"
  8531                              <1> [section .bss]
  8532                              <1> bssstart:
  8533                              <1> stack:
  8534 00000000 <res 00001000>      <1> 	resb 4096
  8535                              <1> stackend:
  8536                              <1> graphicstable: ;w type, dw datalocation, w locationx, w locationy, w selected, dw code
  8537 00001000 <res 00000200>      <1> 	resb 200h 
  8538                              <1> 	graphicstableend:
  8539                              <1> mousecolorbuf: ;where the gui under the mouse is stored
  8540 00001200 <res 00000100>      <1> 	resb 256
  8541                              <1> mcolorend:
  8542 00001300 <res 00000200>      <1> fileindex: resb 200h
  8543                              <1> fileindexend:
  8544 00001500 <res 00000001>      <1> IFON resb 1 
  8545 00001501 <res 00000064>      <1> IFTRUE resb 100 
  8546 00001565 <res 00000004>      <1> BATCHPOS resb 4 
  8547 00001569 <res 00000001>      <1> BATCHISON resb 1 
  8548 0000156A <res 00000001>      <1> LOOPON resb 1 
  8549 0000156B <res 00000004>      <1> LOOPPOS	resb 4 
  8550 0000156F <res 00000500>      <1> variables: 	resb 500h 
  8551 00001A6F <res 00000001>      <1> varend: resb 1
  8552 00001A70 <res 00000100>      <1> buftxt2: resb 100h
  8553 00001B70 <res 0000000A>      <1> resb 10
  8554 00001B7A <res 00000200>      <1> buftxt: resb 200h 
  8555                              <1> buftxtend:
  8556 00001D7A <res 00000014>      <1> buf2:	resb 20 
  8557 00001D8E <res 00000001>      <1> numbuf: resb 1 
  8558 00001D8F <res 00005000>      <1> videobuf 		resb (160*64*2)	;1280x1024pixels in characters
  8559 00006D8F <res 000000C8>      <1> videobufend		resb 200
  8560 00006E57 <res 00000004>      <1> lastcommandpos: resb 4
  8561 00006E5B <res 00000004>      <1> currentcommandpos: resb 4
  8562                              <1> commandbuf:
  8563 00006E5F <res 00000400>      <1> resb 1024
  8564                              <1> commandbufend:
  8565                              <1> rbuffstart: ;for use with networking
  8566                              <1> ;resb 8212
  8567                              <1> threadlist:	;;this buffer will hold the stack locations of all of the threads, up to 2048
  8568 0000725F <res 00002008>      <1> 	resb 2050*4
  8569                              <1> threadlistend:
  8570                              <1> stacks:		;;the stacks will go on forever until end of memory
  8571 00009267 <res 00000400>      <1> 	resb 1024
  8572                              <1> stackdummy:
  8573 00009667 <res 00000400>      <1> 	resb 1024
  8574                              <1> stack1:
  8575 00009A67 <res 00200800>      <1> 	resb 1024*2050	;;woah, thats a lot of space for stacks
  8576                              <1> bssend:		;;from here on, it is not kernel space so apps can be loaded here.
  8577                              <1> [section .text]
  8578                                      %include 'files.asm'
  8579 000087AC 00<rept>            <1> align 512,db 0
  8580                              <1> f0:
  8581 00008800 <incbin>            <1> incbin "included/dosprog"
  8582 0000894B 00<rept>            <1> align 512,db 0
  8583                              <1> f1:
  8584 00008A00 <incbin>            <1> incbin "included/exp"
  8585 00008B27 00<rept>            <1> align 512,db 0
  8586                              <1> f2:
  8587 00008C00 <incbin>            <1> incbin "included/fork"
  8588 00008C6D 00<rept>            <1> align 512,db 0
  8589                              <1> f3:
  8590 00008E00 <incbin>            <1> incbin "included/fpu"
  8591 00008E9F 00<rept>            <1> align 512,db 0
  8592                              <1> f4:
  8593 00009000 <incbin>            <1> incbin "included/linux"
  8594 00009007 00<rept>            <1> align 512,db 0
  8595                              <1> f5:
  8596 00009200 <incbin>            <1> incbin "included/solleros.bmp"
  8597 0005F1E6 00<rept>            <1> align 512,db 0
  8598                              <1> f6:
  8599 0005F200 <incbin>            <1> incbin "included/solleros.txt"
  8600 0005F376 00<rept>            <1> align 512,db 0
  8601                              <1> f7:
  8602 0005F400 <incbin>            <1> incbin "included/sound"
  8603 0005F4F4 00<rept>            <1> align 512,db 0
  8604                              <1> f8:
  8605 0005F600 <incbin>            <1> incbin "included/tely"
  8606 0005F77F 00<rept>            <1> align 512,db 0
  8607                              <1> f9:
  8608 0005F800 <incbin>            <1> incbin "included/time"
  8609 0005FA7B 00<rept>            <1> align 512,db 0
  8610                              <1> f10:
  8611 0005FC00 <incbin>            <1> incbin "included/tutorial.bat"
  8612 000600AA 00<rept>            <1> align 512,db 0
  8613                              <1> f11:
  8614 00060200 <incbin>            <1> incbin "included/unfs"
  8615                              <1> align 512,db 0
  8616                              <1> f12:
