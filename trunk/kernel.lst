     1                                  [BITS 16]
     2                                      %include 'source/menu.asm'
     3                              <1>     ; MENU.ASM
     4                              <1> %include 'source/signature.asm'
     5                              <2> signature:	;used by bootloader to find SollerOS, is totally awesome
     6 00000000 EDA55ED1            <2> dd 0xD15EA5ED	;diseased
     7 00000004 15D000B1            <2> dd 0xB100D015	;blood is
     8 00000008 EDFED2BA            <2> dd 0xBAD2FEED	;bad to feed
     9 0000000C 95D0112A            <2> dd 0x2A11D095	;to all dogs
    10 00000010 52A71CA1            <2> dd 0xA11CA752	;all cats too.
    11 00000014 0F751015            <2> dd 0x1510750F   ;is lots of
    12 00000018 75CAADDE            <2> dd 0xDEADCA75   ;dead cats
    13 0000001C 95D0ADDE            <2> dd 0xDEADD095   ;dead dogs
    14 00000020 18000000            <2> dd 24			;version
    15 00000024 534F4C4C45524F53    <2> db "SOLLEROS"
    16                              <2> signatureend:
    17                              <1> menustart:	
    18 0000002C 8CC8                <1> 	mov ax, cs
    19 0000002E 8ED8                <1> 	mov ds, ax
    20 00000030 8EC0                <1> 	mov es, ax
    21 00000032 8ED0                <1> 	mov ss, ax
    22 00000034 880E[8101]          <1> 	mov [DriveNumber], cl
    23 00000038 668916[8201]        <1> 	mov [lbaad], edx
    24 0000003D B800A0              <1> 	mov ax, 0xA000
    25 00000040 8EE8                <1> 	mov gs, ax
    26 00000042 B81200              <1> 	mov ax, 12h
    27 00000045 31DB                <1> 	xor bx, bx
    28 00000047 CD10                <1> 	int 10h
    29                              <1> guiload:
    30 00000049 BE[8F02]            <1> 	mov si, bootmsg
    31 0000004C E84C01              <1> 	call printrm
    32 0000004F 31C0                <1> 	xor ax, ax
    33 00000051 CD16                <1> 	int 16h
    34 00000053 3C79                <1> 	cmp al, "y"
    35 00000055 0F85F600            <1> 	jne near guiload2
    36                              <1> guiloadagain:
    37 00000059 B8004F              <1> 	mov ax, 04F00h
    38 0000005C BF[7A83]            <1> 	mov di, VBEMODEBLOCK
    39 0000005F CD10                <1> 	int 10h
    40 00000061 BE[9C83]            <1> 	mov si, reserved
    41 00000064 81EE0200            <1> 	sub si, 2
    42                              <1> findvideomodes:
    43 00000068 81C60200            <1> 	add si, 2
    44 0000006C 8B0C                <1> 	mov cx, [si]
    45 0000006E 81F9FFFF            <1> 	cmp cx, 0xFFFF
    46 00000072 0F840A00            <1> 	je near nextvmode
    47 00000076 81FE[7A84]          <1> 	cmp si, oemdata
    48 0000007A 0F83D100            <1> 	jae near guiload2	;;kill if no valid list is found
    49 0000007E EBE8                <1> 	jmp findvideomodes 	
    50                              <1> ;;debug,shows vmodes available
    51                              <1> nextvmode:
    52 00000080 81EE0200            <1> 	sub si, 2
    53 00000084 81FE[9C83]          <1> 	cmp si, reserved
    54 00000088 0F82CDFF            <1> 	jb near guiloadagain
    55 0000008C 8B0C                <1> 	mov cx, [si]
    56 0000008E 81F9FFFF            <1> 	cmp cx, 0xFFFF
    57 00000092 0F84EAFF            <1> 	je near nextvmode
    58 00000096 81C10040            <1> 	add cx, 0x4000 		;;Linear Frame Buffer
    59 0000009A B8014F              <1> 	mov ax, 04F01h
    60 0000009D BF[7A85]            <1> 	mov di, VBEMODEINFOBLOCK
    61 000000A0 890E[8601]          <1> 	mov [vesamode], cx
    62 000000A4 CD10                <1> 	int 10h
    63 000000A6 A0[9385]            <1> 	mov al, [bitsperpixel]
    64 000000A9 3C10                <1> 	cmp al, 16
    65 000000AB 75D3                <1> 	jne nextvmode
    66 000000AD 8936[8801]          <1> 	mov [videomodecache], si
    67 000000B1 80FC00              <1> 	cmp ah, 0
    68 000000B4 0F842200            <1> 	je near setvesamode
    69 000000B8 EBC6                <1> 	jmp nextvmode
    70 000000BA 0A0D49732074686973- <1> isthisvideook db 10,13,"Is this video mode OK?(y/n)",13,10,0
    71 000000C3 20766964656F206D6F- <1>
    72 000000CC 6465204F4B3F28792F- <1>
    73 000000D5 6E290D0A00          <1>
    74                              <1> setvesamode:
    75 000000DA 8B0E[8C85]          <1> 	mov cx, [xresolution]
    76 000000DE E8D200              <1> 	call decshow
    77 000000E1 B078                <1> 	mov al, "x"
    78 000000E3 E83A01              <1> 	call char
    79 000000E6 8B0E[8E85]          <1> 	mov cx, [yresolution]
    80 000000EA E8C600              <1> 	call decshow
    81 000000ED B040                <1> 	mov al, "@"
    82 000000EF E82E01              <1> 	call char
    83 000000F2 8A0E[9385]          <1> 	mov cl, [bitsperpixel]
    84 000000F6 E8BA00              <1> 	call decshow
    85 000000F9 BE[BA00]            <1> 	mov si, isthisvideook
    86 000000FC E89C00              <1> 	call printrm
    87 000000FF 31C0                <1> 	xor ax, ax
    88 00000101 CD16                <1> 	int 16h
    89 00000103 8B36[8801]          <1> 	mov si, [videomodecache]
    90 00000107 3C79                <1> 	cmp al, "y"
    91 00000109 0F8573FF            <1> 	jne near nextvmode
    92 0000010D 8B16[8C85]          <1> 	mov dx, [xresolution]
    93 00000111 8B0E[8E85]          <1> 	mov cx, [yresolution]
    94 00000115 8916[105E]          <1> 	mov [resolutionx], dx
    95 00000119 890E[0E5E]          <1> 	mov [resolutiony], cx
    96 0000011D 01D2                <1> 	add dx, dx
    97 0000011F 8916[125E]          <1> 	mov [resolutionx2], dx
    98 00000123 31D2                <1> 	xor dx, dx
    99 00000125 31C9                <1> 	xor cx, cx
   100 00000127 B8024F              <1> 	mov ax, 04F02h
   101 0000012A 8B1E[8601]          <1> 	mov bx, [vesamode]
   102 0000012E CD10                <1> 	int 10h		;;enter VESA mode
   103 00000130 C606[8A01]00        <1> 	mov byte [guinodo], 0
   104 00000135 C606[8F4F]01        <1> 	mov byte [guion], 1
   105 0000013A 6631C0              <1> 	xor eax, eax
   106 0000013D 6631DB              <1> 	xor ebx, ebx
   107 00000140 6631C9              <1> 	xor ecx, ecx
   108 00000143 6631D2              <1> 	xor edx, edx
   109 00000146 6631F6              <1> 	xor esi, esi
   110 00000149 6631FF              <1> 	xor edi, edi	;;reset registers
   111 0000014C E95A01              <1> 	jmp pmode
   112                              <1> guiload2:
   113 0000014F B9E001              <1> 	mov cx, 480
   114 00000152 BA8002              <1> 	mov dx, 640
   115 00000155 8916[105E]          <1> 	mov [resolutionx], dx
   116 00000159 01D2                <1> 	add dx, dx
   117 0000015B 8916[125E]          <1> 	mov [resolutionx2], dx
   118 0000015F 890E[0E5E]          <1> 	mov [resolutiony], cx
   119 00000163 B81200              <1> 	mov ax, 12h
   120 00000166 31DB                <1> 	xor bx, bx
   121 00000168 CD10                <1> 	int 10h
   122 0000016A C606[8A01]01        <1> 	mov byte [guinodo], 1
   123 0000016F 6631DB              <1> 	xor ebx, ebx
   124 00000172 6631C9              <1> 	xor ecx, ecx
   125 00000175 6631D2              <1> 	xor edx, edx
   126 00000178 6631F6              <1> 	xor esi, esi
   127 0000017B 6631FF              <1> 	xor edi, edi
   128 0000017E E92801              <1> 	jmp pmode
   129                              <1> 
   130 00000181 00                  <1> DriveNumber db 0
   131 00000182 00000000            <1> lbaad dd 0
   132                              <1> 	
   133 00000186 0000                <1> vesamode dw 0
   134 00000188 0000                <1> videomodecache dw 0
   135                              <1> 
   136 0000018A 00                  <1> guinodo db 0
   137                              <1> tests:
   138 0000018B BB0700              <1> 	mov bx, 7
   139 0000018E B40E                <1> 	mov ah, 0Eh
   140 00000190 FEC0                <1> 	inc al
   141 00000192 3C02                <1> 	cmp al, 2
   142 00000194 7501                <1> 	jne cnttest
   143 00000196 C3                  <1> 	ret
   144                              <1> cnttest:
   145 00000197 CD10                <1> 	int 10h
   146 00000199 EBF0                <1> 	jmp tests
   147                              <1> 
   148                              <1>     printrm:			; 'si' comes in with string address
   149 0000019B BB0700              <1> 	    mov bx,07		; write to display
   150 0000019E B40E                <1> 	    mov ah,0Eh		; screen function
   151 000001A0 8A04                <1>     prs2:    mov al,[si]         ; get next character
   152 000001A2 3C00                <1> 	    cmp al,0		; look for terminator 
   153 000001A4 7405                <1>             je finpr2		; zero byte at end of string
   154 000001A6 CD10                <1> 	    int 10h		; write character to screen.    
   155 000001A8 46                  <1>      	    inc si	     	; move to next character
   156 000001A9 EBF5                <1> 	    jmp prs2		; loop
   157 000001AB C3                  <1>     finpr2: ret
   158                              <1> 
   159 000001AC 0000000000          <1> dcnm db 0,0,0,0,0
   160 000001B1 0000                <1> dcnmend db 0,0
   161                              <1> 
   162                              <1> 
   163                              <1> decshow:
   164 000001B3 BE[AC01]            <1> 	mov si, dcnm
   165                              <1> decclear:
   166 000001B6 B030                <1> 	mov al, "0"
   167 000001B8 8804                <1> 	mov [si], al
   168 000001BA 46                  <1> 	inc si
   169 000001BB 81FE[B101]          <1> 	cmp si, dcnmend
   170 000001BF 76F5                <1> 	jbe decclear
   171 000001C1 4E                  <1> 	dec si
   172 000001C2 E81500              <1> 	call convertrm
   173 000001C5 BE[AC01]            <1> 	mov si, dcnm
   174                              <1> dectst:
   175 000001C8 8A04                <1> 	mov al, [si]
   176 000001CA 46                  <1> 	inc si
   177 000001CB 81FE[B101]          <1> 	cmp si, dcnmend
   178 000001CF 7704                <1> 	ja dectstend
   179 000001D1 3C30                <1> 	cmp al, "0"
   180 000001D3 76F3                <1> 	jbe dectst
   181                              <1> dectstend:
   182 000001D5 4E                  <1> 	dec si
   183 000001D6 E8C2FF              <1> 	call printrm
   184 000001D9 C3                  <1> 	ret
   185                              <1> 	
   186                              <1> 	
   187                              <1> convertrm:
   188 000001DA 4E                  <1> 	dec si
   189 000001DB 89F3                <1> 	mov bx, si		;place to convert into must be in si, number to convert must be in cx
   190                              <1> cnvrtrm:
   191 000001DD 89DE                <1> 	mov si, bx
   192 000001DF 81EE0300            <1> 	sub si, 3
   193 000001E3 46                  <1> ten3rm:	inc si
   194 000001E4 81F9E803            <1> 	cmp cx, 1000
   195 000001E8 7208                <1> 	jb ten2rm
   196 000001EA 81E9E803            <1> 	sub cx, 1000
   197 000001EE FE04                <1> 	inc byte [si]
   198 000001F0 EBEB                <1> 	jmp cnvrtrm
   199 000001F2 46                  <1> ten2rm:	inc si
   200 000001F3 81F96400            <1> 	cmp cx, 100
   201 000001F7 7208                <1> 	jb ten1rm
   202 000001F9 81E96400            <1> 	sub cx, 100
   203 000001FD FE04                <1> 	inc byte [si]
   204 000001FF EBDC                <1> 	jmp cnvrtrm
   205 00000201 46                  <1> ten1rm:	inc si
   206 00000202 81F90A00            <1> 	cmp cx, 10
   207 00000206 7208                <1> 	jb ten0rm
   208 00000208 81E90A00            <1> 	sub cx, 10
   209 0000020C FE04                <1> 	inc byte [si]
   210 0000020E EBCD                <1> 	jmp cnvrtrm
   211 00000210 46                  <1> ten0rm:	inc si
   212 00000211 81F90100            <1> 	cmp cx, 1
   213 00000215 7208                <1> 	jb tendnrm
   214 00000217 81E90100            <1> 	sub cx, 1
   215 0000021B FE04                <1> 	inc byte [si]
   216 0000021D EBBE                <1> 	jmp cnvrtrm
   217                              <1> tendnrm:
   218 0000021F C3                  <1> 	ret
   219                              <1> 
   220                              <1> 
   221                              <1> 
   222                              <1> 
   223                              <1>     char: 		    ;char must be in al
   224 00000220 BB0700              <1>        mov bx, 07
   225 00000223 B40E                <1> 	   mov ah, 0Eh
   226 00000225 CD10                <1> 	   int 10h
   227 00000227 C3                  <1> 	   ret
   228                              <1> 
   229                              <1> 		shutdown:
   230 00000228 0F20C0              <1> 				mov eax, cr0
   231 0000022B 24FE                <1> 				and al,0xFE     ; back to realmode
   232 0000022D 0F22C0              <1> 				mov  cr0, eax   ; by toggling bit again
   233 00000230 FB                  <1> 				sti
   234 00000231 B80053              <1> 			MOV AX, 5300h	; Shuts down APM-Machines.
   235 00000234 31DB                <1> 			XOR BX, BX	; Newer machines automatically
   236 00000236 CD15                <1> 			INT 15h		; shut down
   237 00000238 B80453              <1> 			MOV AX, 5304h
   238 0000023B 31DB                <1> 			XOR BX, BX
   239 0000023D CD15                <1> 			INT 15h		; Interrupt 15h originally was
   240 0000023F B80153              <1> 			MOV AX, 5301h	; used for Cartridges (cassettes)
   241 00000242 31DB                <1> 			XOR BX, BX	; but is still in use for
   242 00000244 CD15                <1> 			INT 15h		; diverse things
   243 00000246 B80753              <1> 			MOV AX, 5307h
   244 00000249 BB0100              <1> 			MOV BX, 1
   245 0000024C B90300              <1> 			MOV CX, 3
   246 0000024F CD15                <1> 			INT 15h
   247 00000251 CF                  <1> 			IRET
   248                              <1> 
   249                              <1> 	coldboot:
   250 00000252 0F20C0              <1> 			   mov eax, cr0
   251 00000255 24FE                <1> 			   and al,0xFE     ; back to realmode
   252 00000257 0F22C0              <1> 			   mov  cr0, eax   ; by toggling bit again
   253 0000025A FB                  <1> 			   sti
   254 0000025B B84000              <1> 			MOV AX, 0040h
   255 0000025E 8EC0                <1> 			MOV ES, AX
   256 00000260 26C70672000000      <1> 			MOV WORD [ES:00072h], 0h
   257 00000267 EA0000FFFF          <1> 			JMP 0FFFFh:0000h
   258 0000026C CF                  <1> 			IRET
   259                              <1> 
   260                              <1> 		warmboot:
   261 0000026D E81200              <1> 			call realmode
   262 00000270 B84000              <1> 			MOV AX, 0040h
   263 00000273 8EC0                <1> 			MOV ES, AX
   264 00000275 26C70672003412      <1> 			MOV WORD [ES:00072h], 01234h
   265 0000027C EA0000FFFF          <1> 			JMP 0FFFFh:0000h
   266 00000281 CF                  <1> 			IRET
   267                              <1> 
   268                              <1> 
   269                              <1> realmode:
   270 00000282 0F20C0              <1>    mov eax, cr0
   271 00000285 24FE                <1>    and al,0xFE     ; back to realmode
   272 00000287 0F22C0              <1>    mov  cr0, eax   ; by toggling bit again
   273 0000028A FB                  <1>    sti
   274 0000028B 6631C0              <1>    xor eax, eax
   275 0000028E C3                  <1>    ret
   276                              <1>    
   277 0000028F 426F6F7420696E746F- <1> bootmsg:	db "Boot into the GUI?(y/n)",10,13,0
   278 00000298 20746865204755493F- <1>
   279 000002A1 28792F6E290A0D00    <1>
   280                                      %include 'source/pmode.asm'
   281                              <1> [BITS 16]
   282                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   283                              <1> ;	16-bit real mode
   284                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   285                              <1> 
   286                              <1> pmode:
   287 000002A9 BA9200              <1> 	mov dx, 0x92
   288 000002AC EC                  <1> 	in al, dx	;;A20
   289 000002AD 0C02                <1> 	or al, 2
   290 000002AF EE                  <1> 	out dx, al
   291 000002B0 6631DB              <1> 	xor ebx, ebx
   292 000002B3 8CCB                <1> 	mov bx,cs		; EBX=segment
   293 000002B5 66C1E304            <1> 	shl ebx,4		;	<< 4
   294 000002B9 67668D03            <1> 	lea eax,[ebx]		; EAX=linear address of segment base
   295 000002BD A3[C204]            <1> 	mov [gdt2 + 2],ax
   296 000002C0 A3[CA04]            <1> 	mov [gdt3 + 2],ax
   297 000002C3 66C1E810            <1> 	shr eax,16
   298 000002C7 A2[C404]            <1> 	mov [gdt2 + 4],al
   299 000002CA A2[CC04]            <1> 	mov [gdt3 + 4],al
   300 000002CD 8826[C704]          <1> 	mov [gdt2 + 7],ah
   301 000002D1 8826[CF04]          <1> 	mov [gdt3 + 7],ah
   302                              <1> 	
   303 000002D5 66B8[00000000]      <1> 	mov eax, stack
   304 000002DB A3[D204]            <1> 	mov [gdts + 2],ax
   305 000002DE 66C1E810            <1> 	shr eax,16
   306 000002E2 A2[D404]            <1> 	mov [gdts + 4],al
   307 000002E5 8826[D704]          <1> 	mov [gdts + 7],ah
   308 000002E9 66A1[2D04]          <1> 	mov eax, [newcodecache]
   309 000002ED A3[DA04]            <1> 	mov [gdt4 + 2],ax
   310 000002F0 A3[E204]            <1> 	mov [gdt5 + 2],ax
   311 000002F3 66C1E810            <1> 	shr eax,16
   312 000002F7 A2[DC04]            <1> 	mov [gdt4 + 4],al
   313 000002FA A2[E404]            <1> 	mov [gdt5 + 4],al
   314 000002FD 8826[DF04]          <1> 	mov [gdt4 + 7],ah
   315 00000301 8826[E704]          <1> 	mov [gdt5 + 7],ah
   316                              <1> 	
   317                              <1> ; fix up gdt and idt
   318 00000305 67668D83[B0040000]  <1> 	lea eax,[ebx + gdt]	; EAX=linear address of gdt
   319 0000030D 66A3[A604]          <1> 	mov [gdtr + 2],eax
   320 00000311 67668D83[E8040000]  <1> 	lea eax,[ebx + idt]	; EAX=linear address of idt
   321 00000319 66A3[AC04]          <1> 	mov [idtr + 2],eax
   322 0000031D FA                  <1> 	cli
   323 0000031E 0F0116[A404]        <1> 	lgdt [gdtr]
   324 00000323 0F011E[AA04]        <1> 	lidt [idtr]
   325 00000328 6631DB              <1> 	xor ebx, ebx
   326 0000032B 8CDB                <1> 	mov bx, ds
   327 0000032D 66891E[2904]        <1> 	mov [basecache], ebx
   328 00000332 0F20C0              <1> 	mov eax,cr0
   329 00000335 0C01                <1> 	or al,1
   330 00000337 0F22C0              <1> 	mov cr0,eax
   331 0000033A EA[4303]1000        <1> 	jmp SYS_CODE_SEL:do_pm
   332                              <1> [BITS 32]
   333 0000033F 90                  <1> 	nop
   334 00000340 90                  <1> 	nop
   335 00000341 90                  <1> 	nop
   336 00000342 90                  <1> 	nop
   337                              <1> do_pm:
   338 00000343 31C0                <1> 	xor eax, eax
   339 00000345 66B81800            <1> 	mov ax, SYS_DATA_SEL
   340 00000349 8ED8                <1> 	mov ds,ax
   341 0000034B 8ED0                <1> 	mov ss,ax	;;can switch back to STACK_SEL later
   342 0000034D BC[00100000]        <1> 	mov esp, stackend	;;can switch back to 4096 later
   343 00000352 90                  <1> 	nop
   344 00000353 90                  <1> 	nop
   345 00000354 8EC0                <1> 	mov es, ax
   346 00000356 8EE0                <1> 	mov fs, ax
   347 00000358 66B83000            <1> 	mov ax, NEW_DATA_SEL
   348 0000035C 8EE8                <1> 	mov gs, ax
   349                              <1> 	
   350                              <1> copykernel:
   351 0000035E 648B06              <1> 	mov eax, [fs:esi]
   352 00000361 658906              <1> 	mov [gs:esi], eax
   353 00000364 81C604000000        <1> 	add esi, 4
   354 0000036A 81FE[00000000]      <1> 	cmp esi, bssstart
   355 00000370 72EC                <1> 	jb copykernel
   356 00000372 EA[79030000]2800    <1> 	jmp NEW_CODE_SEL:done_copy
   357                              <1> 	
   358                              <1> done_copy:
   359 00000379 66B83000            <1> 	mov ax, NEW_DATA_SEL	;;these MUST be setup AFTER the kernel switches places!!!
   360 0000037D 8ED8                <1> 	mov ds, ax
   361 0000037F 8ED0                <1> 	mov ss, ax
   362 00000381 BC[00100000]        <1> 	mov esp, stackend
   363 00000386 90                  <1> 	nop
   364 00000387 90                  <1> 	nop
   365 00000388 66B83000            <1> 	mov ax, NEW_DATA_SEL
   366 0000038C 8EC0                <1> 	mov es, ax
   367 0000038E 8EE0                <1> 	mov fs, ax
   368 00000390 66B81800            <1> 	mov ax, SYS_DATA_SEL
   369 00000394 8EE8                <1> 	mov gs, ax
   370                              <1> 	
   371                              <1> ;Now I will initialise the interrupt controllers and remap irq's
   372 00000396 B011                <1> 	mov al, 0x11
   373 00000398 E620                <1> 	out 0x20, al
   374 0000039A E6A0                <1> 	out 0xA0, al
   375 0000039C B040                <1> 	mov al, 0x40	;interrupt for master
   376 0000039E E621                <1> 	out 0x21, al
   377 000003A0 B048                <1> 	mov al, 0x48	;interrupt for slave
   378 000003A2 E6A1                <1> 	out 0xA1, al
   379 000003A4 B004                <1> 	mov al, 4
   380 000003A6 E621                <1> 	out 0x21, al
   381 000003A8 B002                <1> 	mov al, 2
   382 000003AA E6A1                <1> 	out 0xA1, al
   383 000003AC B001                <1> 	mov al, 0x1
   384 000003AE E621                <1> 	out 0x21, al
   385 000003B0 B001                <1> 	mov al, 0x1
   386 000003B2 E6A1                <1> 	out 0xA1, al
   387                              <1> 	;masks are set to zero so as not to mask
   388 000003B4 30C0                <1> 	xor al, al
   389 000003B6 E621                <1> 	out 0x21, al
   390 000003B8 30C0                <1> 	xor al, al
   391 000003BA E6A1                <1> 	out 0xA1, al
   392 000003BC B020                <1> 	mov al, 0x20
   393 000003BE E6A0                <1> 	out 0xA0, al
   394 000003C0 E620                <1> 	out 0x20, al
   395                              <1> 	;And now to initialize the fpu
   396 000003C2 0F20E0              <1> 	mov eax, cr4
   397 000003C5 0D00020000          <1> 	or eax, 0x200
   398 000003CA 0F22E0              <1> 	mov cr4, eax
   399 000003CD B87F0B0000          <1> 	mov eax, 0xB7F
   400 000003D2 50                  <1> 	push eax
   401 000003D3 D92C24              <1> 	fldcw [esp]
   402 000003D6 58                  <1> 	pop eax
   403 000003D7 31C0                <1> 	xor eax, eax
   404 000003D9 31C9                <1> 	xor ecx, ecx
   405                              <1> 
   406 000003DB A1[2D040000]        <1> 	mov eax, [newcodecache]
   407 000003E0 C1E804              <1> 	shr eax, 4
   408 000003E3 A3[29040000]        <1> 	mov [basecache], eax
   409                              <1> 	
   410 000003E8 89C3                <1> 	mov ebx, eax
   411 000003EA C1E304              <1> 	shl ebx, 4
   412 000003ED 8B3D[A2850000]      <1> 	mov edi, [physbaseptr]
   413 000003F3 29DF                <1> 	sub edi, ebx
   414 000003F5 893D[A2850000]      <1> 	mov [physbaseptr], edi
   415                              <1> 	
   416 000003FB BE[00000000]        <1> 	mov esi, bssstart
   417 00000400 31C0                <1> 	xor eax, eax
   418                              <1> clearkernelbuffers:
   419 00000402 8906                <1> 	mov [esi], eax
   420 00000404 81C604000000        <1> 	add esi, 4
   421 0000040A 81FE[67A22000]      <1> 	cmp esi, bssend
   422 00000410 72F0                <1> 	jb clearkernelbuffers
   423 00000412 803D[8A010000]01    <1> 	cmp byte [guinodo], 1
   424 00000419 7405                <1> 	je guidonot
   425 0000041B E93C4A0000          <1> 	jmp gui
   426                              <1> guidonot:
   427 00000420 E9092B0000          <1> 	jmp os
   428                              <1> 	
   429 00000425 00000000            <1> user2codepoint dw 0,0
   430 00000429 00000000            <1> basecache dd 0
   431 0000042D 00001000            <1> newcodecache dd 0x100000
   432                              <1> 
   433 00000431 0A0D4B696C6C207468- <1> surekillmsg db 10,13,"Kill this application?",10,13,0
   434 0000043A 6973206170706C6963- <1>
   435 00000443 6174696F6E3F0A0D00  <1>
   436                              <1> 
   437                              <1> timerinterrupt:
   438 0000044C 803D[E56B0000]01    <1> 	cmp byte [threadson], 1
   439 00000453 7505                <1> 	jne userinterrupt
   440 00000455 E9456D0000          <1> 	jmp threadswitch
   441                              <1> userinterrupt:		;checks for escape, if pressed, it quits the program currently running
   442 0000045A FA                  <1> 	cli
   443 0000045B 803D[E56B0000]00    <1> 	cmp byte [threadson], 0
   444 00000462 0F8432000000        <1> 	je near handled3
   445 00000468 60                  <1> 	pusha
   446 00000469 E464                <1> 	in al, 64h
   447 0000046B A820                <1> 	test al, 20h
   448 0000046D 752A                <1> 	jnz handled2
   449 0000046F E460                <1> 	in al, 60h
   450 00000471 3C01                <1> 	cmp al, 1		;escape
   451 00000473 7405                <1> 	je userint
   452 00000475 E91F000000          <1> 	jmp handled2
   453                              <1> userint:
   454 0000047A BE[31040000]        <1> 	mov esi, surekillmsg
   455 0000047F E877250000          <1> 	call print
   456 00000484 FB                  <1> 	sti
   457 00000485 E81D250000          <1> 	call getkey
   458 0000048A 3C79                <1> 	cmp al, 'y'
   459 0000048C 750B                <1> 	jne handled2
   460 0000048E B020                <1> 	mov al, 0x20
   461 00000490 E620                <1> 	out 0x20, al
   462 00000492 61                  <1> 	popa
   463 00000493 FB                  <1> 	sti
   464 00000494 E9B92B0000          <1> 	jmp nwcmd
   465                              <1> handled2:
   466 00000499 61                  <1> 	popa
   467                              <1> handled3:
   468 0000049A FB                  <1> 	sti
   469                              <1> handled:
   470 0000049B 50                  <1> 	push eax
   471 0000049C B020                <1> 	mov al, 0x20
   472 0000049E E620                <1> 	out 0x20, al
   473 000004A0 58                  <1> 	pop eax
   474 000004A1 CF                  <1> 	iret
   475 000004A2 EBFE                <1> 	jmp $
   476                              <1> [BITS 16]
   477                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   478                              <1> ;	16-bit limit/32-bit linear base address of GDT and IDT
   479                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   480 000004A4 3700                <1> gdtr:	dw gdt_end - gdt - 1	; GDT limit
   481 000004A6 00000000            <1> 	dd 0    		; filled with linear, physical address of GDT
   482                              <1> 
   483 000004AA FF07                <1> idtr:	dw idt_end - idt - 1	; IDT limit
   484 000004AC 00000000            <1> 	dd 0			; filled with linear, physical address of IDT
   485                              <1> 
   486                              <1> 
   487 000004B0 0000                <1> gdt:	dw 0			; limit 15:0
   488 000004B2 0000                <1> 	dw 0			; base 15:0
   489 000004B4 00                  <1> 	db 0			; base 23:16
   490 000004B5 00                  <1> 	db 0			; type
   491 000004B6 00                  <1> 	db 0			; limit 19:16, flags
   492 000004B7 00                  <1> 	db 0			; base 31:24
   493                              <1> ; linear data segment descriptor
   494                              <1> LINEAR_SEL	equ	$-gdt
   495 000004B8 FFFF                <1> 	dw 0xFFFF		; limit 0xFFFFF
   496 000004BA 0000                <1> 	dw 0			; base for this one is always 0
   497 000004BC 00                  <1> 	db 0
   498 000004BD 92                  <1> 	db 0x92			; present, ring 0, data, expand-up, writable
   499 000004BE CF                  <1> 	db 0xCF			; page-granular, 32-bit
   500 000004BF 00                  <1> 	db 0
   501                              <1> ; code segment descriptor
   502                              <1> SYS_CODE_SEL	equ	$-gdt
   503 000004C0 FFFF                <1> gdt2:	dw 0xFFFF
   504 000004C2 0000                <1> 	dw 0			; (base gets set above)
   505 000004C4 00                  <1> 	db 0
   506 000004C5 9A                  <1> 	db 0x9A			; present, ring 0, code, non-conforming, readable
   507 000004C6 CF                  <1> 	db 0xCF
   508 000004C7 00                  <1> 	db 0
   509                              <1> ; data segment descriptor
   510                              <1> SYS_DATA_SEL	equ	$-gdt
   511 000004C8 FFFF                <1> gdt3:	dw 0xFFFF
   512 000004CA 0000                <1> 	dw 0			; (base gets set above)
   513 000004CC 00                  <1> 	db 0
   514 000004CD 92                  <1> 	db 0x92			; present, ring 0, data, expand-up, writable
   515 000004CE CF                  <1> 	db 0xCF
   516 000004CF 00                  <1> 	db 0
   517                              <1> STACK_SEL	equ	$-gdt	;;this is no longer used for various reasons
   518 000004D0 0100                <1> gdts:	dw 1
   519 000004D2 0000                <1> 	dw 0			; (base gets set above)
   520 000004D4 00                  <1> 	db 0
   521 000004D5 92                  <1> 	db 0x92			; present, ring 0, data, expand-up, writable
   522 000004D6 C0                  <1> 	db 0xC0
   523 000004D7 00                  <1> 	db 0
   524                              <1> NEW_CODE_SEL	equ	$-gdt
   525 000004D8 FFFF                <1> gdt4:	dw 0xFFFF
   526 000004DA 0000                <1> 	dw 0			; (base gets set above)
   527 000004DC 00                  <1> 	db 0
   528 000004DD 9A                  <1> 	db 0x9A			; present, ring 0, code, non-conforming, readable
   529 000004DE CF                  <1> 	db 0xCF
   530 000004DF 00                  <1> 	db 0
   531                              <1> ; data segment descriptor
   532                              <1> NEW_DATA_SEL	equ	$-gdt
   533 000004E0 FFFF                <1> gdt5:	dw 0xFFFF
   534 000004E2 0000                <1> 	dw 0			; (base gets set above)
   535 000004E4 00                  <1> 	db 0
   536 000004E5 92                  <1> 	db 0x92			; present, ring 0, data, expand-up, writable
   537 000004E6 CF                  <1> 	db 0xCF
   538 000004E7 00                  <1> 	db 0
   539                              <1> gdt_end:
   540                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   541                              <1> ;	interrupt descriptor table (IDT)
   542                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   543                              <1> ; 32 reserved interrupts:
   544                              <1> idt:	
   545                              <1> %assign i 0
   546                              <1> %rep    33
   547                              <1> 		dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   548                              <1> %assign i i+1
   549                              <1> %endrep
   550 000004E8 [E80C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   551                              <2> %assign i i+1
   552 000004F0 [F50C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   553                              <2> %assign i i+1
   554 000004F8 [020D]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   555                              <2> %assign i i+1
   556 00000500 [0F0D]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   557                              <2> %assign i i+1
   558 00000508 [1C0D]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   559                              <2> %assign i i+1
   560 00000510 [290D]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   561                              <2> %assign i i+1
   562 00000518 [360D]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   563                              <2> %assign i i+1
   564 00000520 [430D]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   565                              <2> %assign i i+1
   566 00000528 [500D]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   567                              <2> %assign i i+1
   568 00000530 [5D0D]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   569                              <2> %assign i i+1
   570 00000538 [6A0D]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   571                              <2> %assign i i+1
   572 00000540 [770D]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   573                              <2> %assign i i+1
   574 00000548 [840D]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   575                              <2> %assign i i+1
   576 00000550 [910D]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   577                              <2> %assign i i+1
   578 00000558 [9E0D]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   579                              <2> %assign i i+1
   580 00000560 [AB0D]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   581                              <2> %assign i i+1
   582 00000568 [B80D]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   583                              <2> %assign i i+1
   584 00000570 [C50D]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   585                              <2> %assign i i+1
   586 00000578 [D20D]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   587                              <2> %assign i i+1
   588 00000580 [DF0D]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   589                              <2> %assign i i+1
   590 00000588 [EC0D]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   591                              <2> %assign i i+1
   592 00000590 [F90D]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   593                              <2> %assign i i+1
   594 00000598 [060E]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   595                              <2> %assign i i+1
   596 000005A0 [130E]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   597                              <2> %assign i i+1
   598 000005A8 [200E]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   599                              <2> %assign i i+1
   600 000005B0 [2D0E]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   601                              <2> %assign i i+1
   602 000005B8 [3A0E]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   603                              <2> %assign i i+1
   604 000005C0 [470E]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   605                              <2> %assign i i+1
   606 000005C8 [540E]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   607                              <2> %assign i i+1
   608 000005D0 [610E]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   609                              <2> %assign i i+1
   610 000005D8 [6E0E]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   611                              <2> %assign i i+1
   612 000005E0 [7B0E]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   613                              <2> %assign i i+1
   614 000005E8 [880E]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   615                              <2> %assign i i+1
   616                              <1> 		;dw handled,NEW_CODE_SEL,0x8E00,0
   617 000005F0 [552E]2800008E0000  <1> 		dw int21h,NEW_CODE_SEL,0x8E00,0
   618                              <1> %assign i 0x22
   619                              <1> %rep 14
   620                              <1> 		dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   621                              <1> 		;dw handled,NEW_CODE_SEL,0x8E00,0
   622                              <1> %assign i +1
   623                              <1> %endrep
   624 000005F8 [A20E]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   625                              <2> 
   626                              <2> %assign i +1
   627 00000600 [F50C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   628                              <2> 
   629                              <2> %assign i +1
   630 00000608 [F50C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   631                              <2> 
   632                              <2> %assign i +1
   633 00000610 [F50C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   634                              <2> 
   635                              <2> %assign i +1
   636 00000618 [F50C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   637                              <2> 
   638                              <2> %assign i +1
   639 00000620 [F50C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   640                              <2> 
   641                              <2> %assign i +1
   642 00000628 [F50C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   643                              <2> 
   644                              <2> %assign i +1
   645 00000630 [F50C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   646                              <2> 
   647                              <2> %assign i +1
   648 00000638 [F50C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   649                              <2> 
   650                              <2> %assign i +1
   651 00000640 [F50C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   652                              <2> 
   653                              <2> %assign i +1
   654 00000648 [F50C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   655                              <2> 
   656                              <2> %assign i +1
   657 00000650 [F50C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   658                              <2> 
   659                              <2> %assign i +1
   660 00000658 [F50C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   661                              <2> 
   662                              <2> %assign i +1
   663 00000660 [F50C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   664                              <2> 
   665                              <2> %assign i +1
   666                              <1> ;INT 30h for os use and 3rd party use:
   667 00000668 [0827]2800008E0000  <1> 		dw newints,NEW_CODE_SEL,0x8E00,0
   668                              <1> ;here are all the irq's
   669                              <1> %assign i 0x31
   670                              <1> %rep 15
   671                              <1> 		dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   672                              <1> 		;dw handled,NEW_CODE_SEL,0x8E00,0
   673                              <1> %assign i +1
   674                              <1> %endrep
   675 00000670 [650F]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   676                              <2> 
   677                              <2> %assign i +1
   678 00000678 [F50C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   679                              <2> 
   680                              <2> %assign i +1
   681 00000680 [F50C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   682                              <2> 
   683                              <2> %assign i +1
   684 00000688 [F50C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   685                              <2> 
   686                              <2> %assign i +1
   687 00000690 [F50C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   688                              <2> 
   689                              <2> %assign i +1
   690 00000698 [F50C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   691                              <2> 
   692                              <2> %assign i +1
   693 000006A0 [F50C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   694                              <2> 
   695                              <2> %assign i +1
   696 000006A8 [F50C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   697                              <2> 
   698                              <2> %assign i +1
   699 000006B0 [F50C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   700                              <2> 
   701                              <2> %assign i +1
   702 000006B8 [F50C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   703                              <2> 
   704                              <2> %assign i +1
   705 000006C0 [F50C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   706                              <2> 
   707                              <2> %assign i +1
   708 000006C8 [F50C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   709                              <2> 
   710                              <2> %assign i +1
   711 000006D0 [F50C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   712                              <2> 
   713                              <2> %assign i +1
   714 000006D8 [F50C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   715                              <2> 
   716                              <2> %assign i +1
   717 000006E0 [F50C]2800008E0000  <2>  dw unhand + i*13,NEW_CODE_SEL,0x8E00,0
   718                              <2> 
   719                              <2> %assign i +1
   720 000006E8 [4C04]2800008E0000  <1> 		dw timerinterrupt,NEW_CODE_SEL,0x8E00,0
   721 000006F0 [5A04]2800008E0000  <1> 		dw userinterrupt,NEW_CODE_SEL,0x8E00,0
   722                              <1> ;%assign i 0x42
   723                              <1> %rep 14
   724                              <1> 		;dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   725                              <1> 		dw handled,NEW_CODE_SEL,0x8E00,0
   726                              <1> ;%assign i +1
   727                              <1> %endrep
   728                              <2> 
   729 000006F8 [9B04]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   730                              <2> 
   731                              <2> 
   732 00000700 [9B04]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   733                              <2> 
   734                              <2> 
   735 00000708 [9B04]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   736                              <2> 
   737                              <2> 
   738 00000710 [9B04]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   739                              <2> 
   740                              <2> 
   741 00000718 [9B04]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   742                              <2> 
   743                              <2> 
   744 00000720 [9B04]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   745                              <2> 
   746                              <2> 
   747 00000728 [9B04]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   748                              <2> 
   749                              <2> 
   750 00000730 [9B04]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   751                              <2> 
   752                              <2> 
   753 00000738 [9B04]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   754                              <2> 
   755                              <2> 
   756 00000740 [9B04]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   757                              <2> 
   758                              <2> 
   759 00000748 [9B04]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   760                              <2> 
   761                              <2> 
   762 00000750 [9B04]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   763                              <2> 
   764                              <2> 
   765 00000758 [9B04]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   766                              <2> 
   767                              <2> 
   768 00000760 [9B04]2800008E0000  <2>  dw handled,NEW_CODE_SEL,0x8E00,0
   769                              <2> 
   770                              <1> ;This brings me up to something
   771                              <1> %assign i 0x50
   772                              <1> %rep 176
   773                              <1> 		dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   774                              <1> 		;dw handled,NEW_CODE_SEL,0x8E00,0
   775                              <1> %assign i +1
   776                              <1> %endrep
   777 00000768 [F810]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   778                              <2> 
   779                              <2> %assign i +1
   780 00000770 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   781                              <2> 
   782                              <2> %assign i +1
   783 00000778 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   784                              <2> 
   785                              <2> %assign i +1
   786 00000780 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   787                              <2> 
   788                              <2> %assign i +1
   789 00000788 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   790                              <2> 
   791                              <2> %assign i +1
   792 00000790 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   793                              <2> 
   794                              <2> %assign i +1
   795 00000798 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   796                              <2> 
   797                              <2> %assign i +1
   798 000007A0 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   799                              <2> 
   800                              <2> %assign i +1
   801 000007A8 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   802                              <2> 
   803                              <2> %assign i +1
   804 000007B0 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   805                              <2> 
   806                              <2> %assign i +1
   807 000007B8 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   808                              <2> 
   809                              <2> %assign i +1
   810 000007C0 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   811                              <2> 
   812                              <2> %assign i +1
   813 000007C8 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   814                              <2> 
   815                              <2> %assign i +1
   816 000007D0 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   817                              <2> 
   818                              <2> %assign i +1
   819 000007D8 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   820                              <2> 
   821                              <2> %assign i +1
   822 000007E0 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   823                              <2> 
   824                              <2> %assign i +1
   825 000007E8 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   826                              <2> 
   827                              <2> %assign i +1
   828 000007F0 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   829                              <2> 
   830                              <2> %assign i +1
   831 000007F8 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   832                              <2> 
   833                              <2> %assign i +1
   834 00000800 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   835                              <2> 
   836                              <2> %assign i +1
   837 00000808 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   838                              <2> 
   839                              <2> %assign i +1
   840 00000810 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   841                              <2> 
   842                              <2> %assign i +1
   843 00000818 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   844                              <2> 
   845                              <2> %assign i +1
   846 00000820 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   847                              <2> 
   848                              <2> %assign i +1
   849 00000828 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   850                              <2> 
   851                              <2> %assign i +1
   852 00000830 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   853                              <2> 
   854                              <2> %assign i +1
   855 00000838 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   856                              <2> 
   857                              <2> %assign i +1
   858 00000840 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   859                              <2> 
   860                              <2> %assign i +1
   861 00000848 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   862                              <2> 
   863                              <2> %assign i +1
   864 00000850 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   865                              <2> 
   866                              <2> %assign i +1
   867 00000858 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   868                              <2> 
   869                              <2> %assign i +1
   870 00000860 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   871                              <2> 
   872                              <2> %assign i +1
   873 00000868 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   874                              <2> 
   875                              <2> %assign i +1
   876 00000870 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   877                              <2> 
   878                              <2> %assign i +1
   879 00000878 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   880                              <2> 
   881                              <2> %assign i +1
   882 00000880 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   883                              <2> 
   884                              <2> %assign i +1
   885 00000888 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   886                              <2> 
   887                              <2> %assign i +1
   888 00000890 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   889                              <2> 
   890                              <2> %assign i +1
   891 00000898 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   892                              <2> 
   893                              <2> %assign i +1
   894 000008A0 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   895                              <2> 
   896                              <2> %assign i +1
   897 000008A8 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   898                              <2> 
   899                              <2> %assign i +1
   900 000008B0 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   901                              <2> 
   902                              <2> %assign i +1
   903 000008B8 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   904                              <2> 
   905                              <2> %assign i +1
   906 000008C0 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   907                              <2> 
   908                              <2> %assign i +1
   909 000008C8 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   910                              <2> 
   911                              <2> %assign i +1
   912 000008D0 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   913                              <2> 
   914                              <2> %assign i +1
   915 000008D8 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   916                              <2> 
   917                              <2> %assign i +1
   918 000008E0 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   919                              <2> 
   920                              <2> %assign i +1
   921 000008E8 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   922                              <2> 
   923                              <2> %assign i +1
   924 000008F0 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   925                              <2> 
   926                              <2> %assign i +1
   927 000008F8 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   928                              <2> 
   929                              <2> %assign i +1
   930 00000900 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   931                              <2> 
   932                              <2> %assign i +1
   933 00000908 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   934                              <2> 
   935                              <2> %assign i +1
   936 00000910 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   937                              <2> 
   938                              <2> %assign i +1
   939 00000918 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   940                              <2> 
   941                              <2> %assign i +1
   942 00000920 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   943                              <2> 
   944                              <2> %assign i +1
   945 00000928 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   946                              <2> 
   947                              <2> %assign i +1
   948 00000930 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   949                              <2> 
   950                              <2> %assign i +1
   951 00000938 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   952                              <2> 
   953                              <2> %assign i +1
   954 00000940 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   955                              <2> 
   956                              <2> %assign i +1
   957 00000948 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   958                              <2> 
   959                              <2> %assign i +1
   960 00000950 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   961                              <2> 
   962                              <2> %assign i +1
   963 00000958 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   964                              <2> 
   965                              <2> %assign i +1
   966 00000960 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   967                              <2> 
   968                              <2> %assign i +1
   969 00000968 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   970                              <2> 
   971                              <2> %assign i +1
   972 00000970 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   973                              <2> 
   974                              <2> %assign i +1
   975 00000978 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   976                              <2> 
   977                              <2> %assign i +1
   978 00000980 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   979                              <2> 
   980                              <2> %assign i +1
   981 00000988 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   982                              <2> 
   983                              <2> %assign i +1
   984 00000990 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   985                              <2> 
   986                              <2> %assign i +1
   987 00000998 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   988                              <2> 
   989                              <2> %assign i +1
   990 000009A0 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   991                              <2> 
   992                              <2> %assign i +1
   993 000009A8 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   994                              <2> 
   995                              <2> %assign i +1
   996 000009B0 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
   997                              <2> 
   998                              <2> %assign i +1
   999 000009B8 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1000                              <2> 
  1001                              <2> %assign i +1
  1002 000009C0 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1003                              <2> 
  1004                              <2> %assign i +1
  1005 000009C8 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1006                              <2> 
  1007                              <2> %assign i +1
  1008 000009D0 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1009                              <2> 
  1010                              <2> %assign i +1
  1011 000009D8 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1012                              <2> 
  1013                              <2> %assign i +1
  1014 000009E0 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1015                              <2> 
  1016                              <2> %assign i +1
  1017 000009E8 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1018                              <2> 
  1019                              <2> %assign i +1
  1020 000009F0 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1021                              <2> 
  1022                              <2> %assign i +1
  1023 000009F8 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1024                              <2> 
  1025                              <2> %assign i +1
  1026 00000A00 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1027                              <2> 
  1028                              <2> %assign i +1
  1029 00000A08 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1030                              <2> 
  1031                              <2> %assign i +1
  1032 00000A10 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1033                              <2> 
  1034                              <2> %assign i +1
  1035 00000A18 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1036                              <2> 
  1037                              <2> %assign i +1
  1038 00000A20 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1039                              <2> 
  1040                              <2> %assign i +1
  1041 00000A28 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1042                              <2> 
  1043                              <2> %assign i +1
  1044 00000A30 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1045                              <2> 
  1046                              <2> %assign i +1
  1047 00000A38 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1048                              <2> 
  1049                              <2> %assign i +1
  1050 00000A40 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1051                              <2> 
  1052                              <2> %assign i +1
  1053 00000A48 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1054                              <2> 
  1055                              <2> %assign i +1
  1056 00000A50 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1057                              <2> 
  1058                              <2> %assign i +1
  1059 00000A58 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1060                              <2> 
  1061                              <2> %assign i +1
  1062 00000A60 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1063                              <2> 
  1064                              <2> %assign i +1
  1065 00000A68 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1066                              <2> 
  1067                              <2> %assign i +1
  1068 00000A70 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1069                              <2> 
  1070                              <2> %assign i +1
  1071 00000A78 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1072                              <2> 
  1073                              <2> %assign i +1
  1074 00000A80 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1075                              <2> 
  1076                              <2> %assign i +1
  1077 00000A88 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1078                              <2> 
  1079                              <2> %assign i +1
  1080 00000A90 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1081                              <2> 
  1082                              <2> %assign i +1
  1083 00000A98 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1084                              <2> 
  1085                              <2> %assign i +1
  1086 00000AA0 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1087                              <2> 
  1088                              <2> %assign i +1
  1089 00000AA8 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1090                              <2> 
  1091                              <2> %assign i +1
  1092 00000AB0 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1093                              <2> 
  1094                              <2> %assign i +1
  1095 00000AB8 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1096                              <2> 
  1097                              <2> %assign i +1
  1098 00000AC0 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1099                              <2> 
  1100                              <2> %assign i +1
  1101 00000AC8 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1102                              <2> 
  1103                              <2> %assign i +1
  1104 00000AD0 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1105                              <2> 
  1106                              <2> %assign i +1
  1107 00000AD8 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1108                              <2> 
  1109                              <2> %assign i +1
  1110 00000AE0 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1111                              <2> 
  1112                              <2> %assign i +1
  1113 00000AE8 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1114                              <2> 
  1115                              <2> %assign i +1
  1116 00000AF0 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1117                              <2> 
  1118                              <2> %assign i +1
  1119 00000AF8 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1120                              <2> 
  1121                              <2> %assign i +1
  1122 00000B00 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1123                              <2> 
  1124                              <2> %assign i +1
  1125 00000B08 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1126                              <2> 
  1127                              <2> %assign i +1
  1128 00000B10 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1129                              <2> 
  1130                              <2> %assign i +1
  1131 00000B18 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1132                              <2> 
  1133                              <2> %assign i +1
  1134 00000B20 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1135                              <2> 
  1136                              <2> %assign i +1
  1137 00000B28 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1138                              <2> 
  1139                              <2> %assign i +1
  1140 00000B30 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1141                              <2> 
  1142                              <2> %assign i +1
  1143 00000B38 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1144                              <2> 
  1145                              <2> %assign i +1
  1146 00000B40 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1147                              <2> 
  1148                              <2> %assign i +1
  1149 00000B48 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1150                              <2> 
  1151                              <2> %assign i +1
  1152 00000B50 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1153                              <2> 
  1154                              <2> %assign i +1
  1155 00000B58 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1156                              <2> 
  1157                              <2> %assign i +1
  1158 00000B60 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1159                              <2> 
  1160                              <2> %assign i +1
  1161 00000B68 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1162                              <2> 
  1163                              <2> %assign i +1
  1164 00000B70 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1165                              <2> 
  1166                              <2> %assign i +1
  1167 00000B78 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1168                              <2> 
  1169                              <2> %assign i +1
  1170 00000B80 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1171                              <2> 
  1172                              <2> %assign i +1
  1173 00000B88 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1174                              <2> 
  1175                              <2> %assign i +1
  1176 00000B90 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1177                              <2> 
  1178                              <2> %assign i +1
  1179 00000B98 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1180                              <2> 
  1181                              <2> %assign i +1
  1182 00000BA0 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1183                              <2> 
  1184                              <2> %assign i +1
  1185 00000BA8 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1186                              <2> 
  1187                              <2> %assign i +1
  1188 00000BB0 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1189                              <2> 
  1190                              <2> %assign i +1
  1191 00000BB8 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1192                              <2> 
  1193                              <2> %assign i +1
  1194 00000BC0 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1195                              <2> 
  1196                              <2> %assign i +1
  1197 00000BC8 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1198                              <2> 
  1199                              <2> %assign i +1
  1200 00000BD0 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1201                              <2> 
  1202                              <2> %assign i +1
  1203 00000BD8 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1204                              <2> 
  1205                              <2> %assign i +1
  1206 00000BE0 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1207                              <2> 
  1208                              <2> %assign i +1
  1209 00000BE8 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1210                              <2> 
  1211                              <2> %assign i +1
  1212 00000BF0 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1213                              <2> 
  1214                              <2> %assign i +1
  1215 00000BF8 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1216                              <2> 
  1217                              <2> %assign i +1
  1218 00000C00 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1219                              <2> 
  1220                              <2> %assign i +1
  1221 00000C08 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1222                              <2> 
  1223                              <2> %assign i +1
  1224 00000C10 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1225                              <2> 
  1226                              <2> %assign i +1
  1227 00000C18 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1228                              <2> 
  1229                              <2> %assign i +1
  1230 00000C20 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1231                              <2> 
  1232                              <2> %assign i +1
  1233 00000C28 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1234                              <2> 
  1235                              <2> %assign i +1
  1236 00000C30 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1237                              <2> 
  1238                              <2> %assign i +1
  1239 00000C38 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1240                              <2> 
  1241                              <2> %assign i +1
  1242 00000C40 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1243                              <2> 
  1244                              <2> %assign i +1
  1245 00000C48 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1246                              <2> 
  1247                              <2> %assign i +1
  1248 00000C50 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1249                              <2> 
  1250                              <2> %assign i +1
  1251 00000C58 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1252                              <2> 
  1253                              <2> %assign i +1
  1254 00000C60 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1255                              <2> 
  1256                              <2> %assign i +1
  1257 00000C68 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1258                              <2> 
  1259                              <2> %assign i +1
  1260 00000C70 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1261                              <2> 
  1262                              <2> %assign i +1
  1263 00000C78 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1264                              <2> 
  1265                              <2> %assign i +1
  1266 00000C80 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1267                              <2> 
  1268                              <2> %assign i +1
  1269 00000C88 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1270                              <2> 
  1271                              <2> %assign i +1
  1272 00000C90 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1273                              <2> 
  1274                              <2> %assign i +1
  1275 00000C98 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1276                              <2> 
  1277                              <2> %assign i +1
  1278 00000CA0 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1279                              <2> 
  1280                              <2> %assign i +1
  1281 00000CA8 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1282                              <2> 
  1283                              <2> %assign i +1
  1284 00000CB0 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1285                              <2> 
  1286                              <2> %assign i +1
  1287 00000CB8 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1288                              <2> 
  1289                              <2> %assign i +1
  1290 00000CC0 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1291                              <2> 
  1292                              <2> %assign i +1
  1293 00000CC8 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1294                              <2> 
  1295                              <2> %assign i +1
  1296 00000CD0 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1297                              <2> 
  1298                              <2> %assign i +1
  1299 00000CD8 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1300                              <2> 
  1301                              <2> %assign i +1
  1302 00000CE0 [F50C]2800008E0000  <2>  dw unhand + i*13, NEW_CODE_SEL,0x8E00,0
  1303                              <2> 
  1304                              <2> %assign i +1
  1305                              <1> idt_end:
  1306                              <1> [BITS 32]
  1307                                  [BITS 32]
  1308                                  	%include 'source/exception.asm'
  1309                              <1> 
  1310                              <1> unhand:	
  1311                              <1> 	%assign i 0
  1312                              <1> 	%rep 256
  1313                              <1> 	cli
  1314                              <1> 	mov byte [intprob], i
  1315                              <1> 	jmp unhand2
  1316                              <1> 	%assign i i+1
  1317                              <1> 	%endrep
  1318 00000CE8 FA                  <2>  cli
  1319 00000CE9 C605[E31C0000]00    <2>  mov byte [intprob], i
  1320 00000CF0 E9F30C0000          <2>  jmp unhand2
  1321                              <2>  %assign i i+1
  1322 00000CF5 FA                  <2>  cli
  1323 00000CF6 C605[E31C0000]01    <2>  mov byte [intprob], i
  1324 00000CFD E9E60C0000          <2>  jmp unhand2
  1325                              <2>  %assign i i+1
  1326 00000D02 FA                  <2>  cli
  1327 00000D03 C605[E31C0000]02    <2>  mov byte [intprob], i
  1328 00000D0A E9D90C0000          <2>  jmp unhand2
  1329                              <2>  %assign i i+1
  1330 00000D0F FA                  <2>  cli
  1331 00000D10 C605[E31C0000]03    <2>  mov byte [intprob], i
  1332 00000D17 E9CC0C0000          <2>  jmp unhand2
  1333                              <2>  %assign i i+1
  1334 00000D1C FA                  <2>  cli
  1335 00000D1D C605[E31C0000]04    <2>  mov byte [intprob], i
  1336 00000D24 E9BF0C0000          <2>  jmp unhand2
  1337                              <2>  %assign i i+1
  1338 00000D29 FA                  <2>  cli
  1339 00000D2A C605[E31C0000]05    <2>  mov byte [intprob], i
  1340 00000D31 E9B20C0000          <2>  jmp unhand2
  1341                              <2>  %assign i i+1
  1342 00000D36 FA                  <2>  cli
  1343 00000D37 C605[E31C0000]06    <2>  mov byte [intprob], i
  1344 00000D3E E9A50C0000          <2>  jmp unhand2
  1345                              <2>  %assign i i+1
  1346 00000D43 FA                  <2>  cli
  1347 00000D44 C605[E31C0000]07    <2>  mov byte [intprob], i
  1348 00000D4B E9980C0000          <2>  jmp unhand2
  1349                              <2>  %assign i i+1
  1350 00000D50 FA                  <2>  cli
  1351 00000D51 C605[E31C0000]08    <2>  mov byte [intprob], i
  1352 00000D58 E98B0C0000          <2>  jmp unhand2
  1353                              <2>  %assign i i+1
  1354 00000D5D FA                  <2>  cli
  1355 00000D5E C605[E31C0000]09    <2>  mov byte [intprob], i
  1356 00000D65 E97E0C0000          <2>  jmp unhand2
  1357                              <2>  %assign i i+1
  1358 00000D6A FA                  <2>  cli
  1359 00000D6B C605[E31C0000]0A    <2>  mov byte [intprob], i
  1360 00000D72 E9710C0000          <2>  jmp unhand2
  1361                              <2>  %assign i i+1
  1362 00000D77 FA                  <2>  cli
  1363 00000D78 C605[E31C0000]0B    <2>  mov byte [intprob], i
  1364 00000D7F E9640C0000          <2>  jmp unhand2
  1365                              <2>  %assign i i+1
  1366 00000D84 FA                  <2>  cli
  1367 00000D85 C605[E31C0000]0C    <2>  mov byte [intprob], i
  1368 00000D8C E9570C0000          <2>  jmp unhand2
  1369                              <2>  %assign i i+1
  1370 00000D91 FA                  <2>  cli
  1371 00000D92 C605[E31C0000]0D    <2>  mov byte [intprob], i
  1372 00000D99 E94A0C0000          <2>  jmp unhand2
  1373                              <2>  %assign i i+1
  1374 00000D9E FA                  <2>  cli
  1375 00000D9F C605[E31C0000]0E    <2>  mov byte [intprob], i
  1376 00000DA6 E93D0C0000          <2>  jmp unhand2
  1377                              <2>  %assign i i+1
  1378 00000DAB FA                  <2>  cli
  1379 00000DAC C605[E31C0000]0F    <2>  mov byte [intprob], i
  1380 00000DB3 E9300C0000          <2>  jmp unhand2
  1381                              <2>  %assign i i+1
  1382 00000DB8 FA                  <2>  cli
  1383 00000DB9 C605[E31C0000]10    <2>  mov byte [intprob], i
  1384 00000DC0 E9230C0000          <2>  jmp unhand2
  1385                              <2>  %assign i i+1
  1386 00000DC5 FA                  <2>  cli
  1387 00000DC6 C605[E31C0000]11    <2>  mov byte [intprob], i
  1388 00000DCD E9160C0000          <2>  jmp unhand2
  1389                              <2>  %assign i i+1
  1390 00000DD2 FA                  <2>  cli
  1391 00000DD3 C605[E31C0000]12    <2>  mov byte [intprob], i
  1392 00000DDA E9090C0000          <2>  jmp unhand2
  1393                              <2>  %assign i i+1
  1394 00000DDF FA                  <2>  cli
  1395 00000DE0 C605[E31C0000]13    <2>  mov byte [intprob], i
  1396 00000DE7 E9FC0B0000          <2>  jmp unhand2
  1397                              <2>  %assign i i+1
  1398 00000DEC FA                  <2>  cli
  1399 00000DED C605[E31C0000]14    <2>  mov byte [intprob], i
  1400 00000DF4 E9EF0B0000          <2>  jmp unhand2
  1401                              <2>  %assign i i+1
  1402 00000DF9 FA                  <2>  cli
  1403 00000DFA C605[E31C0000]15    <2>  mov byte [intprob], i
  1404 00000E01 E9E20B0000          <2>  jmp unhand2
  1405                              <2>  %assign i i+1
  1406 00000E06 FA                  <2>  cli
  1407 00000E07 C605[E31C0000]16    <2>  mov byte [intprob], i
  1408 00000E0E E9D50B0000          <2>  jmp unhand2
  1409                              <2>  %assign i i+1
  1410 00000E13 FA                  <2>  cli
  1411 00000E14 C605[E31C0000]17    <2>  mov byte [intprob], i
  1412 00000E1B E9C80B0000          <2>  jmp unhand2
  1413                              <2>  %assign i i+1
  1414 00000E20 FA                  <2>  cli
  1415 00000E21 C605[E31C0000]18    <2>  mov byte [intprob], i
  1416 00000E28 E9BB0B0000          <2>  jmp unhand2
  1417                              <2>  %assign i i+1
  1418 00000E2D FA                  <2>  cli
  1419 00000E2E C605[E31C0000]19    <2>  mov byte [intprob], i
  1420 00000E35 E9AE0B0000          <2>  jmp unhand2
  1421                              <2>  %assign i i+1
  1422 00000E3A FA                  <2>  cli
  1423 00000E3B C605[E31C0000]1A    <2>  mov byte [intprob], i
  1424 00000E42 E9A10B0000          <2>  jmp unhand2
  1425                              <2>  %assign i i+1
  1426 00000E47 FA                  <2>  cli
  1427 00000E48 C605[E31C0000]1B    <2>  mov byte [intprob], i
  1428 00000E4F E9940B0000          <2>  jmp unhand2
  1429                              <2>  %assign i i+1
  1430 00000E54 FA                  <2>  cli
  1431 00000E55 C605[E31C0000]1C    <2>  mov byte [intprob], i
  1432 00000E5C E9870B0000          <2>  jmp unhand2
  1433                              <2>  %assign i i+1
  1434 00000E61 FA                  <2>  cli
  1435 00000E62 C605[E31C0000]1D    <2>  mov byte [intprob], i
  1436 00000E69 E97A0B0000          <2>  jmp unhand2
  1437                              <2>  %assign i i+1
  1438 00000E6E FA                  <2>  cli
  1439 00000E6F C605[E31C0000]1E    <2>  mov byte [intprob], i
  1440 00000E76 E96D0B0000          <2>  jmp unhand2
  1441                              <2>  %assign i i+1
  1442 00000E7B FA                  <2>  cli
  1443 00000E7C C605[E31C0000]1F    <2>  mov byte [intprob], i
  1444 00000E83 E9600B0000          <2>  jmp unhand2
  1445                              <2>  %assign i i+1
  1446 00000E88 FA                  <2>  cli
  1447 00000E89 C605[E31C0000]20    <2>  mov byte [intprob], i
  1448 00000E90 E9530B0000          <2>  jmp unhand2
  1449                              <2>  %assign i i+1
  1450 00000E95 FA                  <2>  cli
  1451 00000E96 C605[E31C0000]21    <2>  mov byte [intprob], i
  1452 00000E9D E9460B0000          <2>  jmp unhand2
  1453                              <2>  %assign i i+1
  1454 00000EA2 FA                  <2>  cli
  1455 00000EA3 C605[E31C0000]22    <2>  mov byte [intprob], i
  1456 00000EAA E9390B0000          <2>  jmp unhand2
  1457                              <2>  %assign i i+1
  1458 00000EAF FA                  <2>  cli
  1459 00000EB0 C605[E31C0000]23    <2>  mov byte [intprob], i
  1460 00000EB7 E92C0B0000          <2>  jmp unhand2
  1461                              <2>  %assign i i+1
  1462 00000EBC FA                  <2>  cli
  1463 00000EBD C605[E31C0000]24    <2>  mov byte [intprob], i
  1464 00000EC4 E91F0B0000          <2>  jmp unhand2
  1465                              <2>  %assign i i+1
  1466 00000EC9 FA                  <2>  cli
  1467 00000ECA C605[E31C0000]25    <2>  mov byte [intprob], i
  1468 00000ED1 E9120B0000          <2>  jmp unhand2
  1469                              <2>  %assign i i+1
  1470 00000ED6 FA                  <2>  cli
  1471 00000ED7 C605[E31C0000]26    <2>  mov byte [intprob], i
  1472 00000EDE E9050B0000          <2>  jmp unhand2
  1473                              <2>  %assign i i+1
  1474 00000EE3 FA                  <2>  cli
  1475 00000EE4 C605[E31C0000]27    <2>  mov byte [intprob], i
  1476 00000EEB E9F80A0000          <2>  jmp unhand2
  1477                              <2>  %assign i i+1
  1478 00000EF0 FA                  <2>  cli
  1479 00000EF1 C605[E31C0000]28    <2>  mov byte [intprob], i
  1480 00000EF8 E9EB0A0000          <2>  jmp unhand2
  1481                              <2>  %assign i i+1
  1482 00000EFD FA                  <2>  cli
  1483 00000EFE C605[E31C0000]29    <2>  mov byte [intprob], i
  1484 00000F05 E9DE0A0000          <2>  jmp unhand2
  1485                              <2>  %assign i i+1
  1486 00000F0A FA                  <2>  cli
  1487 00000F0B C605[E31C0000]2A    <2>  mov byte [intprob], i
  1488 00000F12 E9D10A0000          <2>  jmp unhand2
  1489                              <2>  %assign i i+1
  1490 00000F17 FA                  <2>  cli
  1491 00000F18 C605[E31C0000]2B    <2>  mov byte [intprob], i
  1492 00000F1F E9C40A0000          <2>  jmp unhand2
  1493                              <2>  %assign i i+1
  1494 00000F24 FA                  <2>  cli
  1495 00000F25 C605[E31C0000]2C    <2>  mov byte [intprob], i
  1496 00000F2C E9B70A0000          <2>  jmp unhand2
  1497                              <2>  %assign i i+1
  1498 00000F31 FA                  <2>  cli
  1499 00000F32 C605[E31C0000]2D    <2>  mov byte [intprob], i
  1500 00000F39 E9AA0A0000          <2>  jmp unhand2
  1501                              <2>  %assign i i+1
  1502 00000F3E FA                  <2>  cli
  1503 00000F3F C605[E31C0000]2E    <2>  mov byte [intprob], i
  1504 00000F46 E99D0A0000          <2>  jmp unhand2
  1505                              <2>  %assign i i+1
  1506 00000F4B FA                  <2>  cli
  1507 00000F4C C605[E31C0000]2F    <2>  mov byte [intprob], i
  1508 00000F53 E9900A0000          <2>  jmp unhand2
  1509                              <2>  %assign i i+1
  1510 00000F58 FA                  <2>  cli
  1511 00000F59 C605[E31C0000]30    <2>  mov byte [intprob], i
  1512 00000F60 E9830A0000          <2>  jmp unhand2
  1513                              <2>  %assign i i+1
  1514 00000F65 FA                  <2>  cli
  1515 00000F66 C605[E31C0000]31    <2>  mov byte [intprob], i
  1516 00000F6D E9760A0000          <2>  jmp unhand2
  1517                              <2>  %assign i i+1
  1518 00000F72 FA                  <2>  cli
  1519 00000F73 C605[E31C0000]32    <2>  mov byte [intprob], i
  1520 00000F7A E9690A0000          <2>  jmp unhand2
  1521                              <2>  %assign i i+1
  1522 00000F7F FA                  <2>  cli
  1523 00000F80 C605[E31C0000]33    <2>  mov byte [intprob], i
  1524 00000F87 E95C0A0000          <2>  jmp unhand2
  1525                              <2>  %assign i i+1
  1526 00000F8C FA                  <2>  cli
  1527 00000F8D C605[E31C0000]34    <2>  mov byte [intprob], i
  1528 00000F94 E94F0A0000          <2>  jmp unhand2
  1529                              <2>  %assign i i+1
  1530 00000F99 FA                  <2>  cli
  1531 00000F9A C605[E31C0000]35    <2>  mov byte [intprob], i
  1532 00000FA1 E9420A0000          <2>  jmp unhand2
  1533                              <2>  %assign i i+1
  1534 00000FA6 FA                  <2>  cli
  1535 00000FA7 C605[E31C0000]36    <2>  mov byte [intprob], i
  1536 00000FAE E9350A0000          <2>  jmp unhand2
  1537                              <2>  %assign i i+1
  1538 00000FB3 FA                  <2>  cli
  1539 00000FB4 C605[E31C0000]37    <2>  mov byte [intprob], i
  1540 00000FBB E9280A0000          <2>  jmp unhand2
  1541                              <2>  %assign i i+1
  1542 00000FC0 FA                  <2>  cli
  1543 00000FC1 C605[E31C0000]38    <2>  mov byte [intprob], i
  1544 00000FC8 E91B0A0000          <2>  jmp unhand2
  1545                              <2>  %assign i i+1
  1546 00000FCD FA                  <2>  cli
  1547 00000FCE C605[E31C0000]39    <2>  mov byte [intprob], i
  1548 00000FD5 E90E0A0000          <2>  jmp unhand2
  1549                              <2>  %assign i i+1
  1550 00000FDA FA                  <2>  cli
  1551 00000FDB C605[E31C0000]3A    <2>  mov byte [intprob], i
  1552 00000FE2 E9010A0000          <2>  jmp unhand2
  1553                              <2>  %assign i i+1
  1554 00000FE7 FA                  <2>  cli
  1555 00000FE8 C605[E31C0000]3B    <2>  mov byte [intprob], i
  1556 00000FEF E9F4090000          <2>  jmp unhand2
  1557                              <2>  %assign i i+1
  1558 00000FF4 FA                  <2>  cli
  1559 00000FF5 C605[E31C0000]3C    <2>  mov byte [intprob], i
  1560 00000FFC E9E7090000          <2>  jmp unhand2
  1561                              <2>  %assign i i+1
  1562 00001001 FA                  <2>  cli
  1563 00001002 C605[E31C0000]3D    <2>  mov byte [intprob], i
  1564 00001009 E9DA090000          <2>  jmp unhand2
  1565                              <2>  %assign i i+1
  1566 0000100E FA                  <2>  cli
  1567 0000100F C605[E31C0000]3E    <2>  mov byte [intprob], i
  1568 00001016 E9CD090000          <2>  jmp unhand2
  1569                              <2>  %assign i i+1
  1570 0000101B FA                  <2>  cli
  1571 0000101C C605[E31C0000]3F    <2>  mov byte [intprob], i
  1572 00001023 E9C0090000          <2>  jmp unhand2
  1573                              <2>  %assign i i+1
  1574 00001028 FA                  <2>  cli
  1575 00001029 C605[E31C0000]40    <2>  mov byte [intprob], i
  1576 00001030 E9B3090000          <2>  jmp unhand2
  1577                              <2>  %assign i i+1
  1578 00001035 FA                  <2>  cli
  1579 00001036 C605[E31C0000]41    <2>  mov byte [intprob], i
  1580 0000103D E9A6090000          <2>  jmp unhand2
  1581                              <2>  %assign i i+1
  1582 00001042 FA                  <2>  cli
  1583 00001043 C605[E31C0000]42    <2>  mov byte [intprob], i
  1584 0000104A E999090000          <2>  jmp unhand2
  1585                              <2>  %assign i i+1
  1586 0000104F FA                  <2>  cli
  1587 00001050 C605[E31C0000]43    <2>  mov byte [intprob], i
  1588 00001057 E98C090000          <2>  jmp unhand2
  1589                              <2>  %assign i i+1
  1590 0000105C FA                  <2>  cli
  1591 0000105D C605[E31C0000]44    <2>  mov byte [intprob], i
  1592 00001064 E97F090000          <2>  jmp unhand2
  1593                              <2>  %assign i i+1
  1594 00001069 FA                  <2>  cli
  1595 0000106A C605[E31C0000]45    <2>  mov byte [intprob], i
  1596 00001071 E972090000          <2>  jmp unhand2
  1597                              <2>  %assign i i+1
  1598 00001076 FA                  <2>  cli
  1599 00001077 C605[E31C0000]46    <2>  mov byte [intprob], i
  1600 0000107E E965090000          <2>  jmp unhand2
  1601                              <2>  %assign i i+1
  1602 00001083 FA                  <2>  cli
  1603 00001084 C605[E31C0000]47    <2>  mov byte [intprob], i
  1604 0000108B E958090000          <2>  jmp unhand2
  1605                              <2>  %assign i i+1
  1606 00001090 FA                  <2>  cli
  1607 00001091 C605[E31C0000]48    <2>  mov byte [intprob], i
  1608 00001098 E94B090000          <2>  jmp unhand2
  1609                              <2>  %assign i i+1
  1610 0000109D FA                  <2>  cli
  1611 0000109E C605[E31C0000]49    <2>  mov byte [intprob], i
  1612 000010A5 E93E090000          <2>  jmp unhand2
  1613                              <2>  %assign i i+1
  1614 000010AA FA                  <2>  cli
  1615 000010AB C605[E31C0000]4A    <2>  mov byte [intprob], i
  1616 000010B2 E931090000          <2>  jmp unhand2
  1617                              <2>  %assign i i+1
  1618 000010B7 FA                  <2>  cli
  1619 000010B8 C605[E31C0000]4B    <2>  mov byte [intprob], i
  1620 000010BF E924090000          <2>  jmp unhand2
  1621                              <2>  %assign i i+1
  1622 000010C4 FA                  <2>  cli
  1623 000010C5 C605[E31C0000]4C    <2>  mov byte [intprob], i
  1624 000010CC E917090000          <2>  jmp unhand2
  1625                              <2>  %assign i i+1
  1626 000010D1 FA                  <2>  cli
  1627 000010D2 C605[E31C0000]4D    <2>  mov byte [intprob], i
  1628 000010D9 E90A090000          <2>  jmp unhand2
  1629                              <2>  %assign i i+1
  1630 000010DE FA                  <2>  cli
  1631 000010DF C605[E31C0000]4E    <2>  mov byte [intprob], i
  1632 000010E6 E9FD080000          <2>  jmp unhand2
  1633                              <2>  %assign i i+1
  1634 000010EB FA                  <2>  cli
  1635 000010EC C605[E31C0000]4F    <2>  mov byte [intprob], i
  1636 000010F3 E9F0080000          <2>  jmp unhand2
  1637                              <2>  %assign i i+1
  1638 000010F8 FA                  <2>  cli
  1639 000010F9 C605[E31C0000]50    <2>  mov byte [intprob], i
  1640 00001100 E9E3080000          <2>  jmp unhand2
  1641                              <2>  %assign i i+1
  1642 00001105 FA                  <2>  cli
  1643 00001106 C605[E31C0000]51    <2>  mov byte [intprob], i
  1644 0000110D E9D6080000          <2>  jmp unhand2
  1645                              <2>  %assign i i+1
  1646 00001112 FA                  <2>  cli
  1647 00001113 C605[E31C0000]52    <2>  mov byte [intprob], i
  1648 0000111A E9C9080000          <2>  jmp unhand2
  1649                              <2>  %assign i i+1
  1650 0000111F FA                  <2>  cli
  1651 00001120 C605[E31C0000]53    <2>  mov byte [intprob], i
  1652 00001127 E9BC080000          <2>  jmp unhand2
  1653                              <2>  %assign i i+1
  1654 0000112C FA                  <2>  cli
  1655 0000112D C605[E31C0000]54    <2>  mov byte [intprob], i
  1656 00001134 E9AF080000          <2>  jmp unhand2
  1657                              <2>  %assign i i+1
  1658 00001139 FA                  <2>  cli
  1659 0000113A C605[E31C0000]55    <2>  mov byte [intprob], i
  1660 00001141 E9A2080000          <2>  jmp unhand2
  1661                              <2>  %assign i i+1
  1662 00001146 FA                  <2>  cli
  1663 00001147 C605[E31C0000]56    <2>  mov byte [intprob], i
  1664 0000114E E995080000          <2>  jmp unhand2
  1665                              <2>  %assign i i+1
  1666 00001153 FA                  <2>  cli
  1667 00001154 C605[E31C0000]57    <2>  mov byte [intprob], i
  1668 0000115B E988080000          <2>  jmp unhand2
  1669                              <2>  %assign i i+1
  1670 00001160 FA                  <2>  cli
  1671 00001161 C605[E31C0000]58    <2>  mov byte [intprob], i
  1672 00001168 E97B080000          <2>  jmp unhand2
  1673                              <2>  %assign i i+1
  1674 0000116D FA                  <2>  cli
  1675 0000116E C605[E31C0000]59    <2>  mov byte [intprob], i
  1676 00001175 E96E080000          <2>  jmp unhand2
  1677                              <2>  %assign i i+1
  1678 0000117A FA                  <2>  cli
  1679 0000117B C605[E31C0000]5A    <2>  mov byte [intprob], i
  1680 00001182 E961080000          <2>  jmp unhand2
  1681                              <2>  %assign i i+1
  1682 00001187 FA                  <2>  cli
  1683 00001188 C605[E31C0000]5B    <2>  mov byte [intprob], i
  1684 0000118F E954080000          <2>  jmp unhand2
  1685                              <2>  %assign i i+1
  1686 00001194 FA                  <2>  cli
  1687 00001195 C605[E31C0000]5C    <2>  mov byte [intprob], i
  1688 0000119C E947080000          <2>  jmp unhand2
  1689                              <2>  %assign i i+1
  1690 000011A1 FA                  <2>  cli
  1691 000011A2 C605[E31C0000]5D    <2>  mov byte [intprob], i
  1692 000011A9 E93A080000          <2>  jmp unhand2
  1693                              <2>  %assign i i+1
  1694 000011AE FA                  <2>  cli
  1695 000011AF C605[E31C0000]5E    <2>  mov byte [intprob], i
  1696 000011B6 E92D080000          <2>  jmp unhand2
  1697                              <2>  %assign i i+1
  1698 000011BB FA                  <2>  cli
  1699 000011BC C605[E31C0000]5F    <2>  mov byte [intprob], i
  1700 000011C3 E920080000          <2>  jmp unhand2
  1701                              <2>  %assign i i+1
  1702 000011C8 FA                  <2>  cli
  1703 000011C9 C605[E31C0000]60    <2>  mov byte [intprob], i
  1704 000011D0 E913080000          <2>  jmp unhand2
  1705                              <2>  %assign i i+1
  1706 000011D5 FA                  <2>  cli
  1707 000011D6 C605[E31C0000]61    <2>  mov byte [intprob], i
  1708 000011DD E906080000          <2>  jmp unhand2
  1709                              <2>  %assign i i+1
  1710 000011E2 FA                  <2>  cli
  1711 000011E3 C605[E31C0000]62    <2>  mov byte [intprob], i
  1712 000011EA E9F9070000          <2>  jmp unhand2
  1713                              <2>  %assign i i+1
  1714 000011EF FA                  <2>  cli
  1715 000011F0 C605[E31C0000]63    <2>  mov byte [intprob], i
  1716 000011F7 E9EC070000          <2>  jmp unhand2
  1717                              <2>  %assign i i+1
  1718 000011FC FA                  <2>  cli
  1719 000011FD C605[E31C0000]64    <2>  mov byte [intprob], i
  1720 00001204 E9DF070000          <2>  jmp unhand2
  1721                              <2>  %assign i i+1
  1722 00001209 FA                  <2>  cli
  1723 0000120A C605[E31C0000]65    <2>  mov byte [intprob], i
  1724 00001211 E9D2070000          <2>  jmp unhand2
  1725                              <2>  %assign i i+1
  1726 00001216 FA                  <2>  cli
  1727 00001217 C605[E31C0000]66    <2>  mov byte [intprob], i
  1728 0000121E E9C5070000          <2>  jmp unhand2
  1729                              <2>  %assign i i+1
  1730 00001223 FA                  <2>  cli
  1731 00001224 C605[E31C0000]67    <2>  mov byte [intprob], i
  1732 0000122B E9B8070000          <2>  jmp unhand2
  1733                              <2>  %assign i i+1
  1734 00001230 FA                  <2>  cli
  1735 00001231 C605[E31C0000]68    <2>  mov byte [intprob], i
  1736 00001238 E9AB070000          <2>  jmp unhand2
  1737                              <2>  %assign i i+1
  1738 0000123D FA                  <2>  cli
  1739 0000123E C605[E31C0000]69    <2>  mov byte [intprob], i
  1740 00001245 E99E070000          <2>  jmp unhand2
  1741                              <2>  %assign i i+1
  1742 0000124A FA                  <2>  cli
  1743 0000124B C605[E31C0000]6A    <2>  mov byte [intprob], i
  1744 00001252 E991070000          <2>  jmp unhand2
  1745                              <2>  %assign i i+1
  1746 00001257 FA                  <2>  cli
  1747 00001258 C605[E31C0000]6B    <2>  mov byte [intprob], i
  1748 0000125F E984070000          <2>  jmp unhand2
  1749                              <2>  %assign i i+1
  1750 00001264 FA                  <2>  cli
  1751 00001265 C605[E31C0000]6C    <2>  mov byte [intprob], i
  1752 0000126C E977070000          <2>  jmp unhand2
  1753                              <2>  %assign i i+1
  1754 00001271 FA                  <2>  cli
  1755 00001272 C605[E31C0000]6D    <2>  mov byte [intprob], i
  1756 00001279 E96A070000          <2>  jmp unhand2
  1757                              <2>  %assign i i+1
  1758 0000127E FA                  <2>  cli
  1759 0000127F C605[E31C0000]6E    <2>  mov byte [intprob], i
  1760 00001286 E95D070000          <2>  jmp unhand2
  1761                              <2>  %assign i i+1
  1762 0000128B FA                  <2>  cli
  1763 0000128C C605[E31C0000]6F    <2>  mov byte [intprob], i
  1764 00001293 E950070000          <2>  jmp unhand2
  1765                              <2>  %assign i i+1
  1766 00001298 FA                  <2>  cli
  1767 00001299 C605[E31C0000]70    <2>  mov byte [intprob], i
  1768 000012A0 E943070000          <2>  jmp unhand2
  1769                              <2>  %assign i i+1
  1770 000012A5 FA                  <2>  cli
  1771 000012A6 C605[E31C0000]71    <2>  mov byte [intprob], i
  1772 000012AD E936070000          <2>  jmp unhand2
  1773                              <2>  %assign i i+1
  1774 000012B2 FA                  <2>  cli
  1775 000012B3 C605[E31C0000]72    <2>  mov byte [intprob], i
  1776 000012BA E929070000          <2>  jmp unhand2
  1777                              <2>  %assign i i+1
  1778 000012BF FA                  <2>  cli
  1779 000012C0 C605[E31C0000]73    <2>  mov byte [intprob], i
  1780 000012C7 E91C070000          <2>  jmp unhand2
  1781                              <2>  %assign i i+1
  1782 000012CC FA                  <2>  cli
  1783 000012CD C605[E31C0000]74    <2>  mov byte [intprob], i
  1784 000012D4 E90F070000          <2>  jmp unhand2
  1785                              <2>  %assign i i+1
  1786 000012D9 FA                  <2>  cli
  1787 000012DA C605[E31C0000]75    <2>  mov byte [intprob], i
  1788 000012E1 E902070000          <2>  jmp unhand2
  1789                              <2>  %assign i i+1
  1790 000012E6 FA                  <2>  cli
  1791 000012E7 C605[E31C0000]76    <2>  mov byte [intprob], i
  1792 000012EE E9F5060000          <2>  jmp unhand2
  1793                              <2>  %assign i i+1
  1794 000012F3 FA                  <2>  cli
  1795 000012F4 C605[E31C0000]77    <2>  mov byte [intprob], i
  1796 000012FB E9E8060000          <2>  jmp unhand2
  1797                              <2>  %assign i i+1
  1798 00001300 FA                  <2>  cli
  1799 00001301 C605[E31C0000]78    <2>  mov byte [intprob], i
  1800 00001308 E9DB060000          <2>  jmp unhand2
  1801                              <2>  %assign i i+1
  1802 0000130D FA                  <2>  cli
  1803 0000130E C605[E31C0000]79    <2>  mov byte [intprob], i
  1804 00001315 E9CE060000          <2>  jmp unhand2
  1805                              <2>  %assign i i+1
  1806 0000131A FA                  <2>  cli
  1807 0000131B C605[E31C0000]7A    <2>  mov byte [intprob], i
  1808 00001322 E9C1060000          <2>  jmp unhand2
  1809                              <2>  %assign i i+1
  1810 00001327 FA                  <2>  cli
  1811 00001328 C605[E31C0000]7B    <2>  mov byte [intprob], i
  1812 0000132F E9B4060000          <2>  jmp unhand2
  1813                              <2>  %assign i i+1
  1814 00001334 FA                  <2>  cli
  1815 00001335 C605[E31C0000]7C    <2>  mov byte [intprob], i
  1816 0000133C E9A7060000          <2>  jmp unhand2
  1817                              <2>  %assign i i+1
  1818 00001341 FA                  <2>  cli
  1819 00001342 C605[E31C0000]7D    <2>  mov byte [intprob], i
  1820 00001349 E99A060000          <2>  jmp unhand2
  1821                              <2>  %assign i i+1
  1822 0000134E FA                  <2>  cli
  1823 0000134F C605[E31C0000]7E    <2>  mov byte [intprob], i
  1824 00001356 E98D060000          <2>  jmp unhand2
  1825                              <2>  %assign i i+1
  1826 0000135B FA                  <2>  cli
  1827 0000135C C605[E31C0000]7F    <2>  mov byte [intprob], i
  1828 00001363 E980060000          <2>  jmp unhand2
  1829                              <2>  %assign i i+1
  1830 00001368 FA                  <2>  cli
  1831 00001369 C605[E31C0000]80    <2>  mov byte [intprob], i
  1832 00001370 E973060000          <2>  jmp unhand2
  1833                              <2>  %assign i i+1
  1834 00001375 FA                  <2>  cli
  1835 00001376 C605[E31C0000]81    <2>  mov byte [intprob], i
  1836 0000137D E966060000          <2>  jmp unhand2
  1837                              <2>  %assign i i+1
  1838 00001382 FA                  <2>  cli
  1839 00001383 C605[E31C0000]82    <2>  mov byte [intprob], i
  1840 0000138A E959060000          <2>  jmp unhand2
  1841                              <2>  %assign i i+1
  1842 0000138F FA                  <2>  cli
  1843 00001390 C605[E31C0000]83    <2>  mov byte [intprob], i
  1844 00001397 E94C060000          <2>  jmp unhand2
  1845                              <2>  %assign i i+1
  1846 0000139C FA                  <2>  cli
  1847 0000139D C605[E31C0000]84    <2>  mov byte [intprob], i
  1848 000013A4 E93F060000          <2>  jmp unhand2
  1849                              <2>  %assign i i+1
  1850 000013A9 FA                  <2>  cli
  1851 000013AA C605[E31C0000]85    <2>  mov byte [intprob], i
  1852 000013B1 E932060000          <2>  jmp unhand2
  1853                              <2>  %assign i i+1
  1854 000013B6 FA                  <2>  cli
  1855 000013B7 C605[E31C0000]86    <2>  mov byte [intprob], i
  1856 000013BE E925060000          <2>  jmp unhand2
  1857                              <2>  %assign i i+1
  1858 000013C3 FA                  <2>  cli
  1859 000013C4 C605[E31C0000]87    <2>  mov byte [intprob], i
  1860 000013CB E918060000          <2>  jmp unhand2
  1861                              <2>  %assign i i+1
  1862 000013D0 FA                  <2>  cli
  1863 000013D1 C605[E31C0000]88    <2>  mov byte [intprob], i
  1864 000013D8 E90B060000          <2>  jmp unhand2
  1865                              <2>  %assign i i+1
  1866 000013DD FA                  <2>  cli
  1867 000013DE C605[E31C0000]89    <2>  mov byte [intprob], i
  1868 000013E5 E9FE050000          <2>  jmp unhand2
  1869                              <2>  %assign i i+1
  1870 000013EA FA                  <2>  cli
  1871 000013EB C605[E31C0000]8A    <2>  mov byte [intprob], i
  1872 000013F2 E9F1050000          <2>  jmp unhand2
  1873                              <2>  %assign i i+1
  1874 000013F7 FA                  <2>  cli
  1875 000013F8 C605[E31C0000]8B    <2>  mov byte [intprob], i
  1876 000013FF E9E4050000          <2>  jmp unhand2
  1877                              <2>  %assign i i+1
  1878 00001404 FA                  <2>  cli
  1879 00001405 C605[E31C0000]8C    <2>  mov byte [intprob], i
  1880 0000140C E9D7050000          <2>  jmp unhand2
  1881                              <2>  %assign i i+1
  1882 00001411 FA                  <2>  cli
  1883 00001412 C605[E31C0000]8D    <2>  mov byte [intprob], i
  1884 00001419 E9CA050000          <2>  jmp unhand2
  1885                              <2>  %assign i i+1
  1886 0000141E FA                  <2>  cli
  1887 0000141F C605[E31C0000]8E    <2>  mov byte [intprob], i
  1888 00001426 E9BD050000          <2>  jmp unhand2
  1889                              <2>  %assign i i+1
  1890 0000142B FA                  <2>  cli
  1891 0000142C C605[E31C0000]8F    <2>  mov byte [intprob], i
  1892 00001433 E9B0050000          <2>  jmp unhand2
  1893                              <2>  %assign i i+1
  1894 00001438 FA                  <2>  cli
  1895 00001439 C605[E31C0000]90    <2>  mov byte [intprob], i
  1896 00001440 E9A3050000          <2>  jmp unhand2
  1897                              <2>  %assign i i+1
  1898 00001445 FA                  <2>  cli
  1899 00001446 C605[E31C0000]91    <2>  mov byte [intprob], i
  1900 0000144D E996050000          <2>  jmp unhand2
  1901                              <2>  %assign i i+1
  1902 00001452 FA                  <2>  cli
  1903 00001453 C605[E31C0000]92    <2>  mov byte [intprob], i
  1904 0000145A E989050000          <2>  jmp unhand2
  1905                              <2>  %assign i i+1
  1906 0000145F FA                  <2>  cli
  1907 00001460 C605[E31C0000]93    <2>  mov byte [intprob], i
  1908 00001467 E97C050000          <2>  jmp unhand2
  1909                              <2>  %assign i i+1
  1910 0000146C FA                  <2>  cli
  1911 0000146D C605[E31C0000]94    <2>  mov byte [intprob], i
  1912 00001474 E96F050000          <2>  jmp unhand2
  1913                              <2>  %assign i i+1
  1914 00001479 FA                  <2>  cli
  1915 0000147A C605[E31C0000]95    <2>  mov byte [intprob], i
  1916 00001481 E962050000          <2>  jmp unhand2
  1917                              <2>  %assign i i+1
  1918 00001486 FA                  <2>  cli
  1919 00001487 C605[E31C0000]96    <2>  mov byte [intprob], i
  1920 0000148E E955050000          <2>  jmp unhand2
  1921                              <2>  %assign i i+1
  1922 00001493 FA                  <2>  cli
  1923 00001494 C605[E31C0000]97    <2>  mov byte [intprob], i
  1924 0000149B E948050000          <2>  jmp unhand2
  1925                              <2>  %assign i i+1
  1926 000014A0 FA                  <2>  cli
  1927 000014A1 C605[E31C0000]98    <2>  mov byte [intprob], i
  1928 000014A8 E93B050000          <2>  jmp unhand2
  1929                              <2>  %assign i i+1
  1930 000014AD FA                  <2>  cli
  1931 000014AE C605[E31C0000]99    <2>  mov byte [intprob], i
  1932 000014B5 E92E050000          <2>  jmp unhand2
  1933                              <2>  %assign i i+1
  1934 000014BA FA                  <2>  cli
  1935 000014BB C605[E31C0000]9A    <2>  mov byte [intprob], i
  1936 000014C2 E921050000          <2>  jmp unhand2
  1937                              <2>  %assign i i+1
  1938 000014C7 FA                  <2>  cli
  1939 000014C8 C605[E31C0000]9B    <2>  mov byte [intprob], i
  1940 000014CF E914050000          <2>  jmp unhand2
  1941                              <2>  %assign i i+1
  1942 000014D4 FA                  <2>  cli
  1943 000014D5 C605[E31C0000]9C    <2>  mov byte [intprob], i
  1944 000014DC E907050000          <2>  jmp unhand2
  1945                              <2>  %assign i i+1
  1946 000014E1 FA                  <2>  cli
  1947 000014E2 C605[E31C0000]9D    <2>  mov byte [intprob], i
  1948 000014E9 E9FA040000          <2>  jmp unhand2
  1949                              <2>  %assign i i+1
  1950 000014EE FA                  <2>  cli
  1951 000014EF C605[E31C0000]9E    <2>  mov byte [intprob], i
  1952 000014F6 E9ED040000          <2>  jmp unhand2
  1953                              <2>  %assign i i+1
  1954 000014FB FA                  <2>  cli
  1955 000014FC C605[E31C0000]9F    <2>  mov byte [intprob], i
  1956 00001503 E9E0040000          <2>  jmp unhand2
  1957                              <2>  %assign i i+1
  1958 00001508 FA                  <2>  cli
  1959 00001509 C605[E31C0000]A0    <2>  mov byte [intprob], i
  1960 00001510 E9D3040000          <2>  jmp unhand2
  1961                              <2>  %assign i i+1
  1962 00001515 FA                  <2>  cli
  1963 00001516 C605[E31C0000]A1    <2>  mov byte [intprob], i
  1964 0000151D E9C6040000          <2>  jmp unhand2
  1965                              <2>  %assign i i+1
  1966 00001522 FA                  <2>  cli
  1967 00001523 C605[E31C0000]A2    <2>  mov byte [intprob], i
  1968 0000152A E9B9040000          <2>  jmp unhand2
  1969                              <2>  %assign i i+1
  1970 0000152F FA                  <2>  cli
  1971 00001530 C605[E31C0000]A3    <2>  mov byte [intprob], i
  1972 00001537 E9AC040000          <2>  jmp unhand2
  1973                              <2>  %assign i i+1
  1974 0000153C FA                  <2>  cli
  1975 0000153D C605[E31C0000]A4    <2>  mov byte [intprob], i
  1976 00001544 E99F040000          <2>  jmp unhand2
  1977                              <2>  %assign i i+1
  1978 00001549 FA                  <2>  cli
  1979 0000154A C605[E31C0000]A5    <2>  mov byte [intprob], i
  1980 00001551 E992040000          <2>  jmp unhand2
  1981                              <2>  %assign i i+1
  1982 00001556 FA                  <2>  cli
  1983 00001557 C605[E31C0000]A6    <2>  mov byte [intprob], i
  1984 0000155E E985040000          <2>  jmp unhand2
  1985                              <2>  %assign i i+1
  1986 00001563 FA                  <2>  cli
  1987 00001564 C605[E31C0000]A7    <2>  mov byte [intprob], i
  1988 0000156B E978040000          <2>  jmp unhand2
  1989                              <2>  %assign i i+1
  1990 00001570 FA                  <2>  cli
  1991 00001571 C605[E31C0000]A8    <2>  mov byte [intprob], i
  1992 00001578 E96B040000          <2>  jmp unhand2
  1993                              <2>  %assign i i+1
  1994 0000157D FA                  <2>  cli
  1995 0000157E C605[E31C0000]A9    <2>  mov byte [intprob], i
  1996 00001585 E95E040000          <2>  jmp unhand2
  1997                              <2>  %assign i i+1
  1998 0000158A FA                  <2>  cli
  1999 0000158B C605[E31C0000]AA    <2>  mov byte [intprob], i
  2000 00001592 E951040000          <2>  jmp unhand2
  2001                              <2>  %assign i i+1
  2002 00001597 FA                  <2>  cli
  2003 00001598 C605[E31C0000]AB    <2>  mov byte [intprob], i
  2004 0000159F E944040000          <2>  jmp unhand2
  2005                              <2>  %assign i i+1
  2006 000015A4 FA                  <2>  cli
  2007 000015A5 C605[E31C0000]AC    <2>  mov byte [intprob], i
  2008 000015AC E937040000          <2>  jmp unhand2
  2009                              <2>  %assign i i+1
  2010 000015B1 FA                  <2>  cli
  2011 000015B2 C605[E31C0000]AD    <2>  mov byte [intprob], i
  2012 000015B9 E92A040000          <2>  jmp unhand2
  2013                              <2>  %assign i i+1
  2014 000015BE FA                  <2>  cli
  2015 000015BF C605[E31C0000]AE    <2>  mov byte [intprob], i
  2016 000015C6 E91D040000          <2>  jmp unhand2
  2017                              <2>  %assign i i+1
  2018 000015CB FA                  <2>  cli
  2019 000015CC C605[E31C0000]AF    <2>  mov byte [intprob], i
  2020 000015D3 E910040000          <2>  jmp unhand2
  2021                              <2>  %assign i i+1
  2022 000015D8 FA                  <2>  cli
  2023 000015D9 C605[E31C0000]B0    <2>  mov byte [intprob], i
  2024 000015E0 E903040000          <2>  jmp unhand2
  2025                              <2>  %assign i i+1
  2026 000015E5 FA                  <2>  cli
  2027 000015E6 C605[E31C0000]B1    <2>  mov byte [intprob], i
  2028 000015ED E9F6030000          <2>  jmp unhand2
  2029                              <2>  %assign i i+1
  2030 000015F2 FA                  <2>  cli
  2031 000015F3 C605[E31C0000]B2    <2>  mov byte [intprob], i
  2032 000015FA E9E9030000          <2>  jmp unhand2
  2033                              <2>  %assign i i+1
  2034 000015FF FA                  <2>  cli
  2035 00001600 C605[E31C0000]B3    <2>  mov byte [intprob], i
  2036 00001607 E9DC030000          <2>  jmp unhand2
  2037                              <2>  %assign i i+1
  2038 0000160C FA                  <2>  cli
  2039 0000160D C605[E31C0000]B4    <2>  mov byte [intprob], i
  2040 00001614 E9CF030000          <2>  jmp unhand2
  2041                              <2>  %assign i i+1
  2042 00001619 FA                  <2>  cli
  2043 0000161A C605[E31C0000]B5    <2>  mov byte [intprob], i
  2044 00001621 E9C2030000          <2>  jmp unhand2
  2045                              <2>  %assign i i+1
  2046 00001626 FA                  <2>  cli
  2047 00001627 C605[E31C0000]B6    <2>  mov byte [intprob], i
  2048 0000162E E9B5030000          <2>  jmp unhand2
  2049                              <2>  %assign i i+1
  2050 00001633 FA                  <2>  cli
  2051 00001634 C605[E31C0000]B7    <2>  mov byte [intprob], i
  2052 0000163B E9A8030000          <2>  jmp unhand2
  2053                              <2>  %assign i i+1
  2054 00001640 FA                  <2>  cli
  2055 00001641 C605[E31C0000]B8    <2>  mov byte [intprob], i
  2056 00001648 E99B030000          <2>  jmp unhand2
  2057                              <2>  %assign i i+1
  2058 0000164D FA                  <2>  cli
  2059 0000164E C605[E31C0000]B9    <2>  mov byte [intprob], i
  2060 00001655 E98E030000          <2>  jmp unhand2
  2061                              <2>  %assign i i+1
  2062 0000165A FA                  <2>  cli
  2063 0000165B C605[E31C0000]BA    <2>  mov byte [intprob], i
  2064 00001662 E981030000          <2>  jmp unhand2
  2065                              <2>  %assign i i+1
  2066 00001667 FA                  <2>  cli
  2067 00001668 C605[E31C0000]BB    <2>  mov byte [intprob], i
  2068 0000166F E974030000          <2>  jmp unhand2
  2069                              <2>  %assign i i+1
  2070 00001674 FA                  <2>  cli
  2071 00001675 C605[E31C0000]BC    <2>  mov byte [intprob], i
  2072 0000167C E967030000          <2>  jmp unhand2
  2073                              <2>  %assign i i+1
  2074 00001681 FA                  <2>  cli
  2075 00001682 C605[E31C0000]BD    <2>  mov byte [intprob], i
  2076 00001689 E95A030000          <2>  jmp unhand2
  2077                              <2>  %assign i i+1
  2078 0000168E FA                  <2>  cli
  2079 0000168F C605[E31C0000]BE    <2>  mov byte [intprob], i
  2080 00001696 E94D030000          <2>  jmp unhand2
  2081                              <2>  %assign i i+1
  2082 0000169B FA                  <2>  cli
  2083 0000169C C605[E31C0000]BF    <2>  mov byte [intprob], i
  2084 000016A3 E940030000          <2>  jmp unhand2
  2085                              <2>  %assign i i+1
  2086 000016A8 FA                  <2>  cli
  2087 000016A9 C605[E31C0000]C0    <2>  mov byte [intprob], i
  2088 000016B0 E933030000          <2>  jmp unhand2
  2089                              <2>  %assign i i+1
  2090 000016B5 FA                  <2>  cli
  2091 000016B6 C605[E31C0000]C1    <2>  mov byte [intprob], i
  2092 000016BD E926030000          <2>  jmp unhand2
  2093                              <2>  %assign i i+1
  2094 000016C2 FA                  <2>  cli
  2095 000016C3 C605[E31C0000]C2    <2>  mov byte [intprob], i
  2096 000016CA E919030000          <2>  jmp unhand2
  2097                              <2>  %assign i i+1
  2098 000016CF FA                  <2>  cli
  2099 000016D0 C605[E31C0000]C3    <2>  mov byte [intprob], i
  2100 000016D7 E90C030000          <2>  jmp unhand2
  2101                              <2>  %assign i i+1
  2102 000016DC FA                  <2>  cli
  2103 000016DD C605[E31C0000]C4    <2>  mov byte [intprob], i
  2104 000016E4 E9FF020000          <2>  jmp unhand2
  2105                              <2>  %assign i i+1
  2106 000016E9 FA                  <2>  cli
  2107 000016EA C605[E31C0000]C5    <2>  mov byte [intprob], i
  2108 000016F1 E9F2020000          <2>  jmp unhand2
  2109                              <2>  %assign i i+1
  2110 000016F6 FA                  <2>  cli
  2111 000016F7 C605[E31C0000]C6    <2>  mov byte [intprob], i
  2112 000016FE E9E5020000          <2>  jmp unhand2
  2113                              <2>  %assign i i+1
  2114 00001703 FA                  <2>  cli
  2115 00001704 C605[E31C0000]C7    <2>  mov byte [intprob], i
  2116 0000170B E9D8020000          <2>  jmp unhand2
  2117                              <2>  %assign i i+1
  2118 00001710 FA                  <2>  cli
  2119 00001711 C605[E31C0000]C8    <2>  mov byte [intprob], i
  2120 00001718 E9CB020000          <2>  jmp unhand2
  2121                              <2>  %assign i i+1
  2122 0000171D FA                  <2>  cli
  2123 0000171E C605[E31C0000]C9    <2>  mov byte [intprob], i
  2124 00001725 E9BE020000          <2>  jmp unhand2
  2125                              <2>  %assign i i+1
  2126 0000172A FA                  <2>  cli
  2127 0000172B C605[E31C0000]CA    <2>  mov byte [intprob], i
  2128 00001732 E9B1020000          <2>  jmp unhand2
  2129                              <2>  %assign i i+1
  2130 00001737 FA                  <2>  cli
  2131 00001738 C605[E31C0000]CB    <2>  mov byte [intprob], i
  2132 0000173F E9A4020000          <2>  jmp unhand2
  2133                              <2>  %assign i i+1
  2134 00001744 FA                  <2>  cli
  2135 00001745 C605[E31C0000]CC    <2>  mov byte [intprob], i
  2136 0000174C E997020000          <2>  jmp unhand2
  2137                              <2>  %assign i i+1
  2138 00001751 FA                  <2>  cli
  2139 00001752 C605[E31C0000]CD    <2>  mov byte [intprob], i
  2140 00001759 E98A020000          <2>  jmp unhand2
  2141                              <2>  %assign i i+1
  2142 0000175E FA                  <2>  cli
  2143 0000175F C605[E31C0000]CE    <2>  mov byte [intprob], i
  2144 00001766 E97D020000          <2>  jmp unhand2
  2145                              <2>  %assign i i+1
  2146 0000176B FA                  <2>  cli
  2147 0000176C C605[E31C0000]CF    <2>  mov byte [intprob], i
  2148 00001773 E970020000          <2>  jmp unhand2
  2149                              <2>  %assign i i+1
  2150 00001778 FA                  <2>  cli
  2151 00001779 C605[E31C0000]D0    <2>  mov byte [intprob], i
  2152 00001780 E963020000          <2>  jmp unhand2
  2153                              <2>  %assign i i+1
  2154 00001785 FA                  <2>  cli
  2155 00001786 C605[E31C0000]D1    <2>  mov byte [intprob], i
  2156 0000178D E956020000          <2>  jmp unhand2
  2157                              <2>  %assign i i+1
  2158 00001792 FA                  <2>  cli
  2159 00001793 C605[E31C0000]D2    <2>  mov byte [intprob], i
  2160 0000179A E949020000          <2>  jmp unhand2
  2161                              <2>  %assign i i+1
  2162 0000179F FA                  <2>  cli
  2163 000017A0 C605[E31C0000]D3    <2>  mov byte [intprob], i
  2164 000017A7 E93C020000          <2>  jmp unhand2
  2165                              <2>  %assign i i+1
  2166 000017AC FA                  <2>  cli
  2167 000017AD C605[E31C0000]D4    <2>  mov byte [intprob], i
  2168 000017B4 E92F020000          <2>  jmp unhand2
  2169                              <2>  %assign i i+1
  2170 000017B9 FA                  <2>  cli
  2171 000017BA C605[E31C0000]D5    <2>  mov byte [intprob], i
  2172 000017C1 E922020000          <2>  jmp unhand2
  2173                              <2>  %assign i i+1
  2174 000017C6 FA                  <2>  cli
  2175 000017C7 C605[E31C0000]D6    <2>  mov byte [intprob], i
  2176 000017CE E915020000          <2>  jmp unhand2
  2177                              <2>  %assign i i+1
  2178 000017D3 FA                  <2>  cli
  2179 000017D4 C605[E31C0000]D7    <2>  mov byte [intprob], i
  2180 000017DB E908020000          <2>  jmp unhand2
  2181                              <2>  %assign i i+1
  2182 000017E0 FA                  <2>  cli
  2183 000017E1 C605[E31C0000]D8    <2>  mov byte [intprob], i
  2184 000017E8 E9FB010000          <2>  jmp unhand2
  2185                              <2>  %assign i i+1
  2186 000017ED FA                  <2>  cli
  2187 000017EE C605[E31C0000]D9    <2>  mov byte [intprob], i
  2188 000017F5 E9EE010000          <2>  jmp unhand2
  2189                              <2>  %assign i i+1
  2190 000017FA FA                  <2>  cli
  2191 000017FB C605[E31C0000]DA    <2>  mov byte [intprob], i
  2192 00001802 E9E1010000          <2>  jmp unhand2
  2193                              <2>  %assign i i+1
  2194 00001807 FA                  <2>  cli
  2195 00001808 C605[E31C0000]DB    <2>  mov byte [intprob], i
  2196 0000180F E9D4010000          <2>  jmp unhand2
  2197                              <2>  %assign i i+1
  2198 00001814 FA                  <2>  cli
  2199 00001815 C605[E31C0000]DC    <2>  mov byte [intprob], i
  2200 0000181C E9C7010000          <2>  jmp unhand2
  2201                              <2>  %assign i i+1
  2202 00001821 FA                  <2>  cli
  2203 00001822 C605[E31C0000]DD    <2>  mov byte [intprob], i
  2204 00001829 E9BA010000          <2>  jmp unhand2
  2205                              <2>  %assign i i+1
  2206 0000182E FA                  <2>  cli
  2207 0000182F C605[E31C0000]DE    <2>  mov byte [intprob], i
  2208 00001836 E9AD010000          <2>  jmp unhand2
  2209                              <2>  %assign i i+1
  2210 0000183B FA                  <2>  cli
  2211 0000183C C605[E31C0000]DF    <2>  mov byte [intprob], i
  2212 00001843 E9A0010000          <2>  jmp unhand2
  2213                              <2>  %assign i i+1
  2214 00001848 FA                  <2>  cli
  2215 00001849 C605[E31C0000]E0    <2>  mov byte [intprob], i
  2216 00001850 E993010000          <2>  jmp unhand2
  2217                              <2>  %assign i i+1
  2218 00001855 FA                  <2>  cli
  2219 00001856 C605[E31C0000]E1    <2>  mov byte [intprob], i
  2220 0000185D E986010000          <2>  jmp unhand2
  2221                              <2>  %assign i i+1
  2222 00001862 FA                  <2>  cli
  2223 00001863 C605[E31C0000]E2    <2>  mov byte [intprob], i
  2224 0000186A E979010000          <2>  jmp unhand2
  2225                              <2>  %assign i i+1
  2226 0000186F FA                  <2>  cli
  2227 00001870 C605[E31C0000]E3    <2>  mov byte [intprob], i
  2228 00001877 E96C010000          <2>  jmp unhand2
  2229                              <2>  %assign i i+1
  2230 0000187C FA                  <2>  cli
  2231 0000187D C605[E31C0000]E4    <2>  mov byte [intprob], i
  2232 00001884 E95F010000          <2>  jmp unhand2
  2233                              <2>  %assign i i+1
  2234 00001889 FA                  <2>  cli
  2235 0000188A C605[E31C0000]E5    <2>  mov byte [intprob], i
  2236 00001891 E952010000          <2>  jmp unhand2
  2237                              <2>  %assign i i+1
  2238 00001896 FA                  <2>  cli
  2239 00001897 C605[E31C0000]E6    <2>  mov byte [intprob], i
  2240 0000189E E945010000          <2>  jmp unhand2
  2241                              <2>  %assign i i+1
  2242 000018A3 FA                  <2>  cli
  2243 000018A4 C605[E31C0000]E7    <2>  mov byte [intprob], i
  2244 000018AB E938010000          <2>  jmp unhand2
  2245                              <2>  %assign i i+1
  2246 000018B0 FA                  <2>  cli
  2247 000018B1 C605[E31C0000]E8    <2>  mov byte [intprob], i
  2248 000018B8 E92B010000          <2>  jmp unhand2
  2249                              <2>  %assign i i+1
  2250 000018BD FA                  <2>  cli
  2251 000018BE C605[E31C0000]E9    <2>  mov byte [intprob], i
  2252 000018C5 E91E010000          <2>  jmp unhand2
  2253                              <2>  %assign i i+1
  2254 000018CA FA                  <2>  cli
  2255 000018CB C605[E31C0000]EA    <2>  mov byte [intprob], i
  2256 000018D2 E911010000          <2>  jmp unhand2
  2257                              <2>  %assign i i+1
  2258 000018D7 FA                  <2>  cli
  2259 000018D8 C605[E31C0000]EB    <2>  mov byte [intprob], i
  2260 000018DF E904010000          <2>  jmp unhand2
  2261                              <2>  %assign i i+1
  2262 000018E4 FA                  <2>  cli
  2263 000018E5 C605[E31C0000]EC    <2>  mov byte [intprob], i
  2264 000018EC E9F7000000          <2>  jmp unhand2
  2265                              <2>  %assign i i+1
  2266 000018F1 FA                  <2>  cli
  2267 000018F2 C605[E31C0000]ED    <2>  mov byte [intprob], i
  2268 000018F9 E9EA000000          <2>  jmp unhand2
  2269                              <2>  %assign i i+1
  2270 000018FE FA                  <2>  cli
  2271 000018FF C605[E31C0000]EE    <2>  mov byte [intprob], i
  2272 00001906 E9DD000000          <2>  jmp unhand2
  2273                              <2>  %assign i i+1
  2274 0000190B FA                  <2>  cli
  2275 0000190C C605[E31C0000]EF    <2>  mov byte [intprob], i
  2276 00001913 E9D0000000          <2>  jmp unhand2
  2277                              <2>  %assign i i+1
  2278 00001918 FA                  <2>  cli
  2279 00001919 C605[E31C0000]F0    <2>  mov byte [intprob], i
  2280 00001920 E9C3000000          <2>  jmp unhand2
  2281                              <2>  %assign i i+1
  2282 00001925 FA                  <2>  cli
  2283 00001926 C605[E31C0000]F1    <2>  mov byte [intprob], i
  2284 0000192D E9B6000000          <2>  jmp unhand2
  2285                              <2>  %assign i i+1
  2286 00001932 FA                  <2>  cli
  2287 00001933 C605[E31C0000]F2    <2>  mov byte [intprob], i
  2288 0000193A E9A9000000          <2>  jmp unhand2
  2289                              <2>  %assign i i+1
  2290 0000193F FA                  <2>  cli
  2291 00001940 C605[E31C0000]F3    <2>  mov byte [intprob], i
  2292 00001947 E99C000000          <2>  jmp unhand2
  2293                              <2>  %assign i i+1
  2294 0000194C FA                  <2>  cli
  2295 0000194D C605[E31C0000]F4    <2>  mov byte [intprob], i
  2296 00001954 E98F000000          <2>  jmp unhand2
  2297                              <2>  %assign i i+1
  2298 00001959 FA                  <2>  cli
  2299 0000195A C605[E31C0000]F5    <2>  mov byte [intprob], i
  2300 00001961 E982000000          <2>  jmp unhand2
  2301                              <2>  %assign i i+1
  2302 00001966 FA                  <2>  cli
  2303 00001967 C605[E31C0000]F6    <2>  mov byte [intprob], i
  2304 0000196E E975000000          <2>  jmp unhand2
  2305                              <2>  %assign i i+1
  2306 00001973 FA                  <2>  cli
  2307 00001974 C605[E31C0000]F7    <2>  mov byte [intprob], i
  2308 0000197B E968000000          <2>  jmp unhand2
  2309                              <2>  %assign i i+1
  2310 00001980 FA                  <2>  cli
  2311 00001981 C605[E31C0000]F8    <2>  mov byte [intprob], i
  2312 00001988 E95B000000          <2>  jmp unhand2
  2313                              <2>  %assign i i+1
  2314 0000198D FA                  <2>  cli
  2315 0000198E C605[E31C0000]F9    <2>  mov byte [intprob], i
  2316 00001995 E94E000000          <2>  jmp unhand2
  2317                              <2>  %assign i i+1
  2318 0000199A FA                  <2>  cli
  2319 0000199B C605[E31C0000]FA    <2>  mov byte [intprob], i
  2320 000019A2 E941000000          <2>  jmp unhand2
  2321                              <2>  %assign i i+1
  2322 000019A7 FA                  <2>  cli
  2323 000019A8 C605[E31C0000]FB    <2>  mov byte [intprob], i
  2324 000019AF E934000000          <2>  jmp unhand2
  2325                              <2>  %assign i i+1
  2326 000019B4 FA                  <2>  cli
  2327 000019B5 C605[E31C0000]FC    <2>  mov byte [intprob], i
  2328 000019BC E927000000          <2>  jmp unhand2
  2329                              <2>  %assign i i+1
  2330 000019C1 FA                  <2>  cli
  2331 000019C2 C605[E31C0000]FD    <2>  mov byte [intprob], i
  2332 000019C9 E91A000000          <2>  jmp unhand2
  2333                              <2>  %assign i i+1
  2334 000019CE FA                  <2>  cli
  2335 000019CF C605[E31C0000]FE    <2>  mov byte [intprob], i
  2336 000019D6 E90D000000          <2>  jmp unhand2
  2337                              <2>  %assign i i+1
  2338 000019DB FA                  <2>  cli
  2339 000019DC C605[E31C0000]FF    <2>  mov byte [intprob], i
  2340 000019E3 E900000000          <2>  jmp unhand2
  2341                              <2>  %assign i i+1
  2342                              <1> unhand2:
  2343 000019E8 FA                  <1> 	cli
  2344 000019E9 1E                  <1> 	push ds
  2345 000019EA 06                  <1> 	push es
  2346 000019EB 0FA0                <1> 	push fs
  2347 000019ED 0FA8                <1> 	push gs
  2348 000019EF 16                  <1> 	push ss
  2349 000019F0 60                  <1> 	pushad
  2350 000019F1 803D[8F4F0000]00    <1> 	cmp byte [guion], 0
  2351 000019F8 0F8432000000        <1> 	je near noguiunhandstuff
  2352 000019FE 66C705[DD1C0000]08- <1> 	mov word [locunhandy], 8
  2353 00001A06 00                  <1>
  2354 00001A07 66C705[DF1C0000]08- <1> 	mov word [locunhandx], 8
  2355 00001A0F 00                  <1>
  2356 00001A10 668B1D[5A4E0000]    <1> 	mov bx, [background]
  2357 00001A17 66891D[E11C0000]    <1> 	mov [backgroundcache], bx
  2358 00001A1E C605[5E480000]01    <1> 	mov byte [mousedisabled],1
  2359 00001A25 66BB00F8            <1> 	mov bx, 1111100000000000b
  2360 00001A29 66891D[5A4E0000]    <1> 	mov [background], bx
  2361                              <1> noguiunhandstuff:
  2362 00001A30 89E6                <1> 	mov esi, esp
  2363 00001A32 8935[D11C0000]      <1> 	mov [espfirst], esi
  2364 00001A38 81C6BC000000        <1> 	add esi, ((unhndrgend - unhndrg)/15)*4
  2365 00001A3E 8935[CD1C0000]      <1> 	mov [esploc], esi
  2366 00001A44 BE[EC1C0000]        <1> 	mov esi, unhandmsg
  2367 00001A49 8935[D51C0000]      <1> 	mov [esiloc], esi
  2368 00001A4F 31C9                <1> 	xor ecx, ecx
  2369 00001A51 8A0D[E31C0000]      <1> 	mov cl, [intprob]
  2370 00001A57 BB[7F200000]        <1> 	mov ebx, errortypes
  2371 00001A5C C1E102              <1> 	shl ecx, 2
  2372 00001A5F 01CB                <1> 	add ebx, ecx
  2373 00001A61 81FB[BF200000]      <1> 	cmp ebx, errortypesend
  2374 00001A67 7205                <1> 	jb gooderrortype
  2375 00001A69 BB[BF200000]        <1> 	mov ebx, errortypesend
  2376                              <1> gooderrortype:
  2377 00001A6E 8B33                <1> 	mov esi, [ebx]
  2378 00001A70 803D[8F4F0000]00    <1> 	cmp byte [guion], 0
  2379 00001A77 0F842D000000        <1> 	je near errortext
  2380 00001A7D 668B0D[DD1C0000]    <1> 	mov cx, [locunhandy]
  2381 00001A84 668B15[DF1C0000]    <1> 	mov dx, [locunhandx]
  2382 00001A8B 66B80100            <1> 	mov ax, 1
  2383 00001A8F 6631DB              <1> 	xor bx, bx
  2384 00001A92 E8BC3E0000          <1> 	call showstring2
  2385 00001A97 66890D[DD1C0000]    <1> 	mov [locunhandy], cx
  2386 00001A9E 668915[DF1C0000]    <1> 	mov [locunhandx], dx
  2387 00001AA5 E905000000          <1> 	jmp errortextdone
  2388                              <1> errortext:
  2389 00001AAA E84C0F0000          <1> 	call print		;;get the error message and print it
  2390                              <1> errortextdone:
  2391 00001AAF 31C9                <1> 	xor ecx, ecx
  2392 00001AB1 8A0D[E31C0000]      <1> 	mov cl, [intprob]
  2393 00001AB7 E8AA010000          <1> 	call expdump
  2394                              <1> dumpstack:
  2395 00001ABC 8B35[CD1C0000]      <1> 	mov esi, [esploc]
  2396 00001AC2 39E6                <1> 	cmp esi, esp
  2397 00001AC4 7216                <1> 	jb donedump
  2398 00001AC6 368B0E              <1> 	mov ecx, [ss:esi]
  2399 00001AC9 81EE04000000        <1> 	sub esi, 4
  2400 00001ACF 8935[CD1C0000]      <1> 	mov [esploc], esi
  2401 00001AD5 E88C010000          <1> 	call expdump
  2402 00001ADA EBE0                <1> 	jmp dumpstack
  2403                              <1> donedump:
  2404 00001ADC 0F20C1              <1> 	mov ecx, cr0
  2405 00001ADF E882010000          <1> 	call expdump
  2406 00001AE4 0F20D1              <1> 	mov ecx, cr2
  2407 00001AE7 E87A010000          <1> 	call expdump
  2408 00001AEC 0F20D9              <1> 	mov ecx, cr3
  2409 00001AEF E872010000          <1> 	call expdump
  2410 00001AF4 0F20E1              <1> 	mov ecx, cr4
  2411 00001AF7 E86A010000          <1> 	call expdump
  2412 00001AFC 8B35[CD1C0000]      <1> 	mov esi, [esploc]
  2413 00001B02 368B7C2434          <1> 	mov edi, [ss:esp + 52]
  2414 00001B07 81C710000000        <1> 	add edi, 16
  2415 00001B0D 893D[E81C0000]      <1> 	mov [codelocend], edi
  2416 00001B13 81EF20000000        <1> 	sub edi, 32
  2417                              <1> dumpcodeloop:
  2418 00001B19 893D[E41C0000]      <1> 	mov [codeloc], edi
  2419 00001B1F 8B0F                <1> 	mov ecx, [edi]
  2420 00001B21 E840010000          <1> 	call expdump
  2421 00001B26 8B3D[E41C0000]      <1> 	mov edi, [codeloc]
  2422 00001B2C 81C704000000        <1> 	add edi, 4
  2423 00001B32 3B3D[E81C0000]      <1> 	cmp edi, [codelocend]
  2424 00001B38 72DF                <1> 	jb dumpcodeloop
  2425 00001B3A BE[F51B0000]        <1> 	mov esi, backtoosmsg
  2426 00001B3F 803D[8F4F0000]00    <1> 	cmp byte [guion], 0
  2427 00001B46 750A                <1> 	jne guibacktomsg
  2428 00001B48 E8AE0E0000          <1> 	call print
  2429 00001B4D E91A000000          <1> 	jmp backtomsgdone
  2430                              <1> guibacktomsg:
  2431 00001B52 668B15[DF1C0000]    <1> 	mov dx, [locunhandx]
  2432 00001B59 668B0D[DD1C0000]    <1> 	mov cx, [locunhandy]
  2433 00001B60 66B80100            <1> 	mov ax, 1
  2434 00001B64 6631DB              <1> 	xor bx, bx
  2435 00001B67 E8E73D0000          <1> 	call showstring2
  2436                              <1> backtomsgdone:
  2437 00001B6C 30C0                <1> 	xor al, al
  2438 00001B6E E8360E0000          <1> 	call int302
  2439 00001B73 803D[E31C0000]03    <1> 	cmp byte [intprob], 3
  2440 00001B7A 753C                <1> 	jne nodebugint
  2441 00001B7C 803D[8F4F0000]00    <1> 	cmp byte [guion], 0
  2442 00001B83 7422                <1> 	je nodebuggui
  2443 00001B85 668B1D[E11C0000]    <1> 	mov bx, [backgroundcache]
  2444 00001B8C 66891D[5A4E0000]    <1> 	mov [background], bx
  2445 00001B93 6631DB              <1> 	xor bx, bx
  2446 00001B96 C605[5E480000]00    <1> 	mov byte [mousedisabled], 0
  2447 00001B9D E87B320000          <1> 	call guiclear
  2448 00001BA2 E8583A0000          <1> 	call reloadallgraphics
  2449                              <1> nodebuggui:
  2450 00001BA7 8B35[D11C0000]      <1> 	mov esi, [espfirst]
  2451 00001BAD 89F4                <1> 	mov esp, esi
  2452 00001BAF 61                  <1> 	popad
  2453 00001BB0 17                  <1> 	pop ss
  2454 00001BB1 0FA9                <1> 	pop gs
  2455 00001BB3 0FA1                <1> 	pop fs
  2456 00001BB5 07                  <1> 	pop es
  2457 00001BB6 1F                  <1> 	pop ds
  2458 00001BB7 CF                  <1> 	iret
  2459                              <1> nodebugint:
  2460 00001BB8 61                  <1> 	popad
  2461 00001BB9 17                  <1> 	pop ss
  2462 00001BBA 0FA9                <1> 	pop gs
  2463 00001BBC 0FA1                <1> 	pop fs
  2464 00001BBE 07                  <1> 	pop es
  2465 00001BBF 1F                  <1> 	pop ds
  2466 00001BC0 803D[8F4F0000]00    <1> 	cmp byte [guion], 0
  2467 00001BC7 7427                <1> 	je returnunhandgui
  2468 00001BC9 668B1D[E11C0000]    <1> 	mov bx, [backgroundcache]
  2469 00001BD0 66891D[5A4E0000]    <1> 	mov [background], bx
  2470 00001BD7 6631DB              <1> 	xor bx, bx
  2471 00001BDA C605[5E480000]00    <1> 	mov byte [mousedisabled], 0
  2472 00001BE1 E837320000          <1> 	call guiclear
  2473 00001BE6 E8143A0000          <1> 	call reloadallgraphics
  2474 00001BEB E96C320000          <1> 	jmp gui
  2475                              <1> returnunhandgui:
  2476 00001BF0 E95D140000          <1> 	jmp nwcmd
  2477 00001BF5 506C6561736520706F- <1> backtoosmsg db "Please post any problems in the Issues section at solleros.googlecode.com",10,13
  2478 00001BFE 737420616E79207072- <1>
  2479 00001C07 6F626C656D7320696E- <1>
  2480 00001C10 207468652049737375- <1>
  2481 00001C19 65732073656374696F- <1>
  2482 00001C22 6E20617420736F6C6C- <1>
  2483 00001C2B 65726F732E676F6F67- <1>
  2484 00001C34 6C65636F64652E636F- <1>
  2485 00001C3D 6D0A0D              <1>
  2486 00001C40 507265737320616E79- <1> 			db "Press any key to return to SollerOS",10,13,0
  2487 00001C49 206B657920746F2072- <1>
  2488 00001C52 657475726E20746F20- <1>
  2489 00001C5B 536F6C6C65724F530A- <1>
  2490 00001C64 0D00                <1>
  2491                              <1> expdump:
  2492 00001C66 8B35[D51C0000]      <1> 	mov esi, [esiloc]
  2493 00001C6C 89F7                <1> 	mov edi, esi
  2494 00001C6E 81C70F000000        <1> 	add edi, 15
  2495 00001C74 81C604000000        <1> 	add esi, 4
  2496 00001C7A 893D[D51C0000]      <1> 	mov [esiloc], edi
  2497 00001C80 81EF03000000        <1> 	sub edi, 3
  2498 00001C86 E838180000          <1> 	call converthex
  2499 00001C8B 81EE04000000        <1> 	sub esi, 4
  2500 00001C91 803D[8F4F0000]00    <1> 	cmp byte [guion], 0
  2501 00001C98 0F8429000000        <1> 	je near expdumptext
  2502 00001C9E 668B0D[DD1C0000]    <1> 	mov cx, [locunhandy]
  2503 00001CA5 668B15[DF1C0000]    <1> 	mov dx, [locunhandx]
  2504 00001CAC 66B80100            <1> 	mov ax, 1
  2505 00001CB0 6631DB              <1> 	xor bx, bx
  2506 00001CB3 E89B3C0000          <1> 	call showstring2
  2507 00001CB8 66890D[DD1C0000]    <1> 	mov [locunhandy], cx
  2508 00001CBF 668915[DF1C0000]    <1> 	mov [locunhandx], dx
  2509 00001CC6 C3                  <1> 	ret
  2510                              <1> expdumptext:
  2511 00001CC7 E82F0D0000          <1> 	call print
  2512 00001CCC C3                  <1> 	ret
  2513 00001CCD 00000000            <1> esploc dd 0
  2514 00001CD1 00000000            <1> espfirst dd 0
  2515 00001CD5 00000000            <1> esiloc dd 0
  2516 00001CD9 00000000            <1> esiregbuf dd 0
  2517 00001CDD 0100                <1> locunhandy dw 1
  2518 00001CDF 0100                <1> locunhandx dw 1
  2519 00001CE1 0000                <1> backgroundcache dw 0
  2520 00001CE3 00                  <1> intprob db 0
  2521 00001CE4 00000000            <1> codeloc dd 0
  2522 00001CE8 00000000            <1> codelocend dd 0
  2523                              <1> 	unhandmsg:	
  2524 00001CEC 494E543D3030303030- <1> 			db "INT=00000000",10,13,0
  2525 00001CF5 3030300A0D00        <1>
  2526                              <1> unhndrg:
  2527 00001CFB FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0	;;this dumps the stack before the stack frame in question
  2528 00001D04 303030202000<rept>  <1>
  2529 00001D64 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",10,13,0
  2530 00001D6D 3030300A0D00        <1>
  2531 00001D73 FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0	;;this dumps the stack before the stack frame in question
  2532 00001D7C 303030202000<rept>  <1>
  2533 00001DDC FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",10,13,0
  2534 00001DE5 3030300A0D00        <1>
  2535 00001DEB FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0	;;this dumps the stack before the stack frame in question
  2536 00001DF4 303030202000<rept>  <1>
  2537 00001E54 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",10,13,0
  2538 00001E5D 3030300A0D00        <1>
  2539 00001E63 FFFFFFFF3030303030- <1> 	times 7 db 255,255,255,255,"00000000  ",0	;;this dumps the stack before the stack frame in question
  2540 00001E6C 303030202000<rept>  <1>
  2541 00001ECC FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",10,13,0
  2542 00001ED5 3030300A0D00        <1>
  2543                              <1> unhandregs:
  2544 00001EDB 45464C3D3030303030- <1> 			db "EFL=00000000  ",0
  2545 00001EE4 303030202000        <1>
  2546 00001EEA 43533A3D3030303030- <1> 			db "CS:=00000000  ",0
  2547 00001EF3 303030202000        <1>
  2548 00001EF9 4549503D3030303030- <1> 			db "EIP=00000000",10,13,0
  2549 00001F02 3030300A0D00        <1>
  2550 00001F08 44533A3D3030303030- <1> 			db "DS:=00000000  ",0
  2551 00001F11 303030202000        <1>
  2552 00001F17 45533A3D3030303030- <1> 			db "ES:=00000000  ",0
  2553 00001F20 303030202000        <1>
  2554 00001F26 46533A3D3030303030- <1> 			db "FS:=00000000  ",0
  2555 00001F2F 303030202000        <1>
  2556 00001F35 47533A3D3030303030- <1> 			db "GS:=00000000  ",0
  2557 00001F3E 303030202000        <1>
  2558 00001F44 53533A3D3030303030- <1> 			db "SS:=00000000",10,13,0
  2559 00001F4D 3030300A0D00        <1>
  2560 00001F53 4541583D3030303030- <1> 			db "EAX=00000000  ",0
  2561 00001F5C 303030202000        <1>
  2562 00001F62 4543583D3030303030- <1> 			db "ECX=00000000  ",0
  2563 00001F6B 303030202000        <1>
  2564 00001F71 4544583D3030303030- <1> 			db "EDX=00000000  ",0
  2565 00001F7A 303030202000        <1>
  2566 00001F80 4542583D3030303030- <1> 			db "EBX=00000000",10,13,0
  2567 00001F89 3030300A0D00        <1>
  2568 00001F8F 4553503D3030303030- <1> 			db "ESP=00000000  ",0
  2569 00001F98 303030202000        <1>
  2570 00001F9E 4542503D3030303030- <1> 			db "EBP=00000000  ",0
  2571 00001FA7 303030202000        <1>
  2572 00001FAD 4553493D3030303030- <1> 			db "ESI=00000000  ",0
  2573 00001FB6 303030202000        <1>
  2574 00001FBC 4544493D3030303030- <1> unhndrgend:	db "EDI=00000000",10,13,0
  2575 00001FC5 3030300A0D00        <1>
  2576 00001FCB 4352303D3030303030- <1> 			db "CR0=00000000  ",0
  2577 00001FD4 303030202000        <1>
  2578 00001FDA 4352323D3030303030- <1> 			db "CR2=00000000  ",0
  2579 00001FE3 303030202000        <1>
  2580 00001FE9 4352333D3030303030- <1> 			db "CR3=00000000  ",0
  2581 00001FF2 303030202000        <1>
  2582 00001FF8 4352343D3030303030- <1> 			db "CR4=00000000",10,13,0
  2583 00002001 3030300A0D00        <1>
  2584 00002007 FFFFFFFF3030303030- <1> unhandcode: times 2 db 255,255,255,255,"00000000  ",0	;;this dumps the code before and after the interrupt in question
  2585 00002010 303030202000<rept>  <1>
  2586 00002025 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000 ",255,0
  2587 0000202E 30303020FF00        <1>
  2588 00002034 FFFFFF5B3030303030- <1> 			db 255,255,255,"[00000000] ",0
  2589 0000203D 3030305D2000        <1>
  2590 00002043 FFFFFFFF3030303030- <1> 			times 3 db 255,255,255,255,"00000000  ",0
  2591 0000204C 303030202000<rept>  <1>
  2592 00002070 FFFFFFFF3030303030- <1> 			db 255,255,255,255,"00000000",10,13,0
  2593 00002079 3030300A0D00        <1>
  2594                              <1> unhandmsgend:
  2595                              <1> 
  2596                              <1> errortypes:
  2597 0000207F [C3200000]          <1> 			dd err0
  2598 00002083 [2A210000]          <1> 			dd err1
  2599 00002087 [8D210000]          <1> 			dd err2
  2600 0000208B [E3210000]          <1> 			dd err3
  2601 0000208F [4A220000]          <1> 			dd err4
  2602 00002093 [9E220000]          <1> 			dd err5
  2603 00002097 [0B230000]          <1> 			dd err6
  2604 0000209B [76230000]          <1> 			dd err7
  2605 0000209F [C2230000]          <1> 			dd err8
  2606 000020A3 [21240000]          <1> 			dd err9
  2607 000020A7 [7C240000]          <1> 			dd err10
  2608 000020AB [C9240000]          <1> 			dd err11
  2609 000020AF [1B250000]          <1> 			dd err12
  2610 000020B3 [76250000]          <1> 			dd err13
  2611 000020B7 [DB250000]          <1> 			dd err14
  2612 000020BB [19260000]          <1> 			dd err15
  2613                              <1> errortypesend:
  2614 000020BF [A7260000]          <1> 			dd unknownerror
  2615                              <1> 			
  2616 000020C3 4469766973696F6E20- <1> err0	db "Division by zero:",10,13
  2617 000020CC 6279207A65726F3A0A- <1>
  2618 000020D5 0D                  <1>
  2619 000020D6 546563686E6963616C- <1> 		db "Technically lim a",246,"x = ",236," when a is any real number. Happy Easter!",10,13
  2620 000020DF 6C79206C696D2061F6- <1>
  2621 000020E8 78203D20EC20776865- <1>
  2622 000020F1 6E206120697320616E- <1>
  2623 000020FA 79207265616C206E75- <1>
  2624 00002103 6D6265722E20486170- <1>
  2625 0000210C 707920456173746572- <1>
  2626 00002115 210A0D              <1>
  2627 00002118 202020202020202020- <1> 		db "            x",26,"0",10,13,0
  2628 00002121 202020781A300A0D00  <1>
  2629                              <1> 		
  2630 0000212A 53696E676C652D7374- <1> err1	db "Single-step/Breakpoint:",10,13
  2631 00002133 65702F427265616B70- <1>
  2632 0000213C 6F696E743A0A0D      <1>
  2633 00002143 4120627265616B706F- <1> 		db "A breakpoint fault, breakpoint trap, or single-step trap was triggered.",10,13,0
  2634 0000214C 696E74206661756C74- <1>
  2635 00002155 2C20627265616B706F- <1>
  2636 0000215E 696E7420747261702C- <1>
  2637 00002167 206F722073696E676C- <1>
  2638 00002170 652D73746570207472- <1>
  2639 00002179 617020776173207472- <1>
  2640 00002182 696767657265642E0A- <1>
  2641 0000218B 0D00                <1>
  2642                              <1> 		
  2643 0000218D 4E6F6E6D61736B6162- <1> err2	db "Nonmaskable interrupt:",10,13
  2644 00002196 6C6520696E74657272- <1>
  2645 0000219F 7570743A0A0D        <1>
  2646 000021A5 412068617264776172- <1> 		db "A hardware interrupt was triggered that could not be masked",10,13,0
  2647 000021AE 6520696E7465727275- <1>
  2648 000021B7 707420776173207472- <1>
  2649 000021C0 696767657265642074- <1>
  2650 000021C9 68617420636F756C64- <1>
  2651 000021D2 206E6F74206265206D- <1>
  2652 000021DB 61736B65640A0D00    <1>
  2653                              <1> 		
  2654 000021E3 427265616B706F696E- <1> err3	db "Breakpoint:",10,13
  2655 000021EC 743A0A0D            <1>
  2656 000021F0 5468697320696E7465- <1> 		db "This interrupt is used in programs to show the stack and registers and can be",10,13
  2657 000021F9 727275707420697320- <1>
  2658 00002202 7573656420696E2070- <1>
  2659 0000220B 726F6772616D732074- <1>
  2660 00002214 6F2073686F77207468- <1>
  2661 0000221D 6520737461636B2061- <1>
  2662 00002226 6E6420726567697374- <1>
  2663 0000222F 65727320616E642063- <1>
  2664 00002238 616E2062650A0D      <1>
  2665 0000223F 69676E6F7265642E0A- <1> 		db "ignored.",10,13,0
  2666 00002248 0D00                <1>
  2667                              <1> 		
  2668 0000224A 4F766572666C6F773A- <1> err4	db "Overflow:",10,13
  2669 00002253 0A0D                <1>
  2670 00002255 5468652070726F6365- <1> 		db "The processor ran into an INTO instruction with the overflow flag set.",10,13,0
  2671 0000225E 73736F722072616E20- <1>
  2672 00002267 696E746F20616E2049- <1>
  2673 00002270 4E544F20696E737472- <1>
  2674 00002279 756374696F6E207769- <1>
  2675 00002282 746820746865206F76- <1>
  2676 0000228B 6572666C6F7720666C- <1>
  2677 00002294 6167207365742E0A0D- <1>
  2678 0000229D 00                  <1>
  2679                              <1> 		
  2680 0000229E 426F756E6473206368- <1> err5	db "Bounds check:",10,13
  2681 000022A7 65636B3A0A0D        <1>
  2682 000022AD 5468652070726F6365- <1> 		db "The processor rebounded from a BOUND instruction run on an operand that was out",10,13
  2683 000022B6 73736F72207265626F- <1>
  2684 000022BF 756E6465642066726F- <1>
  2685 000022C8 6D206120424F554E44- <1>
  2686 000022D1 20696E737472756374- <1>
  2687 000022DA 696F6E2072756E206F- <1>
  2688 000022E3 6E20616E206F706572- <1>
  2689 000022EC 616E64207468617420- <1>
  2690 000022F5 776173206F75740A0D  <1>
  2691 000022FE 6F6620626F756E6473- <1> 		db "of bounds.",10,13,0
  2692 00002307 2E0A0D00            <1>
  2693                              <1> 		
  2694 0000230B 496E76616C6964206F- <1> err6	db "Invalid opcode:",10,13
  2695 00002314 70636F64653A0A0D    <1>
  2696 0000231C 5468652070726F6365- <1> 		db "The processor has no idea what it was trying to execute. Don't run SSE4 code",10,13
  2697 00002325 73736F722068617320- <1>
  2698 0000232E 6E6F20696465612077- <1>
  2699 00002337 686174206974207761- <1>
  2700 00002340 7320747279696E6720- <1>
  2701 00002349 746F20657865637574- <1>
  2702 00002352 652E20446F6E277420- <1>
  2703 0000235B 72756E205353453420- <1>
  2704 00002364 636F64650A0D        <1>
  2705 0000236A 6F6E20343836277321- <1> 		db "on 486's!",10,13,0
  2706 00002373 0A0D00              <1>
  2707                              <1> 		
  2708 00002376 436F70726F63657373- <1> err7	db "Coprocessor not available:",10,13
  2709 0000237F 6F72206E6F74206176- <1>
  2710 00002388 61696C61626C653A0A- <1>
  2711 00002391 0D                  <1>
  2712 00002392 446F6E277420796F75- <1> 		db "Don't you know they don't make those anymore!",10,13,0
  2713 0000239B 206B6E6F7720746865- <1>
  2714 000023A4 7920646F6E2774206D- <1>
  2715 000023AD 616B652074686F7365- <1>
  2716 000023B6 20616E796D6F726521- <1>
  2717 000023BF 0A0D00              <1>
  2718                              <1> 		
  2719 000023C2 446F75626C65206661- <1> err8	db "Double fault:",10,13
  2720 000023CB 756C743A0A0D        <1>
  2721 000023D1 546865206578636570- <1> 		db "The exception handler could not handle that it could not handle an exception.",10,13,0
  2722 000023DA 74696F6E2068616E64- <1>
  2723 000023E3 6C657220636F756C64- <1>
  2724 000023EC 206E6F742068616E64- <1>
  2725 000023F5 6C6520746861742069- <1>
  2726 000023FE 7420636F756C64206E- <1>
  2727 00002407 6F742068616E646C65- <1>
  2728 00002410 20616E206578636570- <1>
  2729 00002419 74696F6E2E0A0D00    <1>
  2730                              <1> 		
  2731 00002421 436F70726F63657373- <1> err9	db "Coprocessor segment overrun:",10,13,0
  2732 0000242A 6F72207365676D656E- <1>
  2733 00002433 74206F76657272756E- <1>
  2734 0000243C 3A0A0D00            <1>
  2735 00002440 54686973206E657665- <1> 		db "This never happens in modern computers, and never should.",10,13,0
  2736 00002449 722068617070656E73- <1>
  2737 00002452 20696E206D6F646572- <1>
  2738 0000245B 6E20636F6D70757465- <1>
  2739 00002464 72732C20616E64206E- <1>
  2740 0000246D 657665722073686F75- <1>
  2741 00002476 6C642E0A0D00        <1>
  2742                              <1> 
  2743 0000247C 496E76616C69642054- <1> err10	db "Invalid TSS:",10,13
  2744 00002485 53533A0A0D          <1>
  2745 0000248A 546865205453532074- <1> 		db "The TSS that was switched to is invalid. Nothing funny here.",10,13,0
  2746 00002493 686174207761732073- <1>
  2747 0000249C 776974636865642074- <1>
  2748 000024A5 6F20697320696E7661- <1>
  2749 000024AE 6C69642E204E6F7468- <1>
  2750 000024B7 696E672066756E6E79- <1>
  2751 000024C0 20686572652E0A0D00  <1>
  2752                              <1> 		
  2753 000024C9 5365676D656E74206E- <1> err11	db "Segment not present:",10,13
  2754 000024D2 6F742070726573656E- <1>
  2755 000024DB 743A0A0D            <1>
  2756 000024DF 546865207072657365- <1> 		db "The present bit of the segment descriptor is set to zero.",10,13,0
  2757 000024E8 6E7420626974206F66- <1>
  2758 000024F1 20746865207365676D- <1>
  2759 000024FA 656E74206465736372- <1>
  2760 00002503 6970746F7220697320- <1>
  2761 0000250C 73657420746F207A65- <1>
  2762 00002515 726F2E0A0D00        <1>
  2763                              <1> 		
  2764 0000251B 537461636B20657863- <1> err12	db "Stack exception:",10,13
  2765 00002524 657074696F6E3A0A0D  <1>
  2766 0000252D 546865205353206465- <1> 		db "The SS descriptor is invalid or not present or its limit is too small.",10,13,0
  2767 00002536 7363726970746F7220- <1>
  2768 0000253F 697320696E76616C69- <1>
  2769 00002548 64206F72206E6F7420- <1>
  2770 00002551 70726573656E74206F- <1>
  2771 0000255A 7220697473206C696D- <1>
  2772 00002563 697420697320746F6F- <1>
  2773 0000256C 20736D616C6C2E0A0D- <1>
  2774 00002575 00                  <1>
  2775                              <1> 		
  2776 00002576 47656E6572616C2070- <1> err13	db "General protection violation:",10,13
  2777 0000257F 726F74656374696F6E- <1>
  2778 00002588 2076696F6C6174696F- <1>
  2779 00002591 6E3A0A0D            <1>
  2780 00002595 596F752076696F6C61- <1> 		db "You violated the computer. Step away slowly. The FBI is on its way.",10,13,0
  2781 0000259E 746564207468652063- <1>
  2782 000025A7 6F6D70757465722E20- <1>
  2783 000025B0 537465702061776179- <1>
  2784 000025B9 20736C6F776C792E20- <1>
  2785 000025C2 546865204642492069- <1>
  2786 000025CB 73206F6E2069747320- <1>
  2787 000025D4 7761792E0A0D00      <1>
  2788                              <1> 		
  2789 000025DB 50616765206661756C- <1> err14	db "Page fault:",10,13
  2790 000025E4 743A0A0D            <1>
  2791 000025E8 546865207061676520- <1> 		db "The page that was requested was not available.",10,13,0
  2792 000025F1 746861742077617320- <1>
  2793 000025FA 726571756573746564- <1>
  2794 00002603 20776173206E6F7420- <1>
  2795 0000260C 617661696C61626C65- <1>
  2796 00002615 2E0A0D00            <1>
  2797                              <1> 		
  2798 00002619 526573657276656420- <1> err15	db "Reserved for Plan R:",10,13
  2799 00002622 666F7220506C616E20- <1>
  2800 0000262B 523A0A0D            <1>
  2801 0000262F 5468697320696E7465- <1> 		db "This interrupt is reserved for usage only by the military when it is necessary",10,13
  2802 00002638 727275707420697320- <1>
  2803 00002641 726573657276656420- <1>
  2804 0000264A 666F72207573616765- <1>
  2805 00002653 206F6E6C7920627920- <1>
  2806 0000265C 746865206D696C6974- <1>
  2807 00002665 617279207768656E20- <1>
  2808 0000266E 6974206973206E6563- <1>
  2809 00002677 6573736172790A0D    <1>
  2810 0000267F 746F20696E69746961- <1> 		db "to initiate a full-scale coup d'",130,"tat.",10,13,0
  2811 00002688 746520612066756C6C- <1>
  2812 00002691 2D7363616C6520636F- <1>
  2813 0000269A 757020642782746174- <1>
  2814 000026A3 2E0A0D00            <1>
  2815                              <1> 		
  2816 000026A7 576861742074686520- <1> unknownerror db "What the hell just happened? Is everyone okay? Hard drive? Video card?",10,13
  2817 000026B0 68656C6C206A757374- <1>
  2818 000026B9 2068617070656E6564- <1>
  2819 000026C2 3F2049732065766572- <1>
  2820 000026CB 796F6E65206F6B6179- <1>
  2821 000026D4 3F2048617264206472- <1>
  2822 000026DD 6976653F2056696465- <1>
  2823 000026E6 6F20636172643F0A0D  <1>
  2824 000026EF 4D656D6F72793F2041- <1> 			db	"Memory? Are you there?",10,13,0
  2825 000026F8 726520796F75207468- <1>
  2826 00002701 6572653F0A0D00      <1>
  2827                                      %include 'source/ints.asm'
  2828                              <1> newints:	;;for great justice
  2829 00002708 80FC00              <1> 	cmp ah, 0		;;originally 0
  2830 0000270B 0F845B000000        <1> 	je near intx0   ;;0=kills app
  2831 00002711 80FC01              <1> 	cmp ah, 1		;;originally 1
  2832 00002714 0F8457000000        <1> 	je near intx1   ;;3=print string
  2833 0000271A 80FC02              <1> 	cmp ah, 2		;;originally 2
  2834 0000271D 0F8458000000        <1> 	je near intx2	;;4=read string
  2835 00002723 80FC03              <1> 	cmp ah, 3		;;originally 3
  2836 00002726 0F8459000000        <1> 	je near intx3	;;6=clear screen
  2837 0000272C 80FC04              <1> 	cmp ah, 4		;;originally 4
  2838 0000272F 0F845A000000        <1> 	je near intx4	;;5=read and print string
  2839 00002735 80FC05              <1> 	cmp ah, 5		;;originally 5		
  2840 00002738 0F845B000000        <1> 	je near intx5	;;2=get char
  2841 0000273E 80FC06              <1> 	cmp ah, 6		;;originally 6
  2842 00002741 0F845C000000        <1> 	je near intx6	;;1=print char
  2843 00002747 80FC07              <1> 	cmp ah, 7
  2844 0000274A 0F845D000000        <1> 	je near intx7	;;read file
  2845 00002750 80FC09              <1> 	cmp ah, 9
  2846 00002753 0F845E000000        <1> 	je near intx9	;;convert number to string
  2847 00002759 80FC0A              <1> 	cmp ah, 10
  2848 0000275C 0F846D000000        <1> 	je near intx10	;;convert string to number
  2849 00002762 80FC0B              <1> 	cmp ah, 11
  2850 00002765 0F846A000000        <1> 	je near intx11	;;create thread
  2851 0000276B C3                  <1> 	ret
  2852                              <1> 	
  2853                              <1> ;;the jmp timerinterrupt's ensure that task switches occur
  2854                              <1> 	
  2855                              <1> intx0:
  2856 0000276C E9E1080000          <1> 	jmp nwcmd
  2857                              <1> intx1:
  2858 00002771 E88C020000          <1> 	call int303
  2859 00002776 E9D1DCFFFF          <1> 	jmp timerinterrupt
  2860                              <1> intx2:
  2861 0000277B E8AA020000          <1> 	call int304
  2862 00002780 E9C7DCFFFF          <1> 	jmp timerinterrupt
  2863                              <1> intx3:
  2864 00002785 E88E050000          <1> 	call int306
  2865 0000278A E9BDDCFFFF          <1> 	jmp timerinterrupt
  2866                              <1> intx4:
  2867 0000278F E8D5020000          <1> 	call int305
  2868 00002794 E9B3DCFFFF          <1> 	jmp timerinterrupt
  2869                              <1> intx5:
  2870 00002799 E80B020000          <1> 	call int302
  2871 0000279E E9A9DCFFFF          <1> 	jmp timerinterrupt
  2872                              <1> intx6:
  2873 000027A3 E83D000000          <1> 	call int301
  2874 000027A8 E99FDCFFFF          <1> 	jmp timerinterrupt
  2875                              <1> intx7:
  2876 000027AD E803420000          <1> 	call loadfile
  2877 000027B2 E995DCFFFF          <1> 	jmp timerinterrupt
  2878                              <1> intx9:
  2879 000027B7 3C00                <1> 	cmp al, 0
  2880 000027B9 750A                <1> 	jne intx9B
  2881 000027BB E8510E0000          <1> 	call showdec
  2882 000027C0 E987DCFFFF          <1> 	jmp timerinterrupt
  2883                              <1> intx9B:
  2884 000027C5 E8A30D0000          <1> 	call showhex
  2885 000027CA E97DDCFFFF          <1> 	jmp timerinterrupt
  2886                              <1> intx10:
  2887 000027CF E8D60E0000          <1> 	call cnvrttxt	;the string goes into esi, number into ecx
  2888 000027D4 CF                  <1> 	iret
  2889                              <1> intx11:
  2890 000027D5 E814480000          <1> 	call threadfork
  2891 000027DA CF                  <1> 	iret
  2892                              <1> 	
  2893 000027DB 0000                <1> linebeginpos dw 0
  2894 000027DD 0000                <1> videobufpos: dw 0
  2895 000027DF 0000                <1> charpos db 0,0
  2896 000027E1 501E                <1> charxy db 80,30
  2897 000027E3 0000                <1> charbuf dw 0
  2898                              <1> 	
  2899                              <1> int301:	;;print char, char in al, modifier in bl, will run videobufcopy if called as is
  2900 000027E5 E808000000          <1> 	call int301prnt
  2901 000027EA E876050000          <1> 	call termcopy
  2902 000027EF C3                  <1> 	ret
  2903 000027F0 00                  <1> termguion db 0
  2904 000027F1 00                  <1> termcopyon db 0
  2905                              <1> int301prnt:
  2906 000027F2 88DC                <1> 	mov ah, bl
  2907 000027F4 66A3[E3270000]      <1> 	mov [charbuf], ax
  2908 000027FA 31DB                <1> 	xor ebx, ebx
  2909 000027FC 668B1D[DD270000]    <1> 	mov bx, [videobufpos]
  2910 00002803 BF[8F1D0000]        <1> 	mov edi, videobuf
  2911 00002808 01DF                <1> 	add edi, ebx
  2912 0000280A 66A1[632D0000]      <1> 	mov ax, [removedvideo]
  2913 00002810 668907              <1> 	mov [edi], ax
  2914 00002813 66A1[E3270000]      <1> 	mov ax, [charbuf]
  2915 00002819 31D2                <1> 	xor edx, edx
  2916 0000281B 668B15[DF270000]    <1> 	mov dx, [charpos]
  2917 00002822 31C9                <1> 	xor ecx, ecx
  2918 00002824 668B0D[E1270000]    <1> 	mov cx, [charxy]
  2919 0000282B 3C09                <1> 	cmp al, 9
  2920 0000282D 0F8463000000        <1> 	je near int301tab
  2921 00002833 3C0D                <1> 	cmp al, 13
  2922 00002835 0F8478000000        <1> 	je near int301cr
  2923 0000283B 3C0A                <1> 	cmp al, 10
  2924 0000283D 0F84A1000000        <1> 	je near int301nl
  2925 00002843 3C08                <1> 	cmp al, 8
  2926 00002845 0F847C000000        <1> 	je near int301bs
  2927 0000284B 3CFF                <1> 	cmp al, 255		;;null character
  2928 0000284D 0F841B000000        <1> 	je near donescr
  2929 00002853 668907              <1> 	mov [edi], ax
  2930 00002856 81C702000000        <1> 	add edi, 2
  2931 0000285C FEC2                <1> 	inc dl
  2932                              <1> donecrnl:
  2933 0000285E 38CA                <1> 	cmp dl, cl
  2934 00002860 0F83AF000000        <1> 	jae near int301eol
  2935                              <1> doneeol:
  2936 00002866 38EE                <1> 	cmp dh, ch
  2937 00002868 0F83C5000000        <1> 	jae near int301scr	
  2938                              <1> donescr:
  2939 0000286E 89FB                <1> 	mov ebx, edi
  2940 00002870 668B07              <1> 	mov ax, [edi]
  2941 00002873 66A3[632D0000]      <1> 	mov [removedvideo], ax
  2942 00002879 81EB[8F1D0000]      <1> 	sub ebx, videobuf
  2943 0000287F 66891D[DD270000]    <1> 	mov [videobufpos], bx
  2944 00002886 668915[DF270000]    <1> 	mov [charpos], dx
  2945 0000288D 66A1[E3270000]      <1> 	mov ax, [charbuf]
  2946 00002893 88E3                <1> 	mov bl, ah
  2947 00002895 C3                  <1> 	ret
  2948                              <1> 	
  2949                              <1> 	int301tab:
  2950 00002896 47                  <1> 		inc edi
  2951 00002897 FEC2                <1> 		inc dl	;make sure it works
  2952 00002899 C1EF04              <1> 		shr edi, 4
  2953 0000289C C1E704              <1> 		shl edi, 4
  2954 0000289F 81C710000000        <1> 		add edi, 16
  2955 000028A5 C0EA03              <1> 		shr dl, 3
  2956 000028A8 C0E203              <1> 		shl dl, 3
  2957 000028AB 80C208              <1> 		add dl, 8
  2958 000028AE 4F                  <1> 		dec edi
  2959 000028AF FECA                <1> 		dec dl
  2960 000028B1 EBAB                <1> 		jmp donecrnl
  2961                              <1> 	
  2962                              <1> 	int301cr:
  2963 000028B3 30D2                <1> 		xor dl, dl
  2964 000028B5 31DB                <1> 		xor ebx, ebx
  2965 000028B7 BF[8F1D0000]        <1> 		mov edi, videobuf
  2966 000028BC 668B1D[DB270000]    <1> 		mov bx, [linebeginpos]
  2967 000028C3 01DF                <1> 		add edi, ebx
  2968 000028C5 EB97                <1> 		jmp donecrnl
  2969                              <1> 			
  2970                              <1> 	int301bs:
  2971 000028C7 80FA00              <1> 		cmp dl, 0
  2972 000028CA 740D                <1> 		je int301backline
  2973                              <1> 	int301nobmr:
  2974 000028CC FECA                <1> 		dec dl
  2975 000028CE 6631C0              <1> 		xor ax, ax
  2976 000028D1 81EF02000000        <1> 		sub edi, 2
  2977 000028D7 EB85                <1> 		jmp donecrnl
  2978                              <1> 	int301backline:
  2979 000028D9 88CA                <1> 		mov dl, cl
  2980 000028DB 80FE00              <1> 		cmp dh, 0
  2981 000028DE 74EC                <1> 		je int301nobmr
  2982 000028E0 FECE                <1> 		dec dh
  2983 000028E2 EBE8                <1> 		jmp int301nobmr
  2984                              <1> 		
  2985                              <1> 	int301nl:
  2986 000028E4 FEC6                <1> 		inc dh
  2987 000028E6 31DB                <1> 		xor ebx, ebx
  2988 000028E8 88CB                <1> 		mov bl, cl
  2989 000028EA 66D1E3              <1> 		shl bx, 1
  2990 000028ED BF[8F1D0000]        <1> 		mov edi, videobuf
  2991 000028F2 66031D[DD270000]    <1> 		add bx, [videobufpos]
  2992 000028F9 01DF                <1> 		add edi, ebx
  2993 000028FB 31DB                <1> 		xor ebx, ebx
  2994 000028FD 88CB                <1> 		mov bl, cl
  2995 000028FF 66D1E3              <1> 		shl bx, 1
  2996 00002902 66031D[DB270000]    <1> 		add bx, [linebeginpos]
  2997 00002909 66891D[DB270000]    <1> 		mov [linebeginpos], bx
  2998 00002910 E949FFFFFF          <1> 		jmp donecrnl
  2999                              <1> 		
  3000                              <1> 	int301eol:
  3001 00002915 30D2                <1> 		xor dl, dl
  3002 00002917 FEC6                <1> 		inc dh
  3003 00002919 31DB                <1> 		xor ebx, ebx
  3004 0000291B 88CB                <1> 		mov bl, cl
  3005 0000291D 66D1E3              <1> 		shl bx, 1
  3006 00002920 66031D[DB270000]    <1> 		add bx, [linebeginpos]
  3007 00002927 66891D[DB270000]    <1> 		mov [linebeginpos], bx
  3008 0000292E E933FFFFFF          <1> 		jmp doneeol
  3009                              <1> 	int301scr:
  3010 00002933 FECE                <1> 		dec dh
  3011 00002935 BF[8F1D0000]        <1> 		mov edi, videobuf
  3012 0000293A 31DB                <1> 		xor ebx, ebx
  3013 0000293C 88CB                <1> 		mov bl, cl
  3014 0000293E 66D1E3              <1> 		shl bx, 1
  3015 00002941 01FB                <1> 		add ebx, edi
  3016                              <1> 	intscrollloop:
  3017 00002943 668B03              <1> 		mov ax, [ebx]
  3018 00002946 668907              <1> 		mov [edi], ax
  3019 00002949 81C702000000        <1> 		add edi, 2
  3020 0000294F 81C302000000        <1> 		add ebx, 2
  3021 00002955 FEC9                <1> 		dec cl
  3022 00002957 80F900              <1> 		cmp cl, 0
  3023 0000295A 75E7                <1> 		jne intscrollloop
  3024 0000295C 8A0D[E1270000]      <1> 		mov cl, [charxy]
  3025 00002962 FECD                <1> 		dec ch
  3026 00002964 80FD01              <1> 		cmp ch, 1
  3027 00002967 77DA                <1> 		ja intscrollloop
  3028 00002969 6631C0              <1> 		xor ax, ax
  3029 0000296C 81EF[8F1D0000]      <1> 		sub edi, videobuf
  3030 00002972 66893D[DB270000]    <1> 		mov [linebeginpos], di
  3031 00002979 81C7[8F1D0000]      <1> 		add edi, videobuf
  3032 0000297F 89FB                <1> 		mov ebx, edi
  3033                              <1> 	intloopclear:
  3034 00002981 668903              <1> 		mov [ebx], ax
  3035 00002984 81C302000000        <1> 		add ebx, 2
  3036 0000298A FEC9                <1> 		dec cl
  3037 0000298C 80F900              <1> 		cmp cl, 0
  3038 0000298F 75F0                <1> 		jne intloopclear
  3039 00002991 FECD                <1> 		dec ch
  3040 00002993 80FD00              <1> 		cmp ch, 0
  3041 00002996 75E9                <1> 		jne intloopclear
  3042 00002998 668B0D[E1270000]    <1> 		mov cx, [charxy]
  3043 0000299F E9CAFEFFFF          <1> 		jmp donescr
  3044                              <1> 		
  3045                              <1> 		
  3046 000029A4 0000                <1> lastkey db 0,0
  3047 000029A6 00                  <1> trans db 0
  3048                              <1> getkey:
  3049 000029A7 30C0                <1> 	xor al, al
  3050                              <1> 	int302:		;;get char, if al is 0, wait for key
  3051 000029A9 C605[A6290000]01    <1> 		mov byte [trans], 1
  3052 000029B0 3C01                <1> 		cmp al, 1
  3053 000029B2 7307                <1> 		jae transcheck
  3054 000029B4 C605[A6290000]00    <1> 		mov byte [trans], 0
  3055                              <1> 	transcheck:
  3056 000029BB E8C41E0000          <1> 		call guistartin
  3057 000029C0 8A3D[A6290000]      <1> 		mov bh, [trans]
  3058 000029C6 66A1[A4290000]      <1> 		mov ax, [lastkey]
  3059 000029CC 80FC1C              <1> 		cmp ah, 1Ch
  3060 000029CF 7419                <1> 		je int302enter
  3061 000029D1 803D[5F480000]E0    <1> 		cmp byte [specialkey], 0xE0
  3062 000029D8 7504                <1> 		jne nospecialtrans
  3063 000029DA 88C3                <1> 		mov bl, al
  3064 000029DC 30C0                <1> 		xor al, al
  3065                              <1> 	nospecialtrans:
  3066 000029DE 08C7                <1> 		or bh, al
  3067 000029E0 80FF00              <1> 		cmp bh, 0
  3068 000029E3 74D6                <1> 		je transcheck
  3069 000029E5 E902000000          <1> 		jmp int302end
  3070                              <1> 	int302enter:
  3071 000029EA B00D                <1> 		mov al, 13
  3072                              <1> 	int302end:
  3073 000029EC C3                  <1> 		ret
  3074                              <1> 	
  3075 000029ED 00                  <1> endkey303 db 0
  3076                              <1> 	printquiet:
  3077 000029EE 6631C0              <1> 		xor ax, ax
  3078 000029F1 66BB0700            <1> 		mov bx, 7
  3079 000029F5 E818000000          <1> 		call int303b
  3080 000029FA C3                  <1> 		ret
  3081                              <1>     print:
  3082 000029FB 6631C0              <1> 		xor ax, ax
  3083 000029FE 66BB0700            <1> 		mov bx, 7
  3084                              <1> 	int303:	;;print line, al=last key,bl=modifier, esi=buffer
  3085 00002A02 A2[ED290000]        <1> 		mov [endkey303], al
  3086 00002A07 E806000000          <1> 		call int303b
  3087 00002A0C E854030000          <1> 		call termcopy
  3088 00002A11 C3                  <1> 		ret
  3089                              <1> 	int303b:
  3090 00002A12 8A06                <1> 		mov al, [esi]
  3091 00002A14 3A05[ED290000]      <1> 		cmp al, [endkey303]
  3092 00002A1A 7408                <1> 		je doneint303
  3093 00002A1C E8D1FDFFFF          <1> 		call int301prnt
  3094 00002A21 46                  <1> 		inc esi
  3095 00002A22 EBEE                <1> 		jmp int303b
  3096                              <1> 	doneint303:
  3097 00002A24 C3                  <1> 		ret
  3098                              <1> 		
  3099 00002A25 00                  <1> endkey304 db 0
  3100 00002A26 00000000            <1> endbuffer304 dd 0
  3101                              <1> 	int304:	;;get line, al=last key, esi = buffer, edi = endbuffer
  3102 00002A2A A2[252A0000]        <1> 		mov [endkey304], al
  3103 00002A2F 893D[262A0000]      <1> 		mov [endbuffer304], edi
  3104                              <1> 	int304b:
  3105 00002A35 56                  <1> 		push esi
  3106 00002A36 30C0                <1> 		xor al, al
  3107 00002A38 E86CFFFFFF          <1> 		call int302
  3108 00002A3D 5E                  <1> 		pop esi
  3109 00002A3E 8806                <1> 		mov [esi], al
  3110 00002A40 46                  <1> 		inc esi
  3111 00002A41 3B35[262A0000]      <1> 		cmp esi, [endbuffer304]
  3112 00002A47 7308                <1> 		jae int304done
  3113 00002A49 3A05[252A0000]      <1> 		cmp al, [endkey304]
  3114 00002A4F 75E4                <1> 		jne int304b
  3115                              <1> 	int304done:
  3116 00002A51 4E                  <1> 		dec esi
  3117 00002A52 C60600              <1> 		mov byte [esi], 0
  3118 00002A55 C3                  <1> 	ret
  3119                              <1> 	
  3120 00002A56 00                  <1> endkey305 db 0
  3121 00002A57 00                  <1> modkey305 db 0
  3122 00002A58 00000000            <1> firstesi305 dd 0
  3123 00002A5C 00                  <1> commandedit db 0
  3124 00002A5D 00                  <1> txtmask db 0
  3125 00002A5E 00000000            <1> buftxtloc dd 0
  3126 00002A62 00000000            <1> endbuffer305 dd 0
  3127 00002A66 082000              <1> backcursor db 8," ",0
  3128                              <1> 	int305:	;;print and get line, al=last key, bl=modifier, esi=buffer, edi=bufferend
  3129 00002A69 8935[5E2A0000]      <1> 		mov [buftxtloc], esi
  3130 00002A6F A2[562A0000]        <1> 		mov [endkey305], al
  3131 00002A74 881D[572A0000]      <1> 		mov [modkey305], bl
  3132 00002A7A 8935[582A0000]      <1> 		mov [firstesi305], esi
  3133 00002A80 893D[622A0000]      <1> 		mov [endbuffer305], edi
  3134                              <1> 	int305b:
  3135 00002A86 56                  <1> 		push esi
  3136 00002A87 B001                <1> 		mov al, 1
  3137 00002A89 E81BFFFFFF          <1> 		call int302	;then get it
  3138 00002A8E 5E                  <1> 		pop esi
  3139 00002A8F 80FC48              <1> 		cmp ah, 0x48
  3140 00002A92 0F846F010000        <1> 		je near int305up
  3141 00002A98 80FC50              <1> 		cmp ah, 0x50
  3142 00002A9B 0F8449010000        <1> 		je near int305down
  3143 00002AA1 80FC4D              <1> 		cmp ah, 0x4D
  3144 00002AA4 0F84FE000000        <1> 		je near int305right
  3145 00002AAA 80FC4B              <1> 		cmp ah, 0x4B
  3146 00002AAD 0F84BC000000        <1> 		je near int305left
  3147 00002AB3 3C08                <1> 		cmp al, 8
  3148 00002AB5 0F843F020000        <1> 		je near int305bscheck
  3149 00002ABB 3C00                <1> 		cmp al, 0
  3150 00002ABD 74C7                <1> 		je int305b
  3151 00002ABF 80FC00              <1> 		cmp ah, 0
  3152 00002AC2 74C2                <1> 		je int305b
  3153 00002AC4 8806                <1> 		mov [esi], al
  3154 00002AC6 46                  <1> 		inc esi
  3155                              <1> 	bscheckequal:
  3156 00002AC7 8A1D[572A0000]      <1> 		mov bl, [modkey305]
  3157 00002ACD 8A3D[5D2A0000]      <1> 		mov bh, [txtmask]
  3158 00002AD3 80FF00              <1> 		cmp bh, 0
  3159 00002AD6 7402                <1> 		je nomasktxt
  3160 00002AD8 88F8                <1> 		mov al, bh
  3161                              <1> 	nomasktxt:
  3162 00002ADA E806FDFFFF          <1> 		call int301
  3163 00002ADF 56                  <1> 		push esi
  3164 00002AE0 66A3[6D2B0000]      <1> 		mov [int305axcache], ax
  3165 00002AE6 8A25[562A0000]      <1> 		mov ah, [endkey305]
  3166 00002AEC 38E0                <1> 		cmp al, ah
  3167 00002AEE 7429                <1> 		je nobackprintbuftxt2
  3168 00002AF0 BE[701A0000]        <1> 		mov esi, buftxt2
  3169 00002AF5 E8F4FEFFFF          <1> 		call printquiet
  3170 00002AFA B020                <1> 		mov al, " "
  3171 00002AFC E8F1FCFFFF          <1> 		call int301prnt
  3172 00002B01 B008                <1> 		mov al, 8
  3173 00002B03 81FE[701A0000]      <1> 		cmp esi, buftxt2
  3174 00002B09 740E                <1> 		je nobackprintbuftxt2
  3175                              <1> 	backprintbuftxt2:
  3176 00002B0B E8E2FCFFFF          <1> 		call int301prnt
  3177 00002B10 4E                  <1> 		dec esi
  3178 00002B11 81FE[701A0000]      <1> 		cmp esi, buftxt2
  3179 00002B17 77F2                <1> 		ja backprintbuftxt2
  3180                              <1> 	nobackprintbuftxt2:
  3181 00002B19 E8C7FCFFFF          <1> 		call int301
  3182 00002B1E 5E                  <1> 		pop esi
  3183 00002B1F 3B35[622A0000]      <1> 		cmp esi, [endbuffer305]
  3184 00002B25 0F8314000000        <1> 		jae near doneint305
  3185 00002B2B 66A1[6D2B0000]      <1> 		mov ax, [int305axcache]
  3186 00002B31 8A25[562A0000]      <1> 		mov ah, [endkey305]
  3187 00002B37 38E0                <1> 		cmp al, ah
  3188 00002B39 0F8547FFFFFF        <1> 		jne int305b
  3189                              <1> 	doneint305:
  3190 00002B3F 4E                  <1> 		dec esi
  3191 00002B40 BF[701A0000]        <1> 		mov edi, buftxt2
  3192                              <1> 	copylaterstuff:
  3193 00002B45 8A07                <1> 		mov al, [edi]
  3194 00002B47 3C00                <1> 		cmp al, 0
  3195 00002B49 7406                <1> 		je nocopylaterstuff
  3196 00002B4B 8806                <1> 		mov [esi], al
  3197 00002B4D 47                  <1> 		inc edi
  3198 00002B4E 46                  <1> 		inc esi
  3199 00002B4F EBF4                <1> 		jmp copylaterstuff
  3200                              <1> 	nocopylaterstuff:
  3201 00002B51 C60600              <1> 		mov byte [esi], 0
  3202 00002B54 E801000000          <1> 		call clearbuftxt2
  3203 00002B59 C3                  <1> 		ret
  3204                              <1> 	
  3205                              <1> 	clearbuftxt2:
  3206 00002B5A 30C0                <1> 		xor al, al
  3207 00002B5C BF[701A0000]        <1> 		mov edi, buftxt2
  3208                              <1> 	clearbuftxt2lp:
  3209 00002B61 8807                <1> 		mov [edi], al
  3210 00002B63 47                  <1> 		inc edi
  3211 00002B64 81FF[7A1B0000]      <1> 		cmp edi, buftxt
  3212 00002B6A 75F5                <1> 		jne clearbuftxt2lp
  3213 00002B6C C3                  <1> 		ret
  3214                              <1> 		
  3215 00002B6D 0000                <1> 	int305axcache dw 0
  3216                              <1> 		
  3217                              <1> 	int305left:
  3218 00002B6F 3B35[5E2A0000]      <1> 		cmp esi, [buftxtloc]
  3219 00002B75 0F840BFFFFFF        <1> 		je near int305b
  3220 00002B7B BF[701A0000]        <1> 		mov edi, buftxt2
  3221 00002B80 8A07                <1> 		mov al, [edi]
  3222                              <1> 	shiftbuftxt2:
  3223 00002B82 3C00                <1> 		cmp al, 0
  3224 00002B84 7409                <1> 		je noshiftbuftxt2
  3225 00002B86 47                  <1> 		inc edi
  3226 00002B87 8A27                <1> 		mov ah, [edi]
  3227 00002B89 8807                <1> 		mov [edi], al
  3228 00002B8B 88E0                <1> 		mov al, ah
  3229 00002B8D EBF3                <1> 		jmp shiftbuftxt2
  3230                              <1> 	noshiftbuftxt2:
  3231 00002B8F BF[701A0000]        <1> 		mov edi, buftxt2
  3232 00002B94 4E                  <1> 		dec esi
  3233 00002B95 8A06                <1> 		mov al, [esi]
  3234 00002B97 8807                <1> 		mov [edi], al
  3235 00002B99 C60600              <1> 		mov byte [esi], 0
  3236 00002B9C B008                <1> 		mov al, 8
  3237 00002B9E E842FCFFFF          <1> 		call int301
  3238 00002BA3 E9DEFEFFFF          <1> 		jmp int305b
  3239                              <1> 		
  3240                              <1> 	int305right:
  3241 00002BA8 BF[701A0000]        <1> 		mov edi, buftxt2
  3242 00002BAD 8A07                <1> 		mov al, [edi]
  3243 00002BAF 3C00                <1> 		cmp al, 0
  3244 00002BB1 0F84CFFEFFFF        <1> 		je near int305b
  3245 00002BB7 8806                <1> 		mov [esi], al
  3246                              <1> 	shiftbuftxt2lft:
  3247 00002BB9 3C00                <1> 		cmp al, 0
  3248 00002BBB 7408                <1> 		je noshiftbuftxt2lft
  3249 00002BBD 47                  <1> 		inc edi
  3250 00002BBE 8A07                <1> 		mov al, [edi]
  3251 00002BC0 8847FF              <1> 		mov [edi - 1], al
  3252 00002BC3 EBF4                <1> 		jmp shiftbuftxt2lft
  3253                              <1> 	noshiftbuftxt2lft:
  3254 00002BC5 8A06                <1> 		mov al, [esi]
  3255 00002BC7 46                  <1> 		inc esi
  3256 00002BC8 8A1D[572A0000]      <1> 		mov bl, [modkey305]
  3257 00002BCE E812FCFFFF          <1> 		call int301
  3258 00002BD3 E9AEFEFFFF          <1> 		jmp int305b
  3259                              <1> 		
  3260                              <1> 	int305downbck:
  3261 00002BD8 FECC                <1> 		dec ah
  3262 00002BDA 8825[5C2A0000]      <1> 		mov [commandedit], ah
  3263 00002BE0 E83A000000          <1> 		call int305bckspc
  3264 00002BE5 E99CFEFFFF          <1> 		jmp int305b
  3265                              <1> 	
  3266                              <1> 	int305down:
  3267 00002BEA 8A25[5C2A0000]      <1> 		mov ah, [commandedit]
  3268 00002BF0 80FC01              <1> 		cmp ah, 1
  3269 00002BF3 0F868DFEFFFF        <1> 		jbe near int305b
  3270 00002BF9 80FC02              <1> 		cmp ah, 2
  3271 00002BFC 74DA                <1> 		je int305downbck
  3272 00002BFE 80EC02              <1> 		sub ah, 2
  3273 00002C01 8825[5C2A0000]      <1> 		mov [commandedit], ah
  3274                              <1> 		
  3275                              <1> 	int305up:
  3276                              <1> 		;cmp bl, 0xE0
  3277                              <1> 		;jne int305b
  3278 00002C07 30C0                <1> 		xor al, al
  3279 00002C09 3805[5C2A0000]      <1> 		cmp [commandedit], al
  3280 00002C0F 0F8471FEFFFF        <1> 		je near int305b
  3281 00002C15 E805000000          <1> 		call int305bckspc
  3282 00002C1A E93C000000          <1> 		jmp getcurrentcommandstr
  3283                              <1> 	int305bckspc:
  3284 00002C1F 3B35[5E2A0000]      <1> 		cmp esi, [buftxtloc]
  3285 00002C25 7426                <1> 		je noint305upbck
  3286                              <1> 	int305upbckspclp:
  3287 00002C27 B008                <1> 		mov al, 8
  3288 00002C29 8A1D[572A0000]      <1> 		mov bl, [modkey305]
  3289 00002C2F E8BEFBFFFF          <1> 		call int301prnt
  3290 00002C34 B020                <1> 		mov al, " "
  3291 00002C36 E8B7FBFFFF          <1> 		call int301prnt
  3292 00002C3B B008                <1> 		mov al, 8
  3293 00002C3D E8A3FBFFFF          <1> 		call int301
  3294 00002C42 4E                  <1> 		dec esi
  3295 00002C43 3B35[5E2A0000]      <1> 		cmp esi, [buftxtloc]
  3296 00002C49 7402                <1> 		je noint305upbck
  3297 00002C4B EBDA                <1> 		jmp int305upbckspclp
  3298                              <1> 	noint305upbck:
  3299 00002C4D 8B3D[5B6E0000]      <1> 		mov edi, [currentcommandpos]
  3300 00002C53 81C7[5F6E0000]      <1> 		add edi, commandbuf
  3301 00002C59 4F                  <1> 		dec edi
  3302 00002C5A C3                  <1> 		ret
  3303                              <1> 	getcurrentcommandstr:
  3304 00002C5B 8A25[5C2A0000]      <1> 		mov ah, [commandedit]
  3305 00002C61 FE05[5C2A0000]      <1> 		inc byte [commandedit]
  3306                              <1> 	getccmdlp:
  3307 00002C67 4F                  <1> 		dec edi
  3308 00002C68 8A07                <1> 		mov al, [edi]
  3309 00002C6A 81FF[5F6E0000]      <1> 		cmp edi, commandbuf
  3310 00002C70 7231                <1> 		jb getcmdresetcommandbuf
  3311 00002C72 81EF[5F6E0000]      <1> 		sub edi, commandbuf
  3312 00002C78 3B3D[5B6E0000]      <1> 		cmp edi, [currentcommandpos]
  3313 00002C7E 0F8402FEFFFF        <1> 		je near int305b
  3314 00002C84 81C7[5F6E0000]      <1> 		add edi, commandbuf
  3315 00002C8A 3C00                <1> 		cmp al, 0
  3316 00002C8C 75D9                <1> 		jne getccmdlp
  3317 00002C8E FECC                <1> 		dec ah
  3318 00002C90 80FC00              <1> 		cmp ah, 0
  3319 00002C93 77D2                <1> 		ja getccmdlp
  3320 00002C95 47                  <1> 		inc edi
  3321 00002C96 81FF[5F720000]      <1> 		cmp edi, commandbufend
  3322 00002C9C 770D                <1> 		ja fixcmdbufb4moreint305
  3323 00002C9E E915000000          <1> 		jmp moreint305up
  3324                              <1> 	getcmdresetcommandbuf:
  3325 00002CA3 BF[5F720000]        <1> 		mov edi, commandbufend
  3326 00002CA8 47                  <1> 		inc edi
  3327 00002CA9 EBBC                <1> 		jmp getccmdlp
  3328                              <1> 	fixcmdbufb4moreint305:
  3329 00002CAB 4F                  <1> 		dec edi
  3330 00002CAC 81EF[5F720000]      <1> 		sub edi, commandbufend
  3331 00002CB2 81C7[5F6E0000]      <1> 		add edi, commandbuf
  3332                              <1> 	moreint305up:
  3333 00002CB8 8A07                <1> 		mov al, [edi]
  3334 00002CBA 47                  <1> 		inc edi
  3335 00002CBB 81EF[5F6E0000]      <1> 		sub edi, commandbuf
  3336 00002CC1 3C00                <1> 		cmp al, 0
  3337 00002CC3 0F84BDFDFFFF        <1> 		je near int305b
  3338 00002CC9 3B3D[5B6E0000]      <1> 		cmp edi, [currentcommandpos]
  3339 00002CCF 0F83B1FDFFFF        <1> 		jae near int305b
  3340 00002CD5 81C7[5F6E0000]      <1> 		add edi, commandbuf
  3341 00002CDB 8806                <1> 		mov [esi], al
  3342 00002CDD 46                  <1> 		inc esi
  3343 00002CDE 57                  <1> 		push edi
  3344 00002CDF 8A1D[572A0000]      <1> 		mov bl, [modkey305]
  3345 00002CE5 E8FBFAFFFF          <1> 		call int301
  3346 00002CEA 5F                  <1> 		pop edi
  3347 00002CEB 81FF[5F720000]      <1> 		cmp edi, commandbufend
  3348 00002CF1 76C5                <1> 		jbe moreint305up
  3349 00002CF3 BF[5F6E0000]        <1> 		mov edi, commandbuf
  3350 00002CF8 EBBE                <1> 		jmp moreint305up
  3351                              <1> 	int305bscheck:
  3352 00002CFA 3B35[582A0000]      <1> 		cmp esi, [firstesi305]
  3353 00002D00 7705                <1> 		ja goodbscheck
  3354 00002D02 E97FFDFFFF          <1> 		jmp int305b
  3355                              <1> 	goodbscheck:
  3356 00002D07 4E                  <1> 		dec esi
  3357 00002D08 C60600              <1> 		mov byte [esi], 0
  3358 00002D0B 8A1D[572A0000]      <1> 		mov bl, [modkey305]
  3359 00002D11 B008                <1> 		mov al, 8
  3360 00002D13 E9AFFDFFFF          <1> 		jmp bscheckequal
  3361                              <1> 	
  3362                              <1> 		
  3363                              <1> 	clear:		
  3364                              <1> 	
  3365                              <1> 	int306:	;;clear screen
  3366 00002D18 668B0D[E1270000]    <1> 		mov cx, [charxy]
  3367 00002D1F BF[8F1D0000]        <1> 		mov edi, videobuf
  3368 00002D24 6631C0              <1> 		xor ax, ax
  3369 00002D27 66A3[DB270000]      <1> 		mov [linebeginpos], ax
  3370 00002D2D 66A3[DD270000]      <1> 		mov [videobufpos], ax
  3371 00002D33 6631D2              <1> 		xor dx, dx
  3372 00002D36 66A3[DF270000]      <1> 		mov [charpos], ax
  3373                              <1> 	int306b:
  3374 00002D3C 668907              <1> 		mov [edi], ax
  3375 00002D3F 81C702000000        <1> 		add edi, 2
  3376 00002D45 FEC9                <1> 		dec cl
  3377 00002D47 80F900              <1> 		cmp cl, 0
  3378 00002D4A 75F0                <1> 		jne int306b
  3379 00002D4C 8A0D[E1270000]      <1> 		mov cl, [charxy]
  3380 00002D52 FECD                <1> 		dec ch
  3381 00002D54 80FD00              <1> 		cmp ch, 0
  3382 00002D57 75E3                <1> 		jne int306b
  3383 00002D59 E807000000          <1> 		call termcopy
  3384 00002D5E C3                  <1> 		ret
  3385                              <1> 		
  3386 00002D5F 00000000            <1> 	termcursorpos dd 0
  3387 00002D63 0000                <1> 	removedvideo dw 0
  3388                              <1> termcopy:	
  3389 00002D65 60                  <1> 	pusha
  3390 00002D66 BF[8F1D0000]        <1> 	mov edi, videobuf
  3391 00002D6B 31DB                <1> 	xor ebx, ebx
  3392 00002D6D 668B1D[DD270000]    <1> 	mov bx, [videobufpos]
  3393 00002D74 01DF                <1> 	add edi, ebx
  3394 00002D76 893D[5F2D0000]      <1> 	mov [termcursorpos], edi
  3395 00002D7C E8AF000000          <1> 	call switchtermcursor
  3396 00002D81 C605[8E4F0000]00    <1> 	mov byte [mouseselecton], 0
  3397 00002D88 C605[F1270000]01    <1> 	mov byte [termcopyon], 1
  3398 00002D8F 803D[8F4F0000]00    <1> 	cmp byte [guion], 0
  3399 00002D96 0F8412000000        <1> 	je near nowincopy
  3400 00002D9C 803D[F0270000]01    <1> 	cmp byte [termguion], 1
  3401 00002DA3 0F84FE2D0000        <1> 	je near windowvideocopy
  3402 00002DA9 E97B000000          <1> 	jmp nocopytermatall
  3403                              <1> nowincopy:
  3404 00002DAE BE00000A00          <1> 	mov esi, 0xA0000
  3405 00002DB3 A1[29040000]        <1> 	mov eax, [basecache]
  3406 00002DB8 C1E004              <1> 	shl eax, 4
  3407 00002DBB 29C6                <1> 	sub esi, eax
  3408 00002DBD BF[8F1D0000]        <1> 	mov edi, videobuf
  3409 00002DC2 31C9                <1> 	xor ecx, ecx
  3410 00002DC4 668B0D[E1270000]    <1> 	mov cx, [charxy]
  3411                              <1> nowincopy2:
  3412 00002DCB BB[6A730000]        <1> 	mov ebx, fonts
  3413 00002DD0 31C0                <1> 	xor eax, eax
  3414 00002DD2 8A07                <1> 	mov al, [edi]
  3415 00002DD4 C1E004              <1> 	shl eax, 4
  3416 00002DD7 01C3                <1> 	add ebx, eax
  3417 00002DD9 47                  <1> 	inc edi
  3418 00002DDA 8A27                <1> 	mov ah, [edi]
  3419 00002DDC 31D2                <1> 	xor edx, edx
  3420 00002DDE 8A15[E1270000]      <1> 	mov dl, [charxy]
  3421 00002DE4 C1C110              <1> 	rol ecx, 16
  3422 00002DE7 B110                <1> 	mov cl, 16
  3423                              <1> nowinfont:
  3424 00002DE9 8A03                <1> 	mov al, [ebx]
  3425 00002DEB D0C8                <1> 	ror al, 1
  3426 00002DED 80FC07              <1> 	cmp ah, 7
  3427 00002DF0 7602                <1> 	jbe notnotfont
  3428 00002DF2 F6D0                <1> 	not al
  3429                              <1> notnotfont:
  3430 00002DF4 8806                <1> 	mov [esi], al
  3431 00002DF6 01D6                <1> 	add esi, edx
  3432 00002DF8 43                  <1> 	inc ebx
  3433 00002DF9 FEC9                <1> 	dec cl
  3434 00002DFB 80F900              <1> 	cmp cl, 0
  3435 00002DFE 75E9                <1> 	jne nowinfont
  3436 00002E00 C1E204              <1> 	shl edx, 4
  3437 00002E03 29D6                <1> 	sub esi, edx
  3438 00002E05 C1C110              <1> 	rol ecx, 16
  3439                              <1> nopresentwinfont:
  3440 00002E08 47                  <1> 	inc edi
  3441 00002E09 46                  <1> 	inc esi
  3442 00002E0A FEC9                <1> 	dec cl
  3443 00002E0C 80F900              <1> 	cmp cl, 0
  3444 00002E0F 75BA                <1> 	jne nowincopy2
  3445 00002E11 8A0D[E1270000]      <1> 	mov cl, [charxy]
  3446 00002E17 31D2                <1> 	xor edx, edx
  3447 00002E19 88CA                <1> 	mov dl, cl
  3448 00002E1B 29D6                <1> 	sub esi, edx
  3449 00002E1D C1E204              <1> 	shl edx, 4
  3450 00002E20 01D6                <1> 	add esi, edx
  3451 00002E22 FECD                <1> 	dec ch
  3452 00002E24 80FD00              <1> 	cmp ch, 0
  3453 00002E27 75A2                <1> 	jne nowincopy2
  3454                              <1> nocopytermatall:
  3455 00002E29 E802000000          <1> 	call switchtermcursor
  3456 00002E2E 61                  <1> 	popa
  3457 00002E2F C3                  <1> 	ret
  3458                              <1> 	
  3459                              <1> switchtermcursor:
  3460 00002E30 8B3D[5F2D0000]      <1> 	mov edi, [termcursorpos]
  3461 00002E36 8A4701              <1> 	mov al, [edi + 1]
  3462 00002E39 8A27                <1> 	mov ah, [edi]
  3463 00002E3B 3C07                <1> 	cmp al, 7
  3464 00002E3D 7607                <1> 	jbe movlargecursorterm
  3465 00002E3F B007                <1> 	mov al, 7
  3466 00002E41 E902000000          <1> 	jmp movedcursorterm
  3467                              <1> movlargecursorterm:
  3468 00002E46 B0F0                <1> 	mov al, 0xF0
  3469                              <1> movedcursorterm:
  3470 00002E48 884701              <1> 	mov [edi + 1], al
  3471 00002E4B 80FC00              <1> 	cmp ah, 0
  3472 00002E4E 7504                <1> 	jne fixednocursorterm
  3473 00002E50 B420                <1> 	mov ah, " "
  3474 00002E52 8827                <1> 	mov [edi], ah
  3475                              <1> fixednocursorterm:
  3476 00002E54 C3                  <1> 	ret
  3477                              <1> 	
  3478                                      %include 'source/dosints.asm'
  3479                              <1> int21h:
  3480 00002E55 80FC01              <1> 	cmp ah, 1
  3481 00002E58 0F8437000000        <1> 	je near dosgchar
  3482 00002E5E 80FC02              <1> 	cmp ah, 2
  3483 00002E61 0F8435000000        <1> 	je near doswchar
  3484 00002E67 80FC09              <1> 	cmp ah, 9
  3485 00002E6A 0F8433000000        <1> 	je near dosprintstr
  3486 00002E70 80FC0A              <1> 	cmp ah, 0xA
  3487 00002E73 0F8439000000        <1> 	je near dosgetstr
  3488 00002E79 80FC2B              <1> 	cmp ah, 0x2B
  3489 00002E7C 0F846E000000        <1> 	je near dosgetdate
  3490 00002E82 80FC2C              <1> 	cmp ah, 0x2C
  3491 00002E85 0F8484000000        <1> 	je near dosgettime
  3492 00002E8B 80FC4C              <1> 	cmp ah, 0x4C
  3493 00002E8E 0F8495000000        <1> 	je near dosexit
  3494 00002E94 C3                  <1> 	ret
  3495                              <1> 
  3496                              <1> dosgchar:
  3497 00002E95 B405                <1> 	mov ah, 5
  3498 00002E97 30C0                <1> 	xor al, al
  3499 00002E99 CD30                <1> 	int 30h
  3500 00002E9B C3                  <1> 	ret
  3501                              <1> 	
  3502                              <1> doswchar:
  3503 00002E9C B307                <1> 	mov bl, 7
  3504 00002E9E B406                <1> 	mov ah, 6
  3505 00002EA0 CD30                <1> 	int 30h
  3506 00002EA2 C3                  <1> 	ret
  3507                              <1> 	
  3508                              <1> dosprintstr:
  3509 00002EA3 8B3424              <1> 	mov esi, [esp]
  3510 00002EA6 6689D6              <1> 	mov si, dx
  3511 00002EA9 B024                <1> 	mov al, "$"
  3512 00002EAB B401                <1> 	mov ah, 1
  3513 00002EAD B307                <1> 	mov bl, 7
  3514 00002EAF CD30                <1> 	int 30h
  3515 00002EB1 C3                  <1> 	ret
  3516                              <1> 	
  3517                              <1> dosgetstr:
  3518 00002EB2 8B3424              <1> 	mov esi, [esp]
  3519 00002EB5 6689D6              <1> 	mov si, dx
  3520 00002EB8 B900000000          <1> 	mov ecx, 0
  3521 00002EBD 8A0E                <1> 	mov cl, [esi]
  3522 00002EBF 81C603000000        <1> 	add esi, 3
  3523 00002EC5 89F7                <1> 	mov edi, esi
  3524 00002EC7 8935[EC2E0000]      <1> 	mov [stringstart], esi
  3525 00002ECD 01CF                <1> 	add edi, ecx
  3526 00002ECF B00D                <1> 	mov al, 13
  3527 00002ED1 B404                <1> 	mov ah, 4
  3528 00002ED3 B307                <1> 	mov bl, 7
  3529 00002ED5 CD30                <1> 	int 30h
  3530 00002ED7 89F1                <1> 	mov ecx, esi
  3531 00002ED9 2B0D[EC2E0000]      <1> 	sub ecx, [stringstart]
  3532 00002EDF 8B35[EC2E0000]      <1> 	mov esi, [stringstart]
  3533 00002EE5 884EFF              <1> 	mov [esi - 1], cl
  3534 00002EE8 884EFE              <1> 	mov [esi - 2], cl
  3535 00002EEB C3                  <1> 	ret
  3536 00002EEC 00000000            <1> stringstart dd 0
  3537                              <1> 
  3538                              <1> dosgetdate:
  3539 00002EF0 E814160000          <1> 	call time
  3540 00002EF5 8A0D[E0460000]      <1> 	mov cl, [RTCtimeYear]
  3541 00002EFB B500                <1> 	mov ch, 0
  3542 00002EFD 6681C1D007          <1> 	add cx, 2000
  3543 00002F02 8A35[DF460000]      <1> 	mov dh, [RTCtimeMonth]
  3544 00002F08 8A15[DE460000]      <1> 	mov dl, [RTCtimeDay]
  3545 00002F0E C3                  <1> 	ret
  3546                              <1> 
  3547                              <1> dosgettime:
  3548 00002F0F E8F5150000          <1> 	call time
  3549 00002F14 8A2D[DD460000]      <1> 	mov ch, [RTCtimeHour]
  3550 00002F1A 8A0D[DC460000]      <1> 	mov cl, [RTCtimeMinute]
  3551 00002F20 8A35[DB460000]      <1> 	mov dh, [RTCtimeSecond]
  3552 00002F26 B200                <1> 	mov dl, 0
  3553 00002F28 C3                  <1> 	ret
  3554                              <1> 	
  3555                              <1> dosexit:
  3556 00002F29 6631C0              <1> 	xor ax, ax
  3557 00002F2C CD30                <1> 	int 30h
  3558                                      %include 'source/solleros.asm'
  3559                              <1> 	;SOLLEROS.ASM
  3560                              <1> os:
  3561 00002F2E E8E5FDFFFF          <1> 	call clear
  3562 00002F33 BE[21730000]        <1> 	mov esi, userask
  3563 00002F38 E8BEFAFFFF          <1> 	call print
  3564                              <1> usercheck:
  3565 00002F3D BE[7A1B0000]        <1> 	mov esi, buftxt
  3566 00002F42 BF[7A1D0000]        <1> 	mov edi, buftxtend
  3567 00002F47 B00D                <1> 	mov al, 13
  3568 00002F49 E81BFBFFFF          <1> 	call int305
  3569 00002F4E 56                  <1> 	push esi
  3570 00002F4F BE[41730000]        <1> 	mov esi, line
  3571 00002F54 E8A2FAFFFF          <1> 	call print
  3572 00002F59 BE[2B730000]        <1> 	mov esi, pwdask
  3573 00002F5E E898FAFFFF          <1> 	call print
  3574 00002F63 5E                  <1> 	pop esi
  3575 00002F64 46                  <1> 	inc esi
  3576 00002F65 8935[1D300000]      <1> 	mov [esipass], esi
  3577                              <1> passcheck:
  3578 00002F6B 30C0                <1> 	xor al, al
  3579 00002F6D E837FAFFFF          <1> 	call int302
  3580 00002F72 3C0D                <1> 	cmp al, 13
  3581 00002F74 0F8436000000        <1> 	je near gotpass
  3582 00002F7A 3C08                <1> 	cmp al, 8
  3583 00002F7C 0F8410000000        <1> 	je near backpass
  3584 00002F82 8806                <1> 	mov [esi], al
  3585 00002F84 46                  <1> 	inc esi
  3586 00002F85 B02A                <1> 	mov al, '*'
  3587 00002F87 E859F8FFFF          <1> 	call int301
  3588 00002F8C EBDD                <1> 	jmp passcheck
  3589 00002F8E 08200800            <1> backcursor2 db 8," ",8,0
  3590                              <1> backpass:
  3591 00002F92 3B35[1D300000]      <1> 	cmp esi, [esipass]
  3592 00002F98 0F84CDFFFFFF        <1> 	je near passcheck
  3593 00002F9E 4E                  <1> 	dec esi
  3594 00002F9F C60600              <1> 	mov byte [esi], 0
  3595 00002FA2 56                  <1> 	push esi
  3596 00002FA3 BE[8E2F0000]        <1> 	mov esi, backcursor2
  3597 00002FA8 E84EFAFFFF          <1> 	call print
  3598 00002FAD 5E                  <1> 	pop esi
  3599 00002FAE EBBB                <1> 	jmp passcheck
  3600                              <1> gotpass:
  3601 00002FB0 B000                <1> 	mov al,0
  3602 00002FB2 8806                <1> 	mov [esi], al
  3603 00002FB4 BE[41730000]        <1> 	mov esi, line
  3604 00002FB9 E83DFAFFFF          <1> 	call print
  3605 00002FBE BB[47730000]        <1> 	mov ebx, userlst
  3606                              <1> userfind:
  3607 00002FC3 BE[7A1B0000]        <1> 	mov esi, buftxt
  3608 00002FC8 8A06                <1> 	mov al, [esi]
  3609 00002FCA 3C00                <1> 	cmp al, 0
  3610 00002FCC 0F845CFFFFFF        <1> 	je near os
  3611 00002FD2 891D[21300000]      <1> 	mov [usercache], ebx
  3612 00002FD8 E882020000          <1> 	call tester
  3613 00002FDD 3C01                <1> 	cmp al, 1
  3614 00002FDF 7415                <1> 	je pwdtest
  3615                              <1> nxtuser:
  3616 00002FE1 43                  <1> 	inc ebx
  3617 00002FE2 8A03                <1> 	mov al, [ebx]
  3618 00002FE4 3C00                <1> 	cmp al, 0
  3619 00002FE6 74DB                <1> 	je userfind
  3620 00002FE8 81FB[6A730000]      <1> 	cmp ebx, userlstend
  3621 00002FEE 0F833AFFFFFF        <1> 	jae near os
  3622 00002FF4 EBCD                <1> 	jmp userfind
  3623                              <1> pwdtest:
  3624 00002FF6 46                  <1> 	inc esi
  3625 00002FF7 43                  <1> 	inc ebx
  3626 00002FF8 E862020000          <1> 	call tester
  3627 00002FFD 3C01                <1> 	cmp al, 1
  3628 00002FFF 7402                <1> 	je pwdrgt
  3629 00003001 EBDE                <1> 	jmp nxtuser
  3630 00003003 E810FDFFFF          <1> pwdrgt:	call clear
  3631 00003008 66B90002            <1> 	mov cx, 200h
  3632 0000300C BE[7A1B0000]        <1> 	mov esi, buftxt
  3633 00003011 30C0                <1> 	xor al, al
  3634 00003013 8806                <1> bufclr:	mov [esi], al
  3635 00003015 46                  <1> 	inc esi
  3636 00003016 E2FB                <1> 	loop bufclr
  3637 00003018 E935000000          <1> 	jmp nwcmd
  3638                              <1> 
  3639 0000301D 00000000            <1> esipass dd 0
  3640 00003021 [47730000]          <1> usercache dd userlst
  3641                              <1> 	
  3642                              <1> buftxtclear:
  3643 00003025 30C0                <1> 	xor al, al
  3644 00003027 BE[7A1B0000]        <1> 	mov esi, buftxt
  3645 0000302C 81FE[7A1D0000]      <1> clearbuftxt: cmp esi, buf2
  3646 00003032 730E                <1> 	jae retbufclr
  3647 00003034 8806                <1> 	mov [esi], al
  3648 00003036 46                  <1> 	inc esi
  3649 00003037 EBF3                <1> 	jmp clearbuftxt
  3650                              <1> 
  3651 00003039 39DE                <1> clearitbuf: cmp esi, ebx
  3652 0000303B 7305                <1> 	jae retbufclr
  3653 0000303D 8806                <1> 	mov [esi], al
  3654 0000303F 46                  <1> 	inc esi
  3655 00003040 EBF7                <1> 	jmp clearitbuf
  3656 00003042 C3                  <1> retbufclr: ret
  3657                              <1> 
  3658 00003043 E90A000000          <1> full:	jmp nwcmd
  3659                              <1> 
  3660                              <1> nwcmd2:
  3661 00003048 BE[41730000]        <1> 	mov esi, line
  3662 0000304D E8A9F9FFFF          <1> 	call print
  3663                              <1> 
  3664                              <1> shush:	;SollerOS Hardly Unix-compatible Shell
  3665                              <1> nwcmd:	
  3666 00003052 803D[E56B0000]00    <1> 	cmp byte [threadson], 0
  3667 00003059 7408                <1> 	je noclinwcmd
  3668 0000305B FA                  <1> 	cli
  3669 0000305C C605[E56B0000]00    <1> 	mov byte [threadson], 0
  3670                              <1> noclinwcmd:
  3671 00003063 B001                <1> 	mov al, 1
  3672 00003065 3805[69150000]      <1> 	cmp [BATCHISON], al
  3673 0000306B 7501                <1> 	jne cancel
  3674 0000306D C3                  <1> 	ret
  3675 0000306E 30C0                <1> cancel:	xor al, al
  3676 00003070 A2[00150000]        <1> 	mov [IFON], al
  3677 00003075 A2[69150000]        <1> 	mov [BATCHISON], al
  3678 0000307A B05B                <1> 	mov al, '['
  3679 0000307C B406                <1> 	mov ah, 6
  3680 0000307E 66BB0700            <1> 	mov bx, 7
  3681 00003082 E86BF7FFFF          <1> 	call int301prnt
  3682 00003087 8B35[21300000]      <1> 	mov esi, [usercache]
  3683 0000308D E869F9FFFF          <1> 	call print
  3684 00003092 BE[35730000]        <1> 	mov esi, location
  3685 00003097 E85FF9FFFF          <1> 	call print
  3686 0000309C E884FFFFFF          <1> 	call buftxtclear
  3687 000030A1 BE[7A1B0000]        <1> 	mov esi, buftxt
  3688 000030A6 C605[5C2A0000]01    <1> 	mov byte [commandedit], 1
  3689 000030AD B00D                <1> 	mov al, 13
  3690 000030AF 66BB0700            <1> 	mov bx, 7
  3691 000030B3 BF[7A1D0000]        <1> 	mov edi, buftxtend
  3692 000030B8 E8ACF9FFFF          <1> 	call int305
  3693 000030BD C605[5C2A0000]00    <1> 	mov byte [commandedit], 0
  3694 000030C4 803D[7A1B0000]00    <1> 	cmp byte [buftxt], 0
  3695 000030CB 0F8477FFFFFF        <1> 	je near nwcmd2
  3696 000030D1 8B35[5B6E0000]      <1> gotcmd:	mov esi, [currentcommandpos]
  3697 000030D7 8935[576E0000]      <1> 	mov [lastcommandpos], esi
  3698 000030DD BF[7A1B0000]        <1> 	mov edi, buftxt
  3699 000030E2 81C6[5F6E0000]      <1> 	add esi, commandbuf
  3700 000030E8 81FE[5F720000]      <1> 	cmp esi, commandbufend
  3701 000030EE 7605                <1> 	jbe copycommand
  3702 000030F0 BE[5F6E0000]        <1> 	mov esi, commandbuf
  3703                              <1> copycommand:
  3704 000030F5 8A07                <1> 	mov al, [edi]
  3705 000030F7 8806                <1> 	mov [esi], al
  3706 000030F9 47                  <1> 	inc edi
  3707 000030FA 46                  <1> 	inc esi
  3708 000030FB 3C00                <1> 	cmp al, 0
  3709 000030FD 740F                <1> 	je donecopy
  3710 000030FF 81FE[5F720000]      <1> 	cmp esi, commandbufend
  3711 00003105 76EE                <1> 	jbe copycommand
  3712 00003107 BE[5F6E0000]        <1> 	mov esi, commandbuf
  3713 0000310C EBE7                <1> 	jmp copycommand
  3714                              <1> donecopy:
  3715 0000310E 81EE[5F6E0000]      <1> 	sub esi, commandbuf
  3716 00003114 8935[5B6E0000]      <1> 	mov [currentcommandpos], esi
  3717 0000311A FB                  <1> 	sti
  3718 0000311B E990000000          <1> 	jmp run
  3719                              <1> 
  3720 00003120 E800FFFFFF          <1> input:	call buftxtclear
  3721 00003125 BE[7A1B0000]        <1> 	mov esi, buftxt		;puts input into buftxt AND onto screen
  3722 0000312A BF[7A1D0000]        <1> 	mov edi, buftxtend
  3723 0000312F B00D                <1> stdin:	mov al, 13
  3724 00003131 B307                <1> 	mov bl, 7
  3725 00003133 B404                <1> 	mov ah, 4
  3726 00003135 CD30                <1> 	int 30h
  3727 00003137 C3                  <1> 	ret
  3728                              <1> 
  3729                              <1> replacevariable:
  3730 00003138 56                  <1> 	push esi
  3731 00003139 81EE[7A1B0000]      <1> 	sub esi, buftxt
  3732 0000313F 89F7                <1> 	mov edi, esi
  3733 00003141 81C6[7A1B0000]      <1> 	add esi, buftxt
  3734 00003147 47                  <1> 	inc edi
  3735 00003148 BB[6F150000]        <1> 	mov ebx, variables
  3736 0000314D E894070000          <1> 	call nxtvrech
  3737 00003152 89F7                <1> 	mov edi, esi
  3738 00003154 31DB                <1> 	xor ebx, ebx
  3739 00003156 4E                  <1> 	dec esi
  3740                              <1> findvarname:
  3741 00003157 4E                  <1> 	dec esi
  3742 00003158 8A06                <1> 	mov al, [esi]
  3743 0000315A 43                  <1> 	inc ebx
  3744 0000315B 3C04                <1> 	cmp al, 4
  3745 0000315D 75F8                <1> 	jne findvarname
  3746 0000315F 5E                  <1> 	pop esi
  3747                              <1> replacevarloop:
  3748 00003160 8A07                <1> 	mov al, [edi]
  3749 00003162 81FB00000000        <1> 	cmp ebx, 0
  3750 00003168 0F841E000000        <1> 	je near expandbuftxt
  3751 0000316E 3C00                <1> 	cmp al, 0
  3752 00003170 0F8407000000        <1> 	je near compressbuftxt
  3753 00003176 8806                <1> 	mov [esi], al
  3754 00003178 4B                  <1> 	dec ebx
  3755 00003179 46                  <1> 	inc esi
  3756 0000317A 47                  <1> 	inc edi
  3757 0000317B EBE3                <1> 	jmp replacevarloop
  3758                              <1> compressbuftxt:	
  3759 0000317D 8A041E              <1> 	mov al, [esi + ebx]
  3760 00003180 8806                <1> 	mov [esi], al
  3761 00003182 46                  <1> 	inc esi
  3762 00003183 3C00                <1> 	cmp al, 0
  3763 00003185 75F6                <1> 	jne compressbuftxt
  3764 00003187 E933000000          <1> 	jmp fixvariables
  3765                              <1> expandbuftxt:
  3766 0000318C 89F1                <1> 	mov ecx, esi
  3767 0000318E 8A26                <1> 	mov ah, [esi]
  3768                              <1> expandbuftxtlp:
  3769 00003190 8A1E                <1> 	mov bl, [esi]
  3770 00003192 46                  <1> 	inc esi
  3771 00003193 8A3E                <1> 	mov bh, [esi]
  3772 00003195 8826                <1> 	mov [esi], ah
  3773 00003197 88FC                <1> 	mov ah, bh
  3774 00003199 80FB00              <1> 	cmp bl, 0
  3775 0000319C 75F2                <1> 	jne expandbuftxtlp
  3776 0000319E 89CE                <1> 	mov esi, ecx
  3777 000031A0 8806                <1> 	mov [esi], al
  3778 000031A2 47                  <1> 	inc edi
  3779 000031A3 8A07                <1> 	mov al, [edi]
  3780 000031A5 3C00                <1> 	cmp al, 0
  3781 000031A7 0F8412000000        <1> 	je near fixvariables
  3782 000031AD 46                  <1> 	inc esi
  3783 000031AE EBDC                <1> 	jmp expandbuftxt
  3784                              <1> 	
  3785                              <1> 	
  3786                              <1> run:	
  3787 000031B0 BE[41730000]        <1> 	mov esi, line		;;I should add some sort of command line parsing before it is processed to replace variables with stuff-o I did!
  3788 000031B5 E841F8FFFF          <1> 	call print
  3789                              <1> progtest2:
  3790 000031BA BE[7A1B0000]        <1> 	mov esi, buftxt
  3791                              <1> fixvariables:
  3792 000031BF 46                  <1> 	inc esi
  3793 000031C0 8A06                <1> 	mov al, [esi]
  3794 000031C2 3C24                <1> 	cmp al, '$'
  3795 000031C4 0F846EFFFFFF        <1> 	je near replacevariable
  3796 000031CA 3C00                <1> 	cmp al, 0
  3797 000031CC 75F1                <1> 	jne fixvariables
  3798                              <1> 
  3799 000031CE 803D[C2370000]00    <1> 	cmp byte [indexdone], 0
  3800 000031D5 7505                <1> 	jne progtest
  3801 000031D7 E851050000          <1> 	call indexfiles
  3802                              <1> progtest:
  3803 000031DC BE[7A1B0000]        <1> 	mov esi, buftxt
  3804 000031E1 BB[00130000]        <1> 	mov ebx, fileindex
  3805 000031E6 668B03              <1> prgnxt:	mov ax, [ebx]
  3806 000031E9 B105                <1> 	mov cl, 5
  3807 000031EB B504                <1> 	mov ch, 4
  3808 000031ED 6639C8              <1> 	cmp ax, cx
  3809 000031F0 740B                <1> 	je fndprg
  3810 000031F2 43                  <1> 	inc ebx
  3811 000031F3 81FB[00150000]      <1> 	cmp ebx, fileindexend
  3812 000031F9 7338                <1> 	jae prgnf
  3813 000031FB EBE9                <1> 	jmp prgnxt
  3814 000031FD 81C302000000        <1> fndprg: add ebx, 2
  3815 00003203 BE[7A1B0000]        <1> 	mov esi, buftxt
  3816 00003208 6631C9              <1> 	xor cx, cx
  3817 0000320B E889000000          <1> 	call cndtest
  3818 00003210 3C01                <1> 	cmp al, 1
  3819 00003212 7302                <1> 	jae prggood
  3820 00003214 EBD0                <1> 	jmp prgnxt
  3821 00003216 81FB[00150000]      <1> prggood: cmp ebx, fileindexend
  3822 0000321C 733C                <1> 	jae prgdn
  3823 0000321E 81C303000000        <1> 	add ebx, 3
  3824 00003224 8B3B                <1> 	mov edi, [ebx]
  3825 00003226 C605[E56B0000]02    <1> 	mov byte [threadson], 2
  3826 0000322D B020                <1> 	mov al, 0x20
  3827 0000322F E620                <1> 	out 0x20, al
  3828                              <1> 	;sti
  3829 00003231 FFE7                <1> 	jmp edi
  3830                              <1> prgnf:	
  3831 00003233 A0[7A1B0000]        <1> 	mov al, [buftxt]
  3832 00003238 3C00                <1> 	cmp al, 0
  3833 0000323A 741E                <1> 	je prgdn
  3834 0000323C BE[08730000]        <1> 	mov esi, notfound1
  3835 00003241 E8B5F7FFFF          <1> 	call print
  3836 00003246 BE[7A1B0000]        <1> 	mov esi, buftxt
  3837 0000324B E8ABF7FFFF          <1> 	call print
  3838 00003250 BE[12730000]        <1> 	mov esi, notfound2
  3839 00003255 E8A1F7FFFF          <1> 	call print
  3840 0000325A E9F3FDFFFF          <1> prgdn:	jmp nwcmd
  3841                              <1> 
  3842                              <1> 
  3843                              <1> tester:			;si=user bx=prog returns 1 in al if true
  3844 0000325F 30C0                <1> 	xor al, al
  3845 00003261 8A06                <1> retest:	mov al, [esi]
  3846 00003263 8A23                <1> 	mov ah, [ebx]
  3847 00003265 3C00                <1> 	cmp al, 0
  3848 00003267 7408                <1> 	je testtrue
  3849 00003269 38E0                <1> 	cmp al, ah
  3850 0000326B 750C                <1> 	jne testfalse
  3851 0000326D 43                  <1> 	inc ebx
  3852 0000326E 46                  <1> 	inc esi
  3853 0000326F EBF0                <1> 	jmp retest
  3854                              <1> testtrue:
  3855 00003271 80FC00              <1> 	cmp ah, 0
  3856 00003274 7503                <1> 	jne testfalse
  3857 00003276 B001                <1> 	mov al, 1
  3858 00003278 C3                  <1> 	ret
  3859                              <1> testfalse:
  3860 00003279 30C0                <1> 	xor al, al
  3861 0000327B C3                  <1> 	ret
  3862                              <1> 
  3863                              <1> optest:			;si=user bx=prog returns 1 in al if true
  3864 0000327C 30C0                <1> 	xor al, al
  3865                              <1> opretest:
  3866 0000327E 8A06                <1> 	mov al, [esi]
  3867 00003280 8A23                <1> 	mov ah, [ebx]
  3868 00003282 38E0                <1> 	cmp al, ah
  3869 00003284 7510                <1> 	jne optestfalse
  3870 00003286 80FC00              <1> 	cmp ah, 0
  3871 00003289 7404                <1> 	je optesttrue
  3872 0000328B 43                  <1> 	inc ebx
  3873 0000328C 46                  <1> 	inc esi
  3874 0000328D EBEF                <1> 	jmp opretest
  3875                              <1> optesttrue:
  3876 0000328F 3C00                <1> 	cmp al, 0
  3877 00003291 7503                <1> 	jne optestfalse
  3878 00003293 B001                <1> 	mov al, 1
  3879 00003295 C3                  <1> 	ret
  3880                              <1> optestfalse:
  3881 00003296 30C0                <1> 	xor al, al
  3882 00003298 C3                  <1> 	ret
  3883                              <1> 
  3884                              <1> cndtest:			;si=user bx=prog cl=endchar returns 1 in al if true
  3885 00003299 30C0                <1> 	xor al, al
  3886 0000329B 8A06                <1> cndretest:	mov al, [esi]
  3887 0000329D 8A23                <1> 	mov ah, [ebx]
  3888 0000329F 38CC                <1> 	cmp ah, cl
  3889 000032A1 7408                <1> 	je cndtesttrue
  3890 000032A3 38E0                <1> 	cmp al, ah
  3891 000032A5 750B                <1> 	jne cndtestfalse
  3892 000032A7 43                  <1> 	inc ebx
  3893 000032A8 46                  <1> 	inc esi
  3894 000032A9 EBF0                <1> 	jmp cndretest
  3895                              <1> cndtesttrue:
  3896 000032AB 38C8                <1> 	cmp al, cl
  3897 000032AD 7506                <1> 	jne cndtestalmost
  3898 000032AF B001                <1> 	mov al, 1
  3899 000032B1 C3                  <1> 	ret
  3900                              <1> cndtestfalse:
  3901 000032B2 30C0                <1> 	xor al, al
  3902 000032B4 C3                  <1> 	ret
  3903                              <1> cndtestalmost:
  3904 000032B5 B002                <1> 	mov al, 2
  3905 000032B7 C3                  <1> 	ret
  3906 000032B8 00                  <1> currentdir db 0
  3907 000032B9 BE[00130000]        <1> dir:	mov esi, fileindex
  3908 000032BE 8A06                <1> 	dirnxt:	mov al, [esi]
  3909 000032C0 30E4                <1> 		xor ah, ah
  3910 000032C2 3C05                <1> 		cmp al, 5
  3911 000032C4 744A                <1> 		je dirfnd
  3912 000032C6 3C07                <1> 		cmp al, 7
  3913 000032C8 743C                <1> 		je dirfnd3
  3914 000032CA 3C06                <1> 		cmp al, 6
  3915 000032CC 7438                <1> 		je dirfnd3
  3916 000032CE 46                  <1> 		inc esi
  3917 000032CF 81FE[00150000]      <1> 		cmp esi,  fileindexend
  3918 000032D5 737B                <1> 		jae dirdn
  3919 000032D7 EBE5                <1> 		jmp dirnxt
  3920 000032D9 060400626174636800- <1> 	typetable db 6,4,0,"batch",0,7,4,0,"document",0,10,4,0,"folder",0,5,4,0,"executable",0
  3921 000032E2 070400646F63756D65- <1>
  3922 000032EB 6E74000A0400666F6C- <1>
  3923 000032F4 646572000504006578- <1>
  3924 000032FD 6563757461626C6500  <1>
  3925                              <1> 	dirfnd3:
  3926 00003306 46                  <1> 		inc esi
  3927 00003307 81FE[00150000]      <1> 		cmp esi, fileindexend
  3928 0000330D 76AF                <1> 		jbe dirnxt
  3929 0000330F 4E                  <1> 		dec esi
  3930 00003310 46                  <1> 	dirfnd:	inc esi
  3931 00003311 8A06                <1> 		mov al, [esi]
  3932 00003313 30E4                <1> 		xor ah, ah
  3933 00003315 3C04                <1> 		cmp al, 4
  3934 00003317 740B                <1> 		je dirfnd2
  3935 00003319 46                  <1> 		inc esi
  3936 0000331A 81FE[00150000]      <1> 		cmp esi,  fileindexend
  3937 00003320 7330                <1> 		jae dirdn
  3938 00003322 EB9A                <1> 		jmp dirnxt
  3939 00003324 81C601000000        <1> 	dirfnd2: add esi, 1
  3940 0000332A E8CCF6FFFF          <1> 		call print
  3941 0000332F 8935[61330000]      <1> 		mov [esidir], esi
  3942 00003335 BE[44730000]        <1> 		mov esi, dirtab
  3943 0000333A E8BCF6FFFF          <1> 		call print
  3944 0000333F 8B35[61330000]      <1> 		mov esi, [esidir]
  3945 00003345 81FE[00150000]      <1> 		cmp esi,  fileindexend
  3946 0000334B 7305                <1> 		jae dirdn
  3947 0000334D E96CFFFFFF          <1> 		jmp dirnxt
  3948 00003352 BE[41730000]        <1> 	dirdn:	mov esi, line
  3949 00003357 E89FF6FFFF          <1> 			call print
  3950 0000335C E9F1FCFFFF          <1> 			jmp nwcmd
  3951 00003361 00000000            <1> esidir dd 0
  3952                              <1> 
  3953                              <1> array:				;arraystart in si, arrayend in bx, arrayseperator in cx
  3954                              <1> 		                ;ends if array seperator is found backwards after 0
  3955                              <1> 	arnxt:	      
  3956 00003365 88E8                <1> 		mov al, ch
  3957 00003367 88CC                <1> 		mov ah, cl        
  3958 00003369 663906              <1> 		cmp [esi], ax
  3959 0000336C 744D                <1> 		je ardn
  3960 0000336E 66390E              <1> 		cmp [esi], cx
  3961 00003371 7407                <1> 		je arfnd
  3962 00003373 46                  <1> 		inc esi
  3963 00003374 39DE                <1> 		cmp esi, ebx
  3964 00003376 7343                <1> 		jae ardn
  3965 00003378 EBEB                <1> 		jmp arnxt
  3966 0000337A 81C602000000        <1> 	arfnd: add esi, 2
  3967 00003380 891D[BC330000]      <1> 		mov [arbx], ebx
  3968 00003386 890D[C0330000]      <1> 		mov [arcx], ecx
  3969 0000338C E86AF6FFFF          <1> 		call print
  3970 00003391 8935[C2330000]      <1> 		mov [arsi], esi
  3971 00003397 BE[41730000]        <1> 		mov esi, line
  3972 0000339C E85AF6FFFF          <1> 		call print
  3973 000033A1 8B1D[BC330000]      <1> 		mov ebx, [arbx]
  3974 000033A7 668B0D[C0330000]    <1> 		mov cx, [arcx]
  3975 000033AE 8B35[C2330000]      <1> 		mov esi, [arsi]
  3976 000033B4 46                  <1> 		inc esi
  3977 000033B5 39DE                <1> 		cmp esi, ebx
  3978 000033B7 7302                <1> 		jae ardn
  3979 000033B9 EBAA                <1> 		jmp arnxt
  3980 000033BB C3                  <1> 	ardn:	ret
  3981 000033BC 00000000            <1> arbx:	dw 0,0
  3982 000033C0 0000                <1> arcx:	db 0,0
  3983 000033C2 00000000            <1> arsi:	dw 0,0
  3984                              <1> 
  3985                              <1> clearbuffer:
  3986 000033C6 BE[7A1D0000]        <1> 	mov esi, buf2
  3987 000033CB B030                <1> 	mov al, '0'
  3988 000033CD 81FE[8E1D0000]      <1> clearbuf: cmp esi, numbuf
  3989 000033D3 7305                <1> 	jae doneclearbuff
  3990 000033D5 8806                <1> 	mov [esi], al
  3991 000033D7 46                  <1> 	inc esi
  3992 000033D8 EBF3                <1> 	jmp clearbuf
  3993                              <1> doneclearbuff: 
  3994 000033DA C3                  <1> 		ret
  3995                              <1> 
  3996                              <1> convert:
  3997 000033DB 4E                  <1> 	dec esi
  3998 000033DC 89F3                <1> 	mov ebx, esi		;place to convert into must be in esi, number to convert must be in ecx
  3999                              <1> cnvrt:
  4000 000033DE 89DE                <1> 	mov esi, ebx
  4001 000033E0 81EE09000000        <1> 	sub esi, 9
  4002 000033E6 81F900CA9A3B        <1> 	cmp ecx, 1000000000
  4003 000033EC 720A                <1> 	jb ten8
  4004 000033EE 81E900CA9A3B        <1> 	sub ecx, 1000000000
  4005 000033F4 FE06                <1> 	inc byte [esi]
  4006 000033F6 EBE6                <1> 	jmp cnvrt
  4007 000033F8 46                  <1> ten8:	inc esi
  4008 000033F9 81F900E1F505        <1> 	cmp ecx, 100000000
  4009 000033FF 720A                <1> 	jb ten7
  4010 00003401 81E900E1F505        <1> 	sub ecx, 100000000
  4011 00003407 FE06                <1> 	inc byte [esi]
  4012 00003409 EBD3                <1> 	jmp cnvrt
  4013 0000340B 46                  <1> ten7:	inc esi
  4014 0000340C 81F980969800        <1> 	cmp ecx, 10000000
  4015 00003412 720A                <1> 	jb ten6
  4016 00003414 81E980969800        <1> 	sub ecx, 10000000
  4017 0000341A FE06                <1> 	inc byte [esi]
  4018 0000341C EBC0                <1> 	jmp cnvrt
  4019 0000341E 46                  <1> ten6:	inc esi
  4020 0000341F 81F940420F00        <1> 	cmp ecx, 1000000
  4021 00003425 720A                <1> 	jb ten5
  4022 00003427 81E940420F00        <1> 	sub ecx, 1000000
  4023 0000342D FE06                <1> 	inc byte [esi]
  4024 0000342F EBAD                <1> 	jmp cnvrt
  4025 00003431 46                  <1> ten5:	inc esi
  4026 00003432 81F9A0860100        <1> 	cmp ecx, 100000
  4027 00003438 720A                <1> 	jb ten4
  4028 0000343A 81E9A0860100        <1> 	sub ecx, 100000
  4029 00003440 FE06                <1> 	inc byte [esi]
  4030 00003442 EB9A                <1> 	jmp cnvrt
  4031 00003444 46                  <1> ten4:	inc esi
  4032 00003445 81F910270000        <1> 	cmp ecx, 10000
  4033 0000344B 720A                <1> 	jb ten3
  4034 0000344D 81E910270000        <1> 	sub ecx, 10000
  4035 00003453 FE06                <1> 	inc byte [esi]
  4036 00003455 EB87                <1> 	jmp cnvrt
  4037 00003457 46                  <1> ten3:	inc esi
  4038 00003458 81F9E8030000        <1> 	cmp ecx, 1000
  4039 0000345E 720D                <1> 	jb ten2
  4040 00003460 81E9E8030000        <1> 	sub ecx, 1000
  4041 00003466 FE06                <1> 	inc byte [esi]
  4042 00003468 E971FFFFFF          <1> 	jmp cnvrt
  4043 0000346D 46                  <1> ten2:	inc esi
  4044 0000346E 81F964000000        <1> 	cmp ecx, 100
  4045 00003474 720D                <1> 	jb ten1
  4046 00003476 81E964000000        <1> 	sub ecx, 100
  4047 0000347C FE06                <1> 	inc byte [esi]
  4048 0000347E E95BFFFFFF          <1> 	jmp cnvrt
  4049 00003483 46                  <1> ten1:	inc esi
  4050 00003484 81F90A000000        <1> 	cmp ecx, 10
  4051 0000348A 720D                <1> 	jb ten0
  4052 0000348C 81E90A000000        <1> 	sub ecx, 10
  4053 00003492 FE06                <1> 	inc byte [esi]
  4054 00003494 E945FFFFFF          <1> 	jmp cnvrt
  4055 00003499 46                  <1> ten0:	inc esi
  4056 0000349A 81F901000000        <1> 	cmp ecx, 1
  4057 000034A0 720D                <1> 	jb tendn
  4058 000034A2 81E901000000        <1> 	sub ecx, 1
  4059 000034A8 FE06                <1> 	inc byte [esi]
  4060 000034AA E92FFFFFFF          <1> 	jmp cnvrt
  4061                              <1> tendn:
  4062 000034AF C3                  <1> 	ret
  4063                              <1> 
  4064                              <1> 	
  4065                              <1> 
  4066 000034B0 00<rept>            <1> hexnumber times 8 db 0
  4067 000034B8 202000              <1> hexnumberend db "  ",0
  4068                              <1> 
  4069                              <1> 
  4070 000034BB 00000000            <1> sibuf dw 0,0
  4071 000034BF 00000000            <1> dibuf dw 0,0
  4072                              <1> 
  4073                              <1> converthex:
  4074                              <1> clearbufferhex:
  4075 000034C3 B030                <1> 	mov al, '0'
  4076 000034C5 8935[BB340000]      <1> 	mov [sibuf], esi
  4077 000034CB 893D[BF340000]      <1> 	mov [dibuf], edi
  4078 000034D1 39FE                <1> clearbufhex: cmp esi, edi
  4079 000034D3 7305                <1> 	jae doneclearbuffhex
  4080 000034D5 8806                <1> 	mov [esi], al
  4081 000034D7 46                  <1> 	inc esi
  4082 000034D8 EBF7                <1> 	jmp clearbufhex
  4083                              <1> doneclearbuffhex:
  4084 000034DA 8B35[BF340000]      <1> 	mov esi, [dibuf]
  4085 000034E0 89CA                <1> 	mov edx, ecx
  4086 000034E2 81FA00000000        <1> 	cmp edx, 0
  4087 000034E8 741F                <1> 	je donenxtephx
  4088                              <1> nxtexphx:	;0x10^x
  4089 000034EA 4E                  <1> 	dec esi
  4090 000034EB 89F7                <1> 	mov edi, esi		;;location of 0x10^x
  4091 000034ED 89D1                <1> 	mov ecx, edx
  4092 000034EF 81E10F000000        <1> 	and ecx, 0xF		;;just this digit
  4093 000034F5 E81C000000          <1> 	call cnvrtexphx		;;get this digit
  4094 000034FA 89FE                <1> 	mov esi, edi
  4095 000034FC C1EA04              <1> 	shr edx, 4		;;next digit
  4096 000034FF 81FA00000000        <1> 	cmp edx, 0
  4097 00003505 7402                <1> 	je donenxtephx
  4098 00003507 EBE1                <1> 	jmp nxtexphx
  4099                              <1> donenxtephx:
  4100 00003509 8B35[BB340000]      <1> 	mov esi, [sibuf]
  4101 0000350F 8B3D[BF340000]      <1> 	mov edi, [dibuf]
  4102 00003515 C3                  <1> 	ret
  4103                              <1> cnvrtexphx:			;;convert this number
  4104 00003516 89F3                <1> 	mov ebx, esi		;place to convert to must be in si, number to convert must be in cx
  4105 00003518 81F900000000        <1> 	cmp ecx, 0
  4106 0000351E 7429                <1> 	je zerohx
  4107 00003520 8A06                <1> cnvrthx:  mov al, [esi]
  4108 00003522 3C39                <1> 	cmp al, '9'
  4109 00003524 741B                <1> 	je lettershx
  4110 00003526 3C46                <1> lttrhxdn: cmp al, 'F'
  4111 00003528 741F                <1> 	je zerohx
  4112 0000352A 8A06                <1> 	mov al, [esi]
  4113 0000352C FEC0                <1> 	inc al
  4114 0000352E 8806                <1> 	mov [esi], al
  4115 00003530 89DE                <1> 	mov esi, ebx
  4116 00003532 81E901000000        <1> cnvrtlphx: sub ecx, 1
  4117 00003538 81F900000000        <1> 	cmp ecx, 0
  4118 0000353E 75E0                <1> 	jne cnvrthx
  4119 00003540 C3                  <1> 	ret
  4120                              <1> lettershx:
  4121 00003541 B041                <1> 	mov al, 'A'
  4122 00003543 2C01                <1> 	sub al, 1
  4123 00003545 8806                <1> 	mov [esi], al
  4124 00003547 EBDD                <1> 	jmp lttrhxdn
  4125 00003549 B030                <1> zerohx:	mov al, '0'
  4126 0000354B 8806                <1> 	mov [esi], al
  4127 0000354D 4E                  <1> 	dec esi
  4128 0000354E 8A06                <1> 	mov al, [esi]
  4129 00003550 3C46                <1> 	cmp al, 'F'
  4130 00003552 74F5                <1> 	je zerohx
  4131 00003554 41                  <1> 	inc ecx
  4132 00003555 EBDB                <1> 	jmp cnvrtlphx
  4133 00003557 00                  <1> smallhex db 0
  4134 00003558 01                  <1> firsthexshown db 1
  4135                              <1> showhexsmall:
  4136 00003559 C605[57350000]01    <1> 	mov byte [smallhex], 1
  4137 00003560 E808000000          <1> 	call showhex
  4138 00003565 C605[57350000]00    <1> 	mov byte [smallhex], 0
  4139 0000356C C3                  <1> 	ret
  4140                              <1> showhex:
  4141 0000356D 60                  <1> 	pusha
  4142 0000356E BE[B0340000]        <1> 	mov esi, hexnumber
  4143 00003573 BF[B8340000]        <1> 	mov edi, hexnumberend
  4144 00003578 E846FFFFFF          <1> 	call converthex
  4145 0000357D 803D[58350000]01    <1> 	cmp byte [firsthexshown], 1
  4146 00003584 7503                <1> 	jne showthathex
  4147 00003586 6631D2              <1> 	xor dx, dx
  4148                              <1> showthathex:
  4149 00003589 803D[58350000]03    <1> 	cmp byte [firsthexshown], 3
  4150 00003590 750A                <1> 	jne nonewhexline
  4151 00003592 BE[41730000]        <1> 	mov esi, line
  4152 00003597 E85FF4FFFF          <1> 	call print
  4153                              <1> nonewhexline:
  4154 0000359C 803D[58350000]04    <1> 	cmp byte [firsthexshown], 4
  4155 000035A3 7527                <1> 	jne notabfixhex
  4156 000035A5 B1A0                <1> 	mov cl, 160
  4157 000035A7 28D1                <1> 	sub cl, dl
  4158 000035A9 C0E905              <1> 	shr cl, 5
  4159 000035AC C0E105              <1> 	shl cl, 5
  4160 000035AF 80F900              <1> 	cmp cl, 0
  4161 000035B2 750F                <1> 	jne nonewlinetabfixhex
  4162 000035B4 BE[41730000]        <1> 	mov esi, line
  4163 000035B9 E83DF4FFFF          <1> 	call print
  4164 000035BE E909000000          <1> 	jmp notabfixhex
  4165                              <1> nonewlinetabfixhex:
  4166 000035C3 80C20F              <1> 	add dl, 15
  4167 000035C6 C0EA04              <1> 	shr dl, 4
  4168 000035C9 C0E204              <1> 	shl dl, 4
  4169                              <1> notabfixhex:
  4170 000035CC BE[B0340000]        <1> 	mov esi, hexnumber
  4171 000035D1 803D[57350000]01    <1> 	cmp byte [smallhex],1
  4172 000035D8 7506                <1> 	jne printnosmallhex
  4173 000035DA 81C606000000        <1> 	add esi, 6
  4174                              <1> printnosmallhex:
  4175 000035E0 E816F4FFFF          <1> 	call print
  4176 000035E5 803D[58350000]02    <1> 	cmp byte [firsthexshown], 2
  4177 000035EC 750A                <1> 	jne hexshown
  4178 000035EE BE[41730000]        <1> 	mov esi, line
  4179 000035F3 E803F4FFFF          <1> 	call print
  4180                              <1> hexshown:
  4181 000035F8 C605[58350000]00    <1> 	mov byte [firsthexshown], 0
  4182 000035FF 61                  <1> 	popa
  4183 00003600 C3                  <1> 	ret
  4184                              <1> 
  4185                              <1> 
  4186 00003601 303030303030303030- <1> decnumber db "00000000000000"
  4187 0000360A 3030303030          <1>
  4188 0000360F 2000                <1> decnumberend: db " ",0
  4189                              <1> 
  4190                              <1> showdec: ;;same as showhex, just uses decimal conversion
  4191 00003611 60                  <1> 	pusha
  4192 00003612 BF[01360000]        <1> 	mov edi, decnumber
  4193 00003617 BE[0F360000]        <1> 	mov esi, decnumberend
  4194                              <1> cleardecbuf:
  4195 0000361C C60730              <1> 	mov byte [edi], '0'
  4196 0000361F 47                  <1> 	inc edi
  4197 00003620 39F7                <1> 	cmp edi, esi
  4198 00003622 72F8                <1> 	jb cleardecbuf
  4199 00003624 BF[01360000]        <1> 	mov edi, decnumber
  4200 00003629 E8ADFDFFFF          <1> 	call convert
  4201 0000362E 803D[58350000]01    <1> 	cmp byte [firsthexshown], 1
  4202 00003635 7503                <1> 	jne showthatdec
  4203 00003637 6631D2              <1> 	xor dx, dx
  4204                              <1> showthatdec:
  4205 0000363A 803D[58350000]03    <1> 	cmp byte [firsthexshown], 3
  4206 00003641 750A                <1> 	jne nonewdecline
  4207 00003643 BE[41730000]        <1> 	mov esi, line
  4208 00003648 E8AEF3FFFF          <1> 	call print
  4209                              <1> nonewdecline:
  4210 0000364D 803D[58350000]04    <1> 	cmp byte [firsthexshown], 4
  4211 00003654 7527                <1> 	jne notabfixdec
  4212 00003656 B1A0                <1> 	mov cl, 160
  4213 00003658 28D1                <1> 	sub cl, dl
  4214 0000365A C0E905              <1> 	shr cl, 5
  4215 0000365D C0E105              <1> 	shl cl, 5
  4216 00003660 80F900              <1> 	cmp cl, 0
  4217 00003663 750F                <1> 	jne nonewlinetabfixdec
  4218 00003665 BE[41730000]        <1> 	mov esi, line
  4219 0000366A E88CF3FFFF          <1> 	call print
  4220 0000366F E909000000          <1> 	jmp notabfixdec
  4221                              <1> nonewlinetabfixdec:
  4222 00003674 80C20F              <1> 	add dl, 15
  4223 00003677 C0EA04              <1> 	shr dl, 4
  4224 0000367A C0E204              <1> 	shl dl, 4
  4225                              <1> notabfixdec:
  4226 0000367D BE[01360000]        <1> 	mov esi, decnumber
  4227 00003682 4E                  <1> 	dec esi
  4228                              <1> sifind:
  4229 00003683 46                  <1> 	inc esi
  4230 00003684 803E30              <1> 	cmp byte [esi], '0'
  4231 00003687 74FA                <1> 	je sifind
  4232 00003689 E86DF3FFFF          <1> 	call print
  4233 0000368E 803D[58350000]02    <1> 	cmp byte [firsthexshown], 2
  4234 00003695 750A                <1> 	jne decshown
  4235 00003697 BE[41730000]        <1> 	mov esi, line
  4236 0000369C E85AF3FFFF          <1> 	call print
  4237                              <1> decshown:
  4238 000036A1 C605[58350000]00    <1> 	mov byte [firsthexshown], 0
  4239 000036A8 61                  <1> 	popa
  4240 000036A9 C3                  <1> 	ret
  4241                              <1> 	
  4242                              <1> cnvrttxt: 
  4243 000036AA 31C9                <1> 	xor ecx, ecx
  4244 000036AC 31C0                <1> 	xor eax, eax
  4245 000036AE 31D2                <1> 	xor edx, edx
  4246 000036B0 31DB                <1> 	xor ebx, ebx
  4247 000036B2 4E                  <1> 	dec esi
  4248                              <1> cnvrtlptxt:
  4249 000036B3 46                  <1> 	inc esi
  4250 000036B4 8A06                <1> 	mov al, [esi]
  4251 000036B6 3C00                <1> 	cmp al, 0
  4252 000036B8 75F9                <1> 	jne cnvrtlptxt
  4253 000036BA 4E                  <1> 	dec esi
  4254 000036BB 8A06                <1> 	mov al, [esi]
  4255 000036BD 3C2E                <1> 	cmp al, '.'
  4256 000036BF 7503                <1> 	jne nocnvrtdot
  4257 000036C1 46                  <1> 	inc esi
  4258 000036C2 EBEF                <1> 	jmp cnvrtlptxt
  4259                              <1> nocnvrtdot:
  4260 000036C4 3C30                <1> 	cmp al, '0'
  4261 000036C6 7504                <1> 	jne txtlp
  4262 000036C8 39FE                <1> zerotest: cmp esi, edi
  4263 000036CA 7458                <1> 	je donecnvrt
  4264                              <1> txtlp:	
  4265 000036CC 31C0                <1> 	xor eax, eax
  4266 000036CE 8A06                <1> 	mov al, [esi]
  4267 000036D0 3C3D                <1> 	cmp al, '='
  4268 000036D2 7450                <1> 	je donecnvrt
  4269 000036D4 3C30                <1> 	cmp al, 48
  4270 000036D6 724C                <1> 	jb donecnvrt
  4271 000036D8 3C23                <1> 	cmp al, '#'
  4272 000036DA 7448                <1> 	je donecnvrt
  4273 000036DC 39FE                <1> 	cmp esi, edi
  4274 000036DE 7244                <1> 	jb donecnvrt
  4275 000036E0 81F900000000        <1> 	cmp ecx, 0
  4276 000036E6 7708                <1> 	ja exp
  4277 000036E8 2C30                <1> noexp:	sub al, 48
  4278 000036EA 01C2                <1> 	add edx, eax
  4279 000036EC 4E                  <1> 	dec esi
  4280 000036ED 41                  <1> 	inc ecx
  4281 000036EE EBDC                <1> 	jmp txtlp
  4282 000036F0 81F900000000        <1> exp:	cmp ecx, 0
  4283 000036F6 74F0                <1> 	je noexp
  4284 000036F8 2C30                <1> 	sub al, 48
  4285 000036FA 51                  <1> 	push ecx
  4286 000036FB 89C3                <1> expmul:	mov ebx, eax
  4287 000036FD 01D8                <1> 	add eax, ebx
  4288 000036FF 01D8                <1> 	add eax, ebx
  4289 00003701 01D8                <1> 	add eax, ebx
  4290 00003703 01D8                <1> 	add eax, ebx
  4291 00003705 01D8                <1> 	add eax, ebx
  4292 00003707 01D8                <1> 	add eax, ebx
  4293 00003709 01D8                <1> 	add eax, ebx
  4294 0000370B 01D8                <1> 	add eax, ebx
  4295 0000370D 01D8                <1> 	add eax, ebx
  4296 0000370F 81E901000000        <1> 	sub ecx, 1
  4297 00003715 81F900000000        <1> 	cmp ecx, 0
  4298 0000371B 77DE                <1> 	ja expmul
  4299 0000371D 01C2                <1> 	add edx, eax
  4300 0000371F 59                  <1> 	pop ecx
  4301 00003720 4E                  <1> 	dec esi
  4302 00003721 41                  <1> 	inc ecx
  4303 00003722 EBA8                <1> 	jmp txtlp
  4304 00003724 89D1                <1> donecnvrt: mov ecx, edx
  4305 00003726 C3                  <1> 	ret
  4306                                      %include 'source/builtinprogs.asm'
  4307 00003727 050406040704        <1> filetypes db 5,4,6,4,7,4
  4308                              <1> progstart:		;programs start here
  4309                              <1> ;db 5,4,"index",0
  4310                              <1> ;	call indexfiles
  4311                              <1> ;	jmp nwcmd
  4312                              <1> 
  4313                              <1> 
  4314                              <1> indexfiles:
  4315 0000372D BE[2D370000]        <1> 	mov esi, progstart
  4316 00003732 BB[00130000]        <1> 	mov ebx, fileindex
  4317 00003737 BF[2D370000]        <1> 	mov edi, progstart
  4318 0000373C 81EF02000000        <1> 	sub edi, 2
  4319                              <1> indexloop:
  4320 00003742 668B0E              <1> 	mov cx, [esi]
  4321                              <1> 	indexloop2:
  4322 00003745 663B0F              <1> 		cmp cx, [edi]
  4323 00003748 7424                <1> 		je indexloop2done
  4324 0000374A 81EF02000000        <1> 		sub edi, 2
  4325 00003750 81FF[27370000]      <1> 		cmp edi, filetypes
  4326 00003756 73ED                <1> 		jae indexloop2
  4327 00003758 BF[2D370000]        <1> 	mov edi, progstart
  4328 0000375D 81EF02000000        <1> 	sub edi, 2
  4329 00003763 46                  <1> 	inc esi
  4330 00003764 81FE[E1470000]      <1> 	cmp esi, batchprogend
  4331 0000376A 734E                <1> 	jae indexloopdone
  4332 0000376C EBD4                <1> 	jmp indexloop
  4333                              <1> indexloop2done:
  4334 0000376E 66890B              <1> 	mov [ebx], cx
  4335 00003771 81C302000000        <1> 	add ebx, 2
  4336 00003777 81C602000000        <1> 	add esi, 2
  4337                              <1> 	nameindex:
  4338 0000377D 8A0E                <1> 		mov cl, [esi]
  4339 0000377F 80F900              <1> 		cmp cl, 0
  4340 00003782 7406                <1> 		je nameindexdone
  4341 00003784 880B                <1> 		mov [ebx], cl
  4342 00003786 46                  <1> 		inc esi
  4343 00003787 43                  <1> 		inc ebx
  4344 00003788 EBF3                <1> 		jmp nameindex
  4345                              <1> 	nameindexdone:
  4346 0000378A 43                  <1> 		inc ebx
  4347 0000378B 66C7030000          <1> 		mov word [ebx], 0
  4348 00003790 81C302000000        <1> 		add ebx, 2
  4349 00003796 46                  <1> 		inc esi
  4350 00003797 8933                <1> 		mov [ebx], esi
  4351 00003799 81C304000000        <1> 		add ebx, 4
  4352 0000379F 66C7030000          <1> 		mov word [ebx], 0
  4353 000037A4 81C302000000        <1> 		add ebx, 2
  4354 000037AA 81FB[00150000]      <1> 		cmp ebx, fileindexend
  4355 000037B0 7308                <1> 		jae indexloopdone
  4356 000037B2 81C601000000        <1> 		add esi, 1
  4357 000037B8 EB88                <1> 		jmp indexloop
  4358 000037BA C605[C2370000]01    <1> indexloopdone: 	mov byte [indexdone], 1
  4359 000037C1 C3                  <1> 		ret
  4360                              <1> 
  4361 000037C2 00                  <1> indexdone db 0
  4362                              <1> 
  4363                              <1> 
  4364                              <1> ;db 5,4,"showindex",0
  4365                              <1> ;	mov esi, fileindex
  4366                              <1> ;	mov ebx, fileindexend
  4367                              <1> ;	mov cl, 5
  4368                              <1> ;	mov ch, 4
  4369                              <1> ;	call array
  4370                              <1> ;	mov esi, fileindex
  4371                              <1> ;	mov ebx, fileindexend
  4372                              <1> ;	mov cl, 6
  4373                              <1> ;	mov ch, 4
  4374                              <1> ;	call array
  4375                              <1> ;	mov esi, fileindex
  4376                              <1> ;	mov ebx, fileindexend
  4377                              <1> ;	mov cl, 7
  4378                              <1> ;	mov ch, 4
  4379                              <1> ;	call array
  4380                              <1> ;	jmp nwcmd
  4381                              <1> 
  4382 000037C3 0504736875736800    <1> db 5,4,"shush",0
  4383 000037CB BE[CB720000]        <1> 	mov esi, shushmsg
  4384 000037D0 E826F2FFFF          <1> 	call print
  4385 000037D5 E978F8FFFF          <1> 	jmp shush
  4386                              <1> 
  4387 000037DA 05046C7300          <1> db 5,4,"ls",0
  4388 000037DF BE[2D370000]        <1> 	lscmd:	mov esi, progstart
  4389 000037E4 BB[E1470000]        <1> 		mov ebx, progend
  4390 000037E9 E9CBFAFFFF          <1> 		jmp dir
  4391                              <1> 		
  4392 000037EE 05046469736B00      <1> db 5,4,"disk",0
  4393 000037F5 31C9                <1> 		xor ecx, ecx
  4394 000037F7 8A0D[81010000]      <1> 		mov cl, [DriveNumber]
  4395 000037FD C605[58350000]00    <1> 		mov byte [firsthexshown], 0
  4396 00003804 E864FDFFFF          <1> 		call showhex
  4397 00003809 BE[41730000]        <1> 		mov esi, line
  4398 0000380E E8E8F1FFFF          <1> 		call print
  4399 00003813 BE[04720000]        <1> 		mov esi, diskfileindex
  4400                              <1> 	diskindexdir:
  4401 00003818 E8DEF1FFFF          <1> 		call print
  4402 0000381D 56                  <1> 		push esi
  4403 0000381E BE[4B380000]        <1> 		mov esi, disktab
  4404 00003823 E8D3F1FFFF          <1> 		call print
  4405 00003828 5E                  <1> 		pop esi
  4406 00003829 8B4E05              <1> 		mov ecx, [esi + 5]
  4407 0000382C C605[58350000]02    <1> 		mov byte [firsthexshown], 2
  4408 00003833 E8D9FDFFFF          <1> 		call showdec
  4409 00003838 81C609000000        <1> 		add esi, 9
  4410 0000383E 81FE[CB720000]      <1> 		cmp esi, enddiskfileindex
  4411 00003844 72D2                <1> 		jb diskindexdir
  4412 00003846 E907F8FFFF          <1> 		jmp nwcmd
  4413                              <1> 		
  4414 0000384B 0D09090900          <1> 		disktab db 13,9,9,9,0
  4415                              <1> 
  4416 00003850 0504636C65617200    <1> db 5,4,"clear",0
  4417 00003858 E8BBF4FFFF          <1> 	cls:	call clear
  4418 0000385D E9F0F7FFFF          <1> 		jmp nwcmd
  4419                              <1> 		
  4420 00003862 05047761697400      <1> db 5,4,"wait",0
  4421 00003869 30C0                <1> 		xor al, al
  4422 0000386B E839F1FFFF          <1> 		call int302
  4423 00003870 E9DDF7FFFF          <1> 		jmp nwcmd
  4424                              <1> 
  4425 00003875 05046563686F00      <1> db 5,4,"echo",0
  4426 0000387C BE[7A1B0000]        <1> 	echo:	mov esi, buftxt
  4427 00003881 81C605000000        <1> 		add esi, 5
  4428 00003887 8A06                <1> 		mov al, [esi]
  4429                              <1> 		;cmp al, '$'
  4430                              <1> 		;je echovr		;;now unnecessary
  4431 00003889 E86DF1FFFF          <1> 		call print
  4432 0000388E BE[41730000]        <1> 		mov esi, line
  4433 00003893 E863F1FFFF          <1> 		call print
  4434 00003898 E9B5F7FFFF          <1> 		jmp nwcmd
  4435 0000389D BB[6F150000]        <1> 	echovr:	mov ebx, variables
  4436 000038A2 BF06000000          <1> 		mov edi, 6
  4437 000038A7 E83A000000          <1> 		call nxtvrech
  4438 000038AC E952000000          <1> 		jmp prntvr2
  4439 000038B1 B13D                <1> 	echvar:	mov cl, '='
  4440 000038B3 43                  <1> 		inc ebx
  4441 000038B4 8A03                <1> 		mov al, [ebx]
  4442 000038B6 3C00                <1> 		cmp al, 0
  4443 000038B8 742C                <1> 		je nxtvrech
  4444 000038BA 3C3D                <1> 		cmp al, '='
  4445 000038BC 7420                <1> 		je nxtvrechb1
  4446 000038BE BE[7A1B0000]        <1> 		mov esi, buftxt
  4447 000038C3 01FE                <1> 		add esi, edi
  4448 000038C5 E8CFF9FFFF          <1> 		call cndtest
  4449 000038CA 3C02                <1> 		cmp al, 2
  4450 000038CC 7431                <1> 		je prntvr
  4451 000038CE 3C01                <1> 		cmp al, 1
  4452 000038D0 742D                <1> 		je prntvr
  4453 000038D2 BE[7A1B0000]        <1> 		mov esi, buftxt
  4454 000038D7 01FE                <1> 		add esi, edi
  4455 000038D9 E908000000          <1> 		jmp nxtvrech
  4456                              <1> 	nxtvrechb1:
  4457 000038DE 81EB02000000        <1> 		sub ebx, 2
  4458 000038E4 EBCB                <1> 		jmp echvar
  4459 000038E6 8A03                <1> 	nxtvrech: mov al, [ebx]
  4460 000038E8 3C05                <1> 		cmp al, 5
  4461 000038EA 740A                <1> 		je nxtvrec2
  4462 000038EC 43                  <1> 		inc ebx
  4463 000038ED 81FB[6F1A0000]      <1> 		cmp ebx, varend
  4464 000038F3 72F1                <1> 		jb nxtvrech
  4465 000038F5 C3                  <1> 		ret
  4466 000038F6 43                  <1> 	nxtvrec2: inc ebx
  4467 000038F7 8A03                <1> 		mov al, [ebx]
  4468 000038F9 3C04                <1> 		cmp al, 4
  4469 000038FB 74B4                <1> 		je echvar
  4470 000038FD EBE7                <1> 		jmp nxtvrech
  4471 000038FF 43                  <1> 	prntvr: inc ebx
  4472 00003900 89DE                <1> 		mov esi, ebx
  4473 00003902 C3                  <1> 		ret
  4474 00003903 E8F3F0FFFF          <1> 	prntvr2: call print
  4475 00003908 BE[41730000]        <1> 		mov esi, line
  4476 0000390D E8E9F0FFFF          <1> 		call print
  4477 00003912 E93BF7FFFF          <1> 		jmp nwcmd
  4478                              <1> 		
  4479                              <1> 
  4480 00003917 05042300            <1> db 5,4,"#",0
  4481                              <1> 	num:	
  4482 0000391B E8A6FAFFFF          <1> 		call clearbuffer
  4483 00003920 C605[9D3B0000]00    <1> 		mov byte [decimal], 0
  4484 00003927 C605[9E3B0000]00    <1> 		mov byte [decimal2], 0
  4485 0000392E BE[7A1B0000]        <1> 		mov esi, buftxt
  4486 00003933 31C0                <1> 		xor eax, eax
  4487 00003935 31C9                <1> 		xor ecx, ecx
  4488 00003937 31DB                <1> 		xor ebx, ebx
  4489 00003939 8A06                <1> 	num2:	mov al, [esi]
  4490 0000393B 3C2B                <1> 		cmp al, '+'
  4491 0000393D 741B                <1> 		je operatorfound
  4492 0000393F 3C2D                <1> 		cmp al, '-'
  4493 00003941 7417                <1> 		je operatorfound
  4494 00003943 3C2A                <1> 		cmp al, '*'
  4495 00003945 7413                <1> 		je operatorfound
  4496 00003947 3C2F                <1> 		cmp al, '/'
  4497 00003949 740F                <1> 		je operatorfound
  4498 0000394B 3C5E                <1> 		cmp al, '^'
  4499 0000394D 740B                <1> 		je operatorfound
  4500 0000394F 46                  <1> 		inc esi
  4501 00003950 3C00                <1> 		cmp al, 0
  4502 00003952 0F84FAF6FFFF        <1> 		je near nwcmd
  4503 00003958 EBDF                <1> 		jmp num2
  4504 0000395A 50                  <1> 	operatorfound: push eax
  4505 0000395B 30E4                <1> 		xor ah, ah
  4506 0000395D 8826                <1> 		mov [esi], ah
  4507 0000395F 89F7                <1> 		mov edi, esi
  4508 00003961 46                  <1> 		inc esi
  4509 00003962 8A06                <1> 		mov al, [esi]
  4510                              <1> 		;cmp al, '$'
  4511                              <1> 		;je near varnum1	;;unnecessary
  4512 00003964 3C25                <1> 		cmp al, '%'
  4513 00003966 0F8461000000        <1> 		je near resultnum1
  4514                              <1> 	varnum2: 
  4515 0000396C 57                  <1> 		push edi
  4516 0000396D E8A3000000          <1> 		call checkdecimal
  4517 00003972 5F                  <1> 		pop edi
  4518 00003973 E832FDFFFF          <1> 		call cnvrttxt
  4519                              <1> 	vrnm2:
  4520 00003978 89CB                <1> 		mov ebx, ecx
  4521 0000397A 53                  <1> 		push ebx
  4522 0000397B E846FAFFFF          <1> 		call clearbuffer
  4523 00003980 BE[7A1B0000]        <1> 		mov esi, buftxt
  4524 00003985 89F7                <1> 		mov edi, esi
  4525 00003987 46                  <1> 		inc esi
  4526 00003988 8A06                <1> 		mov al, [esi]
  4527                              <1> 		;cmp al, '$'
  4528                              <1> 		;je near varnum3	;;unnecessary
  4529 0000398A 3C25                <1> 		cmp al, '%'
  4530 0000398C 0F844F000000        <1> 		je near resultnum2
  4531                              <1> 	varnum4: 
  4532 00003992 57                  <1> 		push edi
  4533 00003993 E869000000          <1> 		call checkdecimal2
  4534 00003998 5F                  <1> 		pop edi
  4535 00003999 E80CFDFFFF          <1> 		call cnvrttxt
  4536                              <1> 	vrnm4:
  4537 0000399E 5B                  <1> 		pop ebx
  4538 0000399F 58                  <1> 		pop eax
  4539 000039A0 3C2B                <1> 		cmp al, '+'
  4540 000039A2 0F849B000000        <1> 		je near plusnum
  4541 000039A8 3C2D                <1> 		cmp al, '-'
  4542 000039AA 0F849F000000        <1> 		je near subnum
  4543 000039B0 3C2A                <1> 		cmp al, '*'
  4544 000039B2 0F84A3000000        <1> 		je near mulnum
  4545 000039B8 3C2F                <1> 		cmp al, '/'
  4546 000039BA 0F84B1000000        <1> 		je near divnum
  4547 000039C0 3C5E                <1> 		cmp al, '^'
  4548 000039C2 0F84CC000000        <1> 		je near expnum
  4549 000039C8 E985F6FFFF          <1> 		jmp nwcmd
  4550                              <1> 	resultnum1:
  4551 000039CD 8A0D[9F3B0000]      <1> 		mov cl, [decimalresult]
  4552 000039D3 880D[9D3B0000]      <1> 		mov [decimal], cl
  4553 000039D9 8B0D[A03B0000]      <1> 		mov ecx, [result]
  4554 000039DF EB97                <1> 		jmp vrnm2
  4555                              <1> 	resultnum2:
  4556 000039E1 8A0D[9D3B0000]      <1> 		mov cl, [decimal]
  4557 000039E7 880D[9E3B0000]      <1> 		mov [decimal2], cl
  4558 000039ED 8A0D[9F3B0000]      <1> 		mov cl, [decimalresult]
  4559 000039F3 880D[9D3B0000]      <1> 		mov [decimal], cl
  4560 000039F9 8B0D[A03B0000]      <1> 		mov ecx, [result]
  4561 000039FF EB9D                <1> 		jmp vrnm4
  4562                              <1> ;	varnum1: sub esi, buftxt
  4563                              <1> ;		mov edi, esi
  4564                              <1> ;		add esi, buftxt
  4565                              <1> ;		inc edi
  4566                              <1> ;		mov ebx, variables
  4567                              <1> ;		call nxtvrech
  4568                              <1> ;		mov edi, esi
  4569                              <1> ;		dec edi
  4570                              <1> ;		jmp varnum2
  4571                              <1> ;	varnum3: sub esi, buftxt
  4572                              <1> ;		mov edi, esi
  4573                              <1> ;		add esi, buftxt
  4574                              <1> ;		inc edi
  4575                              <1> ;		mov ebx, variables
  4576                              <1> ;		call nxtvrech
  4577                              <1> ;		mov edi, esi
  4578                              <1> ;		dec edi
  4579                              <1> ;		jmp varnum4
  4580                              <1> 	checkdecimal2:
  4581 00003A01 8A25[9D3B0000]      <1> 		mov ah, [decimal]
  4582 00003A07 8825[9E3B0000]      <1> 		mov [decimal2], ah
  4583 00003A0D 30E4                <1> 		xor ah, ah
  4584 00003A0F 8825[9D3B0000]      <1> 		mov [decimal], ah
  4585                              <1> 	checkdecimal:
  4586 00003A15 89F7                <1> 		mov edi, esi
  4587                              <1> 	chkdec1:
  4588 00003A17 8A07                <1> 		mov al, [edi]
  4589 00003A19 3C2E                <1> 		cmp al, '.'
  4590 00003A1B 0F840B000000        <1> 		je near fnddec
  4591 00003A21 3C00                <1> 		cmp al, 0
  4592 00003A23 0F8419000000        <1> 		je near nodecimal
  4593 00003A29 47                  <1> 		inc edi
  4594 00003A2A EBEB                <1> 		jmp chkdec1
  4595                              <1> 	fnddec:
  4596 00003A2C 8A4701              <1> 		mov al, [edi + 1]
  4597 00003A2F 8807                <1> 		mov [edi], al
  4598 00003A31 3C00                <1> 		cmp al, 0
  4599 00003A33 0F8409000000        <1> 		je near nodecimal
  4600 00003A39 FE05[9D3B0000]      <1> 		inc byte [decimal]
  4601 00003A3F 47                  <1> 		inc edi
  4602 00003A40 EBEA                <1> 		jmp fnddec
  4603                              <1> 	nodecimal:
  4604 00003A42 C3                  <1> 		ret
  4605                              <1> 	plusnum:
  4606 00003A43 E813010000          <1> 		call decaddfix
  4607 00003A48 01D9                <1> 		add ecx, ebx
  4608 00003A4A E988000000          <1> 		jmp retnum
  4609                              <1> 	subnum:
  4610 00003A4F E807010000          <1> 		call decaddfix
  4611 00003A54 29D9                <1> 		sub ecx, ebx
  4612 00003A56 E97C000000          <1> 		jmp retnum
  4613                              <1> 	mulnum:
  4614 00003A5B A0[9E3B0000]        <1> 		mov al, [decimal2]
  4615 00003A60 0005[9D3B0000]      <1> 		add [decimal], al
  4616 00003A66 89C8                <1> 		mov eax, ecx
  4617 00003A68 F7E3                <1> 		mul ebx
  4618 00003A6A 89C1                <1> 		mov ecx, eax
  4619 00003A6C E966000000          <1> 		jmp retnum
  4620                              <1> 	divnum:
  4621 00003A71 E8E5000000          <1> 		call decaddfix
  4622 00003A76 30C0                <1> 		xor al, al
  4623 00003A78 A2[9D3B0000]        <1> 		mov [decimal], al
  4624 00003A7D 6689C8              <1> 		mov ax, cx
  4625 00003A80 80FB00              <1> 		cmp bl, 0
  4626 00003A83 0F844E000000        <1> 		je near retnum
  4627 00003A89 F6F3                <1> 		div bl
  4628 00003A8B 31C9                <1> 		xor ecx, ecx
  4629 00003A8D 88C1                <1> 		mov cl, al
  4630 00003A8F E943000000          <1> 		jmp retnum
  4631                              <1> 	expnum:
  4632 00003A94 8A15[9D3B0000]      <1> 		mov dl, [decimal]
  4633 00003A9A 8815[9E3B0000]      <1> 		mov [decimal2], dl
  4634 00003AA0 31D2                <1> 		xor edx, edx
  4635 00003AA2 89C8                <1> 		mov eax, ecx
  4636 00003AA4 89D9                <1> 		mov ecx, ebx
  4637 00003AA6 89C3                <1> 		mov ebx, eax
  4638 00003AA8 81F900000000        <1> 		cmp ecx, 0
  4639 00003AAE 7422                <1> 		je noexpnum
  4640 00003AB0 49                  <1> 		dec ecx
  4641 00003AB1 81F900000000        <1> 		cmp ecx, 0
  4642 00003AB7 7412                <1> 		je noexpnumlp
  4643 00003AB9 F7E3                <1> 	expnumlp: mul ebx
  4644 00003ABB 8A15[9E3B0000]      <1> 		mov dl, [decimal2]
  4645 00003AC1 0015[9D3B0000]      <1> 		add [decimal], dl
  4646 00003AC7 31D2                <1> 		xor edx, edx
  4647 00003AC9 E2EE                <1> 		loop expnumlp
  4648                              <1> 	noexpnumlp:
  4649 00003ACB 89C1                <1> 		mov ecx, eax
  4650 00003ACD E905000000          <1> 		jmp retnum
  4651                              <1> 	noexpnum:
  4652 00003AD2 B901000000          <1> 		mov ecx, 1
  4653                              <1> 	retnum: 
  4654 00003AD7 BE[8E1D0000]        <1> 		mov esi, numbuf
  4655 00003ADC 890D[A03B0000]      <1> 		mov [result], ecx
  4656 00003AE2 E8F4F8FFFF          <1> 		call convert
  4657 00003AE7 BE[8E1D0000]        <1> 		mov esi, numbuf
  4658 00003AEC 8A25[9D3B0000]      <1> 		mov ah, [decimal]
  4659 00003AF2 8825[9F3B0000]      <1> 		mov [decimalresult], ah
  4660 00003AF8 80FC00              <1> 		cmp ah, 0
  4661 00003AFB 0F8425000000        <1> 		je near noputdecimal
  4662                              <1> 	putdecimal:
  4663 00003B01 4E                  <1> 		dec esi
  4664 00003B02 FECC                <1> 		dec ah
  4665 00003B04 80FC00              <1> 		cmp ah, 0
  4666 00003B07 0F87F4FFFFFF        <1> 		ja near putdecimal
  4667 00003B0D 4E                  <1> 		dec esi
  4668 00003B0E 8A06                <1> 		mov al, [esi]
  4669 00003B10 C6062E              <1> 		mov byte [esi], '.'
  4670                              <1> 	decputloop:
  4671 00003B13 4E                  <1> 		dec esi
  4672 00003B14 8A26                <1> 		mov ah, [esi]
  4673 00003B16 8806                <1> 		mov [esi], al
  4674 00003B18 88E0                <1> 		mov al, ah
  4675 00003B1A 81FE[7A1D0000]      <1> 		cmp esi, buf2
  4676 00003B20 0F87EDFFFFFF        <1> 		ja near decputloop
  4677                              <1> 	noputdecimal:
  4678 00003B26 BE[7A1D0000]        <1> 		mov esi, buf2
  4679 00003B2B E809000000          <1> 		call chkadd
  4680 00003B30 E91DF5FFFF          <1> 		jmp nwcmd
  4681 00003B35 00000000            <1> edxnumbuf dw 0,0
  4682 00003B39 8A06                <1> 	chkadd: mov al, [esi]
  4683 00003B3B 3C30                <1> 		cmp al, '0'
  4684 00003B3D 750C                <1> 		jne dnadd
  4685 00003B3F 46                  <1> 		inc esi
  4686 00003B40 81FE[8E1D0000]      <1> 		cmp esi, numbuf
  4687 00003B46 7402                <1> 		je dnaddm1
  4688 00003B48 EBEF                <1> 		jmp chkadd
  4689 00003B4A 4E                  <1> 	dnaddm1: dec esi
  4690 00003B4B E8ABEEFFFF          <1> 	dnadd:	call print
  4691 00003B50 BE[41730000]        <1> 		mov esi, line
  4692 00003B55 E8A1EEFFFF          <1> 		call print
  4693 00003B5A C3                  <1> 		ret
  4694                              <1> 		
  4695                              <1> 	decaddfix:
  4696 00003B5B A0[9E3B0000]        <1> 		mov al, [decimal2]
  4697 00003B60 8A25[9D3B0000]      <1> 		mov ah, [decimal]
  4698 00003B66 38E0                <1> 		cmp al, ah
  4699 00003B68 7432                <1> 		je gooddecadd
  4700 00003B6A 38E0                <1> 		cmp al, ah
  4701 00003B6C 721A                <1> 		jb lowdecadd
  4702                              <1> 	highdecadd:
  4703 00003B6E FEC4                <1> 		inc ah
  4704 00003B70 89CA                <1> 		mov edx, ecx
  4705 00003B72 C1E103              <1> 		shl ecx, 3
  4706 00003B75 01D1                <1> 		add ecx, edx
  4707 00003B77 01D1                <1> 		add ecx, edx
  4708 00003B79 38E0                <1> 		cmp al, ah
  4709 00003B7B 77F1                <1> 		ja highdecadd
  4710 00003B7D 8825[9D3B0000]      <1> 		mov [decimal], ah
  4711 00003B83 E914000000          <1> 		jmp gooddecadd
  4712                              <1> 	lowdecadd:
  4713 00003B88 FEC0                <1> 		inc al
  4714 00003B8A 89DA                <1> 		mov edx, ebx
  4715 00003B8C C1E303              <1> 		shl ebx, 3
  4716 00003B8F 01D3                <1> 		add ebx, edx
  4717 00003B91 01D3                <1> 		add ebx, edx
  4718 00003B93 38E0                <1> 		cmp al, ah
  4719 00003B95 72F1                <1> 		jb lowdecadd
  4720 00003B97 A2[9D3B0000]        <1> 		mov [decimal], al
  4721                              <1> 	gooddecadd:
  4722 00003B9C C3                  <1> 		ret
  4723                              <1> 		
  4724 00003B9D 00                  <1> decimal db 0
  4725 00003B9E 00                  <1> decimal2 db 0
  4726 00003B9F 00                  <1> decimalresult db 0
  4727 00003BA0 00000000            <1> result db 0,0,0,0
  4728                              <1> 	
  4729 00003BA4 05042500            <1> db 5,4,"%",0
  4730 00003BA8 E819F8FFFF          <1> 	ans:	call clearbuffer
  4731 00003BAD 8B0D[A03B0000]      <1> 		mov ecx, [result]
  4732 00003BB3 BE[7A1D0000]        <1> 		mov esi, buf2
  4733 00003BB8 E81EF8FFFF          <1> 		call convert
  4734 00003BBD BE[7A1D0000]        <1> 		mov esi, buf2
  4735 00003BC2 E872FFFFFF          <1> 		call chkadd
  4736 00003BC7 E986F4FFFF          <1> 		jmp nwcmd
  4737                              <1> 
  4738 00003BCC 05042400            <1> db 5,4,"$",0
  4739 00003BD0 BE[7A1B0000]        <1> var: mov esi, buftxt
  4740 00003BD5 BB[6F150000]        <1> 	mov ebx, variables
  4741 00003BDA 8A06                <1> lkeq:	mov al, [esi]
  4742 00003BDC 3C3D                <1> 	cmp al, '='
  4743 00003BDE 741F                <1> 	je eqfnd	;is there an '=' sign?
  4744 00003BE0 3C00                <1> 	cmp al, 0
  4745 00003BE2 7403                <1> 	je echovars
  4746 00003BE4 46                  <1> 	inc esi
  4747 00003BE5 EBF3                <1> 	jmp lkeq
  4748 00003BE7 BE[6F150000]        <1> echovars: mov esi, variables
  4749 00003BEC BB[6F1A0000]        <1> 	mov ebx, varend
  4750 00003BF1 B105                <1> 	mov cl, 5
  4751 00003BF3 B504                <1> 	mov ch, 4
  4752 00003BF5 E86BF7FFFF          <1> 	call array
  4753 00003BFA E953F4FFFF          <1> 	jmp nwcmd
  4754 00003BFF 46                  <1> eqfnd:	inc esi
  4755 00003C00 8A06                <1> 	mov al, [esi]
  4756 00003C02 3C00                <1> 	cmp al, 0
  4757 00003C04 740F                <1> 	je readvar
  4758 00003C06 BE[7A1B0000]        <1> 	mov esi, buftxt
  4759 00003C0B BB[6F150000]        <1> 	mov ebx, variables
  4760 00003C10 E923000000          <1> 	jmp seek
  4761                              <1> readvar:
  4762 00003C15 B00D                <1> 	mov al, 13
  4763 00003C17 66BB0700            <1> 	mov bx, 7
  4764 00003C1B C605[5C2A0000]00    <1> 	mov byte [commandedit], 0
  4765 00003C22 BF[7A1D0000]        <1> 	mov edi, buftxtend
  4766 00003C27 E83DEEFFFF          <1> 	call int305
  4767 00003C2C BE[41730000]        <1> 	mov esi, line
  4768 00003C31 E8C5EDFFFF          <1> 	call print
  4769 00003C36 EB98                <1> 	jmp var
  4770 00003C38 668B03              <1> seek:	mov ax, [ebx]
  4771 00003C3B B105                <1> 	mov cl, 5
  4772 00003C3D B504                <1> 	mov ch, 4
  4773 00003C3F 663D0000            <1> 	cmp ax, 0
  4774 00003C43 0F8459000000        <1> 	je near save
  4775 00003C49 6639C8              <1> 	cmp ax, cx
  4776 00003C4C 7403                <1> 	je skfnd
  4777 00003C4E 43                  <1> 	inc ebx
  4778 00003C4F EBE7                <1> 	jmp seek
  4779 00003C51 BE[7A1B0000]        <1> skfnd:	mov esi, buftxt
  4780 00003C56 46                  <1> 	inc esi
  4781 00003C57 81C302000000        <1> 	add ebx, 2
  4782 00003C5D 89DF                <1> 	mov edi, ebx
  4783 00003C5F B13D                <1> 	mov cl, '='
  4784 00003C61 E833F6FFFF          <1> 	call cndtest
  4785 00003C66 3C01                <1> 	cmp al, 1	
  4786 00003C68 7417                <1> 	je varfnd
  4787 00003C6A 89FB                <1> 	mov ebx, edi
  4788 00003C6C BE[7A1B0000]        <1> 	mov esi, buftxt
  4789 00003C71 668B03              <1> 	mov ax, [ebx]
  4790 00003C74 663D0000            <1> 	cmp ax, 0
  4791 00003C78 0F8424000000        <1> 	je near save
  4792 00003C7E 43                  <1> 	inc ebx
  4793 00003C7F EBB7                <1> 	jmp seek
  4794 00003C81 8A03                <1> varfnd:	mov al, [ebx]
  4795 00003C83 3C04                <1> 	cmp al, 4
  4796 00003C85 7404                <1> 	je save2
  4797 00003C87 4B                  <1> 	dec ebx
  4798 00003C88 4E                  <1> 	dec esi
  4799 00003C89 EBF6                <1> 	jmp varfnd
  4800 00003C8B 4B                  <1> save2:	dec ebx
  4801 00003C8C 4E                  <1> 	dec esi
  4802 00003C8D 8A03                <1> 	mov al, [ebx]
  4803 00003C8F 3C05                <1> 	cmp al, 5
  4804 00003C91 7402                <1> 	je remove
  4805 00003C93 EBEC                <1> 	jmp varfnd
  4806 00003C95 8A03                <1> remove: mov al, [ebx]
  4807 00003C97 3C00                <1> 	cmp al, 0
  4808 00003C99 749D                <1> 	je seek
  4809 00003C9B 30C0                <1> 	xor al, al
  4810 00003C9D 8803                <1> 	mov [ebx], al
  4811 00003C9F 43                  <1> 	inc ebx
  4812 00003CA0 EBF3                <1> 	jmp remove	;do not need for now-need defragmentation
  4813 00003CA2 BE[7A1B0000]        <1> save:	mov esi, buftxt
  4814 00003CA7 43                  <1> 	inc ebx
  4815 00003CA8 B005                <1> 	mov al, 5
  4816 00003CAA B404                <1> 	mov ah, 4
  4817 00003CAC 668903              <1> 	mov [ebx], ax
  4818 00003CAF 43                  <1> 	inc ebx
  4819 00003CB0 43                  <1> svhere:	inc ebx
  4820 00003CB1 46                  <1> 	inc esi
  4821 00003CB2 8A06                <1> 	mov al, [esi]
  4822 00003CB4 3C00                <1> 	cmp al, 0
  4823 00003CB6 0F8442000000        <1> 	je near svdone
  4824 00003CBC 3C25                <1> 	cmp al, '%'
  4825 00003CBE 7404                <1> 	je ans2
  4826 00003CC0 8803                <1> 	mov [ebx], al	
  4827 00003CC2 EBEC                <1> 	jmp svhere
  4828 00003CC4 56                  <1> ans2:	push esi
  4829 00003CC5 BE[7A1D0000]        <1> 	mov esi, buf2
  4830 00003CCA E823000000          <1> 	call ansfnd
  4831 00003CCF E803000000          <1> 	call anscp
  4832 00003CD4 5E                  <1> 	pop esi
  4833 00003CD5 EBD9                <1> 	jmp svhere
  4834 00003CD7 8A06                <1> anscp:	mov al, [esi]
  4835 00003CD9 8803                <1> 	mov [ebx], al
  4836 00003CDB 81FE[8E1D0000]      <1> 	cmp esi, numbuf
  4837 00003CE1 74CD                <1> 	je svhere
  4838 00003CE3 3C00                <1> 	cmp al, 0
  4839 00003CE5 74C9                <1> 	je svhere
  4840 00003CE7 43                  <1> 	inc ebx
  4841 00003CE8 46                  <1> 	inc esi
  4842 00003CE9 EBEC                <1> 	jmp anscp
  4843 00003CEB 5E                  <1> ansnf:	pop esi
  4844 00003CEC 8A06                <1> 	mov al, [esi]
  4845 00003CEE 8803                <1> 	mov [ebx], al
  4846 00003CF0 EBBE                <1> 	jmp svhere
  4847 00003CF2 46                  <1> ansfnd:	inc esi
  4848 00003CF3 8A06                <1> 	mov al, [esi]
  4849 00003CF5 3C00                <1> 	cmp al, 0
  4850 00003CF7 74F2                <1> 	je ansnf
  4851 00003CF9 3C30                <1> 	cmp al, '0'
  4852 00003CFB 74F5                <1> 	je ansfnd
  4853 00003CFD C3                  <1> 	ret
  4854 00003CFE 30C0                <1> svdone:	xor al, al
  4855 00003D00 8803                <1> 	mov [ebx], al
  4856 00003D02 E94BF3FFFF          <1> 	jmp nwcmd
  4857                              <1> 	
  4858 00003D07 05046C6F676F757400  <1> 	db 5,4,"logout",0
  4859                              <1> logout:
  4860 00003D10 E919F2FFFF          <1> 	jmp os
  4861                              <1> 	
  4862 00003D15 05047265626F6F7400  <1> 	db 5,4,"reboot",0
  4863                              <1> rebootcomp:
  4864 00003D1E E92FC5FFFF          <1> 	jmp coldboot
  4865                              <1> 
  4866 00003D23 050473687574646F77- <1> 	db 5,4,"shutdown",0
  4867 00003D2C 6E00                <1>
  4868                              <1> shutdowncomp:
  4869 00003D2E E9F5C4FFFF          <1> 	jmp shutdown
  4870                              <1> 
  4871 00003D33 0504646F7300        <1> 	db 5,4,"dos",0
  4872                              <1> rundosprog:
  4873 00003D39 BF[7A1B0000]        <1> 	mov edi, buftxt
  4874 00003D3E 81C704000000        <1> 	add edi, 4
  4875 00003D44 BE00010000          <1> 	mov esi, 0x100
  4876 00003D49 E8672C0000          <1> 	call loadfile
  4877 00003D4E 81FA94010000        <1> 	cmp edx, 404
  4878 00003D54 0F8480000000        <1> 	je near noprogfound
  4879 00003D5A BB80000000          <1> 	mov ebx, 0x80
  4880 00003D5F BF[7A1B0000]        <1> 	mov edi, buftxt
  4881 00003D64 81C704000000        <1> 	add edi, 4
  4882                              <1> finddosparams:
  4883 00003D6A 8A07                <1> 	mov al, [edi]
  4884 00003D6C 47                  <1> 	inc edi
  4885 00003D6D 3C20                <1> 	cmp al, " "
  4886 00003D6F 75F9                <1> 	jne finddosparams
  4887                              <1> copydosparams:
  4888 00003D71 8A07                <1> 	mov al, [edi]
  4889 00003D73 8803                <1> 	mov [ebx], al
  4890 00003D75 43                  <1> 	inc ebx
  4891 00003D76 47                  <1> 	inc edi
  4892 00003D77 81FB00010000        <1> 	cmp ebx, 0x100
  4893 00003D7D 7304                <1> 	jae nomoredosparams
  4894 00003D7F 3C00                <1> 	cmp al, 0
  4895 00003D81 75EE                <1> 	jne copydosparams
  4896                              <1> nomoredosparams:
  4897 00003D83 BB00010000          <1> 	mov ebx, 0x100
  4898 00003D88 FFE3                <1> 	jmp ebx
  4899                              <1> 	
  4900 00003D8A 05042E2F00          <1> 	db 5,4,"./",0
  4901                              <1> rundiskprog:
  4902 00003D8F BF[7A1B0000]        <1> 	mov edi, buftxt
  4903 00003D94 81C702000000        <1> 	add edi, 2
  4904 00003D9A BE00004000          <1> 	mov esi, 0x400000
  4905 00003D9F E8112C0000          <1> 	call loadfile
  4906 00003DA4 81FA94010000        <1> 	cmp edx, 404
  4907 00003DAA 742E                <1> 	je noprogfound
  4908 00003DAC BB00004000          <1> 	mov ebx, 0x400000
  4909 00003DB1 66813B4558          <1> 	cmp word [ebx], "EX"
  4910 00003DB6 754B                <1> 	jne progbatchfound
  4911 00003DB8 81C302000000        <1> 	add ebx, 2
  4912 00003DBE BF[7A1B0000]        <1> 	mov edi, buftxt
  4913 00003DC3 81C702000000        <1> 	add edi, 2
  4914                              <1> findspaceprog:
  4915 00003DC9 8A07                <1> 	mov al, [edi]
  4916 00003DCB 47                  <1> 	inc edi
  4917 00003DCC 3C20                <1> 	cmp al, " "
  4918 00003DCE 75F9                <1> 	jne findspaceprog
  4919                              <1> findnonspaceprog:
  4920 00003DD0 8A07                <1> 	mov al, [edi]
  4921 00003DD2 47                  <1> 	inc edi
  4922 00003DD3 3C20                <1> 	cmp al, " "
  4923 00003DD5 74F9                <1> 	je findnonspaceprog
  4924 00003DD7 4F                  <1> 	dec edi
  4925 00003DD8 FFE3                <1> 	jmp ebx
  4926                              <1> noprogfound:
  4927 00003DDA BE[08730000]        <1> 	mov esi, notfound1
  4928 00003DDF E817ECFFFF          <1> 	call print
  4929 00003DE4 BE[7A1B0000]        <1> 	mov esi, buftxt
  4930 00003DE9 81C602000000        <1> 	add esi, 2
  4931 00003DEF E807ECFFFF          <1> 	call print
  4932 00003DF4 BE[12730000]        <1> 	mov esi, notfound2
  4933 00003DF9 E8FDEBFFFF          <1> 	call print
  4934 00003DFE E94FF2FFFF          <1> 	jmp nwcmd
  4935                              <1> progbatchfound:
  4936 00003E03 BF00004000          <1> 		mov edi, 0x400000
  4937 00003E08 C605[69150000]01    <1> 		mov byte [BATCHISON], 1
  4938                              <1> 	batchrunloop:
  4939 00003E0F E811F2FFFF          <1> 		call buftxtclear
  4940 00003E14 BE[7A1B0000]        <1> 		mov esi, buftxt
  4941                              <1> 	batchrunloop2:
  4942 00003E19 B10D                <1> 		mov cl, 13
  4943 00003E1B B50A                <1> 		mov ch, 10
  4944 00003E1D 66390F              <1> 		cmp [edi], cx
  4945 00003E20 0F841E000000        <1> 		je near nxtbatchrunline
  4946 00003E26 66C1C108            <1> 		rol cx, 8
  4947 00003E2A 66390F              <1> 		cmp [edi], cx
  4948 00003E2D 0F8411000000        <1> 		je near nxtbatchrunline
  4949 00003E33 803F00              <1> 		cmp byte [edi], 0
  4950 00003E36 0F8408000000        <1> 		je near nxtbatchrunline
  4951 00003E3C 8A07                <1> 		mov al, [edi]
  4952 00003E3E 8806                <1> 		mov [esi], al
  4953 00003E40 46                  <1> 		inc esi
  4954 00003E41 47                  <1> 		inc edi
  4955 00003E42 EBD5                <1> 		jmp batchrunloop2
  4956                              <1> 	nxtbatchrunline:
  4957 00003E44 81C702000000        <1> 		add edi, 2
  4958 00003E4A 893D[AC3E0000]      <1> 		mov [batchedi], edi
  4959 00003E50 893D[65150000]      <1> 		mov [BATCHPOS], edi
  4960 00003E56 C60600              <1> 		mov byte [esi], 0
  4961 00003E59 BE[7A1B0000]        <1> 		mov esi, buftxt
  4962 00003E5E 803E00              <1> 		cmp byte [esi], 0
  4963 00003E61 0F8439000000        <1> 		je near nobatchfoundrun
  4964 00003E67 31DB                <1> 		xor ebx, ebx
  4965 00003E69 8A1D[00150000]      <1> 		mov bl, [IFON]
  4966 00003E6F 80FB00              <1> 		cmp bl, 0
  4967 00003E72 0F8538000000        <1> 		jne near iftestbatch
  4968                              <1> 	doneiftest:
  4969 00003E78 803D[943F0000]00    <1> 		cmp byte [runnextline], 0
  4970 00003E7F 0F8405000000        <1> 		je near noruniftest
  4971 00003E85 E830F3FFFF          <1> 		call progtest2
  4972                              <1> 	noruniftest:
  4973 00003E8A C605[943F0000]01    <1> 		mov byte [runnextline], 1
  4974 00003E91 8B3D[AC3E0000]      <1> 		mov edi, [batchedi]
  4975 00003E97 803F00              <1> 		cmp byte [edi], 0
  4976 00003E9A 0F856FFFFFFF        <1> 		jne near batchrunloop
  4977                              <1> 	nobatchfoundrun:
  4978 00003EA0 C605[69150000]00    <1> 		mov byte [BATCHISON], 0
  4979 00003EA7 E9A6F1FFFF          <1> 		jmp nwcmd
  4980                              <1> 	
  4981 00003EAC 00000000            <1> batchedi dd 0	
  4982                              <1> 	
  4983                              <1> 	iftestbatch:
  4984 00003EB0 BE[01150000]        <1> 		mov esi, IFTRUE
  4985 00003EB5 01DE                <1> 		add esi, ebx
  4986 00003EB7 803E00              <1> 		cmp byte [esi], 0
  4987 00003EBA 0F85B8FFFFFF        <1> 		jne near doneiftest
  4988 00003EC0 881D[953F0000]      <1> 		mov [iffalsebuf], bl
  4989 00003EC6 803D[6A150000]01    <1> 		cmp byte [LOOPON], 1
  4990 00003ECD 0F8513000000        <1> 		jne near fifindbatch
  4991 00003ED3 E937FFFFFF          <1> 		jmp batchrunloop
  4992                              <1> 	elsetestbatch:
  4993 00003ED8 C60601              <1> 		mov byte [esi], 1
  4994 00003EDB 81C706000000        <1> 		add edi, 6
  4995 00003EE1 E929FFFFFF          <1> 		jmp batchrunloop
  4996                              <1> 	fifindbatch:
  4997 00003EE6 66B96966            <1> 		mov cx, "if"
  4998 00003EEA 66B86669            <1> 		mov ax, "fi"
  4999 00003EEE 663907              <1> 		cmp [edi], ax
  5000 00003EF1 0F8427000000        <1> 		je near fifoundbatch
  5001 00003EF7 66390F              <1> 		cmp [edi], cx
  5002 00003EFA 0F8477000000        <1> 		je near iffoundbatch
  5003 00003F00 803F00              <1> 		cmp byte [edi], 0
  5004 00003F03 0F8415000000        <1> 		je near fifoundbatch
  5005 00003F09 B8656C7365          <1> 		mov eax, "else"
  5006 00003F0E 3907                <1> 		cmp [edi], eax
  5007 00003F10 0F84C2FFFFFF        <1> 		je near elsetestbatch
  5008 00003F16 81C702000000        <1> 		add edi, 2
  5009 00003F1C EBC8                <1> 		jmp fifindbatch
  5010                              <1> 	fifoundbatch:
  5011 00003F1E 81C702000000        <1> 		add edi, 2
  5012 00003F24 B00D                <1> 		mov al, 13
  5013 00003F26 B40A                <1> 		mov ah, 10
  5014 00003F28 663907              <1> 		cmp [edi], ax
  5015 00003F2B 0F8418000000        <1> 		je near goodfibatch
  5016 00003F31 66C1C008            <1> 		rol ax, 8
  5017 00003F35 663907              <1> 		cmp [edi], ax
  5018 00003F38 0F840B000000        <1> 		je near goodfibatch
  5019 00003F3E 803F00              <1> 		cmp byte [edi], 0
  5020 00003F41 0F8459FFFFFF        <1> 		je near nobatchfoundrun
  5021 00003F47 EB9D                <1> 		jmp fifindbatch
  5022                              <1> 	goodfibatch:
  5023 00003F49 B001                <1> 		mov al, 1
  5024 00003F4B 2805[00150000]      <1> 		sub [IFON], al 
  5025 00003F51 A0[00150000]        <1> 		mov al, [IFON]
  5026 00003F56 8A1D[953F0000]      <1> 		mov bl, [iffalsebuf]
  5027 00003F5C 38D8                <1> 		cmp al, bl
  5028 00003F5E 7786                <1> 		ja fifindbatch
  5029 00003F60 BE[7A1B0000]        <1> 		mov esi, buftxt
  5030 00003F65 81EF02000000        <1> 		sub edi, 2
  5031 00003F6B C605[943F0000]00    <1> 		mov byte [runnextline], 0
  5032 00003F72 E998FEFFFF          <1> 		jmp batchrunloop
  5033                              <1> 	iffoundbatch:
  5034 00003F77 B020                <1> 		mov al, ' '
  5035 00003F79 81C702000000        <1> 		add edi, 2
  5036 00003F7F 3807                <1> 		cmp [edi], al
  5037 00003F81 0F855FFFFFFF        <1> 		jne near fifindbatch
  5038 00003F87 B001                <1> 		mov al, 1
  5039 00003F89 0005[00150000]      <1> 		add [IFON], al
  5040 00003F8F E952FFFFFF          <1> 		jmp fifindbatch
  5041                              <1> 		
  5042                              <1> 		
  5043 00003F94 01                  <1> runnextline db 1
  5044 00003F95 00                  <1> iffalsebuf db 0
  5045                              <1> 
  5046 00003F96 E9B7F0FFFF          <1> notbatch: jmp nwcmd
  5047                              <1> 
  5048 00003F9B 050472656D00        <1> 	db 5,4,"rem",0	;this lets you rem stuff
  5049 00003FA1 E9ACF0FFFF          <1> 	jmp nwcmd
  5050                              <1> 
  5051 00003FA6 05047768696C6500    <1> 	db 5,4,"while",0
  5052 00003FAE 30C0                <1> whilecmd:  xor al, al
  5053 00003FB0 3805[69150000]      <1> 	cmp [BATCHISON], al
  5054 00003FB6 0F84DAFFFFFF        <1> 	je near notbatch
  5055 00003FBC 8B35[65150000]      <1> 	mov esi, [BATCHPOS]
  5056 00003FC2 81EE02000000        <1> 	sub esi, 2
  5057 00003FC8 4E                  <1> whilefnd: dec esi
  5058 00003FC9 8A06                <1> 	mov al, [esi]
  5059 00003FCB 3C0A                <1> 	cmp al, 10
  5060 00003FCD 0F8412000000        <1> 	je near whilefnd2
  5061 00003FD3 3C0D                <1> 	cmp al, 13
  5062 00003FD5 0F840A000000        <1> 	je near whilefnd2
  5063 00003FDB 3C00                <1> 	cmp al, 0
  5064 00003FDD 0F8402000000        <1> 	je near whilefnd2
  5065 00003FE3 EBE3                <1> 	jmp whilefnd
  5066                              <1> whilefnd2:
  5067 00003FE5 46                  <1> 	inc esi
  5068 00003FE6 8935[6B150000]      <1> 	mov [LOOPPOS], esi
  5069 00003FEC C605[6A150000]01    <1> 	mov BYTE [LOOPON], 1
  5070 00003FF3 BE[7A1B0000]        <1> 	mov esi, buftxt
  5071 00003FF8 BB[7A1B0000]        <1> 	mov ebx, buftxt
  5072 00003FFD 81C306000000        <1> 	add ebx, 6
  5073 00004003 E923000000          <1> 	jmp chkeqsn
  5074                              <1> 
  5075                              <1> 
  5076 00004008 0504696600          <1> 	db 5,4,"if",0
  5077 0000400D 30C0                <1> ifcmd:	xor al, al
  5078 0000400F 3805[69150000]      <1> 	cmp [BATCHISON], al
  5079 00004015 0F847BFFFFFF        <1> 	je near notbatch
  5080 0000401B BE[7A1B0000]        <1> 	mov esi, buftxt
  5081 00004020 BB[7A1B0000]        <1> 	mov ebx, buftxt
  5082 00004025 81C303000000        <1> 	add ebx, 3
  5083 0000402B 8A06                <1> chkeqsn: mov al, [esi]
  5084 0000402D 3C00                <1> 	cmp al, 0
  5085 0000402F 0F8461FFFFFF        <1> 	je near notbatch
  5086 00004035 3C3D                <1> 	cmp al, '='
  5087 00004037 0F8403000000        <1> 	je near chkeqdn
  5088 0000403D 46                  <1> 	inc esi
  5089 0000403E EBEB                <1> 	jmp chkeqsn
  5090 00004040 B000                <1> chkeqdn: mov al, 0 
  5091 00004042 8806                <1> 	mov [esi], al
  5092 00004044 46                  <1> 	inc esi
  5093 00004045 8A06                <1> 	mov al, [esi]
  5094 00004047 3C24                <1> 	cmp al, '$'
  5095 00004049 0F845C000000        <1> 	je near ifvar1
  5096 0000404F 8A03                <1> ifvar2: mov al, [ebx]
  5097 00004051 3C24                <1> 	cmp al, '$'
  5098 00004053 0F8472000000        <1> 	je near ifvar3
  5099 00004059 E801F2FFFF          <1> ifvar4:	call tester
  5100 0000405E 3C01                <1> 	cmp al, 1
  5101 00004060 0F8405000000        <1> 	je near trueif
  5102 00004066 E920000000          <1> 	jmp falseif
  5103 0000406B 31C0                <1> trueif:	xor eax, eax
  5104 0000406D A0[00150000]        <1> 	mov al, [IFON]
  5105 00004072 FEC0                <1> 	inc al
  5106 00004074 A2[00150000]        <1> 	mov [IFON], al
  5107 00004079 30E4                <1> 	xor ah, ah
  5108 0000407B BE[01150000]        <1> 	mov esi, IFTRUE
  5109 00004080 01C6                <1> 	add esi, eax
  5110 00004082 B401                <1> 	mov ah, 1
  5111 00004084 8826                <1> 	mov [esi], ah
  5112 00004086 E9C7EFFFFF          <1> 	jmp nwcmd
  5113 0000408B 31C0                <1> falseif: xor eax, eax
  5114 0000408D A0[00150000]        <1> 	mov al, [IFON]
  5115 00004092 FEC0                <1> 	inc al
  5116 00004094 A2[00150000]        <1> 	mov [IFON], al
  5117 00004099 30E4                <1> 	xor ah, ah
  5118 0000409B BE[01150000]        <1> 	mov esi, IFTRUE
  5119 000040A0 01C6                <1> 	add esi, eax
  5120 000040A2 30E4                <1> 	xor ah, ah
  5121 000040A4 8826                <1> 	mov [esi], ah
  5122 000040A6 E9A7EFFFFF          <1> 	jmp nwcmd
  5123 000040AB 89F7                <1> ifvar1: mov edi, esi
  5124 000040AD 81EF[7A1B0000]      <1> 	sub edi, buftxt
  5125 000040B3 47                  <1> 	inc edi
  5126 000040B4 BB[6F150000]        <1> 	mov ebx, variables
  5127 000040B9 E828F8FFFF          <1> 	call nxtvrech
  5128 000040BE BB[7A1B0000]        <1> 	mov ebx, buftxt
  5129 000040C3 81C303000000        <1> 	add ebx, 3
  5130 000040C9 EB84                <1> 	jmp ifvar2
  5131 000040CB 8935[EB400000]      <1> ifvar3: mov [esiif], esi
  5132 000040D1 BF04000000          <1> 	mov edi, 4
  5133 000040D6 BB[6F150000]        <1> 	mov ebx, variables
  5134 000040DB E806F8FFFF          <1> 	call nxtvrech
  5135 000040E0 8B35[EB400000]      <1> 	mov esi, [esiif]
  5136 000040E6 E96EFFFFFF          <1> 	jmp ifvar4
  5137                              <1> 
  5138 000040EB 00000000            <1> esiif dd 0
  5139                              <1> 	
  5140 000040EF 0504656C736500      <1> 	db 5,4,"else",0
  5141 000040F6 31C0                <1> elsecmd:	xor eax, eax
  5142 000040F8 A0[00150000]        <1> 	mov al, [IFON]
  5143 000040FD BE[01150000]        <1> 	mov esi, IFTRUE
  5144 00004102 01C6                <1> 	add esi, eax
  5145 00004104 8A06                <1> 	mov al, [esi]
  5146 00004106 3401                <1> 	xor al, 1
  5147 00004108 8806                <1> 	mov [esi], al
  5148 0000410A E943EFFFFF          <1> 	jmp nwcmd
  5149                              <1> 
  5150 0000410F 05046C6F6F7000      <1> 	db 5,4,"loop",0
  5151 00004116 803D[6A150000]00    <1> 	cmp byte [LOOPON], 0
  5152 0000411D 0F8505000000        <1> 	jne near filoop
  5153 00004123 E92AEFFFFF          <1> 	jmp nwcmd
  5154 00004128 8B35[6B150000]      <1> filoop: mov esi, [LOOPPOS]
  5155 0000412E FE0D[00150000]      <1> 	dec byte [IFON]
  5156 00004134 C605[6A150000]00    <1> 	mov byte [LOOPON], 0
  5157 0000413B 8935[65150000]      <1> 	mov [BATCHPOS], esi
  5158 00004141 8935[AC3E0000]      <1> 	mov [batchedi], esi
  5159 00004147 E906EFFFFF          <1> 	jmp nwcmd
  5160                              <1> 	
  5161                              <1> 
  5162 0000414C 0504666900          <1> 	db 5,4,"fi",0
  5163 00004151 30C0                <1> 	xor al, al
  5164 00004153 3805[69150000]      <1> 	cmp [BATCHISON], al
  5165 00004159 0F8437FEFFFF        <1> 	je near notbatch
  5166 0000415F B001                <1> fi:	mov al, 1
  5167 00004161 2805[00150000]      <1> 	sub [IFON],al
  5168 00004167 E9E6EEFFFF          <1> 	jmp nwcmd
  5169                              <1> 
  5170 0000416C 050473746F7000      <1> 	db 5,4,"stop",0
  5171 00004173 30C0                <1> stop:	xor al, al
  5172 00004175 A2[69150000]        <1> 	mov [BATCHISON], al
  5173 0000417A A2[00150000]        <1> 	mov [IFON], al
  5174 0000417F A2[01150000]        <1> 	mov [IFTRUE], al
  5175 00004184 A2[6A150000]        <1> 	mov [LOOPON], al
  5176 00004189 E9C4EEFFFF          <1> 	jmp nwcmd
  5177                                      %include 'source/programs.asm'
  5178                              <1> ;db 5,4,"internet",0
  5179                              <1> 	internettest: 			;;initialize network card, lets hope this is right
  5180                              <1> 							;;^^used to^^, now tests int 30h functions		
  5181 0000418E B403                <1> 		mov ah, 3
  5182 00004190 CD30                <1> 		int 30h
  5183 00004192 B401                <1> 		mov ah, 1
  5184                              <1> 		;mov esi, datmsg
  5185 00004194 66BB0700            <1> 		mov bx, 7
  5186 00004198 30C0                <1> 		xor al, al
  5187 0000419A CD30                <1> 		int 30h
  5188                              <1> 	    ;jmp packettest
  5189 0000419C E9B1EEFFFF          <1> 		jmp nwcmd
  5190                              <1> ;datmsg: db "Internet has not been implemented yet.",10,13,0
  5191                              <1> 	
  5192 000041A1 050474687265616473- <1> db 5,4,"threads",0
  5193 000041AA 00                  <1>
  5194 000041AB E9EF290000          <1> 	jmp threadstarttest
  5195                              <1> 	
  5196 000041B0 050472656700        <1> db 5,4,"reg",0
  5197 000041B6 CD03                <1> 	int 3
  5198 000041B8 E995EEFFFF          <1> 	jmp nwcmd
  5199                              <1> 	
  5200 000041BD 0504636861726D6170- <1> db 5,4,"charmap",0
  5201 000041C6 00                  <1>
  5202 000041C7 30C0                <1> 	xor al, al
  5203 000041C9 66BB0700            <1> 	mov bx, 7
  5204                              <1> charmapcopy:
  5205 000041CD FEC0                <1> 	inc al
  5206 000041CF 3C08                <1> 	cmp al, 8
  5207 000041D1 7426                <1> 	je charmapnocopy
  5208 000041D3 3C09                <1> 	cmp al, 9
  5209 000041D5 7422                <1> 	je charmapnocopy
  5210 000041D7 3C0A                <1> 	cmp al, 10
  5211 000041D9 741E                <1> 	je charmapnocopy
  5212 000041DB 3C0D                <1> 	cmp al, 13
  5213 000041DD 741A                <1> 	je charmapnocopy
  5214 000041DF 3C00                <1> 	cmp al, 0
  5215 000041E1 7407                <1> 	je nomorecharmap
  5216 000041E3 E80AE6FFFF          <1> 	call int301prnt
  5217 000041E8 EBE3                <1> 	jmp charmapcopy
  5218                              <1> nomorecharmap:
  5219 000041EA BE[41730000]        <1> 	mov esi, line
  5220 000041EF E807E8FFFF          <1> 	call print
  5221 000041F4 E959EEFFFF          <1> 	jmp nwcmd
  5222                              <1> charmapnocopy:
  5223 000041F9 6650                <1> 	push ax
  5224 000041FB B020                <1> 	mov al, " "
  5225 000041FD E8F0E5FFFF          <1> 	call int301prnt
  5226 00004202 6658                <1> 	pop ax
  5227 00004204 EBC7                <1> 	jmp charmapcopy
  5228                              <1> 	
  5229 00004206 05046B6579636F6465- <1> db 5,4,"keycode",0
  5230 0000420F 00                  <1>
  5231                              <1> keycode:
  5232 00004210 C605[A6290000]00    <1> 	mov byte [trans], 0
  5233 00004217 E868060000          <1> 	call guistartin
  5234 0000421C 31C0                <1> 	xor eax, eax
  5235 0000421E 31C9                <1> 	xor ecx, ecx
  5236 00004220 8A0D[5F480000]      <1> 	mov cl, [specialkey]
  5237 00004226 80F900              <1> 	cmp cl, 0
  5238 00004229 0F8405000000        <1> 	je near nospecialkeycode
  5239 0000422F E825F3FFFF          <1> 	call showhexsmall
  5240                              <1> nospecialkeycode:
  5241 00004234 66A1[A4290000]      <1> 	mov ax, [lastkey]
  5242 0000423A 88E1                <1> 	mov cl, ah
  5243 0000423C E818F3FFFF          <1> 	call showhexsmall
  5244 00004241 EBCD                <1> 	jmp keycode
  5245                              <1> 
  5246 00004243 050470636900        <1> db 5,4,"pci",0
  5247                              <1> 	pcishow:
  5248 00004249 E8CF250000          <1> 	call pcidump
  5249 0000424E E9FFEDFFFF          <1> 	jmp nwcmd
  5250                              <1> 	
  5251 00004253 050461727000        <1> db 5,4,"arp",0
  5252 00004259 E8BA240000          <1> 	call arptest
  5253 0000425E E9EFEDFFFF          <1> 	jmp nwcmd
  5254                              <1> 
  5255 00004263 0504626174636800    <1> db 5,4,"batch",0
  5256                              <1> 	batchst: 
  5257 0000426B BF[7A1B0000]        <1> 		mov edi, buftxt
  5258 00004270 81C706000000        <1> 		add edi, 6
  5259 00004276 803F00              <1> 		cmp byte [edi], 0
  5260 00004279 0F8473000000        <1> 		je near nonamefound
  5261 0000427F BE00004000          <1> 		mov esi, 0x400000
  5262 00004284 E82C270000          <1> 		call loadfile
  5263 00004289 89D0                <1> 		mov eax, edx
  5264 0000428B 3D94010000          <1> 		cmp eax, 404
  5265 00004290 746F                <1> 		je goodbatchname
  5266 00004292 BE[A1420000]        <1> 		mov esi, badbatchname
  5267 00004297 E85FE7FFFF          <1> 		call print
  5268 0000429C E9B1EDFFFF          <1> 		jmp nwcmd
  5269 000042A1 546869732066696C65- <1> 		badbatchname db "This file already exists!",10,13,0
  5270 000042AA 20616C726561647920- <1>
  5271 000042B3 657869737473210A0D- <1>
  5272 000042BC 00                  <1>
  5273 000042BD 596F75206861766520- <1> 		namenotfoundbatch db "You have to type a name after the command.",10,13,0
  5274 000042C6 746F20747970652061- <1>
  5275 000042CF 206E616D6520616674- <1>
  5276 000042D8 65722074686520636F- <1>
  5277 000042E1 6D6D616E642E0A0D00  <1>
  5278 000042EA 00000000            <1> 		esicache3 dd 0
  5279 000042EE 00000000            <1> 		esicache2 dd 0
  5280                              <1> 	nonamefound:
  5281 000042F2 BE[BD420000]        <1> 		mov esi, namenotfoundbatch
  5282 000042F7 E8FFE6FFFF          <1> 		call print
  5283 000042FC E951EDFFFF          <1> 		jmp nwcmd
  5284                              <1> 	goodbatchname:
  5285 00004301 BE00004000          <1> 		mov esi, 0x400000
  5286                              <1> 	batchcreate:
  5287 00004306 8935[EA420000]      <1> 		mov [esicache3], esi
  5288 0000430C BF00008000          <1> 		mov edi, 0x800000
  5289 00004311 B00D                <1> 		mov al, 13
  5290 00004313 B307                <1> 		mov bl, 7
  5291 00004315 B404                <1> 		mov ah, 4
  5292 00004317 CD30                <1> 		int 30h
  5293 00004319 8935[EE420000]      <1> 		mov [esicache2], esi
  5294 0000431F 8A0E                <1> 		mov cl, [esi]
  5295 00004321 8B35[EA420000]      <1> 		mov esi, [esicache3]
  5296 00004327 BB[7B430000]        <1> 		mov ebx, exitword
  5297 0000432C E868EFFFFF          <1> 		call cndtest
  5298 00004331 3C01                <1> 		cmp al, 1
  5299 00004333 7423                <1> 		je endbatchcreate
  5300 00004335 3C02                <1> 		cmp al, 2
  5301 00004337 741F                <1> 		je endbatchcreate
  5302 00004339 BE[41730000]        <1> 		mov esi, line
  5303 0000433E E8B8E6FFFF          <1> 		call print
  5304 00004343 8B35[EE420000]      <1> 		mov esi, [esicache2]
  5305 00004349 B00D                <1> 		mov al, 13
  5306 0000434B B40A                <1> 		mov ah, 10
  5307 0000434D 668906              <1> 		mov [esi], ax
  5308 00004350 81C602000000        <1> 		add esi, 2
  5309 00004356 EBAE                <1> 		jmp batchcreate
  5310                              <1> 	endbatchcreate:
  5311 00004358 8B35[EA420000]      <1> 		mov esi, [esicache3]
  5312 0000435E 31C0                <1> 		xor eax, eax
  5313 00004360 8806                <1> 		mov [esi], al
  5314 00004362 BE[41730000]        <1> 		mov esi, line
  5315 00004367 E88FE6FFFF          <1> 		call print
  5316 0000436C BE00004000          <1> 		mov esi, 0x400000
  5317 00004371 E885E6FFFF          <1> 		call print
  5318 00004376 E9D7ECFFFF          <1> 		jmp nwcmd
  5319                              <1> 	
  5320 0000437B 5C7800              <1> 	exitword db "\x",0
  5321 0000437E 54797065205C782074- <1> 	wordmsg db "Type \x to exit.",10,13,0
  5322 00004387 6F20657869742E0A0D- <1>
  5323 00004390 00                  <1>
  5324                              <1> 		
  5325 00004391 050473686F7700      <1> db 5,4,"show",0
  5326 00004398 BF[7A1B0000]        <1> 		mov edi, buftxt
  5327 0000439D 81C705000000        <1> 		add edi, 5
  5328 000043A3 BE00004000          <1> 		mov esi, 0x400000
  5329 000043A8 E808260000          <1> 		call loadfile
  5330 000043AD BE00004000          <1> 		mov esi, 0x400000
  5331 000043B2 66813E424D          <1> 		cmp word [esi], "BM"
  5332 000043B7 7414                <1> 		je bmpfound
  5333 000043B9 E83DE6FFFF          <1> 		call print
  5334 000043BE BE[41730000]        <1> 		mov esi, line
  5335 000043C3 E833E6FFFF          <1> 		call print
  5336 000043C8 E985ECFFFF          <1> 		jmp nwcmd
  5337                              <1> bmpfound:
  5338 000043CD 803D[8F4F0000]00    <1> 		cmp byte [guion], 0
  5339 000043D4 0F8446000000        <1> 		je near noguibmp
  5340 000043DA BE00004000          <1> 		mov esi, 0x400000
  5341 000043DF 31C9                <1> 		xor ecx, ecx
  5342 000043E1 31D2                <1> 		xor edx, edx
  5343 000043E3 31C0                <1> 		xor eax, eax
  5344 000043E5 31DB                <1> 		xor ebx, ebx
  5345 000043E7 E8431C0000          <1> 		call showbmp
  5346 000043EC 30C0                <1> 		xor al, al
  5347 000043EE B405                <1> 		mov ah, 5
  5348 000043F0 CD30                <1> 		int 30h
  5349 000043F2 E8260A0000          <1> 		call guiclear
  5350 000043F7 E8940B0000          <1> 		call clearmousecursor
  5351 000043FC E8FE110000          <1> 		call reloadallgraphics
  5352 00004401 BE[7A1B0000]        <1> 		mov esi, buftxt
  5353 00004406 81C605000000        <1> 		add esi, 5
  5354 0000440C E8EAE5FFFF          <1> 		call print
  5355 00004411 BE[A3440000]        <1> 		mov esi, loadedbmpmsg
  5356 00004416 E8E0E5FFFF          <1> 		call print
  5357 0000441B E932ECFFFF          <1> 		jmp nwcmd
  5358                              <1> noguibmp:
  5359 00004420 BE[2F440000]        <1> 		mov esi, warnguibmp
  5360 00004425 E8D1E5FFFF          <1> 		call print
  5361 0000442A E923ECFFFF          <1> 		jmp nwcmd
  5362 0000442F 546869732063616E20- <1> warnguibmp db "This can not be done without the gui.",10,13,0
  5363 00004438 6E6F7420626520646F- <1>
  5364 00004441 6E6520776974686F75- <1>
  5365 0000444A 742074686520677569- <1>
  5366 00004453 2E0A0D00            <1>
  5367                              <1> 
  5368                              <1> 		
  5369                              <1> filenotfound:
  5370 00004457 BE[80440000]        <1> 		mov esi, filenf
  5371 0000445C E89AE5FFFF          <1> 		call print
  5372 00004461 BE[7A1B0000]        <1> 		mov esi, buftxt
  5373 00004466 81C608000000        <1> 		add esi, 8
  5374 0000446C E88AE5FFFF          <1> 		call print
  5375 00004471 BE[8B440000]        <1> 		mov esi, filenf2
  5376 00004476 E880E5FFFF          <1> 		call print
  5377 0000447B E9D2EBFFFF          <1> 		jmp nwcmd
  5378 00004480 5468652066696C6520- <1> filenf db "The file ",34,0
  5379 00004489 2200                <1>
  5380 0000448B 2220636F756C64206E- <1> filenf2 db 34," could not be found.",13,10,0
  5381 00004494 6F7420626520666F75- <1>
  5382 0000449D 6E642E0D0A00        <1>
  5383                              <1> 		
  5384 000044A3 206C6F616465642E0D- <1> loadedbmpmsg db " loaded.",13,10,0
  5385 000044AC 0A00                <1>
  5386                              <1> 
  5387 000044AE 050464756D7000      <1> 	db 5,4,"dump",0
  5388 000044B5 BE[7A1B0000]        <1> 	mov esi, buftxt
  5389 000044BA 81C605000000        <1> 	add esi, 5
  5390 000044C0 31C9                <1> 	xor ecx, ecx
  5391 000044C2 E8E3F1FFFF          <1> 	call cnvrttxt
  5392 000044C7 89CF                <1> 	mov edi, ecx
  5393 000044C9 89FE                <1> 	mov esi, edi
  5394 000044CB 81C680030000        <1> 	add esi, 896
  5395 000044D1 C605[58350000]00    <1> 	mov byte [firsthexshown],0
  5396                              <1> dumphexloop:
  5397 000044D8 8B0F                <1> 	mov ecx, [edi]
  5398 000044DA E88EF0FFFF          <1> 	call showhex
  5399 000044DF 81C704000000        <1> 	add edi, 4
  5400 000044E5 39F7                <1> 	cmp edi, esi
  5401 000044E7 72EF                <1> 	jb dumphexloop
  5402 000044E9 E964EBFFFF          <1> 	jmp nwcmd
  5403                              <1> 
  5404 000044EE 050474696D6500      <1> db 5,4,"time",0
  5405 000044F5 E80F000000          <1> 	call time
  5406 000044FA BE[E4460000]        <1> 	mov esi, timeshow
  5407 000044FF E8F7E4FFFF          <1> 	call print
  5408 00004504 E9C1000000          <1> 	jmp findday
  5409                              <1> time:
  5410 00004509 E85E010000          <1> 	call tstackput1
  5411 0000450E B00A                <1> 	mov al,10			;Get RTC register A
  5412 00004510 E888010000          <1> 	call tget1
  5413 00004515 A880                <1> 	test al,0x80			;Is update in progress?
  5414 00004517 75F0                <1> 	jne time				; yes, wait
  5415                              <1> 
  5416 00004519 B000                <1> 	mov al,0			;Get seconds (00 to 59)
  5417 0000451B E87D010000          <1> 	call tget1
  5418 00004520 A2[DB460000]        <1> 	mov [RTCtimeSecond],al
  5419                              <1> 
  5420 00004525 B002                <1> 	mov al,0x02			;Get minutes (00 to 59)
  5421 00004527 E871010000          <1> 	call tget1
  5422 0000452C A2[DC460000]        <1> 	mov [RTCtimeMinute],al
  5423                              <1> 
  5424 00004531 B004                <1> 	mov al,0x04			;Get hours (see notes)
  5425 00004533 E865010000          <1> 	call tget1
  5426 00004538 A2[DD460000]        <1> 	mov [RTCtimeHour],al
  5427                              <1> 
  5428 0000453D B007                <1> 	mov al,0x07			;Get day of month (01 to 31)
  5429 0000453F E859010000          <1> 	call tget1
  5430                              <1> ;	mov ah, 0			;;fix day
  5431                              <1> ;	mov ah, al
  5432                              <1> ;	shr ah, 4
  5433                              <1> ;	shl al, 4
  5434                              <1> ;	shr al, 4
  5435                              <1> ;	cmp al, 0
  5436                              <1> ;	jne nodecahday
  5437                              <1> ;	mov al, 10
  5438                              <1> ;	dec ah
  5439                              <1> ;nodecahday:
  5440                              <1> ;	dec al
  5441                              <1> ;	shl ah, 4
  5442                              <1> ;	or al, ah
  5443 00004544 A2[DE460000]        <1> 	mov [RTCtimeDay],al
  5444                              <1> 
  5445 00004549 B008                <1> 	mov al,0x08			;Get month (01 to 12)
  5446 0000454B E84D010000          <1> 	call tget1
  5447 00004550 A2[DF460000]        <1> 	mov [RTCtimeMonth],al
  5448                              <1> 
  5449 00004555 B009                <1> 	mov al,0x09			;Get year (00 to 99)
  5450 00004557 E841010000          <1> 	call tget1
  5451 0000455C A2[E0460000]        <1> 	mov [RTCtimeYear],al
  5452                              <1> 	
  5453 00004561 BE[E4460000]        <1> 	mov esi, timeshow
  5454 00004566 8A2D[DD460000]      <1> 	mov ch, [RTCtimeHour]
  5455 0000456C E837010000          <1> 	call tput1
  5456 00004571 8A2D[DC460000]      <1> 	mov ch, [RTCtimeMinute]
  5457 00004577 E82C010000          <1> 	call tput1
  5458 0000457C 8A2D[DB460000]      <1> 	mov ch, [RTCtimeSecond]
  5459 00004582 E821010000          <1> 	call tput1
  5460 00004587 BE[EE460000]        <1> 	mov esi, dateshow
  5461 0000458C 8A2D[DF460000]      <1> 	mov ch, [RTCtimeMonth]
  5462 00004592 E811010000          <1> 	call tput1
  5463 00004597 8A2D[DE460000]      <1> 	mov ch, [RTCtimeDay]
  5464 0000459D E806010000          <1> 	call tput1
  5465 000045A2 B520                <1> 	mov ch, 0x20
  5466 000045A4 E8FF000000          <1> 	call tput1
  5467 000045A9 4E                  <1> 	dec esi
  5468 000045AA 8A2D[E0460000]      <1> 	mov ch, [RTCtimeYear]
  5469 000045B0 E8F3000000          <1> 	call tput1
  5470 000045B5 E8CC000000          <1> 	call tstackget1
  5471 000045BA C3                  <1> 	ret
  5472 000045BB BE[E4460000]        <1> 	mov esi, timeshow
  5473 000045C0 66BB0700            <1> 	mov bx, 7
  5474 000045C4 B401                <1> 	mov ah, 1
  5475 000045C6 30C0                <1> 	xor al, al
  5476 000045C8 CD30                <1> 	int 30h
  5477                              <1> ;;get day of week
  5478                              <1> ;;add these:
  5479                              <1> ;;century value
  5480                              <1> ;;last 2 digits of year
  5481                              <1> ;;last 2 digits of year right shifted twice
  5482                              <1> ;;month table value
  5483                              <1> ;;day of the month
  5484                              <1> ;;divide these by 7
  5485                              <1> ;;the remainder is the day
  5486                              <1> findday:
  5487 000045CA 31C0                <1> 	xor eax, eax
  5488                              <1> ;;first convert the values from BCD to hex
  5489 000045CC A0[DE460000]        <1> 	mov al, [RTCtimeDay]
  5490 000045D1 E87D000000          <1> 	call converttohex
  5491 000045D6 8825[E1460000]      <1> 	mov [dayhex], ah
  5492 000045DC A0[DF460000]        <1> 	mov al, [RTCtimeMonth]
  5493 000045E1 E86D000000          <1> 	call converttohex
  5494 000045E6 8825[E2460000]      <1> 	mov [monthhex], ah
  5495 000045EC A0[E0460000]        <1> 	mov al, [RTCtimeYear]
  5496 000045F1 E85D000000          <1> 	call converttohex
  5497 000045F6 8825[E3460000]      <1> 	mov [yearhex], ah
  5498 000045FC 31C0                <1> 	xor eax, eax
  5499 000045FE A0[E3460000]        <1> 	mov al, [yearhex]
  5500 00004603 C0E802              <1> 	shr al, 2
  5501 00004606 0205[E3460000]      <1> 	add al, [yearhex]
  5502 0000460C 0506000000          <1> 	add eax, 6
  5503 00004611 31DB                <1> 	xor ebx, ebx
  5504 00004613 8A1D[E2460000]      <1> 	mov bl, [monthhex]
  5505 00004619 FECB                <1> 	dec bl
  5506 0000461B 81C3[04470000]      <1> 	add ebx, month
  5507 00004621 31C9                <1> 	xor ecx, ecx
  5508 00004623 8A0B                <1> 	mov cl, [ebx]
  5509 00004625 01C8                <1> 	add eax, ecx
  5510 00004627 8A0D[E1460000]      <1> 	mov cl, [dayhex]
  5511 0000462D 01C8                <1> 	add eax, ecx
  5512 0000462F 66BB0700            <1> 	mov bx, 7
  5513 00004633 31D2                <1> 	xor edx, edx
  5514 00004635 66F7F3              <1> 	div bx
  5515 00004638 C1E202              <1> 	shl edx, 2
  5516 0000463B 81C2[10470000]      <1> 	add edx, day
  5517 00004641 8B32                <1> 	mov esi, [edx]
  5518 00004643 66BB0700            <1> 	mov bx, 7
  5519 00004647 B401                <1> 	mov ah, 1
  5520 00004649 30C0                <1> 	xor al, al
  5521 0000464B CD30                <1> 	int 30h
  5522 0000464D 6631C0              <1> 	xor ax, ax
  5523 00004650 CD30                <1> 	int 30h
  5524 00004652 F4                  <1> 	hlt
  5525                              <1> 	
  5526                              <1> converttohex:
  5527 00004653 88C4                <1> 	mov ah, al
  5528 00004655 C0E804              <1> 	shr al, 4
  5529 00004658 C0E404              <1> 	shl ah, 4
  5530 0000465B C0EC04              <1> 	shr ah, 4
  5531 0000465E 3C00                <1> 	cmp al, 0
  5532 00004660 7409                <1> 	je noconverttohex
  5533                              <1> converttohexlp:
  5534 00004662 80C40A              <1> 	add ah, 10
  5535 00004665 FEC8                <1> 	dec al
  5536 00004667 3C00                <1> 	cmp al, 0
  5537 00004669 75F7                <1> 	jne converttohexlp
  5538                              <1> noconverttohex:
  5539 0000466B C3                  <1> 	ret
  5540                              <1> 	
  5541                              <1> tstackput1:
  5542 0000466C 8935[D7460000]      <1> 	mov [tstack + 20], esi
  5543 00004672 BE[C3460000]        <1> 	mov esi, tstack
  5544 00004677 8906                <1> 	mov [esi], eax
  5545 00004679 895E04              <1> 	mov [esi + 4], ebx
  5546 0000467C 894E08              <1> 	mov [esi + 8], ecx
  5547 0000467F 89560C              <1> 	mov [esi + 12], edx
  5548 00004682 897E10              <1> 	mov [esi + 16], edi
  5549 00004685 C3                  <1> 	ret
  5550                              <1> 	
  5551                              <1> tstackget1:
  5552 00004686 BE[C3460000]        <1> 	mov esi, tstack
  5553 0000468B 8B06                <1> 	mov eax, [esi]
  5554 0000468D 8B5E04              <1> 	mov ebx, [esi + 4]
  5555 00004690 8B4E08              <1> 	mov ecx, [esi + 8]
  5556 00004693 8B560C              <1> 	mov edx, [esi + 12]
  5557 00004696 8B7E10              <1> 	mov edi, [esi + 16]
  5558 00004699 8B7614              <1> 	mov esi, [esi + 20]
  5559 0000469C C3                  <1> 	ret
  5560                              <1> 	
  5561                              <1> tget1:
  5562 0000469D 66BA7000            <1> 	mov dx, 0x70
  5563 000046A1 EE                  <1> 	out dx, al
  5564 000046A2 6642                <1> 	inc dx
  5565 000046A4 EC                  <1> 	in al, dx
  5566 000046A5 664A                <1> 	dec dx
  5567 000046A7 C3                  <1> 	ret
  5568                              <1> 	
  5569                              <1> tput1:
  5570 000046A8 66C1E904            <1> 	shr cx, 4
  5571 000046AC B030                <1> 	mov al, 48
  5572 000046AE 00E8                <1> 	add al, ch
  5573 000046B0 8806                <1> 	mov [esi], al
  5574 000046B2 46                  <1> 	inc esi
  5575 000046B3 B030                <1> 	mov al, 48
  5576 000046B5 C0E904              <1> 	shr cl, 4
  5577 000046B8 00C8                <1> 	add al, cl
  5578 000046BA 8806                <1> 	mov [esi], al
  5579 000046BC 81C602000000        <1> 	add esi, 2
  5580 000046C2 C3                  <1> 	ret
  5581                              <1> 		
  5582 000046C3 000000000000000000- <1> 	tstack dd 0,0,0,0,0,0
  5583 000046CC 000000000000000000- <1>
  5584 000046D5 000000000000        <1>
  5585 000046DB 00                  <1> 	RTCtimeSecond db 0
  5586 000046DC 00                  <1> 	RTCtimeMinute db 0
  5587 000046DD 00                  <1> 	RTCtimeHour db 0
  5588 000046DE 00                  <1> 	RTCtimeDay db 0
  5589 000046DF 00                  <1> 	RTCtimeMonth db 0
  5590 000046E0 00                  <1> 	RTCtimeYear db 0
  5591 000046E1 00                  <1> 	dayhex db 0
  5592 000046E2 00                  <1> 	monthhex db 0
  5593 000046E3 00                  <1> 	yearhex db 0
  5594 000046E4 30303A30303A30300D- <1> 	timeshow db "00:00:00",13,10
  5595 000046ED 0A                  <1>
  5596 000046EE 30302D30302D303030- <1> 	dateshow db "00-00-0000",13,10,0
  5597 000046F7 300D0A00            <1>
  5598                              <1> 	oldcentury:	;;from 1700 to 1900
  5599 000046FB 040200              <1> 	db 4,2,0
  5600                              <1> 	century:	;;from 2000 to 2500
  5601 000046FE 060402000604        <1> 	db 6,4,2,0,6,4
  5602                              <1> 	month:
  5603 00004704 000303060104060205- <1> 	db 0,3,3,6,1,4,6,2,5,0,3,5
  5604 0000470D 000305              <1>
  5605                              <1> 	day:
  5606 00004710 [2C470000]          <1> 	dd sunday
  5607 00004714 [35470000]          <1> 	dd monday
  5608 00004718 [3E470000]          <1> 	dd tuesday
  5609 0000471C [48470000]          <1> 	dd wednesday
  5610 00004720 [54470000]          <1> 	dd thursday
  5611 00004724 [5F470000]          <1> 	dd friday
  5612 00004728 [68470000]          <1> 	dd saturday
  5613                              <1> sunday:
  5614 0000472C 53756E6461790D0A00  <1> 	db "Sunday",13,10,0
  5615                              <1> monday:
  5616 00004735 4D6F6E6461790D0A00  <1> 	db "Monday",13,10,0
  5617                              <1> tuesday:
  5618 0000473E 547565736461790D0A- <1> 	db "Tuesday",13,10,0
  5619 00004747 00                  <1>
  5620                              <1> wednesday:
  5621 00004748 5765646E6573646179- <1> 	db "Wednesday",13,10,0
  5622 00004751 0D0A00              <1>
  5623                              <1> thursday:
  5624 00004754 54687572736461790D- <1> 	db "Thursday",13,10,0
  5625 0000475D 0A00                <1>
  5626                              <1> friday:
  5627 0000475F 4672696461790D0A00  <1> 	db "Friday",13,10,0
  5628                              <1> saturday:
  5629 00004768 53617475726461790D- <1> 	db "Saturday",13,10,0
  5630 00004771 0A00                <1>
  5631                              <1> 
  5632 00004773 0504637075696400    <1> db 5,4,"cpuid",0
  5633 0000477B 31C0                <1> 	xor eax, eax
  5634 0000477D 0FA2                <1> 	cpuid
  5635 0000477F 891D[D4470000]      <1> 	mov [cpuidbuf], ebx
  5636 00004785 8915[D8470000]      <1> 	mov [cpuidbuf + 4], edx
  5637 0000478B 890D[DC470000]      <1> 	mov [cpuidbuf + 8], ecx
  5638 00004791 BE[D4470000]        <1> 	mov esi, cpuidbuf
  5639 00004796 E860E2FFFF          <1> 	call print
  5640 0000479B BE[41730000]        <1> 	mov esi, line
  5641 000047A0 E856E2FFFF          <1> 	call print
  5642 000047A5 B801000000          <1> 	mov eax, 1
  5643 000047AA 0FA2                <1> 	cpuid
  5644 000047AC 89C1                <1> 	mov ecx, eax
  5645 000047AE C605[58350000]02    <1> 	mov byte [firsthexshown], 2
  5646 000047B5 E8B3EDFFFF          <1> 	call showhex
  5647 000047BA B808000080          <1> 	mov eax, 0x80000008
  5648 000047BF 0FA2                <1> 	cpuid
  5649 000047C1 89C1                <1> 	mov ecx, eax
  5650 000047C3 C605[58350000]02    <1> 	mov byte [firsthexshown], 2
  5651 000047CA E89EEDFFFF          <1> 	call showhex
  5652 000047CF E97EE8FFFF          <1> 	jmp nwcmd
  5653                              <1> 	
  5654 000047D4 00<rept>            <1> cpuidbuf times 13 db 0
  5655                              <1> cpuidvendorend:
  5656                              <1> progend:		;programs end here	
  5657                              <1> batchprogend:
  5658                                      %include 'source/input.asm'
  5659                              <1> PS2SET:
  5660 000047E1 B0A8                <1>   mov  al, 0xa8		; enable mouse port
  5661 000047E3 E664                <1>   out  0x64, al		; write to keyboardcontroller
  5662 000047E5 E801000000          <1>   call CHKPRT		; check if command is progressed (demand!)
  5663 000047EA C3                  <1> ret
  5664                              <1> 
  5665                              <1> CHKPRT:
  5666 000047EB 66B96400            <1>   mov  cx, 100
  5667                              <1>  .again:
  5668 000047EF E464                <1>   in   al, 0x64		; read from keyboardcontroller
  5669 000047F1 A802                <1>   test al, 2		; Check if input buffer is empty
  5670 000047F3 7402                <1>   je .go
  5671 000047F5 E2F8                <1>   loop .again
  5672                              <1>  .go:
  5673 000047F7 C3                  <1> ret
  5674                              <1> 
  5675                              <1> WMOUS:
  5676 000047F8 B0D4                <1>   mov  al, 0xd4		; write to mouse device instead of to keyboard
  5677 000047FA E664                <1>   out  0x64, al		; write to keyboardcontroller
  5678 000047FC E8EAFFFFFF          <1>   call CHKPRT		; check if command is progressed (demand!)
  5679 00004801 C3                  <1> ret
  5680                              <1> 
  5681                              <1> MBUFFUL:
  5682 00004802 66B96400            <1>   mov cx, 100
  5683                              <1>  .mn:
  5684 00004806 E464                <1>   in   al, 0x64		; read from keyboardcontroller
  5685 00004808 A820                <1>   test al, 0x20		; check if mouse output buffer is full
  5686 0000480A 7402                <1>   jz  .mnn
  5687 0000480C E2F8                <1>   loop .mn
  5688                              <1>  .mnn:
  5689 0000480E C3                  <1> ret
  5690                              <1> 
  5691                              <1> 
  5692                              <1> ACTMOUS:
  5693 0000480F E8E4FFFFFF          <1>   call WMOUS
  5694 00004814 B0F4                <1>   mov  al, 0xf4 	; Command to activate mouse itselve (Stream mode)
  5695 00004816 E660                <1>   out  0x60, al		; write ps/2 controller output port (activate mouse)
  5696 00004818 E8CEFFFFFF          <1>   call CHKPRT		; check if command is progressed (demand!)
  5697 0000481D E801000000          <1>   call CHKMOUS		; check if a byte is available
  5698 00004822 C3                  <1> ret
  5699                              <1> 
  5700                              <1> CHKMOUS:
  5701 00004823 B300                <1>   mov  bl, 0
  5702 00004825 66B96400            <1>   mov cx, 100
  5703                              <1>  .vrd:
  5704 00004829 E464                <1>   in   al, 0x64		; read from keyboardcontroller
  5705 0000482B A801                <1>   test al, 1		; check if controller buffer (60h) has data
  5706 0000482D 7504                <1>   jnz .yy
  5707 0000482F E2F8                <1>   loop .vrd
  5708 00004831 B301                <1>   mov  bl, 1
  5709                              <1>  .yy:
  5710 00004833 C3                  <1> ret
  5711                              <1> 
  5712                              <1> GETB:
  5713                              <1>  .cagain:
  5714 00004834 E8EAFFFFFF          <1>   call CHKMOUS		; check if a byte is available
  5715 00004839 08DB                <1>   or bl, bl
  5716 0000483B 75F7                <1>   jnz .cagain
  5717 0000483D B0AD                <1>   mov  al, 0xad		; Disable Keyboard
  5718 0000483F E664                <1>   out  0x64, al		; write to keyboardcontroller
  5719 00004841 E8A5FFFFFF          <1>   call CHKPRT		; check if command is progressed (demand!)
  5720 00004846 6631C0              <1>   xor  ax, ax
  5721 00004849 E460                <1>   in   al, 0x60		; read ps/2 controller output port (mousebyte)
  5722 0000484B 88C2                <1>   mov  dl, al
  5723 0000484D B0AE                <1>   mov  al, 0xae		; Enable Keyboard
  5724 0000484F E664                <1>   out  0x64, al		; write to keyboardcontroller
  5725 00004851 E895FFFFFF          <1>   call CHKPRT		; check if command is progressed (demand!)
  5726 00004856 88D0                <1>   mov  al, dl
  5727 00004858 C3                  <1> ret
  5728                              <1> 
  5729 00004859 00                  <1> LBUTTON db 0x00	;	Left   button status 1=PRESSED 0=RELEASED
  5730 0000485A 00                  <1> RBUTTON db 0x00	;	Right  button status 1=PRESSED 0=RELEASED
  5731 0000485B 00                  <1> MBUTTON db 0x00	;	Middle button status 1=PRESSED 0=RELEASED
  5732 0000485C 00                  <1> XCOORD  db 0x00	;	the moved distance  (horizontal)
  5733 0000485D 00                  <1> YCOORD  db 0x00	;	the moved distance  (vertical)
  5734 0000485E 00                  <1> mousedisabled db 0
  5735 0000485F 00                  <1> specialkey db 0
  5736                              <1> guistartin2:		;;this is basically the idle process
  5737                              <1> 					;;this halts the cpu for a small amount of time and then sees if there was a keypress
  5738                              <1> 					;;this lets the cpu stay at close to 0% instead of 100%
  5739 00004860 66B800A0            <1> 	mov ax, 0xA000	;;this is the divider for the PIT
  5740 00004864 E640                <1> 	out 0x40, al
  5741 00004866 66C1C008            <1> 	rol ax, 8
  5742 0000486A E640                <1> 	out 0x40, al
  5743 0000486C A0[E56B0000]        <1> 	mov al, [threadson]
  5744 00004871 C605[E56B0000]00    <1> 	mov byte [threadson], 0
  5745 00004878 FB                  <1> 	sti
  5746 00004879 F4                  <1> 	hlt
  5747 0000487A A2[E56B0000]        <1> 	mov [threadson], al
  5748 0000487F 3C02                <1> 	cmp al, 2
  5749 00004881 7401                <1> 	je guistartin
  5750 00004883 FA                  <1> 	cli
  5751                              <1> guistartin:
  5752 00004884 31C0                <1> 		xor eax, eax
  5753 00004886 A2[5F480000]        <1> 		mov [specialkey], al
  5754 0000488B 66A3[A4290000]      <1> 		mov [lastkey], ax
  5755 00004891 E464                <1> 		in al, 64h ; Status
  5756 00004893 A820                <1> 		test al, 20h ; PS2-Mouse?
  5757 00004895 0F85EA010000        <1> 		jnz near maincall2
  5758 0000489B A801                <1> 		test al, 1 
  5759 0000489D 74C1                <1> 		jz guistartin2 ; if output buffer full or no keypress, jump to idle process (only works when it is jz guistartin2, use jz guistartin to disable)
  5760                              <1> 	guigetkey:
  5761 0000489F E460                <1> 		in al, 60h
  5762 000048A1 88C4                <1> 		mov ah, al
  5763 000048A3 30C0                <1> 		xor al, al
  5764 000048A5 8825[A5290000]      <1> 		mov [lastkey + 1], ah
  5765 000048AB 88E0                <1> 		mov al, ah
  5766 000048AD BF[C14C0000]        <1> 		mov edi, scancode
  5767                              <1> 	guisearchscan: 
  5768 000048B2 3C3A                <1> 		cmp al, 3Ah
  5769 000048B4 731A                <1> 		jae guiscanother
  5770 000048B6 30E4                <1> 		xor ah, ah
  5771 000048B8 C0E002              <1> 		shl al, 2
  5772 000048BB 01C7                <1> 		add edi, eax
  5773 000048BD D0E8                <1> 		shr al, 1
  5774 000048BF 01C7                <1> 		add edi, eax
  5775 000048C1 D0E8                <1> 		shr al, 1
  5776 000048C3 8A27                <1> 		mov ah, [edi]
  5777 000048C5 80FC00              <1> 		cmp ah, 0
  5778 000048C8 7406                <1> 		je guiscanother
  5779 000048CA E9D7000000          <1> 		jmp guiscanfound
  5780 000048CF 00                  <1> guiupper db 0
  5781                              <1> guiscanother:
  5782 000048D0 88C4                <1> 		mov ah, al
  5783 000048D2 30C0                <1> 		xor al, al
  5784 000048D4 66A3[A4290000]      <1> 		mov [lastkey], ax
  5785 000048DA 80FCE0              <1> 		cmp ah, 0E0h
  5786 000048DD 0F847D000000        <1> 		je near guigetkeyspecial
  5787 000048E3 803D[5F480000]E0    <1> 		cmp byte [specialkey], 0xE0
  5788 000048EA 752B                <1> 		jne nospecialkey
  5789 000048EC 80FC38              <1> 		cmp ah, 38h
  5790 000048EF 0F84A0000000        <1> 		je near guialton
  5791 000048F5 80FCB8              <1> 		cmp ah, 0B8h
  5792 000048F8 0F849F000000        <1> 		je near guialtoff
  5793 000048FE 80FC1D              <1> 		cmp ah, 1Dh
  5794 00004901 0F847E000000        <1> 		je near guictron
  5795 00004907 80FC9D              <1> 		cmp ah, 9Dh
  5796 0000490A 0F847D000000        <1> 		je near guictroff
  5797 00004910 66A3[A4290000]      <1> 		mov [lastkey], ax
  5798 00004916 C3                  <1> 		ret
  5799                              <1> nospecialkey:
  5800                              <1> 		;cmp ah, 4Dh
  5801                              <1> 		;je near nextimage
  5802 00004917 80FC2A              <1> 		cmp ah, 2Ah
  5803 0000491A 0F8455000000        <1> 		je near guishifton
  5804 00004920 80FC36              <1> 		cmp ah, 36h
  5805 00004923 0F844C000000        <1> 		je near guishifton
  5806 00004929 80FC1C              <1> 		cmp ah, 1Ch
  5807 0000492C 0F8473000000        <1> 		je near guientdown
  5808 00004932 80FCAA              <1> 		cmp ah, 0AAh
  5809 00004935 0F8442000000        <1> 		je near guishiftoff
  5810 0000493B 80FCB6              <1> 		cmp ah, 0B6h
  5811 0000493E 0F8439000000        <1> 		je near guishiftoff
  5812 00004944 80FC3A              <1> 		cmp ah, 3Ah
  5813 00004947 0F84A5000000        <1> 		je near guicaps
  5814 0000494D 80FC45              <1> 		cmp ah, 0x45
  5815 00004950 0F84AD000000        <1> 		je near guinumlock
  5816 00004956 80FC46              <1> 		cmp ah, 0x46
  5817 00004959 0F84BC000000        <1> 		je near guiscrolllock
  5818 0000495F C3                  <1> 		ret
  5819                              <1> 	guigetkeyspecial:
  5820 00004960 C605[5F480000]E0    <1> 		mov byte [specialkey], 0xE0
  5821 00004967 E933FFFFFF          <1> 		jmp guigetkey
  5822                              <1> 	guishift:
  5823 0000496C A0[CF480000]        <1> 		mov al, [guiupper]
  5824 00004971 3C01                <1> 		cmp al, 1
  5825 00004973 7308                <1> 		jae guishiftoff
  5826                              <1> 	guishifton:
  5827 00004975 C605[CF480000]01    <1> 		mov byte [guiupper], 1
  5828 0000497C C3                  <1> 		ret
  5829                              <1> 		;jmp guistartin
  5830                              <1> 	guishiftoff:
  5831 0000497D C605[CF480000]00    <1> 		mov byte [guiupper], 0
  5832 00004984 C3                  <1> 		ret
  5833                              <1> 		;jmp guistartin
  5834                              <1> 	guictron:
  5835 00004985 C605[F1490000]01    <1> 		mov byte [guictr], 1
  5836 0000498C C3                  <1> 		ret
  5837                              <1> 	guictroff:
  5838 0000498D C605[F1490000]00    <1> 		mov byte [guictr], 0
  5839 00004994 C3                  <1> 		ret
  5840                              <1> 	guialton:
  5841 00004995 C605[F0490000]01    <1> 		mov byte [guialt], 1
  5842 0000499C C3                  <1> 		ret
  5843                              <1> 		;jmp guistartin
  5844                              <1> 	guialtoff:
  5845 0000499D C605[F0490000]00    <1> 		mov byte [guialt], 0
  5846 000049A4 C3                  <1> 		ret
  5847                              <1> 		;jmp guistartin
  5848                              <1> 	guientdown:
  5849 000049A5 C3                  <1> 		ret
  5850                              <1> 	guiscanfound:
  5851 000049A6 81C704000000        <1> 		add edi, 4
  5852 000049AC 803D[F1490000]01    <1> 		cmp byte [guictr], 1
  5853 000049B3 731B                <1> 		jae altguiin
  5854 000049B5 81EF04000000        <1> 		sub edi, 4
  5855 000049BB 81C702000000        <1> 		add edi, 2
  5856 000049C1 803D[F0490000]01    <1> 		cmp byte [guialt], 1
  5857 000049C8 7306                <1> 		jae altguiin
  5858 000049CA 81EF02000000        <1> 		sub edi, 2
  5859                              <1> altguiin:
  5860 000049D0 81C701000000        <1> 		add edi, 1
  5861 000049D6 803D[CF480000]01    <1> 		cmp byte [guiupper], 1
  5862 000049DD 7306                <1> 		jae uppercasegui
  5863 000049DF 81EF01000000        <1> 		sub edi, 1
  5864                              <1> uppercasegui:
  5865 000049E5 8A07                <1> 		mov al,[edi]
  5866 000049E7 A2[A4290000]        <1> 		mov [lastkey], al
  5867 000049EC C3                  <1> 		ret
  5868                              <1> 		
  5869 000049ED 00                  <1> keyboardstatus db 0
  5870 000049EE 00                  <1> numlockstatus db 0
  5871 000049EF 00                  <1> scrolllockstatus db 0
  5872 000049F0 00                  <1> guialt db 0
  5873 000049F1 00                  <1> guictr db 0
  5874                              <1> 	guicaps:
  5875 000049F2 8035[ED490000]04    <1> 		xor byte [keyboardstatus], 00000100b
  5876 000049F9 E835000000          <1> 		call updatekblights
  5877 000049FE E969FFFFFF          <1> 		jmp guishift
  5878                              <1> 		
  5879                              <1> 	guinumlock:
  5880 00004A03 8035[ED490000]02    <1> 		xor byte [keyboardstatus], 00000010b
  5881 00004A0A 8035[EE490000]01    <1> 		xor byte [numlockstatus], 1
  5882 00004A11 E81D000000          <1> 		call updatekblights
  5883 00004A16 E969FEFFFF          <1> 		jmp guistartin
  5884                              <1> 	
  5885                              <1> 	guiscrolllock:
  5886 00004A1B 8035[ED490000]01    <1> 		xor byte [keyboardstatus], 00000001b
  5887 00004A22 8035[EF490000]01    <1> 		xor byte [scrolllockstatus], 1
  5888 00004A29 E805000000          <1> 		call updatekblights
  5889 00004A2E E951FEFFFF          <1> 		jmp guistartin
  5890                              <1> 		
  5891                              <1> 	updatekblights:
  5892 00004A33 B0ED                <1> 		mov al, 0xED
  5893 00004A35 66BA6000            <1> 		mov dx, 0x60
  5894 00004A39 EE                  <1> 		out dx, al
  5895                              <1> 	chkkbdack:
  5896 00004A3A EC                  <1> 		in al, dx
  5897 00004A3B 3CFA                <1> 		cmp al, 0xFA
  5898 00004A3D 75FB                <1> 		jne chkkbdack
  5899 00004A3F A0[ED490000]        <1> 		mov al, [keyboardstatus]
  5900 00004A44 EE                  <1> 		out dx, al
  5901 00004A45 C3                  <1> 		ret
  5902                              <1> 	
  5903                              <1> 	cursorgui:
  5904 00004A46 803D[CC600000]01    <1> 		cmp byte [mouseon], 1
  5905 00004A4D 0F8432000000        <1> 		je near maincall2
  5906 00004A53 803D[8F4F0000]00    <1> 		cmp byte [guion], 0
  5907 00004A5A 0F8445FFFFFF        <1> 		je guientdown
  5908                              <1> 	initmouse:
  5909 00004A60 803D[8F4F0000]00    <1> 		cmp byte [guion], 0
  5910 00004A67 7405                <1> 		je noswmsposinit
  5911 00004A69 E8DC050000          <1> 		call switchmousepos2
  5912                              <1> 	noswmsposinit:
  5913 00004A6E E86EFDFFFF          <1> 	  	call PS2SET
  5914 00004A73 E897FDFFFF          <1> 		call ACTMOUS
  5915 00004A78 C605[CC600000]01    <1> 		mov byte [mouseon],1
  5916 00004A7F E8B0FDFFFF          <1> 		call GETB 	;;Get the responce byte of the mouse (like: Hey i am active)
  5917                              <1> 				;;If the bytes are mixed up,
  5918                              <1> 				;;remove this line or add another of this line.
  5919                              <1> 		;call GETB
  5920                              <1> 	nomouse:
  5921 00004A84 C3                  <1> 		ret
  5922                              <1> 	maincall2:
  5923 00004A85 803D[5E480000]01    <1> 		cmp byte [mousedisabled], 1
  5924 00004A8C 74F6                <1> 		je nomouse
  5925 00004A8E 803D[CC600000]01    <1> 		  cmp byte [mouseon], 1
  5926 00004A95 75C9                <1> 		  jne initmouse
  5927 00004A97 E898FDFFFF          <1> 		  call GETB
  5928 00004A9C 88C3                <1> 		  mov  bl, al
  5929 00004A9E 80E301              <1> 		  and  bl, 1
  5930 00004AA1 881D[59480000]      <1> 		  mov  BYTE [LBUTTON], bl
  5931 00004AA7 88C3                <1> 		  mov  bl, al
  5932 00004AA9 80E302              <1> 		  and  bl, 2
  5933 00004AAC D0EB                <1> 		  shr  bl, 1
  5934 00004AAE 881D[5A480000]      <1> 		  mov  BYTE [RBUTTON], bl
  5935 00004AB4 88C3                <1> 		  mov  bl, al
  5936 00004AB6 80E304              <1> 		  and  bl, 4
  5937 00004AB9 C0EB02              <1> 		  shr  bl, 2
  5938 00004ABC 881D[5B480000]      <1> 		  mov  BYTE [MBUTTON], bl
  5939 00004AC2 E86DFDFFFF          <1> 		  call GETB
  5940 00004AC7 A2[5C480000]        <1> 		  mov  BYTE [XCOORD], al
  5941 00004ACC E863FDFFFF          <1> 		  call GETB
  5942 00004AD1 A2[5D480000]        <1> 		  mov  BYTE [YCOORD], al
  5943                              <1> 
  5944                              <1> 	showpixelcursor:
  5945 00004AD6 668B15[284C0000]    <1> 		mov dx, [mousecursorposition]
  5946 00004ADD 668B0D[2A4C0000]    <1> 		mov cx, [mousecursorposition + 2]
  5947 00004AE4 668915[244C0000]    <1> 		mov [lastmouseposition], dx
  5948 00004AEB 66890D[264C0000]    <1> 		mov [lastmouseposition + 2], cx
  5949 00004AF2 A0[5C480000]        <1> 		mov al, [XCOORD]
  5950 00004AF7 3C80                <1> 		cmp al, 128
  5951 00004AF9 730C                <1> 		jae subxcoord
  5952 00004AFB 00C0                <1> 		add al, al
  5953 00004AFD 30E4                <1> 		xor ah, ah
  5954 00004AFF 6601C2              <1> 		add dx, ax
  5955 00004B02 E90B000000          <1> 		jmp subxcoorddn
  5956                              <1> 	subxcoord:
  5957 00004B07 00C0                <1> 		add al, al
  5958 00004B09 30DB                <1> 		xor bl, bl
  5959 00004B0B 28C3                <1> 		sub bl, al
  5960 00004B0D 30FF                <1> 		xor bh, bh
  5961 00004B0F 6629DA              <1> 		sub dx, bx
  5962                              <1> 	subxcoorddn:
  5963 00004B12 8A1D[5D480000]      <1> 		mov bl, [YCOORD]
  5964 00004B18 30C0                <1> 		xor al, al
  5965 00004B1A 28D8                <1> 		sub al, bl
  5966 00004B1C 3C80                <1> 		cmp al, 128
  5967 00004B1E 730A                <1> 		jae subycoord
  5968 00004B20 30E4                <1> 		xor ah, ah
  5969 00004B22 6601C1              <1> 		add cx, ax
  5970 00004B25 E909000000          <1> 		jmp subycoorddn
  5971                              <1> 	subycoord:
  5972 00004B2A 30DB                <1> 		xor bl, bl
  5973 00004B2C 28C3                <1> 		sub bl, al
  5974 00004B2E 30FF                <1> 		xor bh, bh
  5975 00004B30 6629D9              <1> 		sub cx, bx
  5976                              <1> 	subycoorddn:
  5977 00004B33 6681FA204E          <1> 		cmp dx, 20000
  5978 00004B38 7603                <1> 		jbe nooriginx2
  5979 00004B3A 6631D2              <1> 		xor dx, dx
  5980                              <1> 	nooriginx2:
  5981 00004B3D 6681F9204E          <1> 		cmp cx, 20000
  5982 00004B42 7603                <1> 		jbe nooriginy2
  5983 00004B44 6631C9              <1> 		xor cx, cx
  5984                              <1> 	nooriginy2:
  5985 00004B47 6681FA0000          <1> 		cmp dx, 0
  5986 00004B4C 7415                <1> 		je nofixxcolumn2
  5987 00004B4E 663B15[125E0000]    <1> 		cmp dx, [resolutionx2]
  5988 00004B55 720C                <1> 		jb nofixxcolumn2
  5989 00004B57 668B15[125E0000]    <1> 		mov dx, [resolutionx2]
  5990 00004B5E 6681EA0200          <1> 		sub dx, 2
  5991                              <1> 	nofixxcolumn2:
  5992 00004B63 6681F90000          <1> 		cmp cx, 0
  5993 00004B68 7415                <1> 		je nofixyrow2
  5994 00004B6A 663B0D[0E5E0000]    <1> 		cmp cx, [resolutiony]
  5995 00004B71 720C                <1> 		jb nofixyrow2
  5996 00004B73 668B0D[0E5E0000]    <1> 		mov cx, [resolutiony]
  5997 00004B7A 6681E90100          <1> 		sub cx, 1
  5998                              <1> 	nofixyrow2:
  5999 00004B7F 668915[284C0000]    <1> 		mov [mousecursorposition], dx
  6000 00004B86 66890D[2A4C0000]    <1> 		mov [mousecursorposition + 2], cx
  6001 00004B8D 803D[8F4F0000]00    <1> 		cmp byte [guion], 0
  6002 00004B94 0F8492000000        <1> 		je near termmouse
  6003 00004B9A E84B040000          <1> 		call switchmousepos ;;use dragging code to ensure proper icon drag
  6004 00004B9F 803D[59480000]01    <1> 		cmp byte [LBUTTON], 1
  6005 00004BA6 0F8412050000        <1> 		je near clickicon
  6006 00004BAC 803D[5A480000]01    <1> 		cmp byte [RBUTTON], 1
  6007 00004BB3 0F8405050000        <1> 		je near clickicon
  6008 00004BB9 A0[AB500000]        <1> 		mov al, [pbutton]
  6009 00004BBE C705[AE500000]0000- <1> 		mov dword [dragging], 0
  6010 00004BC6 0000                <1>
  6011 00004BC8 3C00                <1> 		cmp al, 0
  6012 00004BCA 740F                <1> 		je nopreviousbutton
  6013 00004BCC E8BF030000          <1> 		call clearmousecursor
  6014 00004BD1 E8290A0000          <1> 		call reloadallgraphics
  6015                              <1> 	windowtermcopyend:
  6016 00004BD6 E86F040000          <1> 		call switchmousepos2
  6017                              <1> 	nopreviousbutton:
  6018 00004BDB 30C0                <1> 		xor al, al
  6019 00004BDD A2[AB500000]        <1> 		mov [pbutton], al
  6020 00004BE2 A0[59480000]        <1> 		mov al, [LBUTTON]
  6021 00004BE7 A2[AC500000]        <1> 		mov [pLBUTTON], al
  6022 00004BEC A0[5A480000]        <1> 		mov al, [RBUTTON]
  6023 00004BF1 A2[AD500000]        <1> 		mov [pRBUTTON], al
  6024 00004BF6 31C9                <1> 		xor ecx, ecx
  6025 00004BF8 31D2                <1> 		xor edx, edx
  6026 00004BFA 668B15[284C0000]    <1> 		mov dx, [mousecursorposition]
  6027 00004C01 668B0D[2A4C0000]    <1> 		mov cx, [mousecursorposition + 2]
  6028 00004C08 66BB18C7            <1> 		mov bx, 1100011100011000b
  6029 00004C0C 30E4                <1> 		xor ah, ah
  6030 00004C0E B0FE                <1> 		mov al, 254
  6031 00004C10 C605[8C4F0000]01    <1> 		mov byte [showcursorfonton], 1
  6032 00004C17 E806120000          <1> 		call showfontvesa
  6033 00004C1C C605[8C4F0000]00    <1> 		mov byte [showcursorfonton], 0
  6034 00004C23 C3                  <1> 		ret
  6035                              <1> 
  6036 00004C24 84008400            <1> lastmouseposition dw 132,132
  6037 00004C28 84008400            <1> mousecursorposition dw 132,132	
  6038                              <1> 
  6039                              <1> termmouse:
  6040 00004C2C BE[8F1D0000]        <1> 		mov esi, videobuf
  6041 00004C31 31D2                <1> 		xor edx, edx
  6042 00004C33 668B15[244C0000]    <1> 		mov dx, [lastmouseposition]
  6043 00004C3A 668B0D[264C0000]    <1> 		mov cx, [lastmouseposition + 2]
  6044 00004C41 66A1[BF4C0000]      <1> 		mov ax, [cursorcache]
  6045 00004C47 663D0000            <1> 		cmp ax, 0
  6046 00004C4B 7425                <1> 		je nocopycursorcache
  6047 00004C4D 66C1E104            <1> 		shl cx, 4
  6048 00004C51 66C1E203            <1> 		shl dx, 3
  6049 00004C55 01D6                <1> 		add esi, edx
  6050 00004C57 6631D2              <1> 		xor dx, dx
  6051 00004C5A 8A15[E1270000]      <1> 		mov dl, [charxy]
  6052 00004C60 6641                <1> 		inc cx
  6053                              <1> termmousecplp1:
  6054 00004C62 01D6                <1> 		add esi, edx
  6055 00004C64 6649                <1> 		dec cx
  6056 00004C66 6681F90000          <1> 		cmp cx, 0
  6057 00004C6B 75F5                <1> 		jne termmousecplp1
  6058 00004C6D 29D6                <1> 		sub esi, edx
  6059 00004C6F 668906              <1> 		mov [esi], ax
  6060                              <1> nocopycursorcache:
  6061 00004C72 BE[8F1D0000]        <1> 		mov esi, videobuf
  6062 00004C77 31D2                <1> 		xor edx, edx
  6063 00004C79 668B15[284C0000]    <1> 		mov dx, [mousecursorposition]
  6064 00004C80 668B0D[2A4C0000]    <1> 		mov cx, [mousecursorposition + 2]
  6065 00004C87 66C1E104            <1> 		shl cx, 4
  6066 00004C8B 66C1E203            <1> 		shl dx, 3
  6067 00004C8F 01D6                <1> 		add esi, edx
  6068 00004C91 6631D2              <1> 		xor dx, dx
  6069 00004C94 8A15[E1270000]      <1> 		mov dl, [charxy]
  6070 00004C9A 6641                <1> 		inc cx
  6071                              <1> termmousecplp2:
  6072 00004C9C 01D6                <1> 		add esi, edx
  6073 00004C9E 6649                <1> 		dec cx
  6074 00004CA0 6681F90000          <1> 		cmp cx, 0
  6075 00004CA5 75F5                <1> 		jne termmousecplp2
  6076 00004CA7 29D6                <1> 		sub esi, edx
  6077 00004CA9 668B06              <1> 		mov ax, [esi]
  6078 00004CAC 66A3[BF4C0000]      <1> 		mov [cursorcache], ax
  6079 00004CB2 B080                <1> 		mov al, 128
  6080 00004CB4 B407                <1> 		mov ah, 7
  6081 00004CB6 668906              <1> 		mov [esi], ax
  6082 00004CB9 E8A7E0FFFF          <1> 		call termcopy
  6083 00004CBE C3                  <1> 		ret
  6084 00004CBF 0000                <1> cursorcache db 0,0
  6085                              <1> 	
  6086                              <1> scancode:
  6087 00004CC1 000000000000        <1> 	db 0,0,0,0,0,0			;,0h
  6088 00004CC7 000000000000        <1> 	db 0,0,0,0,0,0			;,1h
  6089 00004CCD 3121AD000000        <1> 	db '1','!',173,0,0,0	;,2h
  6090 00004CD3 3240FDFB0000        <1> 	db '2','@',253,251,0,0	;,3h
  6091 00004CD9 332300000000        <1> 	db '3','#',0,0,0,0		;,4h
  6092 00004CDF 34249B9C0000        <1> 	db '4','$',155,156,0,0	;,5h
  6093 00004CE5 3525EE000000        <1> 	db '5','%',238,0,0,0	;,6h
  6094 00004CEB 365EAC000000        <1> 	db '6','^',172,0,0,0	;,7h
  6095 00004CF1 3726AB000000        <1> 	db '7','&',171,0,0,0	;,8h
  6096 00004CF7 382A00000000        <1> 	db '8','*',0,0,0,0		;,9h
  6097 00004CFD 392800000000        <1> 	db '9','(',0,0,0,0		;,0Ah
  6098 00004D03 302900000000        <1> 	db '0',')',0,0,0,0		;,0Bh
  6099 00004D09 2D5F9DF10000        <1> 	db '-','_',157,241,0,0	;,0Ch
  6100 00004D0F 3D2BF7F60000        <1> 	db '=','+',247,246,0,0	;,0Dh
  6101 00004D15 080800000000        <1> 	db 8,8,0,0,0,0			;,0Eh
  6102 00004D1B 000000000000        <1> 	db 0,0,0,0,0,0			;,0Fh
  6103 00004D21 7151848E0000        <1> 	db 'q','Q',132,142,0,0	;,10h
  6104 00004D27 7757868F0000        <1> 	db 'w','W',134,143,0,0	;,11h
  6105 00004D2D 65458290EE45        <1> 	db 'e','E',130,144,238,'E'	;,12h
  6106 00004D33 7252898A7050        <1> 	db 'r','R',137,138,'p','P'		;,13h
  6107 00004D39 7454819AE754        <1> 	db 't','T',129,154,231,'T'		;,14h
  6108 00004D3F 795998007559        <1> 	db 'y','Y',152,0,'u','Y'	;,15h
  6109 00004D45 7555A3970000        <1> 	db 'u','U',163,151,0,0	;,16h
  6110 00004D4B 6949A18D6949        <1> 	db 'i','I',161,141,'i','I'	;,17h
  6111 00004D51 6F4FA29577EA        <1> 	db 'o','O',162,149,'w',234	;,18h
  6112 00004D57 70509499E3EF        <1> 	db 'p','P',148,153,227,239	;,19h
  6113 00004D5D 5B7BF4000000        <1> 	db '[','{',244,0,0,0		;,1Ah
  6114 00004D63 5D7DF5000000        <1> 	db ']','}',245,0,0,0		;,1Bh
  6115 00004D69 000000000000        <1> 	db 0,0,0,0,0,0			;,1Ch
  6116 00004D6F 000000000000        <1> 	db 0,0,0,0,0,0			;,1Dh
  6117 00004D75 6141A085E041        <1> 	db 'a','A',160,133,224,'A'	;,1Eh
  6118 00004D7B 73531500E5E4        <1> 	db 's','S',21,0,229,228		;,1Fh
  6119 00004D81 6444F800EB7F        <1> 	db 'd','D',248,0,235,127	;,20h
  6120 00004D87 66469F00EDE8        <1> 	db 'f','F',159,0,237,232	;,21h
  6121 00004D8D 6747000079E2        <1> 	db 'g','G',0,0,'y',226		;,22h
  6122 00004D93 684800006E48        <1> 	db 'h','H',0,0,'n','H'		;,23h
  6123 00004D99 6A4A00000000        <1> 	db 'j','J',0,0,0,0		;,24h
  6124 00004D9F 6B4B00006B4B        <1> 	db 'k','K',0,0,'k','K'		;,25h
  6125 00004DA5 6C4C0000E9E9        <1> 	db 'l','L',0,0,233,233		;,26h
  6126 00004DAB 3B3A14000000        <1> 	db ';',':',20,0,0,0		;,27h
  6127 00004DB1 272200000000        <1> 	db 27h,22h,0,0,0,0		;,28h
  6128 00004DB7 607E00000000        <1> 	db '`','~',0,0,0,0		;,29h
  6129 00004DBD 000000000000        <1> 	db 0,0,0,0,0,0			;,2Ah
  6130 00004DC3 5C7CAAB30000        <1> 	db '\','|',170,179,0,0	;,2Bh
  6131 00004DC9 7A5A91927A5A        <1> 	db 'z','Z',145,146,'z','Z'	;,2Ch
  6132 00004DCF 7858000000F0        <1> 	db 'x','X',0,0,0,240		;,2Dh
  6133 00004DD5 634387800000        <1> 	db 'c','C',135,128,0,0	;,2Eh
  6134 00004DDB 765600000000        <1> 	db 'v','V',0,0,0,0		;,2Fh
  6135 00004DE1 62420000E142        <1> 	db 'b','B',0,0,225,'B'	;,30h
  6136 00004DE7 6E4EA4A5764E        <1> 	db 'n','N',164,165,'v','N'	;,31h
  6137 00004DED 6D4D0000E64D        <1> 	db 'm','M',0,0,230,'M'		;,32h
  6138 00004DF3 2C3CF3AE0000        <1> 	db ',','<',243,174,0,0	;,33h
  6139 00004DF9 2E3EF2AF0000        <1> 	db '.','>',242,175,0,0	;,34h
  6140 00004DFF 2F3FA8000000        <1> 	db '/','?',168,0,0,0	;,35h
  6141 00004E05 000000000000        <1> 	db 0,0,0,0,0,0			;,36h
  6142 00004E0B 000000000000        <1> 	db 0,0,0,0,0,0			;,37h
  6143 00004E11 000000000000        <1> 	db 0,0,0,0,0,0			;,38h
  6144 00004E17 202000000000        <1> 	db ' ',' ',0,0,0,0		;,39h
  6145                              <1> noscan:
  6146                                      %include 'source/gui.asm'
  6147                              <1> guiclear:
  6148 00004E1D 8B3D[A2850000]      <1> 	mov edi, [physbaseptr]
  6149 00004E23 668B15[105E0000]    <1> 	mov dx, [resolutionx]
  6150 00004E2A 668B0D[0E5E0000]    <1> 	mov cx, [resolutiony]
  6151 00004E31 66A1[5A4E0000]      <1> 	mov ax, [background]
  6152                              <1> guiclearloop:
  6153 00004E37 668907              <1> 	mov [edi], ax
  6154 00004E3A 81C702000000        <1> 	add edi, 2
  6155 00004E40 664A                <1> 	dec dx
  6156 00004E42 6681FA0000          <1> 	cmp dx, 0
  6157 00004E47 77EE                <1> 	ja guiclearloop
  6158 00004E49 6649                <1> 	dec cx
  6159 00004E4B 668B15[105E0000]    <1> 	mov dx, [resolutionx]
  6160 00004E52 6681F90000          <1> 	cmp cx, 0
  6161 00004E57 77DE                <1> 	ja guiclearloop
  6162 00004E59 C3                  <1> 	ret
  6163                              <1> 
  6164 00004E5A CF7B                <1> background dw 0111101111001111b
  6165                              <1> 
  6166                              <1> gui:	;Let's see what I can do, I am going to try to make this as freestanding as possible
  6167 00004E5C 31C0                <1> 	xor eax, eax
  6168 00004E5E 31DB                <1> 	xor ebx, ebx
  6169 00004E60 31C9                <1> 	xor ecx, ecx
  6170 00004E62 31D2                <1> 	xor edx, edx
  6171 00004E64 8B3D[A2850000]      <1> 	mov edi, [physbaseptr]
  6172 00004E6A 668B15[105E0000]    <1> 	mov dx, [resolutionx]
  6173 00004E71 668B0D[0E5E0000]    <1> 	mov cx, [resolutiony]
  6174 00004E78 668B1D[5A4E0000]    <1> 	mov bx, [background]
  6175                              <1> guiclearloop2:
  6176 00004E7F 66891F              <1> 	mov [edi], bx
  6177 00004E82 81C702000000        <1> 	add edi, 2
  6178 00004E88 664A                <1> 	dec dx
  6179 00004E8A 6681FA0000          <1> 	cmp dx, 0
  6180 00004E8F 0F85EAFFFFFF        <1> 	jne near guiclearloop2
  6181 00004E95 6649                <1> 	dec cx
  6182 00004E97 668B15[105E0000]    <1> 	mov dx, [resolutionx]
  6183 00004E9E 6681F90000          <1> 	cmp cx, 0
  6184 00004EA3 0F85D6FFFFFF        <1> 	jne near guiclearloop2
  6185 00004EA9 C605[8F4F0000]01    <1> 	mov byte [guion], 1
  6186 00004EB0 C605[8E4F0000]00    <1> 	mov byte [mouseselecton], 0
  6187 00004EB7 31C0                <1> 	xor eax, eax
  6188 00004EB9 31DB                <1> 	xor ebx, ebx
  6189 00004EBB 31C9                <1> 	xor ecx, ecx
  6190 00004EBD 31D2                <1> 	xor edx, edx
  6191                              <1> 	
  6192 00004EBF BE[E1600000]        <1> 	mov esi, pacmsg
  6193 00004EC4 6631C0              <1> 	xor ax, ax
  6194 00004EC7 31DB                <1> 	xor ebx, ebx
  6195 00004EC9 66B99000            <1> 	mov cx, 144
  6196 00004ECD 66BA0400            <1> 	mov dx, 4
  6197 00004ED1 E86A0A0000          <1> 	call showstring
  6198                              <1> 	
  6199 00004ED6 BE[50620000]        <1> 	mov esi, interneticon
  6200 00004EDB 6631C0              <1> 	xor ax, ax
  6201 00004EDE BB[4E610000]        <1> 	mov ebx, noie
  6202 00004EE3 66B91800            <1> 	mov cx, 24
  6203 00004EE7 66BA0400            <1> 	mov dx, 4
  6204 00004EEB E8520E0000          <1> 	call showicon
  6205                              <1> 	
  6206 00004EF0 BE[D2620000]        <1> 	mov esi, wordicon
  6207 00004EF5 6631C0              <1> 	xor ax, ax
  6208 00004EF8 31DB                <1> 	xor ebx, ebx
  6209 00004EFA 66B91800            <1> 	mov cx, 24
  6210 00004EFE 66BA3000            <1> 	mov dx, 48
  6211 00004F02 E83B0E0000          <1> 	call showicon
  6212                              <1> 	
  6213 00004F07 BE[54630000]        <1> 	mov esi, pacmanpellet
  6214 00004F0C 6631C0              <1> 	xor ax, ax
  6215 00004F0F 31DB                <1> 	xor ebx, ebx
  6216 00004F11 66B94000            <1> 	mov cx, 64
  6217 00004F15 66BA0400            <1> 	mov dx, 4
  6218 00004F19 E8240E0000          <1> 	call showicon
  6219                              <1> 	
  6220 00004F1E BE[58640000]        <1> 	mov esi, pacman
  6221 00004F23 6631C0              <1> 	xor ax, ax
  6222 00004F26 BB[37610000]        <1> 	mov ebx, pacmannomnom
  6223 00004F2B 66B94000            <1> 	mov cx, 64
  6224 00004F2F 66BA3000            <1> 	mov dx, 48
  6225 00004F33 E80A0E0000          <1> 	call showicon
  6226                              <1> 	
  6227 00004F38 BE[D6630000]        <1> 	mov esi, ghostie
  6228 00004F3D 6631C0              <1> 	xor ax, ax
  6229 00004F40 BB[20610000]        <1> 	mov ebx, boo
  6230 00004F45 66B96C00            <1> 	mov cx, 108
  6231 00004F49 66BA0400            <1> 	mov dx, 4
  6232 00004F4D E8F00D0000          <1> 	call showicon
  6233                              <1> 
  6234 00004F52 BE[CD600000]        <1> 	mov esi, start
  6235 00004F57 668B0D[0E5E0000]    <1> 	mov cx, [resolutiony]
  6236 00004F5E 6681E91000          <1> 	sub cx, 16
  6237 00004F63 66BA0200            <1> 	mov dx, 2
  6238 00004F67 30E4                <1> 	xor ah, ah
  6239 00004F69 B010                <1> 	mov al, 00010000b
  6240 00004F6B BB[FD610000]        <1> 	mov ebx, winblows
  6241 00004F70 E8CB090000          <1> 	call showstring
  6242                              <1> 	
  6243 00004F75 E8CCFAFFFF          <1> 	call cursorgui
  6244                              <1> guistart:
  6245 00004F7A E805F9FFFF          <1> 	call guistartin
  6246 00004F7F C605[884F0000]00    <1> 	mov byte [copygui], 0
  6247 00004F86 EBF2                <1> 	jmp guistart
  6248                              <1> 	
  6249                              <1> ;guicopy:	;;for double buffering
  6250                              <1> ;	mov byte [copygui], 1
  6251                              <1> ;	mov edi, [offscreenmemoffset]
  6252                              <1> ;	xor edx, edx
  6253                              <1> ;	xor ecx, ecx
  6254                              <1> ;	mov dx, [mousecursorposition]
  6255                              <1> ;	mov cx, [mousecursorposition + 2]
  6256                              <1> ;	add edi, edx
  6257                              <1> ;	mov dx, [resolutionx2]
  6258                              <1> ;	inc cx
  6259                              <1> ;guicp2:
  6260                              <1> ;	add edi, edx
  6261                              <1> ;	dec cx
  6262                              <1> ;	cmp cx, 0
  6263                              <1> ;	jne guicp2
  6264                              <1> ;	sub edi, edx
  6265                              <1> ;	mov [cursorloc], edi
  6266                              <1> ;	mov ebx, cursorbmp
  6267                              <1> ;	mov cx, [resolutiony]
  6268                              <1> ;	rol ecx, 16
  6269                              <1> ;	mov cx, [resolutionx]
  6270                              <1> ;	mov esi, [physbaseptr]
  6271                              <1> ;	mov edi, [offscreenmemoffset]
  6272                              <1> ;guicp1:
  6273                              <1> ;	mov ax, [esi]
  6274                              <1> ;	mov [edi], ax
  6275                              <1> ;	add esi, 2
  6276                              <1> ;	add edi, 2
  6277                              <1> ;	cmp edi, [cursorloc]
  6278                              <1> ;	je copycursor
  6279                              <1> ;dncopycursor:
  6280                              <1> ;	dec cx
  6281                              <1> ;	cmp cx, 0
  6282                              <1> ;	jne guicp1
  6283                              <1> ;	mov cx, [resolutionx]
  6284                              <1> ;	rol ecx, 16
  6285                              <1> ;	dec cx
  6286                              <1> ;	cmp cx, 0
  6287                              <1> ;	rol ecx, 16
  6288                              <1> ;	jne guicp1
  6289                              <1> ;	mov byte [copygui], 0
  6290                              <1> ;	ret
  6291                              <1> ;copycursor:
  6292                              <1> ;	cmp ebx, cursorbmpend
  6293                              <1> ;	jae dncopycursor
  6294                              <1> ;	mov dx, [resolutionx2]
  6295                              <1> ;	add edi, edx
  6296                              <1> ;	mov [cursorloc], edi
  6297                              <1> ;	sub edi, edx
  6298                              <1> ;	dec ebx
  6299                              <1> ;	sub edi, 2
  6300                              <1> ;	sub esi, 2
  6301                              <1> ;	mov dx, 9
  6302                              <1> ;curscplp:
  6303                              <1> ;	inc ebx
  6304                              <1> ;	add esi, 2
  6305                              <1> ;	add edi, 2
  6306                              <1> ;	mov ax, [esi]
  6307                              <1> ;	mov [edi], ax
  6308                              <1> ;	mov al, [ebx]
  6309                              <1> ;	cmp al, 0
  6310                              <1> ;	je curscplp2
  6311                              <1> ;	mov word [edi], 1110011110011100b
  6312                              <1> ;curscplp2:
  6313                              <1> ;	dec cx
  6314                              <1> ;	cmp cx, 0
  6315                              <1> ;	je dncopycursor
  6316                              <1> ;	dec dx
  6317                              <1> ;	cmp dx, 0
  6318                              <1> ;	jne curscplp
  6319                              <1> ;	jmp dncopycursor
  6320                              <1> 	
  6321                              <1> 	
  6322                              <1> ;cursorloc: dd 0
  6323                              <1> 		
  6324                              <1> ;nextimage:	
  6325                              <1> ;	call guiclear
  6326                              <1> ;	mov esi, [bmpend]
  6327                              <1> ;	xor eax, eax
  6328                              <1> ;	xor ebx, ebx
  6329                              <1> ;	xor ecx, ecx
  6330                              <1> ;	xor edx, edx
  6331                              <1> ;	call showbmp
  6332                              <1> ;	jmp guistartin
  6333                              <1> 		
  6334 00004F88 00                  <1> copygui db 0
  6335 00004F89 00                  <1> graphicsset db 0
  6336 00004F8A 0000                <1> graphicspos db 0,0
  6337 00004F8C 00                  <1> showcursorfonton db 0
  6338 00004F8D 00                  <1> savefonton db 0
  6339 00004F8E 00                  <1> mouseselecton db 0
  6340 00004F8F 00                  <1> guion db 0
  6341                              <1> 
  6342                              <1> 		
  6343                              <1> clearmousecursor:
  6344 00004F90 BE[5A4E0000]        <1> 		mov esi, background
  6345 00004F95 8B3D[A2850000]      <1> 		mov edi, [physbaseptr]
  6346 00004F9B 31D2                <1> 		xor edx, edx
  6347 00004F9D 31C9                <1> 		xor ecx, ecx
  6348 00004F9F 668B15[244C0000]    <1> 		mov dx, [lastmouseposition]
  6349 00004FA6 668B0D[264C0000]    <1> 		mov cx, [lastmouseposition + 2]
  6350 00004FAD 01D7                <1> 		add edi, edx
  6351 00004FAF 31D2                <1> 		xor edx, edx
  6352 00004FB1 668B15[125E0000]    <1> 		mov dx, [resolutionx2]
  6353 00004FB8 6681F90000          <1> 		cmp cx, 0
  6354 00004FBD 740B                <1> 		je noyclr
  6355 00004FBF 01D7                <1> yclr:	add edi, edx
  6356 00004FC1 6649                <1> 		dec cx
  6357 00004FC3 6681F90000          <1> 		cmp cx, 0
  6358 00004FC8 75F5                <1> 		jne yclr
  6359 00004FCA 668B06              <1> noyclr:	mov ax, [esi]
  6360 00004FCD C1C010              <1> 		rol eax, 16
  6361 00004FD0 668B06              <1> 		mov ax, [esi]
  6362 00004FD3 8907                <1> 		mov [edi], eax
  6363 00004FD5 894704              <1> 		mov [edi + 4], eax
  6364 00004FD8 894708              <1> 		mov [edi + 8], eax
  6365 00004FDB 89470C              <1> 		mov [edi + 12], eax
  6366 00004FDE 01D7                <1> 		add edi, edx
  6367 00004FE0 6641                <1> 		inc cx
  6368 00004FE2 6681F91000          <1> 		cmp cx, 16
  6369 00004FE7 72E1                <1> 		jb noyclr
  6370 00004FE9 C3                  <1> 		ret
  6371                              <1> 
  6372                              <1> switchmousepos:		;;switch were the mouse is located
  6373 00004FEA BE[00120000]        <1> 		mov esi, mousecolorbuf
  6374 00004FEF 8B3D[A2850000]      <1> 		mov edi, [physbaseptr]
  6375 00004FF5 31D2                <1> 		xor edx, edx
  6376 00004FF7 31C9                <1> 		xor ecx, ecx
  6377 00004FF9 668B15[244C0000]    <1> 		mov dx, [lastmouseposition]
  6378 00005000 668B0D[264C0000]    <1> 		mov cx, [lastmouseposition + 2]
  6379 00005007 01D7                <1> 		add edi, edx
  6380 00005009 31D2                <1> 		xor edx, edx
  6381 0000500B 668B15[125E0000]    <1> 		mov dx, [resolutionx2]
  6382 00005012 6681F90000          <1> 		cmp cx, 0
  6383 00005017 740B                <1> 		je noswmsy
  6384 00005019 01D7                <1> swmsy:		add edi, edx
  6385 0000501B 6649                <1> 		dec cx
  6386 0000501D 6681F90000          <1> 		cmp cx, 0
  6387 00005022 75F5                <1> 		jne swmsy
  6388 00005024 8B06                <1> noswmsy:	mov eax, [esi]
  6389 00005026 8B5E04              <1> 		mov ebx, [esi + 4]
  6390 00005029 8907                <1> 		mov [edi], eax
  6391 0000502B 895F04              <1> 		mov [edi + 4], ebx
  6392 0000502E 8B4608              <1> 		mov eax, [esi + 8]
  6393 00005031 8B5E0C              <1> 		mov ebx, [esi + 12]
  6394 00005034 894708              <1> 		mov [edi + 8], eax
  6395 00005037 895F0C              <1> 		mov [edi + 12], ebx
  6396 0000503A 01D7                <1> 		add edi, edx
  6397 0000503C 81C610000000        <1> 		add esi, 16
  6398 00005042 81FE[00130000]      <1> 		cmp esi, mcolorend
  6399 00005048 72DA                <1> 		jb noswmsy
  6400                              <1> 		
  6401                              <1> switchmousepos2:
  6402 0000504A BE[00120000]        <1> 		mov esi, mousecolorbuf
  6403 0000504F 8B3D[A2850000]      <1> 		mov edi, [physbaseptr]
  6404 00005055 31D2                <1> 		xor edx, edx
  6405 00005057 31C9                <1> 		xor ecx, ecx
  6406 00005059 668B15[284C0000]    <1> 		mov dx, [mousecursorposition]
  6407 00005060 668B0D[2A4C0000]    <1> 		mov cx, [mousecursorposition + 2]
  6408 00005067 01D7                <1> 		add edi, edx
  6409 00005069 31D2                <1> 		xor edx, edx
  6410 0000506B 668B15[125E0000]    <1> 		mov dx, [resolutionx2]
  6411 00005072 6681F90000          <1> 		cmp cx, 0
  6412 00005077 740B                <1> 		je noswmsy2
  6413 00005079 01D7                <1> swmsy2:		add edi, edx
  6414 0000507B 6649                <1> 		dec cx
  6415 0000507D 6681F90000          <1> 		cmp cx, 0
  6416 00005082 75F5                <1> 		jne swmsy2
  6417 00005084 8B07                <1> noswmsy2:	mov eax, [edi]
  6418 00005086 8B5F04              <1> 		mov ebx, [edi + 4]
  6419 00005089 8906                <1> 		mov [esi], eax
  6420 0000508B 895E04              <1> 		mov [esi + 4], ebx
  6421 0000508E 8B4708              <1> 		mov eax, [edi + 8]
  6422 00005091 8B5F0C              <1> 		mov ebx, [edi + 12]
  6423 00005094 894608              <1> 		mov [esi + 8], eax
  6424 00005097 895E0C              <1> 		mov [esi + 12], ebx
  6425 0000509A 01D7                <1> 		add edi, edx
  6426 0000509C 81C610000000        <1> 		add esi, 16
  6427 000050A2 81FE[00130000]      <1> 		cmp esi, mcolorend
  6428 000050A8 72DA                <1> 		jb noswmsy2
  6429 000050AA C3                  <1> 		ret
  6430                              <1> 
  6431 000050AB 00                  <1> pbutton db 0
  6432 000050AC 00                  <1> pLBUTTON db 0
  6433 000050AD 00                  <1> pRBUTTON db 0
  6434 000050AE 00000000            <1> dragging dw 0,0
  6435 000050B2 0000000000000000    <1> lastpos dw 0,0,0,0
  6436 000050BA 00000000            <1> colorbuf dw 0,0
  6437                              <1> 	
  6438                              <1> 	clickicon:
  6439 000050BE B001                <1> 		mov al, 1
  6440 000050C0 A2[AB500000]        <1> 		mov [pbutton], al
  6441 000050C5 A0[AC500000]        <1> 		mov al, [pLBUTTON]
  6442 000050CA 2205[59480000]      <1> 		and al, [LBUTTON]
  6443 000050D0 8A25[AD500000]      <1> 		mov ah, [pRBUTTON]
  6444 000050D6 2225[5A480000]      <1> 		and ah, [RBUTTON]
  6445 000050DC 08E0                <1> 		or al, ah
  6446 000050DE 3C00                <1> 		cmp al, 0
  6447 000050E0 741B                <1> 		je nodragclick
  6448 000050E2 813D[AE500000]0100- <1> 		cmp dword [dragging], 1
  6449 000050EA 0000                <1>
  6450 000050EC 732D                <1> 		jae dragclick
  6451 000050EE C705[AE500000]0100- <1> 		mov dword [dragging], 1
  6452 000050F6 0000                <1>
  6453 000050F8 E91E000000          <1> 		jmp dragclick
  6454                              <1> 	nodragclick:
  6455 000050FD C705[AE500000]0000- <1> 		mov dword [dragging], 0
  6456 00005105 0000                <1>
  6457 00005107 A0[59480000]        <1> 		mov al, [LBUTTON]
  6458 0000510C A2[AC500000]        <1> 		mov [pLBUTTON], al
  6459 00005111 A0[5A480000]        <1> 		mov al, [RBUTTON]
  6460 00005116 A2[AD500000]        <1> 		mov [pRBUTTON], al
  6461                              <1> 	dragclick:
  6462 0000511B 6631C0              <1> 		xor ax, ax
  6463 0000511E BE[00100000]        <1> 		mov esi, graphicstable
  6464 00005123 C705[1B610000]0000- <1> 		mov dword [codepointer], 0
  6465 0000512B 0000                <1>
  6466                              <1> 	clicon2:
  6467 0000512D 31D2                <1> 		xor edx, edx
  6468 0000512F 31C9                <1> 		xor ecx, ecx
  6469 00005131 66813E0100          <1> 		cmp word [esi], 1
  6470 00005136 0F841B000000        <1> 		je near iconselect
  6471 0000513C 66813E0200          <1> 		cmp word [esi], 2
  6472 00005141 0F8472010000        <1> 		je near textselected
  6473 00005147 66813E0300          <1> 		cmp word [esi], 3
  6474 0000514C 0F84C7020000        <1> 		je near windowselect
  6475 00005152 E90B040000          <1> 		jmp nexticonsel
  6476                              <1> 	iconselect:
  6477 00005157 668B5606            <1> 		mov dx, [esi + 6]
  6478 0000515B 6689D0              <1> 		mov ax, dx
  6479 0000515E 668B4E08            <1> 		mov cx, [esi + 8]
  6480 00005162 6689CB              <1> 		mov bx, cx
  6481 00005165 6681C32000          <1> 		add bx, 32
  6482 0000516A 6601D0              <1> 		add ax, dx
  6483 0000516D 813D[AE500000]0100- <1> 		cmp dword [dragging], 1
  6484 00005175 0000                <1>
  6485 00005177 746F                <1> 		je dragicon
  6486 00005179 813D[AE500000]0000- <1> 		cmp dword [dragging], 0
  6487 00005181 0000                <1>
  6488 00005183 7411                <1> 		je nodragiconcheck
  6489 00005185 3935[AE500000]      <1> 		cmp dword [dragging], esi
  6490 0000518B 0F85D1030000        <1> 		jne near nexticonsel
  6491 00005191 E952000000          <1> 		jmp dragicon
  6492                              <1> 	nodragiconcheck:
  6493 00005196 663905[284C0000]    <1> 		cmp [mousecursorposition], ax
  6494 0000519D 0F82BF030000        <1> 		jb near nexticonsel
  6495 000051A3 66054000            <1> 		add ax, 64
  6496 000051A7 663905[284C0000]    <1> 		cmp [mousecursorposition], ax
  6497 000051AE 0F87AE030000        <1> 		ja near nexticonsel
  6498 000051B4 6629D0              <1> 		sub ax, dx
  6499 000051B7 66390D[2A4C0000]    <1> 		cmp [mousecursorposition + 2], cx
  6500 000051BE 0F829E030000        <1> 		jb near nexticonsel
  6501 000051C4 66391D[2A4C0000]    <1> 		cmp [mousecursorposition + 2], bx
  6502 000051CB 0F8791030000        <1> 		ja near nexticonsel
  6503 000051D1 668B460A            <1> 		mov ax, [esi + 10]
  6504 000051D5 66250100            <1> 		and ax, 1
  6505 000051D9 663D0100            <1> 		cmp ax, 1
  6506 000051DD 0F84B6000000        <1> 		je near unselecticon
  6507 000051E3 E98D000000          <1> 		jmp nodragicon
  6508                              <1> 	dragicon:
  6509 000051E8 663905[244C0000]    <1> 		cmp [lastmouseposition], ax
  6510 000051EF 0F826D030000        <1> 		jb near nexticonsel
  6511 000051F5 66054000            <1> 		add ax, 64
  6512 000051F9 663905[244C0000]    <1> 		cmp [lastmouseposition], ax
  6513 00005200 0F875C030000        <1> 		ja near nexticonsel
  6514 00005206 6629D0              <1> 		sub ax, dx
  6515 00005209 66390D[264C0000]    <1> 		cmp [lastmouseposition + 2], cx
  6516 00005210 0F824C030000        <1> 		jb near nexticonsel
  6517 00005216 66391D[264C0000]    <1> 		cmp [lastmouseposition + 2], bx
  6518 0000521D 0F873F030000        <1> 		ja near nexticonsel
  6519 00005223 668B460A            <1> 		mov ax, [esi + 10]
  6520 00005227 2410                <1> 		and al, 00010000b
  6521 00005229 3C10                <1> 		cmp al, 00010000b
  6522 0000522B 7448                <1> 		je nodragicon
  6523 0000522D 8935[AE500000]      <1> 		mov [dragging], esi
  6524 00005233 66D1E2              <1> 		shl dx, 1
  6525 00005236 662B15[244C0000]    <1> 		sub dx, [lastmouseposition]
  6526 0000523D 660315[284C0000]    <1> 		add dx, [mousecursorposition]
  6527 00005244 66D1EA              <1> 		shr dx, 1
  6528 00005247 66030D[2A4C0000]    <1> 		add cx, [mousecursorposition + 2]
  6529 0000524E 662B0D[264C0000]    <1> 		sub cx, [lastmouseposition + 2]
  6530 00005255 663B15[125E0000]    <1> 		cmp dx, [resolutionx2]
  6531 0000525C 7607                <1> 		jbe chkyresdrgicn
  6532 0000525E 668B15[284C0000]    <1> 		mov dx, [mousecursorposition]
  6533                              <1> 	chkyresdrgicn:
  6534 00005265 663B0D[0E5E0000]    <1> 		cmp cx, [resolutiony]
  6535 0000526C 7607                <1> 		jbe nodragicon
  6536 0000526E 668B0D[2A4C0000]    <1> 		mov cx, [mousecursorposition + 2]
  6537                              <1> 	nodragicon:
  6538 00005275 66814E0A0100        <1> 		or word [esi + 10], 1
  6539 0000527B 8B5E0C              <1> 		mov ebx, [esi + 12]
  6540 0000527E 668B460A            <1> 		mov ax, [esi + 10]
  6541 00005282 8B7602              <1> 		mov esi, [esi + 2]
  6542 00005285 C705[1B610000]0000- <1> 		mov dword [codepointer], 0
  6543 0000528D 0000                <1>
  6544 0000528F E8AE0A0000          <1> 		call showicon
  6545 00005294 E9E2020000          <1> 		jmp doneiconsel
  6546                              <1> 	unselecticon:
  6547 00005299 6681660AFEFF        <1> 		and word [esi + 10], 0xFFFE
  6548 0000529F 8B5E0C              <1> 		mov ebx, [esi + 12]
  6549 000052A2 668B460A            <1> 		mov ax, [esi + 10]
  6550 000052A6 8B7602              <1> 		mov esi, [esi + 2]
  6551 000052A9 891D[1B610000]      <1> 		mov [codepointer], ebx
  6552 000052AF E88E0A0000          <1> 		call showicon
  6553 000052B4 E9C2020000          <1> 		jmp doneiconsel
  6554                              <1> 	textselected:
  6555 000052B9 8B5E02              <1> 		mov ebx, [esi + 2]
  6556 000052BC 668B5606            <1> 		mov dx, [esi + 6]
  6557 000052C0 6689D0              <1> 		mov ax, dx
  6558 000052C3 668B4E08            <1> 		mov cx, [esi + 8]
  6559                              <1> 	lengthtesttext:
  6560 000052C7 803B00              <1> 		cmp byte [ebx], 0
  6561 000052CA 7407                <1> 		je donetesttextlength
  6562 000052CC 43                  <1> 		inc ebx
  6563 000052CD 66051000            <1> 		add ax, 16
  6564 000052D1 EBF4                <1> 		jmp lengthtesttext
  6565                              <1> 	donetesttextlength:
  6566 000052D3 6689CB              <1> 		mov bx, cx
  6567 000052D6 6681C30F00          <1> 		add bx, 15
  6568 000052DB 813D[AE500000]0100- <1> 		cmp dword [dragging], 1
  6569 000052E3 0000                <1>
  6570 000052E5 7468                <1> 		je dragtext
  6571 000052E7 813D[AE500000]0000- <1> 		cmp dword [dragging], 0
  6572 000052EF 0000                <1>
  6573 000052F1 7411                <1> 		je nodragtextcheck
  6574 000052F3 3935[AE500000]      <1> 		cmp dword [dragging], esi
  6575 000052F9 0F8563020000        <1> 		jne near nexticonsel
  6576 000052FF E94B000000          <1> 		jmp dragtext
  6577                              <1> 	nodragtextcheck:
  6578 00005304 663915[284C0000]    <1> 		cmp [mousecursorposition], dx
  6579 0000530B 0F8251020000        <1> 		jb near nexticonsel
  6580 00005311 663905[284C0000]    <1> 		cmp [mousecursorposition], ax
  6581 00005318 0F8744020000        <1> 		ja near nexticonsel
  6582 0000531E 66390D[2A4C0000]    <1> 		cmp [mousecursorposition + 2], cx
  6583 00005325 0F8237020000        <1> 		jb near nexticonsel
  6584 0000532B 66391D[2A4C0000]    <1> 		cmp [mousecursorposition + 2], bx
  6585 00005332 0F872A020000        <1> 		ja near nexticonsel
  6586 00005338 668B460A            <1> 		mov ax, [esi + 10]
  6587 0000533C 66250100            <1> 		and ax, 1
  6588 00005340 663D0100            <1> 		cmp ax, 1
  6589 00005344 0F84AB000000        <1> 		je near unselecttext
  6590 0000534A E986000000          <1> 		jmp nodragtext
  6591                              <1> 	dragtext:
  6592 0000534F 663915[244C0000]    <1> 		cmp [lastmouseposition], dx
  6593 00005356 0F8206020000        <1> 		jb near nexticonsel
  6594 0000535C 663905[244C0000]    <1> 		cmp [lastmouseposition], ax
  6595 00005363 0F87F9010000        <1> 		ja near nexticonsel
  6596 00005369 66390D[264C0000]    <1> 		cmp [lastmouseposition + 2], cx
  6597 00005370 0F82EC010000        <1> 		jb near nexticonsel
  6598 00005376 66391D[264C0000]    <1> 		cmp [lastmouseposition + 2], bx
  6599 0000537D 0F87DF010000        <1> 		ja near nexticonsel
  6600 00005383 668B460A            <1> 		mov ax, [esi + 10]
  6601 00005387 2410                <1> 		and al, 00010000b
  6602 00005389 663D1000            <1> 		cmp ax, 00010000b
  6603 0000538D 0F8442000000        <1> 		je near nodragtext
  6604 00005393 8935[AE500000]      <1> 		mov [dragging], esi
  6605 00005399 662B15[244C0000]    <1> 		sub dx, [lastmouseposition]
  6606 000053A0 660315[284C0000]    <1> 		add dx, [mousecursorposition]
  6607 000053A7 66030D[2A4C0000]    <1> 		add cx, [mousecursorposition + 2]
  6608 000053AE 662B0D[264C0000]    <1> 		sub cx, [lastmouseposition + 2]
  6609 000053B5 663B15[125E0000]    <1> 		cmp dx, [resolutionx2]
  6610 000053BC 7607                <1> 		jbe chkyresdrgtxt
  6611 000053BE 668B15[284C0000]    <1> 		mov dx, [mousecursorposition]
  6612                              <1> 	chkyresdrgtxt:
  6613 000053C5 663B0D[0E5E0000]    <1> 		cmp cx, [resolutiony]
  6614 000053CC 7607                <1> 		jbe nodragtext
  6615 000053CE 668B0D[2A4C0000]    <1> 		mov cx, [mousecursorposition + 2]
  6616                              <1> 	nodragtext:
  6617 000053D5 66814E0A0100        <1> 		or word [esi + 10], 1
  6618 000053DB 8B5E0C              <1> 		mov ebx, [esi + 12]
  6619 000053DE 891D[1B610000]      <1> 		mov [codepointer], ebx
  6620 000053E4 668B460A            <1> 		mov ax, [esi + 10]
  6621 000053E8 8B7602              <1> 		mov esi, [esi + 2]
  6622 000053EB E850050000          <1> 		call showstring
  6623 000053F0 E986010000          <1> 		jmp doneiconsel
  6624                              <1> 	unselecttext:
  6625 000053F5 6681660AFEFF        <1> 		and word [esi + 10], 0xFFFE
  6626 000053FB 8B5E0C              <1> 		mov ebx, [esi + 12]
  6627 000053FE 668B460A            <1> 		mov ax, [esi + 10]
  6628 00005402 8B7602              <1> 		mov esi, [esi + 2]
  6629 00005405 C705[1B610000]0000- <1> 		mov dword [codepointer], 0
  6630 0000540D 0000                <1>
  6631 0000540F E82C050000          <1> 		call showstring
  6632 00005414 E962010000          <1> 		jmp doneiconsel
  6633                              <1> windowselect:
  6634 00005419 8B7E02              <1> 		mov edi, [esi + 2]
  6635 0000541C 668B5606            <1> 		mov dx, [esi + 6]
  6636 00005420 6689D0              <1> 		mov ax, dx
  6637 00005423 668B4E08            <1> 		mov cx, [esi + 8]
  6638 00005427 6689CB              <1> 		mov bx, cx
  6639 0000542A 6681C31000          <1> 		add bx, 16
  6640 0000542F 813D[AE500000]0100- <1> 		cmp dword [dragging], 1
  6641 00005437 0000                <1>
  6642 00005439 746D                <1> 		je dragwin
  6643 0000543B 813D[AE500000]0000- <1> 		cmp dword [dragging], 0
  6644 00005443 0000                <1>
  6645 00005445 7411                <1> 		je nodragwincheck
  6646 00005447 3935[AE500000]      <1> 		cmp dword [dragging], esi
  6647 0000544D 0F850F010000        <1> 		jne near nexticonsel
  6648 00005453 E950000000          <1> 		jmp dragwin
  6649                              <1> 	nodragwincheck:
  6650 00005458 663905[284C0000]    <1> 		cmp [mousecursorposition], ax
  6651 0000545F 0F82FD000000        <1> 		jb near nexticonsel
  6652 00005465 660307              <1> 		add ax, [edi]
  6653 00005468 660307              <1> 		add ax, [edi]
  6654 0000546B 663905[284C0000]    <1> 		cmp [mousecursorposition], ax
  6655 00005472 0F87EA000000        <1> 		ja near nexticonsel
  6656 00005478 66390D[2A4C0000]    <1> 		cmp [mousecursorposition + 2], cx
  6657 0000547F 0F82DD000000        <1> 		jb near nexticonsel
  6658 00005485 66391D[2A4C0000]    <1> 		cmp [mousecursorposition + 2], bx
  6659 0000548C 0F87D0000000        <1> 		ja near nexticonsel
  6660 00005492 662D1400            <1> 		sub ax, 20
  6661 00005496 663905[284C0000]    <1> 		cmp [mousecursorposition], ax
  6662 0000549D 0F8795000000        <1> 		ja near killwin
  6663 000054A3 E97C000000          <1> 		jmp nodragwin
  6664                              <1> 	dragwin:
  6665 000054A8 663905[244C0000]    <1> 		cmp [lastmouseposition], ax
  6666 000054AF 0F82AD000000        <1> 		jb near nexticonsel
  6667 000054B5 660307              <1> 		add ax, [edi]
  6668 000054B8 660307              <1> 		add ax, [edi]
  6669 000054BB 663905[244C0000]    <1> 		cmp [lastmouseposition], ax
  6670 000054C2 0F879A000000        <1> 		ja near nexticonsel
  6671 000054C8 66390D[264C0000]    <1> 		cmp [lastmouseposition + 2], cx
  6672 000054CF 0F828D000000        <1> 		jb near nexticonsel
  6673 000054D5 66391D[264C0000]    <1> 		cmp [lastmouseposition + 2], bx
  6674 000054DC 0F8780000000        <1> 		ja near nexticonsel
  6675 000054E2 8935[AE500000]      <1> 		mov [dragging], esi
  6676 000054E8 662B15[244C0000]    <1> 		sub dx, [lastmouseposition]
  6677 000054EF 660315[284C0000]    <1> 		add dx, [mousecursorposition]
  6678 000054F6 66030D[2A4C0000]    <1> 		add cx, [mousecursorposition + 2]
  6679 000054FD 662B0D[264C0000]    <1> 		sub cx, [lastmouseposition + 2]
  6680 00005504 663B15[125E0000]    <1> 		cmp dx, [resolutionx2]
  6681 0000550B 7607                <1> 		jbe chkyresdrgwin
  6682 0000550D 668B15[284C0000]    <1> 		mov dx, [mousecursorposition]
  6683                              <1> 	chkyresdrgwin:
  6684 00005514 663B0D[0E5E0000]    <1> 		cmp cx, [resolutiony]
  6685 0000551B 7607                <1> 		jbe nodragwin
  6686 0000551D 668B0D[2A4C0000]    <1> 		mov cx, [mousecursorposition + 2]
  6687                              <1> 	nodragwin:
  6688 00005524 8B5E0C              <1> 		mov ebx, [esi + 12]
  6689 00005527 668B460A            <1> 		mov ax, [esi + 10]
  6690 0000552B 8B7602              <1> 		mov esi, [esi + 2]
  6691 0000552E E875040000          <1> 		call showwindow
  6692 00005533 E943000000          <1> 		jmp doneiconsel
  6693                              <1> 	killwin:
  6694 00005538 66C7060000          <1> 		mov word [esi], 0
  6695 0000553D C705[25040000]0000- <1> 		mov dword [user2codepoint], 0
  6696 00005545 0000                <1>
  6697 00005547 C605[F0270000]00    <1> 		mov byte [termguion], 0
  6698 0000554E E8CAF8FFFF          <1> 		call guiclear
  6699 00005553 E8A7000000          <1> 		call reloadallgraphics
  6700 00005558 E91DFAFFFF          <1> 		jmp guistart
  6701 0000555D E93A000000          <1> 		jmp doneiconsel2
  6702                              <1> 	nexticonsel:
  6703 00005562 6681660AFEFF        <1> 		and word [esi + 10], 0xFFFE
  6704 00005568 81C610000000        <1> 		add esi, 16
  6705 0000556E 81FE[00120000]      <1> 		cmp esi, graphicstableend
  6706 00005574 7305                <1> 		jae doneiconsel
  6707 00005576 E9B2FBFFFF          <1> 		jmp clicon2
  6708                              <1> 	doneiconsel:
  6709 0000557B 813D[AE500000]0100- <1> 		cmp dword [dragging], 1
  6710 00005583 0000                <1>
  6711 00005585 7315                <1> 		jae doneiconsel2
  6712 00005587 813D[1B610000]0000- <1> 		cmp dword [codepointer], 0
  6713 0000558F 0000                <1>
  6714 00005591 7409                <1> 		je doneiconsel2
  6715 00005593 8B1D[1B610000]      <1> 		mov ebx, [codepointer]
  6716 00005599 FFD3                <1> 		call ebx 
  6717 0000559B C3                  <1> 		ret
  6718                              <1> 	doneiconsel2:
  6719 0000559C A0[59480000]        <1> 		mov al, [LBUTTON]
  6720 000055A1 A2[AC500000]        <1> 		mov [pLBUTTON], al
  6721 000055A6 A0[5A480000]        <1> 		mov al, [RBUTTON]
  6722 000055AB A2[AD500000]        <1> 		mov [pRBUTTON], al
  6723 000055B0 66813D[AE500000]01- <1> 		cmp word [dragging], 1
  6724 000055B8 00                  <1>
  6725 000055B9 0F860A000000        <1> 		jbe near noreloadgraphicsclick
  6726 000055BF E8CCF9FFFF          <1> call clearmousecursor
  6727 000055C4 E836000000          <1> call reloadallgraphics
  6728                              <1> noreloadgraphicsclick:
  6729 000055C9 31C9                <1> 		xor ecx, ecx
  6730 000055CB 31D2                <1> 		xor edx, edx
  6731 000055CD 30E4                <1> 		xor ah, ah
  6732 000055CF B0FE                <1> 		mov al, 254
  6733 000055D1 668B15[284C0000]    <1> 		mov dx, [mousecursorposition]
  6734 000055D8 668B0D[2A4C0000]    <1> 		mov cx, [mousecursorposition + 2]
  6735 000055DF 66BBE738            <1> 		mov bx, 0011100011100111b
  6736 000055E3 C605[8C4F0000]01    <1> 		mov byte [showcursorfonton], 1
  6737 000055EA E833080000          <1> 		call showfontvesa
  6738 000055EF C605[8C4F0000]00    <1> 		mov byte [showcursorfonton], 0
  6739 000055F6 C3                  <1> 		ret
  6740 000055F7 00000000            <1> lastdrag dw 0,0
  6741 000055FB 00000000            <1> grpctblpos dw 0,0
  6742                              <1> 
  6743                              <1> reloadallgraphics:
  6744 000055FF BF[00100000]        <1> 		mov edi, graphicstable
  6745                              <1> reloadgraphicsloop:
  6746 00005604 8B7702              <1> 		mov esi, [edi + 2]
  6747 00005607 668B5706            <1> 		mov dx, [edi + 6]
  6748 0000560B 668B4F08            <1> 		mov cx, [edi + 8]
  6749 0000560F 668B07              <1> 		mov ax, [edi]
  6750 00005612 668B5F0A            <1> 		mov bx, [edi + 10]
  6751 00005616 893D[FB550000]      <1> 		mov [grpctblpos], edi
  6752 0000561C 3B3D[AE500000]      <1> 		cmp edi, [dragging]
  6753 00005622 741E                <1> 		je loadedgraphic
  6754 00005624 663D0100            <1> 		cmp ax, 1
  6755 00005628 0F8431000000        <1> 		je near icongraphic
  6756 0000562E 663D0200            <1> 		cmp ax, 2
  6757 00005632 0F8437000000        <1> 		je near stringgraphic
  6758 00005638 663D0300            <1> 		cmp ax, 3
  6759 0000563C 0F8416000000        <1> 		je near windowgraphic
  6760 00005642 8B3D[FB550000]      <1> loadedgraphic:  mov edi, [grpctblpos]
  6761 00005648 81C710000000        <1> 		add edi, 16
  6762 0000564E 81FF[00120000]      <1> 		cmp edi, graphicstableend
  6763 00005654 7329                <1> 		jae donereloadgraphics
  6764 00005656 EBAC                <1> 		jmp reloadgraphicsloop
  6765 00005658 E8ED030000          <1> windowgraphic:	call showwindow2
  6766 0000565D EBE3                <1> 		jmp loadedgraphic
  6767 0000565F 80E301              <1> icongraphic:	and bl, 1
  6768 00005662 881D[1F610000]      <1> 		mov [iconselected], bl
  6769 00005668 E8E8060000          <1> 		call showicon2
  6770 0000566D EBD3                <1> 		jmp loadedgraphic
  6771 0000566F 80E301              <1> stringgraphic:  and bl, 1
  6772 00005672 881D[8E4F0000]      <1> 		mov [mouseselecton], bl
  6773 00005678 E8D6020000          <1> 		call showstring2
  6774 0000567D EBC3                <1> 		jmp loadedgraphic
  6775                              <1> donereloadgraphics:
  6776 0000567F 8B3D[AE500000]      <1> 		mov edi, [dragging]
  6777 00005685 81FF[00100000]      <1> 		cmp edi, graphicstable
  6778 0000568B 7226                <1> 		jb notcorrectdrag
  6779 0000568D 668B07              <1> 		mov ax, [edi]
  6780 00005690 8B7702              <1> 		mov esi, [edi + 2]
  6781 00005693 668B5706            <1> 		mov dx, [edi + 6]
  6782 00005697 668B4F08            <1> 		mov cx, [edi + 8]
  6783 0000569B 668B5F0A            <1> 		mov bx, [edi + 10]
  6784 0000569F 663D0100            <1> 		cmp ax, 1
  6785 000056A3 750F                <1> 		jne noticondragging
  6786 000056A5 80E301              <1> 		and bl, 1
  6787 000056A8 881D[1F610000]      <1> 		mov [iconselected], bl
  6788 000056AE E8A2060000          <1> 		call showicon2
  6789                              <1> notcorrectdrag:
  6790 000056B3 C3                  <1> 		ret
  6791                              <1> 
  6792                              <1> 	noticondragging:
  6793 000056B4 663D0200            <1> 		cmp ax, 2
  6794 000056B8 75F9                <1> 		jne notcorrectdrag
  6795 000056BA 80E301              <1> 		and bl, 1
  6796 000056BD 881D[8E4F0000]      <1> 		mov [mouseselecton], bl
  6797 000056C3 E88B020000          <1> 		call showstring2
  6798 000056C8 EBE9                <1> 		jmp notcorrectdrag
  6799                              <1> 
  6800 000056CA 00<rept>            <1> grphbuf times 16 db 0
  6801                              <1> 	graphicsadd:
  6802 000056DA BF[00100000]        <1> 		mov edi, graphicstable
  6803                              <1> 	shwgrph1:
  6804 000056DF 397702              <1> 		cmp dword [edi + 2], esi
  6805 000056E2 7414                <1> 		je showgraphicsreplace2
  6806 000056E4 81C710000000        <1> 		add edi, 16
  6807 000056EA 81FF[00120000]      <1> 		cmp edi, graphicstableend
  6808 000056F0 0F832F020000        <1> 		jae near showgraphicsnew
  6809 000056F6 EBE7                <1> 		jmp shwgrph1
  6810                              <1> 	showgraphicsreplace2:
  6811 000056F8 8935[CC560000]      <1> 		mov [grphbuf + 2], esi
  6812 000056FE 668915[D0560000]    <1> 		mov [grphbuf + 6], dx
  6813 00005705 66890D[D2560000]    <1> 		mov [grphbuf + 8], cx
  6814 0000570C 891D[D6560000]      <1> 		mov [grphbuf + 12], ebx
  6815 00005712 30FF                <1> 		xor bh, bh
  6816 00005714 88E3                <1> 		mov bl, ah
  6817 00005716 30E4                <1> 		xor ah, ah
  6818 00005718 66A3[D4560000]      <1> 		mov [grphbuf + 10], ax	
  6819 0000571E 66891D[CA560000]    <1> 		mov [grphbuf], bx
  6820 00005725 66A1[CA560000]      <1> 		mov ax, [grphbuf]
  6821 0000572B 663D0100            <1> 		cmp ax, 1
  6822 0000572F 0F8419000000        <1> 		je near replaceicon
  6823 00005735 663D0200            <1> 		cmp ax, 2
  6824 00005739 0F8493000000        <1> 		je near replacestring
  6825 0000573F 663D0300            <1> 		cmp ax, 3
  6826 00005743 0F840F010000        <1> 		je near replacewindow
  6827 00005749 E9B4010000          <1> 		jmp showgraphicsreplace
  6828                              <1> 	replaceicon:
  6829 0000574E 893D[B2500000]      <1> 		mov [lastpos], edi
  6830 00005754 8935[B6500000]      <1> 		mov [lastpos + 4], esi
  6831 0000575A 8B7702              <1> 		mov esi, [edi + 2]
  6832 0000575D 668B5F0C            <1> 		mov bx, [edi + 12]
  6833 00005761 668B5706            <1> 		mov dx, [edi + 6]
  6834 00005765 668B4F08            <1> 		mov cx, [edi + 8]
  6835 00005769 668B06              <1> 		mov ax, [esi]
  6836 0000576C 66A3[BA500000]      <1> 		mov [colorbuf], ax
  6837 00005772 66A1[5A4E0000]      <1> 		mov ax, [background]
  6838 00005778 668906              <1> 		mov [esi], ax
  6839 0000577B 8B5F0C              <1> 		mov ebx, [edi + 12]
  6840 0000577E 668B470A            <1> 		mov ax, [edi + 10]
  6841 00005782 2401                <1> 		and al, 1
  6842 00005784 A2[1F610000]        <1> 		mov [iconselected], al
  6843 00005789 668B470A            <1> 		mov ax, [edi + 10]
  6844 0000578D E8C3050000          <1> 		call showicon2
  6845 00005792 8B3D[B2500000]      <1> 		mov edi, [lastpos]
  6846 00005798 8B7702              <1> 		mov esi, [edi + 2]
  6847 0000579B 66A1[BA500000]      <1> 		mov ax, [colorbuf]
  6848 000057A1 668906              <1> 		mov [esi], ax
  6849 000057A4 8B35[B6500000]      <1> 		mov esi, [lastpos + 4]
  6850 000057AA 668B15[D0560000]    <1> 		mov dx, [grphbuf + 6]
  6851 000057B1 668B0D[D2560000]    <1> 		mov cx, [grphbuf + 8]
  6852 000057B8 668B1D[CA560000]    <1> 		mov bx, [grphbuf]
  6853 000057BF 66A1[D4560000]      <1> 		mov ax, [grphbuf + 10]
  6854 000057C5 88DC                <1> 		mov ah, bl
  6855 000057C7 8B1D[D6560000]      <1> 		mov ebx, [grphbuf + 12]
  6856 000057CD E930010000          <1> 		jmp showgraphicsreplace
  6857                              <1> 	replacestring:
  6858 000057D2 893D[B2500000]      <1> 		mov [lastpos], edi
  6859 000057D8 8935[B6500000]      <1> 		mov [lastpos + 4], esi
  6860 000057DE 8B5F0C              <1> 		mov ebx, [edi + 12]
  6861 000057E1 8B7702              <1> 		mov esi, [edi + 2]
  6862 000057E4 668B5706            <1> 		mov dx, [edi + 6]
  6863 000057E8 668B4F08            <1> 		mov cx, [edi + 8]
  6864 000057EC 66A1[8F590000]      <1> 		mov ax, [colorfont2]
  6865 000057F2 66A3[BA500000]      <1> 		mov [colorbuf], ax
  6866 000057F8 66A1[5A4E0000]      <1> 		mov ax, [background]
  6867 000057FE 66A3[8F590000]      <1> 		mov [colorfont2], ax		
  6868 00005804 8B5F0C              <1> 		mov ebx, [edi + 12]
  6869 00005807 668B470A            <1> 		mov ax, [edi + 10]
  6870 0000580B 2401                <1> 		and al, 1
  6871 0000580D A2[8E4F0000]        <1> 		mov [mouseselecton], al
  6872 00005812 668B470A            <1> 		mov ax, [edi + 10]
  6873 00005816 E838010000          <1> 		call showstring2
  6874 0000581B 66A1[BA500000]      <1> 		mov ax, [colorbuf]
  6875 00005821 66A3[8F590000]      <1> 		mov [colorfont2], ax
  6876 00005827 8B3D[B2500000]      <1> 		mov edi, [lastpos]
  6877 0000582D 8B7702              <1> 		mov esi, [edi + 2]
  6878 00005830 668B15[D0560000]    <1> 		mov dx, [grphbuf + 6]
  6879 00005837 668B0D[D2560000]    <1> 		mov cx, [grphbuf + 8]
  6880 0000583E 668B1D[CA560000]    <1> 		mov bx, [grphbuf]
  6881 00005845 66A1[D4560000]      <1> 		mov ax, [grphbuf + 10]
  6882 0000584B 88DC                <1> 		mov ah, bl
  6883 0000584D 8B1D[D6560000]      <1> 		mov ebx, [grphbuf + 12]
  6884 00005853 E9AA000000          <1> 		jmp showgraphicsreplace
  6885                              <1> 	replacewindow:
  6886 00005858 893D[B2500000]      <1> 		mov [lastpos], edi
  6887 0000585E 8935[B6500000]      <1> 		mov [lastpos + 4], esi
  6888 00005864 8B7702              <1> 		mov esi, [edi + 2]
  6889 00005867 8B3D[9E590000]      <1> 		mov edi, [windowbufloc]
  6890 0000586D 31D2                <1> 		xor edx, edx
  6891 0000586F 668B15[125E0000]    <1> 		mov dx, [resolutionx2]
  6892 00005876 C1E204              <1> 		shl edx, 4
  6893 00005879 29D7                <1> 		sub edi, edx
  6894 0000587B 31D2                <1> 		xor edx, edx
  6895 0000587D 668B16              <1> 		mov dx, [esi]
  6896 00005880 660316              <1> 		add dx, [esi]
  6897 00005883 668B4E02            <1> 		mov cx, [esi + 2]
  6898 00005887 6681C11000          <1> 		add cx, 16
  6899 0000588C 66A1[5A4E0000]      <1> 		mov ax, [background]
  6900                              <1> 	clearwindow:
  6901 00005892 668907              <1> 		mov [edi], ax
  6902 00005895 81C702000000        <1> 		add edi, 2
  6903 0000589B 81EA02000000        <1> 		sub edx, 2
  6904 000058A1 81FA00000000        <1> 		cmp edx, 0
  6905 000058A7 75E9                <1> 		jne clearwindow
  6906 000058A9 6649                <1> 		dec cx
  6907 000058AB 668B15[125E0000]    <1> 		mov dx, [resolutionx2]
  6908 000058B2 662B16              <1> 		sub dx, [esi]
  6909 000058B5 662B16              <1> 		sub dx, [esi]
  6910 000058B8 01D7                <1> 		add edi, edx
  6911 000058BA 668B16              <1> 		mov dx, [esi]
  6912 000058BD 660316              <1> 		add dx, [esi]
  6913 000058C0 6681F90000          <1> 		cmp cx, 0
  6914 000058C5 75CB                <1> 		jne clearwindow
  6915 000058C7 C605[F1270000]00    <1> 		mov byte [termcopyon], 0
  6916 000058CE 8B3D[B2500000]      <1> 		mov edi, [lastpos]
  6917 000058D4 8B35[CC560000]      <1> 		mov esi, [grphbuf + 2]
  6918 000058DA 668B15[D0560000]    <1> 		mov dx, [grphbuf + 6]
  6919 000058E1 668B0D[D2560000]    <1> 		mov cx, [grphbuf + 8]
  6920 000058E8 668B1D[CA560000]    <1> 		mov bx, [grphbuf]
  6921 000058EF 66A1[D4560000]      <1> 		mov ax, [grphbuf + 10]
  6922 000058F5 88DC                <1> 		mov ah, bl
  6923 000058F7 8B1D[D6560000]      <1> 		mov ebx, [grphbuf + 12]
  6924 000058FD E900000000          <1> 		jmp showgraphicsreplace
  6925                              <1> 	showgraphicsreplace:
  6926 00005902 897702              <1> 		mov [edi + 2], esi
  6927 00005905 66895706            <1> 		mov [edi + 6], dx
  6928 00005909 66894F08            <1> 		mov [edi + 8], cx
  6929 0000590D 895F0C              <1> 		mov [edi + 12], ebx
  6930 00005910 30FF                <1> 		xor bh, bh
  6931 00005912 88E3                <1> 		mov bl, ah
  6932 00005914 30E4                <1> 		xor ah, ah
  6933 00005916 6689470A            <1> 		mov [edi + 10], ax
  6934 0000591A 66891F              <1> 		mov [edi], bx
  6935 0000591D 8B5F0C              <1> 		mov ebx, [edi + 12]
  6936 00005920 668B470A            <1> 		mov ax, [edi + 10]
  6937 00005924 C3                  <1> 		ret
  6938                              <1> 	showgraphicsnew:
  6939 00005925 BF[00100000]        <1> 		mov edi, graphicstable
  6940                              <1> 	shwgrph2:
  6941 0000592A 66813F0000          <1> 		cmp word [edi], 0
  6942 0000592F 74D1                <1> 		je showgraphicsreplace
  6943 00005931 81C710000000        <1> 		add edi, 16
  6944 00005937 81FF[00120000]      <1> 		cmp edi, graphicstableend
  6945 0000593D 72EB                <1> 		jb shwgrph2
  6946                              <1> 	showgraphicsdone:
  6947 0000593F C3                  <1> 		ret
  6948                              <1> 
  6949                              <1> 	showstring:
  6950 00005940 A2[8E4F0000]        <1> 		mov [mouseselecton], al
  6951 00005945 8025[8E4F0000]01    <1> 		and byte [mouseselecton], 1
  6952 0000594C B402                <1> 		mov ah, 2
  6953 0000594E E887FDFFFF          <1> 		call graphicsadd
  6954                              <1> 	showstring2:
  6955 00005953 30E4                <1> 		xor ah, ah
  6956 00005955 8A06                <1> 		mov al, [esi]
  6957 00005957 3C00                <1> 		cmp al, 0
  6958 00005959 742C                <1> 		je doneshowstring
  6959 0000595B 46                  <1> 		inc esi
  6960 0000595C 3CFF                <1> 		cmp al, 255
  6961 0000595E 74F3                <1> 		je showstring2
  6962 00005960 8935[C8600000]      <1> 		mov [showstringesi], esi
  6963 00005966 668B1D[8F590000]    <1> 		mov bx, [colorfont2]
  6964 0000596D E8B0040000          <1> 		call showfontvesa
  6965 00005972 3C0D                <1> 		cmp al, 13
  6966 00005974 7409                <1> 		je noproceedshst
  6967 00005976 3C0A                <1> 		cmp al, 10
  6968 00005978 7405                <1> 		je noproceedshst
  6969 0000597A 6681C20800          <1> 		add dx, 8
  6970                              <1> 		noproceedshst
  6971 0000597F 8B35[C8600000]      <1> 		mov esi, [showstringesi]
  6972 00005985 EBCC                <1> 		jmp showstring2
  6973                              <1> 	doneshowstring:
  6974 00005987 C605[8E4F0000]00    <1> 		mov byte [mouseselecton], 0
  6975 0000598E C3                  <1> 		ret
  6976                              <1> 
  6977 0000598F FFFF                <1> colorfont2 dw 0xFFFF
  6978 00005991 00                  <1> colorcache db 0
  6979 00005992 0000                <1> winvcopystx dw 0
  6980 00005994 0000                <1> winvcopysty dw 0
  6981 00005996 0000                <1> winvcopydx dw 0
  6982 00005998 0000                <1> winvcopycx dw 0
  6983 0000599A FFFF0000            <1> windowcolor dw 0xFFFF,0x0
  6984 0000599E 00000000            <1> windowbufloc: dw 0,0
  6985 000059A2 0000                <1> termcol dw 0
  6986 000059A4 00000000            <1> wincopyendpos dd 0
  6987                              <1> 
  6988                              <1> 	showwindow:	;;windowstuff in si, position in (dx, cx), nothing in ax, code in bx
  6989 000059A8 C605[F0270000]01    <1> 		mov byte [termguion], 1
  6990 000059AF 6681C11000          <1> 		add cx, 16
  6991 000059B4 668915[92590000]    <1> 		mov [winvcopystx], dx
  6992 000059BB 66890D[94590000]    <1> 		mov [winvcopysty], cx
  6993 000059C2 668B16              <1> 		mov dx, [esi]
  6994 000059C5 668B4E02            <1> 		mov cx, [esi + 2]
  6995 000059C9 31C0                <1> 		xor eax, eax
  6996 000059CB 31DB                <1> 		xor ebx, ebx
  6997 000059CD 6689D0              <1> 		mov ax, dx
  6998 000059D0 6689CB              <1> 		mov bx, cx
  6999 000059D3 66C1E803            <1> 		shr ax, 3
  7000 000059D7 66C1EB04            <1> 		shr bx, 4
  7001 000059DB 66A3[A2590000]      <1> 		mov [termcol], ax
  7002 000059E1 A2[E1270000]        <1> 		mov [charxy], al
  7003 000059E6 881D[E2270000]      <1> 		mov [charxy + 1], bl
  7004 000059EC BF[8F1D0000]        <1> 		mov edi, videobuf
  7005 000059F1 81FB00000000        <1> 		cmp ebx, 0
  7006 000059F7 0F8426030000        <1> 		je near donewincopynow	;AAAAAAAAA!!!!!
  7007                              <1> 	findendposwin:
  7008 000059FD 01C7                <1> 		add edi, eax
  7009 000059FF 01C7                <1> 		add edi, eax
  7010 00005A01 4B                  <1> 		dec ebx
  7011 00005A02 81FB00000000        <1> 		cmp ebx, 0
  7012 00005A08 77F3                <1> 		ja findendposwin
  7013 00005A0A 893D[A4590000]      <1> 		mov [wincopyendpos], edi
  7014 00005A10 31FF                <1> 		xor edi, edi
  7015 00005A12 6631C0              <1> 		xor ax, ax
  7016 00005A15 6631DB              <1> 		xor bx, bx
  7017 00005A18 6601D2              <1> 		add dx, dx
  7018 00005A1B 668915[96590000]    <1> 		mov [winvcopydx], dx
  7019 00005A22 66890D[98590000]    <1> 		mov [winvcopycx], cx
  7020 00005A29 668B0D[94590000]    <1> 		mov cx, [winvcopysty]
  7021 00005A30 6681E91000          <1> 		sub cx, 16
  7022 00005A35 668B15[92590000]    <1> 		mov dx, [winvcopystx]
  7023 00005A3C C605[F1270000]00    <1> 		mov byte [termcopyon], 0
  7024 00005A43 B403                <1> 		mov ah, 3
  7025 00005A45 E890FCFFFF          <1> 		call graphicsadd
  7026                              <1> 	showwindow2:
  7027 00005A4A 6681C11000          <1> 		add cx, 16
  7028 00005A4F 668915[92590000]    <1> 		mov [winvcopystx], dx
  7029 00005A56 66890D[94590000]    <1> 		mov [winvcopysty], cx
  7030 00005A5D 668B16              <1> 		mov dx, [esi]
  7031 00005A60 668B4E02            <1> 		mov cx, [esi + 2]
  7032 00005A64 6601D2              <1> 		add dx, dx
  7033 00005A67 668915[96590000]    <1> 		mov [winvcopydx], dx
  7034 00005A6E 66890D[98590000]    <1> 		mov [winvcopycx], cx
  7035 00005A75 8B3D[9E590000]      <1> 		mov edi, [windowbufloc]
  7036 00005A7B 31D2                <1> 		xor edx, edx
  7037 00005A7D 668B15[125E0000]    <1> 		mov dx, [resolutionx2]
  7038 00005A84 C1E204              <1> 		shl edx, 4
  7039 00005A87 29D7                <1> 		sub edi, edx
  7040 00005A89 803D[F1270000]00    <1> 		cmp byte [termcopyon], 0
  7041 00005A90 7538                <1> 		jne nocleartitlebarpos
  7042 00005A92 8B3D[A2850000]      <1> 		mov edi, [physbaseptr]
  7043 00005A98 31D2                <1> 		xor edx, edx
  7044 00005A9A 668B15[92590000]    <1> 		mov dx, [winvcopystx]
  7045 00005AA1 01D7                <1> 		add edi, edx
  7046 00005AA3 668B0D[94590000]    <1> 		mov cx, [winvcopysty]
  7047 00005AAA 6681E91000          <1> 		sub cx, 16
  7048 00005AAF 6681F90000          <1> 		cmp cx, 0
  7049 00005AB4 7414                <1> 		je nocleartitlebarpos
  7050                              <1> 	cleartitlebarpos:
  7051 00005AB6 31D2                <1> 		xor edx, edx
  7052 00005AB8 668B15[125E0000]    <1> 		mov dx, [resolutionx2]
  7053 00005ABF 01D7                <1> 		add edi, edx
  7054 00005AC1 6649                <1> 		dec cx
  7055 00005AC3 6681F90000          <1> 		cmp cx, 0
  7056 00005AC8 75EC                <1> 		jne cleartitlebarpos
  7057                              <1> 	nocleartitlebarpos:
  7058 00005ACA 66B91000            <1> 		mov cx, 16
  7059 00005ACE 668B15[96590000]    <1> 		mov dx, [winvcopydx]
  7060 00005AD5 6681F90000          <1> 		cmp cx, 0
  7061 00005ADA 0F8448000000        <1> 		je near canceltitlebarput
  7062 00005AE0 6681FA0000          <1> 		cmp dx, 0
  7063 00005AE5 0F843D000000        <1> 		je near canceltitlebarput
  7064                              <1> 	titlebarput:
  7065 00005AEB 66A1[9A590000]      <1> 		mov ax, [windowcolor]
  7066 00005AF1 668907              <1> 		mov [edi], ax
  7067 00005AF4 6681EA0200          <1> 		sub dx, 2
  7068 00005AF9 81C702000000        <1> 		add edi, 2
  7069 00005AFF 6681FA0000          <1> 		cmp dx, 0
  7070 00005B04 75E5                <1> 		jne titlebarput
  7071 00005B06 31D2                <1> 		xor edx, edx
  7072 00005B08 668B15[125E0000]    <1> 		mov dx, [resolutionx2]
  7073 00005B0F 6649                <1> 		dec cx
  7074 00005B11 662B15[96590000]    <1> 		sub dx, [winvcopydx]
  7075 00005B18 01D7                <1> 		add edi, edx
  7076 00005B1A 668B15[96590000]    <1> 		mov dx, [winvcopydx]
  7077 00005B21 6681F90000          <1> 		cmp cx, 0
  7078 00005B26 75C3                <1> 		jne titlebarput
  7079                              <1> 	canceltitlebarput:
  7080 00005B28 893D[9E590000]      <1> 		mov [windowbufloc], edi
  7081 00005B2E 803D[F1270000]02    <1> 		cmp byte [termcopyon], 2
  7082 00005B35 0F8461000000        <1> 		je near winvcpst
  7083 00005B3B 6631C0              <1> 		xor ax, ax
  7084 00005B3E 81C604000000        <1> 		add esi, 4
  7085 00005B44 668B15[92590000]    <1> 		mov dx, [winvcopystx]
  7086 00005B4B 668B0D[94590000]    <1> 		mov cx, [winvcopysty]
  7087 00005B52 6681E91000          <1> 		sub cx, 16
  7088 00005B57 6631DB              <1> 		xor bx, bx
  7089 00005B5A C605[8E4F0000]01    <1> 		mov byte [mouseselecton], 1
  7090 00005B61 E8EDFDFFFF          <1> 		call showstring2
  7091 00005B66 B058                <1> 		mov al, "X"
  7092 00005B68 30E4                <1> 		xor ah, ah
  7093 00005B6A 668B1D[8F590000]    <1> 		mov bx, [colorfont2]
  7094 00005B71 668B15[92590000]    <1> 		mov dx, [winvcopystx]
  7095 00005B78 668B0D[94590000]    <1> 		mov cx, [winvcopysty]
  7096 00005B7F 6681E91000          <1> 		sub cx, 16
  7097 00005B84 6681EA1400          <1> 		sub dx, 20
  7098 00005B89 660315[96590000]    <1> 		add dx, [winvcopydx]
  7099 00005B90 C605[8E4F0000]01    <1> 		mov byte [mouseselecton], 1
  7100 00005B97 E886020000          <1> 		call showfontvesa
  7101                              <1> 	winvcpst:
  7102 00005B9C 8B3D[9E590000]      <1> 		mov edi, [windowbufloc]
  7103 00005BA2 E94E000000          <1> 		jmp windowvideocopyset
  7104                              <1> 
  7105                              <1> 	windowvideocopy:
  7106 00005BA7 8B3D[9E590000]      <1> 		mov edi, [windowbufloc]
  7107 00005BAD 3B3D[A2850000]      <1> 		cmp edi, [physbaseptr]
  7108 00005BB3 0F833C000000        <1> 		jae near windowvideocopyset
  7109 00005BB9 31C9                <1> 		xor ecx, ecx
  7110 00005BBB 31D2                <1> 		xor edx, edx
  7111 00005BBD 668B15[92590000]    <1> 		mov dx, [winvcopystx]
  7112 00005BC4 668B0D[94590000]    <1> 		mov cx, [winvcopysty]
  7113 00005BCB 8B3D[A2850000]      <1> 		mov edi, [physbaseptr]
  7114 00005BD1 01D7                <1> 		add edi, edx
  7115 00005BD3 81F900000000        <1> 		cmp ecx, 0
  7116 00005BD9 741A                <1> 		je windowvideocopyset
  7117                              <1> 	yrescopylp:
  7118 00005BDB 31D2                <1> 		xor edx, edx
  7119 00005BDD 668B15[125E0000]    <1> 		mov dx, [resolutionx2]
  7120 00005BE4 01D7                <1> 		add edi, edx
  7121 00005BE6 6649                <1> 		dec cx
  7122 00005BE8 6681F90000          <1> 		cmp cx, 0
  7123 00005BED 75EC                <1> 		jne yrescopylp
  7124 00005BEF 893D[9E590000]      <1> 		mov [windowbufloc], edi
  7125                              <1> 	windowvideocopyset:
  7126 00005BF5 6631C9              <1> 		xor cx, cx
  7127 00005BF8 66890D[3A5D0000]    <1> 		mov [charposline], cx
  7128 00005BFF BE[8F1D0000]        <1> 		mov esi, videobuf
  7129 00005C04 8935[3C5D0000]      <1> 		mov [charposvbuf], esi
  7130 00005C0A 8A5E01              <1> 		mov bl, [esi + 1]
  7131 00005C0D 881D[91590000]      <1> 		mov [colorcache], bl
  7132 00005C13 8A1E                <1> 		mov bl, [esi]
  7133 00005C15 30FF                <1> 		xor bh, bh
  7134 00005C17 66C1E304            <1> 		shl bx, 4
  7135 00005C1B 678AB7[6A73]        <1> 		mov dh, [fonts + bx]
  7136 00005C20 D0CE                <1> 		ror dh, 1
  7137 00005C22 89FE                <1> 		mov esi, edi
  7138                              <1> 	copywindow:
  7139 00005C24 B201                <1> 		mov dl, 1
  7140 00005C26 D0C6                <1> 		rol dh, 1
  7141 00005C28 20F2                <1> 		and dl, dh
  7142 00005C2A 803D[91590000]10    <1> 		cmp byte [colorcache], 0x10
  7143 00005C31 731C                <1> 		jae switchwincolors
  7144 00005C33 66A1[9C590000]      <1> 		mov ax, [windowcolor + 2]
  7145 00005C39 668907              <1> 		mov [edi], ax
  7146 00005C3C 80FA00              <1> 		cmp dl, 0
  7147 00005C3F 7425                <1> 		je nowritewin
  7148 00005C41 66A1[9A590000]      <1> 		mov ax, [windowcolor]
  7149 00005C47 668907              <1> 		mov [edi], ax
  7150 00005C4A E917000000          <1> 		jmp nowritewin
  7151                              <1> 	switchwincolors:
  7152 00005C4F 66A1[9A590000]      <1> 		mov ax, [windowcolor]
  7153 00005C55 668907              <1> 		mov [edi], ax
  7154 00005C58 80FA00              <1> 		cmp dl, 0
  7155 00005C5B 7409                <1> 		je nowritewin
  7156 00005C5D 66A1[9C590000]      <1> 		mov ax, [windowcolor + 2]
  7157 00005C63 668907              <1> 		mov [edi], ax
  7158                              <1> 	nowritewin:
  7159 00005C66 81C702000000        <1> 		add edi, 2
  7160 00005C6C FEC1                <1> 		inc cl
  7161 00005C6E 80F908              <1> 		cmp cl, 8
  7162 00005C71 75B1                <1> 		jne copywindow
  7163 00005C73 6643                <1> 		inc bx
  7164 00005C75 30C9                <1> 		xor cl, cl
  7165 00005C77 31D2                <1> 		xor edx, edx
  7166 00005C79 668B15[125E0000]    <1> 		mov dx, [resolutionx2]
  7167 00005C80 01D6                <1> 		add esi, edx
  7168 00005C82 89F7                <1> 		mov edi, esi
  7169 00005C84 678AB7[6A73]        <1> 		mov dh, [fonts + bx]
  7170 00005C89 D0CE                <1> 		ror dh, 1
  7171 00005C8B FEC5                <1> 		inc ch
  7172 00005C8D 80FD10              <1> 		cmp ch, 16
  7173 00005C90 7592                <1> 		jne copywindow
  7174 00005C92 6631C9              <1> 		xor cx, cx
  7175 00005C95 8B3D[3C5D0000]      <1> 		mov edi, [charposvbuf]
  7176 00005C9B 81C702000000        <1> 		add edi, 2
  7177 00005CA1 3B3D[A4590000]      <1> 		cmp edi, [wincopyendpos]
  7178 00005CA7 737A                <1> 		jae donewincopynow
  7179 00005CA9 8A5F01              <1> 		mov bl, [edi + 1]
  7180 00005CAC 881D[91590000]      <1> 		mov [colorcache], bl
  7181 00005CB2 8A1F                <1> 		mov bl, [edi]
  7182 00005CB4 30FF                <1> 		xor bh, bh
  7183 00005CB6 66C1E304            <1> 		shl bx, 4
  7184 00005CBA 893D[3C5D0000]      <1> 		mov [charposvbuf], edi
  7185 00005CC0 31D2                <1> 		xor edx, edx
  7186 00005CC2 668B15[125E0000]    <1> 		mov dx, [resolutionx2]
  7187 00005CC9 C1E204              <1> 		shl edx, 4
  7188 00005CCC 29D6                <1> 		sub esi, edx
  7189 00005CCE 81C610000000        <1> 		add esi, 16
  7190 00005CD4 89F7                <1> 		mov edi, esi
  7191 00005CD6 668B0D[3A5D0000]    <1> 		mov cx, [charposline]
  7192 00005CDD 6641                <1> 		inc cx
  7193 00005CDF 663B0D[A2590000]    <1> 		cmp cx, [termcol]
  7194 00005CE6 0F8316000000        <1> 		jae near fixwindowcopy
  7195 00005CEC 66890D[3A5D0000]    <1> 		mov [charposline], cx
  7196 00005CF3 6631C9              <1> 		xor cx, cx
  7197 00005CF6 678AB7[6A73]        <1> 		mov dh, [fonts + bx]
  7198 00005CFB D0CE                <1> 		ror dh, 1
  7199 00005CFD E922FFFFFF          <1> 		jmp copywindow
  7200                              <1> fixwindowcopy:
  7201 00005D02 6631C9              <1> 		xor cx, cx
  7202 00005D05 66890D[3A5D0000]    <1> 		mov [charposline], cx
  7203 00005D0C 662B15[96590000]    <1> 		sub dx, [winvcopydx]
  7204 00005D13 01D6                <1> 		add esi, edx
  7205 00005D15 89F7                <1> 		mov edi, esi
  7206 00005D17 678AB7[6A73]        <1> 		mov dh, [fonts + bx]
  7207 00005D1C D0CE                <1> 		ror dh, 1
  7208 00005D1E E901FFFFFF          <1> 		jmp copywindow
  7209                              <1> donewincopynow:
  7210 00005D23 E808D1FFFF          <1> 		call switchtermcursor
  7211 00005D28 803D[F1270000]01    <1> 		cmp byte [termcopyon], 1
  7212 00005D2F 7501                <1> 		jne forgetresetstuff
  7213 00005D31 61                  <1> 		popa
  7214                              <1> forgetresetstuff:
  7215 00005D32 C605[F1270000]00    <1> 		mov byte [termcopyon], 0
  7216 00005D39 C3                  <1> 		ret
  7217                              <1> 
  7218 00005D3A 0000                <1> charposline dw 0
  7219 00005D3C 00000000            <1> charposvbuf dw 0,0
  7220 00005D40 0000                <1> iconcolor dw 0
  7221                              <1> 	showicon:	;;icon in si, position in (dx,cx), selected in ax, code in bx
  7222 00005D42 A2[1F610000]        <1> 		mov [iconselected], al
  7223 00005D47 8025[1F610000]01    <1> 		and byte [iconselected], 1
  7224 00005D4E B401                <1> 		mov ah, 1
  7225 00005D50 E885F9FFFF          <1> 		call graphicsadd
  7226                              <1> 	showicon2:
  7227 00005D55 8B3D[A2850000]      <1> 		mov edi, [physbaseptr]
  7228 00005D5B 6601D2              <1> 		add dx, dx
  7229 00005D5E 663B15[125E0000]    <1> 		cmp dx, [resolutionx2]
  7230 00005D65 720C                <1> 		jb screenxgood
  7231 00005D67 668B15[125E0000]    <1> 		mov dx, [resolutionx2]
  7232 00005D6E 6681EA4000          <1> 		sub dx, 64
  7233                              <1> 	screenxgood:
  7234 00005D73 6681F90000          <1> 		cmp cx, 0
  7235 00005D78 7422                <1> 		je noscreenygoodchk
  7236 00005D7A 663B0D[0E5E0000]    <1> 		cmp cx, [resolutiony]
  7237 00005D81 720C                <1> 		jb screenygood
  7238 00005D83 668B0D[0E5E0000]    <1> 		mov cx, [resolutiony]
  7239 00005D8A 6681E92000          <1> 		sub cx, 32
  7240                              <1> 	screenygood:
  7241 00005D8F 31DB                <1> 		xor ebx, ebx
  7242 00005D91 668B1D[125E0000]    <1> 		mov bx, [resolutionx2]
  7243 00005D98 01DF                <1> 		add edi, ebx
  7244 00005D9A E2F3                <1> 		loop screenygood
  7245                              <1> 	noscreenygoodchk:
  7246 00005D9C 31DB                <1> 		xor ebx, ebx
  7247 00005D9E 6689D3              <1> 		mov bx, dx
  7248 00005DA1 01DF                <1> 		add edi, ebx
  7249 00005DA3 6631C9              <1> 		xor cx, cx
  7250 00005DA6 668B06              <1> 		mov ax, [esi]
  7251 00005DA9 81C602000000        <1> 		add esi, 2
  7252 00005DAF 66A3[405D0000]      <1> 		mov [iconcolor], ax
  7253                              <1> 	writeicon:
  7254 00005DB5 8B06                <1> 		mov eax, [esi]
  7255 00005DB7 D1C0                <1> 		rol eax, 1
  7256 00005DB9 30C9                <1> 		xor cl, cl
  7257                              <1> 	writeiconline:
  7258 00005DBB B201                <1> 		mov dl, 1
  7259 00005DBD 20C2                <1> 		and dl, al
  7260 00005DBF 3215[1F610000]      <1> 		xor dl, [iconselected]
  7261 00005DC5 668B1D[5A4E0000]    <1> 		mov bx, [background]
  7262 00005DCC 66891F              <1> 		mov [edi], bx
  7263 00005DCF 80FA00              <1> 		cmp dl, 0
  7264 00005DD2 740A                <1> 		je noiconline
  7265 00005DD4 668B15[405D0000]    <1> 		mov dx, [iconcolor]
  7266 00005DDB 668917              <1> 		mov [edi], dx
  7267                              <1> 	noiconline:
  7268 00005DDE 81C702000000        <1> 		add edi, 2
  7269 00005DE4 D1C0                <1> 		rol eax, 1
  7270 00005DE6 FEC1                <1> 		inc cl
  7271 00005DE8 80F920              <1> 		cmp cl, 32
  7272 00005DEB 72CE                <1> 		jb writeiconline
  7273 00005DED 81C604000000        <1> 		add esi, 4
  7274 00005DF3 FEC5                <1> 		inc ch
  7275 00005DF5 31D2                <1> 		xor edx, edx
  7276 00005DF7 668B15[125E0000]    <1> 		mov dx, [resolutionx2]
  7277 00005DFE 01D7                <1> 		add edi, edx
  7278 00005E00 81EF40000000        <1> 		sub edi, 64
  7279 00005E06 80FD20              <1> 		cmp ch, 32
  7280 00005E09 72AA                <1> 		jb writeicon
  7281 00005E0B 31C0                <1> 		xor eax, eax
  7282 00005E0D C3                  <1> 		ret
  7283                              <1> 
  7284 00005E0E 0000                <1> resolutiony dw 0
  7285 00005E10 0000                <1> resolutionx dw 0
  7286 00005E12 0000                <1> resolutionx2 dw 0
  7287 00005E14 02                  <1> resolutionbytes db 2
  7288 00005E15 0000                <1> posxvesa dw 0
  7289 00005E17 0000                <1> posyvesa dw 0
  7290 00005E19 FFFF                <1> colorfont dw 0xFFFF
  7291                              <1> savefontvesa:		;;same rules as showfontvesa
  7292 00005E1B C605[8D4F0000]01    <1> 	mov byte [savefonton], 1
  7293                              <1> showfontvesa:		;;position in (dx,cx), color in bx, char in al
  7294 00005E22 3CFF                <1> 	cmp al, 255
  7295 00005E24 7501                <1> 	jne nostopshowfont
  7296 00005E26 C3                  <1> 	ret
  7297                              <1> nostopshowfont:
  7298 00005E27 66890D[175E0000]    <1> 	mov [posyvesa], cx
  7299 00005E2E 3C0A                <1> 	cmp al, 10
  7300 00005E30 0F8431000000        <1> 	je near goodvesafontx
  7301 00005E36 3C0D                <1> 	cmp al, 13
  7302 00005E38 0F8429000000        <1> 	je near goodvesafontx
  7303 00005E3E 31C9                <1> 	xor ecx, ecx
  7304 00005E40 668B0D[125E0000]    <1> 	mov cx, [resolutionx2]
  7305 00005E47 6681E91000          <1> 	sub cx, 16
  7306 00005E4C 6639CA              <1> 	cmp dx, cx
  7307 00005E4F 7616                <1> 	jbe goodvesafontx
  7308 00005E51 6631D2              <1> 	xor dx, dx
  7309 00005E54 668B0D[175E0000]    <1> 	mov cx, [posyvesa]
  7310 00005E5B 6681C11000          <1> 	add cx, 16
  7311 00005E60 66890D[175E0000]    <1> 	mov [posyvesa], cx
  7312                              <1> goodvesafontx:
  7313 00005E67 668B0D[175E0000]    <1> 	mov cx, [posyvesa]
  7314 00005E6E 668915[155E0000]    <1> 	mov [posxvesa], dx
  7315 00005E75 8B3D[A2850000]      <1> 	mov edi, [physbaseptr]
  7316 00005E7B 66891D[195E0000]    <1> 	mov [colorfont], bx
  7317 00005E82 31DB                <1> 	xor ebx, ebx
  7318 00005E84 88C3                <1> 	mov bl, al
  7319 00005E86 31C0                <1> 	xor eax, eax
  7320 00005E88 88D8                <1> 	mov al, bl
  7321 00005E8A 6689D3              <1> 	mov bx, dx
  7322 00005E8D 89DA                <1> 	mov edx, ebx
  7323 00005E8F 31DB                <1> 	xor ebx, ebx
  7324 00005E91 6681F90000          <1> 	cmp cx, 0
  7325 00005E96 7415                <1> 	je vesaposloopdn
  7326 00005E98 668B1D[125E0000]    <1> 	mov bx, [resolutionx2]
  7327                              <1> vesaposloop:
  7328 00005E9F 01DA                <1> 	add edx, ebx
  7329 00005EA1 6681E90100          <1> 	sub cx, 1
  7330 00005EA6 6681F90000          <1> 	cmp cx, 0
  7331 00005EAB 75F2                <1> 	jne vesaposloop
  7332                              <1> vesaposloopdn:
  7333 00005EAD 01D7                <1> 	add edi, edx
  7334 00005EAF BE[6A730000]        <1> 	mov esi, fonts
  7335                              <1> findfontvesa:
  7336 00005EB4 30E4                <1> 	xor ah, ah
  7337 00005EB6 3C0A                <1> 	cmp al, 10
  7338 00005EB8 0F8406010000        <1> 	je near nwlinevesa
  7339 00005EBE 3C0D                <1> 	cmp al, 13
  7340 00005EC0 0F8413010000        <1> 	je near cretvesa
  7341 00005EC6 C1E004              <1> 	shl eax, 4
  7342 00005EC9 01C6                <1> 	add esi, eax
  7343 00005ECB C1E804              <1> 	shr eax, 4
  7344 00005ECE 81FE[6A830000]      <1> 	cmp esi, fontend
  7345 00005ED4 0F83B9000000        <1> 	jae near donefontvesa
  7346 00005EDA 4E                  <1> 	dec esi
  7347                              <1> foundfontvesa:
  7348 00005EDB 46                  <1> 	inc esi
  7349 00005EDC 803D[8D4F0000]01    <1> 	cmp byte [savefonton], 1
  7350 00005EE3 0F8403010000        <1> 	je near vesafontsaver
  7351 00005EE9 30C9                <1> 	xor cl, cl
  7352 00005EEB 8A06                <1> 	mov al, [esi]
  7353 00005EED 668B15[125E0000]    <1> 	mov dx, [resolutionx2]
  7354 00005EF4 662B15[155E0000]    <1> 	sub dx, [posxvesa]
  7355 00005EFB 6681FA1000          <1> 	cmp dx, 16
  7356 00005F00 7708                <1> 	ja paintfontvesa
  7357 00005F02 D0EA                <1> 	shr dl, 1
  7358 00005F04 8815[C35F0000]      <1> 	mov [charwidth], dl
  7359                              <1> paintfontvesa:
  7360 00005F0A B201                <1> 	mov dl, 1
  7361 00005F0C 20C2                <1> 	and dl, al
  7362 00005F0E 803D[8C4F0000]01    <1> 	cmp byte [showcursorfonton], 1
  7363 00005F15 0F8435000000        <1> 	je near nodelpaintedfont
  7364 00005F1B 803D[8C4F0000]02    <1> 	cmp byte [showcursorfonton], 2
  7365 00005F22 0F8518000000        <1> 	jne near noswitchcursorfonton
  7366 00005F28 80FA00              <1> 	cmp dl, 0
  7367 00005F2B 0F842E000000        <1> 	je near nopixelset
  7368 00005F31 668B1D[195E0000]    <1> 	mov bx, [colorfont]
  7369 00005F38 66891F              <1> 	mov [edi], bx
  7370 00005F3B E91F000000          <1> 	jmp nopixelset
  7371                              <1> noswitchcursorfonton:
  7372 00005F40 3215[8E4F0000]      <1> 	xor dl, [mouseselecton]
  7373 00005F46 668B1D[5A4E0000]    <1> 	mov bx, [background]
  7374 00005F4D 66891F              <1> 	mov [edi], bx
  7375                              <1> nodelpaintedfont:
  7376 00005F50 80FA00              <1> 	cmp dl, 0
  7377 00005F53 740A                <1> 	je nopixelset
  7378 00005F55 668B15[195E0000]    <1> 	mov dx, [colorfont]
  7379 00005F5C 668917              <1> 	mov [edi], dx
  7380                              <1> nopixelset:
  7381 00005F5F 81C702000000        <1> 	add edi, 2
  7382 00005F65 D0C0                <1> 	rol al, 1
  7383 00005F67 FEC1                <1> 	inc cl
  7384 00005F69 3A0D[C35F0000]      <1> 	cmp cl, [charwidth]
  7385 00005F6F 7299                <1> 	jb paintfontvesa
  7386 00005F71 FEC5                <1> 	inc ch
  7387 00005F73 31D2                <1> 	xor edx, edx
  7388 00005F75 668B15[125E0000]    <1> 	mov dx, [resolutionx2]
  7389 00005F7C 01D7                <1> 	add edi, edx
  7390 00005F7E 31D2                <1> 	xor edx, edx
  7391 00005F80 8A15[C35F0000]      <1> 	mov dl, [charwidth]
  7392 00005F86 00D2                <1> 	add dl, dl
  7393 00005F88 29D7                <1> 	sub edi, edx
  7394 00005F8A 80FD10              <1> 	cmp ch, 16
  7395 00005F8D 0F8248FFFFFF        <1> 	jb foundfontvesa
  7396                              <1> donefontvesa:
  7397 00005F93 B208                <1> 	mov dl, 8
  7398 00005F95 8815[C35F0000]      <1> 	mov [charwidth], dl
  7399 00005F9B 668B15[155E0000]    <1> 	mov dx, [posxvesa]
  7400 00005FA2 8A1D[C35F0000]      <1> 	mov bl, [charwidth]
  7401 00005FA8 30FF                <1> 	xor bh, bh
  7402 00005FAA 6601DA              <1> 	add dx, bx
  7403 00005FAD 668B1D[195E0000]    <1> 	mov bx, [colorfont]
  7404 00005FB4 668B0D[175E0000]    <1> 	mov cx, [posyvesa]
  7405 00005FBB C605[8D4F0000]00    <1> 	mov byte [savefonton], 0
  7406 00005FC2 C3                  <1> 	ret
  7407 00005FC3 08                  <1> charwidth db 8
  7408                              <1> nwlinevesa:
  7409 00005FC4 668B0D[175E0000]    <1> 	mov cx, [posyvesa]
  7410 00005FCB 6681C11000          <1> 	add cx, 16
  7411 00005FD0 66890D[175E0000]    <1> 	mov [posyvesa], cx
  7412 00005FD7 EBBA                <1> 	jmp donefontvesa
  7413                              <1> cretvesa:
  7414 00005FD9 668B15[155E0000]    <1> 	mov dx, [posxvesa]
  7415 00005FE0 6631D2              <1> 	xor dx, dx
  7416 00005FE3 668915[155E0000]    <1> 	mov [posxvesa], dx
  7417 00005FEA EBA7                <1> 	jmp donefontvesa
  7418                              <1> vesafontsaver:
  7419 00005FEC 30C0                <1> 	xor al, al
  7420 00005FEE 30C9                <1> 	xor cl, cl
  7421                              <1> vesafontsaver2:
  7422 00005FF0 668B17              <1> 	mov dx, [edi]
  7423 00005FF3 663B15[195E0000]    <1> 	cmp dx, [colorfont]
  7424 00005FFA 742F                <1> 	je colorfontmatch
  7425                              <1> donecolormatch:
  7426 00005FFC 81C702000000        <1> 	add edi, 2
  7427 00006002 D0C0                <1> 	rol al, 1
  7428 00006004 FEC1                <1> 	inc cl
  7429 00006006 80F908              <1> 	cmp cl, 8
  7430 00006009 72E5                <1> 	jb vesafontsaver2
  7431 0000600B 8806                <1> 	mov [esi], al
  7432 0000600D 46                  <1> 	inc esi
  7433 0000600E FEC5                <1> 	inc ch
  7434 00006010 31D2                <1> 	xor edx, edx
  7435 00006012 668B15[125E0000]    <1> 	mov dx, [resolutionx2]
  7436 00006019 01D7                <1> 	add edi, edx
  7437 0000601B 81EF10000000        <1> 	sub edi, 16
  7438 00006021 80FD10              <1> 	cmp ch, 16
  7439 00006024 72C6                <1> 	jb vesafontsaver
  7440 00006026 E968FFFFFF          <1> 	jmp donefontvesa
  7441                              <1> colorfontmatch:
  7442 0000602B 0401                <1> 	add al, 1
  7443 0000602D EBCD                <1> 	jmp donecolormatch
  7444                              <1> 	
  7445                              <1> showbmp:
  7446 0000602F 668B06              <1> 	mov ax, [esi]
  7447 00006032 663D424D            <1> 	cmp ax, "BM"
  7448 00006036 0F8582000000        <1> 	jne near endedbmp
  7449 0000603C 8B3D[A2850000]      <1> 	mov edi, [physbaseptr]
  7450 00006042 6689D0              <1> 	mov ax, dx
  7451 00006045 6689CB              <1> 	mov bx, cx
  7452 00006048 31C9                <1> 	xor ecx, ecx
  7453 0000604A 31D2                <1> 	xor edx, edx
  7454 0000604C 6689D9              <1> 	mov cx, bx
  7455 0000604F 6689C2              <1> 	mov dx, ax
  7456 00006052 01D7                <1> 	add edi, edx
  7457 00006054 01D7                <1> 	add edi, edx
  7458 00006056 31D2                <1> 	xor edx, edx
  7459 00006058 668B15[125E0000]    <1> 	mov dx, [resolutionx2]
  7460 0000605F 41                  <1> 	inc ecx
  7461 00006060 034E16              <1> 	add ecx, [esi + 22]
  7462                              <1> bmplocloop:
  7463 00006063 01D7                <1> 	add edi, edx
  7464 00006065 E2FC                <1> 	loop bmplocloop
  7465 00006067 29D7                <1> 	sub edi, edx
  7466 00006069 8B5612              <1> 	mov edx, [esi + 18]
  7467 0000606C 8B4E16              <1> 	mov ecx, [esi + 22]
  7468 0000606F 8B460A              <1> 	mov eax, [esi + 10]
  7469 00006072 8B5E02              <1> 	mov ebx, [esi + 2]
  7470 00006075 01F3                <1> 	add ebx, esi
  7471 00006077 891D[C4600000]      <1> 	mov [bmpend], ebx
  7472 0000607D 89D3                <1> 	mov ebx, edx
  7473 0000607F 01C6                <1> 	add esi, eax
  7474                              <1> ldxbmp:
  7475 00006081 668B06              <1> 	mov ax, [esi]
  7476 00006084 668907              <1> 	mov [edi], ax
  7477 00006087 81C702000000        <1> 	add edi, 2
  7478 0000608D 81C602000000        <1> 	add esi, 2
  7479 00006093 3B35[C4600000]      <1> 	cmp esi, [bmpend]
  7480 00006099 7723                <1> 	ja endedbmp
  7481 0000609B 4A                  <1> 	dec edx
  7482 0000609C 81FA00000000        <1> 	cmp edx, 0
  7483 000060A2 77DD                <1> 	ja ldxbmp
  7484 000060A4 31D2                <1> 	xor edx, edx
  7485 000060A6 668B15[125E0000]    <1> 	mov dx, [resolutionx2]
  7486 000060AD 29DF                <1> 	sub edi, ebx
  7487 000060AF 29DF                <1> 	sub edi, ebx
  7488 000060B1 29D7                <1> 	sub edi, edx
  7489 000060B3 49                  <1> 	dec ecx
  7490 000060B4 89DA                <1> 	mov edx, ebx
  7491 000060B6 81F900000000        <1> 	cmp ecx, 0
  7492 000060BC 77C3                <1> 	ja ldxbmp
  7493                              <1> endedbmp:
  7494 000060BE E887EFFFFF          <1> 	call switchmousepos2
  7495 000060C3 C3                  <1> 	ret
  7496                              <1> 	
  7497 000060C4 00000000            <1> 	bmpend dd 0
  7498                              <1> 
  7499                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Here are some vars;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  7500 000060C8 00000000            <1> 	showstringesi dw 0,0
  7501 000060CC 00                  <1> 	mouseon db 0
  7502 000060CD 737461727400        <1> 	start	db "start",0
  7503 000060D3 536F6C6C65724F5300  <1> 	gotomenu db "SollerOS",0
  7504 000060DC 426F6F2100          <1> 	boomsg db "Boo!",0
  7505 000060E1 5061636D616E207761- <1> 	pacmsg	db "Pacman was easy to draw.",0
  7506 000060EA 73206561737920746F- <1>
  7507 000060F3 20647261772E00      <1>
  7508 000060FA 4F6D206E6F6D206E6F- <1> 	pacnom  db "Om nom nom nom",0
  7509 00006103 6D206E6F6D00        <1>
  7510 00006109 77696E646F77732073- <1> 	winmsg	db "windows sucks",0
  7511 00006112 75636B7300          <1>
  7512 00006117 5800                <1> 	xmsg db "X",0
  7513 00006119 0000                <1> 	icon dw 0	;pointer to icon
  7514 0000611B 00000000            <1> 	codepointer dw 0,0 ;pointer to code
  7515 0000611F 00                  <1> 	iconselected db 0
  7516                              <1> 	
  7517                              <1> 	boo:
  7518 00006120 BE[DC600000]        <1> 		mov esi, boomsg
  7519 00006125 66BA6400            <1> 		mov dx, 100
  7520 00006129 66B94001            <1> 		mov cx, 320
  7521 0000612D 31DB                <1> 		xor ebx, ebx
  7522 0000612F 6631C0              <1> 		xor ax, ax
  7523 00006132 E909F8FFFF          <1> 		jmp showstring
  7524                              <1> 
  7525                              <1> 	pacmannomnom:
  7526 00006137 BE[FA600000]        <1> 		mov esi, pacnom
  7527 0000613C 66BA8200            <1> 		mov dx, 130
  7528 00006140 66B93C00            <1> 		mov cx, 60
  7529 00006144 31DB                <1> 		xor ebx, ebx
  7530 00006146 6631C0              <1> 		xor ax, ax
  7531 00006149 E9F2F7FFFF          <1> 		jmp showstring	
  7532                              <1> 	
  7533                              <1> 	noie:
  7534 0000614E 31D2                <1> 		xor edx, edx
  7535 00006150 31C9                <1> 		xor ecx, ecx
  7536 00006152 668B15[105E0000]    <1> 		mov dx, [resolutionx]
  7537 00006159 668B0D[0E5E0000]    <1> 		mov cx, [resolutiony]
  7538 00006160 66C1EA03            <1> 		shr dx, 3
  7539 00006164 66C1E904            <1> 		shr cx, 4
  7540 00006168 6681EA0400          <1> 		sub dx, 4
  7541 0000616D 6681E90400          <1> 		sub cx, 4
  7542 00006172 66C1E203            <1> 		shl dx, 3
  7543 00006176 66C1E104            <1> 		shl cx, 4
  7544 0000617A 668915[3E620000]    <1> 		mov [termwindow], dx
  7545 00006181 66890D[40620000]    <1> 		mov [termwindow + 2], cx	;the previous lines of code make a large terminal window that is 4 characters smaller than the screen
  7546 00006188 BE[3E620000]        <1> 		mov esi, termwindow
  7547 0000618D 66BA1000            <1> 		mov dx, 16
  7548 00006191 66B91000            <1> 		mov cx, 16
  7549 00006195 BB[2E2F0000]        <1> 		mov ebx, os
  7550 0000619A 891D[25040000]      <1> 		mov [user2codepoint], ebx
  7551 000061A0 6631C0              <1> 		xor ax, ax
  7552 000061A3 E800F8FFFF          <1> 		call showwindow
  7553 000061A8 E981CDFFFF          <1> 		jmp os
  7554                              <1> 
  7555                              <1> 	gotomenuboot:
  7556 000061AD 31D2                <1> 		xor edx, edx
  7557 000061AF 31C9                <1> 		xor ecx, ecx
  7558 000061B1 668B15[105E0000]    <1> 		mov dx, [resolutionx]
  7559 000061B8 668B0D[0E5E0000]    <1> 		mov cx, [resolutiony]
  7560 000061BF 66C1E904            <1> 		shr cx, 4
  7561 000061C3 6681E90100          <1> 		sub cx, 1
  7562 000061C8 66C1E104            <1> 		shl cx, 4
  7563 000061CC 668915[3E620000]    <1> 		mov [termwindow], dx
  7564 000061D3 66890D[40620000]    <1> 		mov [termwindow + 2], cx	;the previous lines of code make a large terminal window that is fullscreen
  7565 000061DA BE[3E620000]        <1> 		mov esi, termwindow
  7566 000061DF 6631D2              <1> 		xor dx, dx
  7567 000061E2 6631C9              <1> 		xor cx, cx
  7568 000061E5 BB[2E2F0000]        <1> 		mov ebx, os
  7569 000061EA 891D[25040000]      <1> 		mov [user2codepoint], ebx
  7570 000061F0 6631C0              <1> 		xor ax, ax
  7571 000061F3 E8B0F7FFFF          <1> 		call showwindow
  7572 000061F8 E931CDFFFF          <1> 		jmp os
  7573                              <1> 		;ret
  7574                              <1> 
  7575                              <1> 	winblows:
  7576 000061FD BE[09610000]        <1> 		mov esi, winmsg
  7577 00006202 6631D2              <1> 		xor dx, dx
  7578 00006205 668B0D[0E5E0000]    <1> 		mov cx, [resolutiony]
  7579 0000620C 6681E92000          <1> 		sub cx, 32
  7580 00006211 31DB                <1> 		xor ebx, ebx
  7581 00006213 30E4                <1> 		xor ah, ah
  7582 00006215 B011                <1> 		mov al, 00010001b
  7583 00006217 E824F7FFFF          <1> 		call showstring
  7584 0000621C BE[D3600000]        <1> 		mov esi, gotomenu
  7585 00006221 668B0D[0E5E0000]    <1> 		mov cx, [resolutiony]
  7586 00006228 6681E93000          <1> 		sub cx, 48
  7587 0000622D 6631D2              <1> 		xor dx, dx
  7588 00006230 30E4                <1> 		xor ah, ah
  7589 00006232 B010                <1> 		mov al, 00010000b
  7590 00006234 BB[AD610000]        <1> 		mov ebx, gotomenuboot
  7591 00006239 E902F7FFFF          <1> 		jmp showstring
  7592                              <1> 
  7593 0000623E 20035802            <1> 	termwindow:	dw 800,600	;;window size
  7594 00006242 53757065725465726D- <1> 	termmsg:	db "SuperTerminal",0	;;window title
  7595 0000624B 696E616C00          <1>
  7596                              <1> 	
  7597 0000624B <incbin>            <1> interneticon: 	incbin 'source/precompiled/interneticon.pak'
  7598 0000624B <incbin>            <1> wordicon: 	incbin 'source/precompiled/wordicon.pak'
  7599 0000624B <incbin>            <1> pacmanpellet: incbin 'source/precompiled/pacmanpellet.pak'
  7600 0000624B <incbin>            <1> ghostie	incbin 'source/precompiled/ghostie.pak'
  7601 0000624B <incbin>            <1> pacman	incbin 'source/precompiled/pacman.pak'
  7602                                      ;%include 'source/network.asm'
  7603                                  	%include 'source/rtl8139.asm'
  7604                              <1> ;;rtl8139.asm
  7605                              <1> initcard:	;;should find card, get mac, and initialize card
  7606 000064DA 31C0                <1> 	xor eax, eax
  7607 000064DC A2[0E680000]        <1> 	mov [pcifunction], al
  7608 000064E1 A2[0C680000]        <1> 	mov [pcibus], al
  7609 000064E6 A2[0D680000]        <1> 	mov [pcidevice], al
  7610 000064EB B002                <1> 	mov al, 0x02 ;;type code
  7611 000064ED A2[89680000]        <1> 	mov [pcitype], al
  7612 000064F2 E81A030000          <1> 	call getpciport
  7613                              <1> initnic:		;;;;Here i tried the rtl8139 interface, fuck it
  7614 000064F7 8915[E3660000]      <1> 	mov [basenicaddr], edx
  7615 000064FD 89D1                <1> 	mov ecx, edx
  7616 000064FF C605[58350000]03    <1> 	mov byte [firsthexshown], 3
  7617 00006506 E862D0FFFF          <1> 	call showhex	;;for debugging, please remove
  7618 0000650B BE[5F720000]        <1> 	mov esi, rbuffstart
  7619 00006510 B900200000          <1> 	mov ecx, 8192
  7620 00006515 31C0                <1> 	xor eax, eax
  7621                              <1> clearrbuff:		;;clear receive buffer which starts at rbuffstart
  7622 00006517 8806                <1> 	mov [esi], al
  7623 00006519 46                  <1> 	inc esi
  7624 0000651A 6649                <1> 	dec cx
  7625 0000651C 6681F90000          <1> 	cmp cx, 0
  7626 00006521 75F4                <1> 	jne clearrbuff
  7627                              <1> findmac:
  7628 00006523 8B15[E3660000]      <1> 	mov edx, [basenicaddr]
  7629 00006529 BF[EB660000]        <1> 	mov edi, sysmac
  7630 0000652E B906000000          <1> 	mov ecx, 6
  7631                              <1> macputloop:
  7632 00006533 EC                  <1> 	in al, dx
  7633 00006534 8807                <1> 	mov [edi], al
  7634 00006536 47                  <1> 	inc edi
  7635 00006537 42                  <1> 	inc edx
  7636 00006538 49                  <1> 	dec ecx
  7637 00006539 75F8                <1> 	jnz macputloop
  7638 0000653B B9[EB660000]        <1> 	mov ecx, sysmac
  7639 00006540 E837010000          <1> 	call showmac
  7640                              <1> resetnic:
  7641 00006545 8B15[E3660000]      <1> 	mov edx, [basenicaddr]
  7642 0000654B 81C252000000        <1> 	add edx, 0x52
  7643 00006551 30C0                <1> 	xor al, al
  7644 00006553 EE                  <1> 	out dx, al	;;WAKE UP!!!!
  7645 00006554 8B15[E3660000]      <1> 	mov edx, [basenicaddr]
  7646 0000655A 81C237000000        <1> 	add edx, 0x37
  7647 00006560 B010                <1> 	mov al, 0x10
  7648 00006562 EE                  <1> 	out dx, al	;;Reset
  7649                              <1> resetnicwait:
  7650 00006563 8B15[E3660000]      <1> 	mov edx, [basenicaddr]
  7651 00006569 81C237000000        <1> 	add edx, 0x37
  7652 0000656F EC                  <1> 	in al, dx
  7653 00006570 2410                <1> 	and al, 0x10
  7654 00006572 3C10                <1> 	cmp al, 0x10
  7655 00006574 0F84E9FFFFFF        <1> 	je near resetnicwait
  7656 0000657A 8B15[E3660000]      <1> 	mov edx, [basenicaddr]
  7657 00006580 81C230000000        <1> 	add edx, 0x30
  7658 00006586 B8[5F720000]        <1> 	mov eax, rbuffstart
  7659 0000658B EF                  <1> 	out dx, eax	;;give nic receive buffer location
  7660 0000658C 8B15[E3660000]      <1> 	mov edx, [basenicaddr]
  7661 00006592 81C23C000000        <1> 	add edx, 0x3C
  7662 00006598 66B80500            <1> 	mov ax, 0x0005
  7663 0000659C 66EF                <1> 	out dx, ax	;;set TOK and ROK
  7664 0000659E 8B15[E3660000]      <1> 	mov edx, [basenicaddr]
  7665 000065A4 81C244000000        <1> 	add edx, 0x44
  7666 000065AA B80F000000          <1> 	mov eax, 0xf
  7667 000065AF EF                  <1> 	out dx, eax	;;recieve packets from all matches
  7668 000065B0 8B15[E3660000]      <1> 	mov edx, [basenicaddr]
  7669 000065B6 81C237000000        <1> 	add edx, 0x37
  7670 000065BC B00C                <1> 	mov al, 0x0C
  7671 000065BE EE                  <1> 	out dx, al	;;use transmit and receive
  7672 000065BF C605[CC660000]01    <1> 	mov byte [nicconfig], 1
  7673 000065C6 C3                  <1> 	ret
  7674                              <1> 	
  7675                              <1> sendframe:	;;padded frame with beginning in edi and end in esi
  7676 000065C7 56                  <1> 	push esi
  7677 000065C8 57                  <1> 	push edi
  7678                              <1> nic2:		;;here come the low level drivers :(
  7679                              <1> 			;;frame begins at esi, ends at edi 			;;0x0200 is the class code for ethernet cards
  7680 000065C9 803D[CC660000]01    <1> 	cmp byte [nicconfig], 1
  7681 000065D0 7405                <1> 	je sendcachedata
  7682 000065D2 E803FFFFFF          <1> 	call initcard
  7683                              <1> sendcachedata:
  7684 000065D7 8B15[E3660000]      <1> 	mov edx, [basenicaddr]
  7685 000065DD 81C210000000        <1> 	add edx, 0x10
  7686 000065E3 ED                  <1> 	in eax, dx
  7687 000065E4 89C1                <1> 	mov ecx, eax
  7688 000065E6 E882CFFFFF          <1> 	call showhex
  7689 000065EB 8B15[E3660000]      <1> 	mov edx, [basenicaddr]
  7690 000065F1 81C213000000        <1> 	add edx, 0x13
  7691 000065F7 ED                  <1> 	in eax, dx
  7692 000065F8 89C1                <1> 	mov ecx, eax
  7693 000065FA E86ECFFFFF          <1> 	call showhex
  7694 000065FF 8B15[E3660000]      <1> 	mov edx, [basenicaddr]
  7695 00006605 81C223000000        <1> 	add edx, 0x23	;;23 or 20?
  7696 0000660B 5F                  <1> 	pop edi
  7697 0000660C 89F8                <1> 	mov eax, edi
  7698 0000660E EF                  <1> 	out dx, eax	;;here's Johnny!
  7699 0000660F 5E                  <1> 	pop esi
  7700 00006610 29FE                <1> 	sub esi, edi
  7701 00006612 89F0                <1> 	mov eax, esi
  7702 00006614 8B15[E3660000]      <1> 	mov edx, [basenicaddr]
  7703 0000661A 81C213000000        <1> 	add edx, 0x13	;;13 or 10?
  7704 00006620 EF                  <1> 	out dx, eax
  7705                              <1> checknicstatus1:
  7706 00006621 8B15[E3660000]      <1> 	mov edx, [basenicaddr]
  7707 00006627 81C213000000        <1> 	add edx, 0x13	;;13 or 10?
  7708 0000662D ED                  <1> 	in eax, dx
  7709 0000662E 2500200000          <1> 	and eax, 0x2000
  7710 00006633 3D00200000          <1> 	cmp eax, 0x2000
  7711 00006638 75E7                <1> 	jne checknicstatus1
  7712                              <1> checknicstatus:
  7713 0000663A 8B15[E3660000]      <1> 	mov edx, [basenicaddr]
  7714 00006640 81C213000000        <1> 	add edx, 0x13	;;13 or 10?
  7715 00006646 ED                  <1> 	in eax, dx
  7716 00006647 2500800000          <1> 	and eax, 0x8000
  7717 0000664C 3D00800000          <1> 	cmp eax, 0x8000
  7718 00006651 75E7                <1> 	jne checknicstatus
  7719 00006653 8B15[E3660000]      <1> 	mov edx, [basenicaddr]
  7720 00006659 81C210000000        <1> 	add edx, 0x10
  7721 0000665F ED                  <1> 	in eax, dx
  7722 00006660 89C1                <1> 	mov ecx, eax
  7723 00006662 E806CFFFFF          <1> 	call showhex
  7724 00006667 8B15[E3660000]      <1> 	mov edx, [basenicaddr]
  7725 0000666D 81C213000000        <1> 	add edx, 0x13
  7726 00006673 ED                  <1> 	in eax, dx
  7727 00006674 89C1                <1> 	mov ecx, eax
  7728 00006676 E8F2CEFFFF          <1> 	call showhex
  7729 0000667B C3                  <1> 	ret
  7730                              <1> 	
  7731                              <1> showmac:	;;mac begins in [ecx]
  7732 0000667C BE[B4660000]        <1> 	mov esi, macprint
  7733 00006681 89CF                <1> 	mov edi, ecx
  7734 00006683 81C106000000        <1> 	add ecx, 6
  7735                              <1> showmacloop:
  7736 00006689 8A07                <1> 	mov al, [edi]
  7737 0000668B 8A27                <1> 	mov ah, [edi]
  7738 0000668D C0E804              <1> 	shr al, 4
  7739 00006690 C0E404              <1> 	shl ah, 4
  7740 00006693 C0EC04              <1> 	shr ah, 4
  7741 00006696 0430                <1> 	add al, 48
  7742 00006698 80C430              <1> 	add ah, 48
  7743 0000669B 668906              <1> 	mov [esi], ax
  7744 0000669E 81C603000000        <1> 	add esi, 3
  7745 000066A4 47                  <1> 	inc edi
  7746 000066A5 39CF                <1> 	cmp edi, ecx
  7747 000066A7 72E0                <1> 	jb showmacloop
  7748 000066A9 BE[B4660000]        <1> 	mov esi, macprint
  7749 000066AE E848C3FFFF          <1> 	call print
  7750 000066B3 C3                  <1> 	ret
  7751                              <1> 	
  7752 000066B4 30302D30302D30302D- <1> macprint db "00-00-00-00-00-00  ",0
  7753 000066BD 30302D30302D303020- <1>
  7754 000066C6 2000                <1>
  7755 000066C8 00000000            <1> ethernetend dw 0,0
  7756 000066CC 00                  <1> nicconfig db 0
  7757 000066CD 4E4F204E494300      <1> nonicfoundmsg db "NO NIC",0
  7758 000066D4 496E6974696174696E- <1> initnicmsg	db "Initiating NIC",0
  7759 000066DD 67204E494300        <1>
  7760 000066E3 00000000            <1> basenicaddr	db 0,0,0,0
  7761 000066E7 C0A80005            <1> sysip db 192,168,0,5
  7762 000066EB 000000000000        <1> sysmac	db 0,0,0,0,0,0		;;my mac address
  7763                                  	%include 'source/arp.asm'
  7764                              <1> ;;let's try something else
  7765                              <1> ;;arp.asm
  7766                              <1> arpinit:
  7767 000066F1 BE[A8670000]        <1> 	mov esi, arptable
  7768 000066F6 BF[EB660000]        <1> 	mov edi, sysmac
  7769 000066FB BB[E7660000]        <1> 	mov ebx, sysip
  7770 00006700 8B0F                <1> 	mov ecx, [edi]
  7771 00006702 890E                <1> 	mov [esi], ecx
  7772 00006704 668B4F04            <1> 	mov cx, [edi + 4]
  7773 00006708 894E04              <1> 	mov [esi + 4], ecx
  7774 0000670B 8B0B                <1> 	mov ecx, [ebx]
  7775 0000670D 894E06              <1> 	mov [esi + 6], ecx
  7776 00006710 C605[A7670000]01    <1> 	mov byte [arpconfig], 1
  7777 00006717 C3                  <1> 	ret
  7778                              <1> arptest:
  7779 00006718 803D[A7670000]01    <1> 	cmp byte [arpconfig], 1
  7780 0000671F 7405                <1> 	je arptest2
  7781 00006721 E8CBFFFFFF          <1> 	call arpinit
  7782                              <1> arptest2:	;;try to reach 192.168.0.1
  7783 00006726 8B0D[EB660000]      <1> 	mov ecx, [sysmac]
  7784 0000672C 668B1D[EF660000]    <1> 	mov bx, [sysmac + 4]
  7785 00006733 890D[6D670000]      <1> 	mov [sourcemac], ecx
  7786 00006739 66891D[71670000]    <1> 	mov [sourcemac + 4],bx
  7787 00006740 890D[7D670000]      <1> 	mov [arpsenderinfo], ecx
  7788 00006746 66891D[81670000]    <1> 	mov [arpsenderinfo + 4], bx
  7789 0000674D BF[67670000]        <1> 	mov edi, frame
  7790 00006752 BE[A7670000]        <1> 	mov esi, framend
  7791 00006757 E86BFEFFFF          <1> 	call sendframe
  7792 0000675C BE[41730000]        <1> 	mov esi, line
  7793 00006761 E895C2FFFF          <1> 	call print
  7794 00006766 C3                  <1> 	ret
  7795                              <1> 	
  7796                              <1> ;;example frame
  7797                              <1> frame:
  7798 00006767 FFFFFFFFFFFF        <1> destinationmac:	db 0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
  7799 0000676D 000000000000        <1> sourcemac:		db 0,0,0,0,0,0
  7800 00006773 0608                <1> ethertype:		dw 0x0806			;;arp
  7801                              <1> 	;;example packet
  7802 00006775 0100                <1> 	arppacket: 		dw 1				;;ethernet is 1
  7803 00006777 0008                <1> 	arpprotocol: 	dw 0x0800			;;ip is 0x800
  7804 00006779 0604                <1> 					db 6,4				;;length of mac, length of ip
  7805 0000677B 0100                <1> 	arpoperation: 	dw 1				;;one for arp request
  7806 0000677D 000000000000        <1> 	arpsenderinfo:	db 0x00,0x00,0x00,0x00,0x00,0x00	;;mac
  7807 00006783 C0A80005            <1> 					db 192,168,0,5			;;ip
  7808 00006787 000000000000        <1> 	arptargetinfo:	db 0x00,0x00,0x00,0x00,0x00,0x00	;;ignored in requests
  7809 0000678D C0A80001            <1> 					db 192,168,0,1			;;ip
  7810 00006791 00<rept>            <1> padding:		times (64-($-frame)) db 0
  7811                              <1> framend:
  7812                              <1> 
  7813 000067A7 00                  <1> arpconfig db 0
  7814                              <1> arptable:	;;mac,ip
  7815 000067A8 000000000000000000- <1> 	times 10 db 0,0,0,0,0,0,0,0,0,0
  7816 000067B1 00<rept>            <1>
  7817                              <1> arptableend:
  7818                                  	%include 'source/pci.asm'
  7819 0000680C 00                  <1> pcibus		db 0
  7820 0000680D 00                  <1> pcidevice	db 0
  7821 0000680E 00                  <1> pcifunction	db 0
  7822 0000680F 00                  <1> pciregister	db 0
  7823 00006810 00                  <1> pcireqtype db 0
  7824                              <1> 
  7825                              <1> getpciport:
  7826 00006811 B001                <1> 	mov al, 1
  7827 00006813 A2[10680000]        <1> 	mov [pcireqtype], al
  7828 00006818 E916000000          <1> 	jmp searchpci
  7829                              <1> pcidump:
  7830 0000681D 31C0                <1> 	xor eax, eax
  7831 0000681F A2[0E680000]        <1> 	mov [pcifunction], al
  7832 00006824 A2[0C680000]        <1> 	mov [pcibus], al
  7833 00006829 A2[0D680000]        <1> 	mov [pcidevice], al
  7834 0000682E A2[10680000]        <1> 	mov [pcireqtype], al
  7835                              <1> searchpci:		;;return in ebx, start X in pciX
  7836 00006833 30C0                <1> 	xor al, al
  7837 00006835 A2[0F680000]        <1> 	mov [pciregister], al
  7838 0000683A E841010000          <1> 	call getpciaddr
  7839 0000683F BAF80C0000          <1> 	mov edx, 0xCF8
  7840 00006844 EF                  <1> 	out dx, eax	;;request pci config
  7841 00006845 BAFC0C0000          <1> 	mov edx, 0xCFC
  7842 0000684A ED                  <1> 	in eax, dx 	;;read in pci config
  7843 0000684B 3D0000FFFF          <1> 	cmp eax, 0xFFFF0000
  7844 00006850 0F8237000000        <1> 	jb near checkpcidevice
  7845                              <1> searchpciret:
  7846                              <1> nextpcidevice:
  7847 00006856 30C0                <1> 	xor al, al
  7848 00006858 A2[0E680000]        <1> 	mov [pcifunction], al
  7849 0000685D A0[0D680000]        <1> 	mov al, [pcidevice]
  7850 00006862 3C1F                <1> 	cmp al, 11111b
  7851 00006864 0F83AD000000        <1> 	jae near nextpcibus
  7852 0000686A FEC0                <1> 	inc al
  7853 0000686C A2[0D680000]        <1> 	mov [pcidevice], al
  7854 00006871 EBC0                <1> 	jmp searchpci
  7855 00006873 A0[0E680000]        <1> 	mov al, [pcifunction]
  7856 00006878 3C07                <1> 	cmp al, 111b
  7857 0000687A 0F83D6FFFFFF        <1> 	jae near nextpcidevice
  7858 00006880 FEC0                <1> 	inc al
  7859 00006882 A2[0E680000]        <1> 	mov [pcifunction], al
  7860 00006887 EBAA                <1> 	jmp searchpci
  7861 00006889 00000000            <1> pcitype: db 0,0,0,0
  7862                              <1> checkpcidevice:
  7863 0000688D 30C0                <1> 	xor al, al
  7864 0000688F 3805[10680000]      <1> 	cmp [pcireqtype], al
  7865 00006895 0F842B000000        <1> 	je near dumppcidevice
  7866 0000689B B008                <1> 	mov al, 0x08
  7867 0000689D A2[0F680000]        <1> 	mov [pciregister], al	;;class code, subclass, revision id
  7868 000068A2 E8D9000000          <1> 	call getpciaddr
  7869 000068A7 BAF80C0000          <1> 	mov edx, 0xCF8
  7870 000068AC EF                  <1> 	out dx, eax
  7871 000068AD BAFC0C0000          <1> 	mov edx, 0xCFC
  7872 000068B2 ED                  <1> 	in eax, dx
  7873 000068B3 C1C008              <1> 	rol eax, 8
  7874 000068B6 8A1D[89680000]      <1> 	mov bl, [pcitype]
  7875 000068BC 38D8                <1> 	cmp al, bl
  7876 000068BE 0F8472000000        <1> 	je near foundpciaddr
  7877 000068C4 EB90                <1> 	jmp searchpciret
  7878                              <1> dumppcidevice:
  7879 000068C6 30C0                <1> 	xor al, al
  7880 000068C8 A2[0F680000]        <1> 	mov [pciregister], al
  7881 000068CD E8AE000000          <1> 	call getpciaddr
  7882 000068D2 89C1                <1> 	mov ecx, eax
  7883 000068D4 E894CCFFFF          <1> 	call showhex
  7884                              <1> dumppcidevicelp:
  7885 000068D9 A2[0F680000]        <1> 	mov [pciregister], al
  7886 000068DE E89D000000          <1> 	call getpciaddr
  7887 000068E3 BAF80C0000          <1> 	mov edx, 0xCF8
  7888 000068E8 EF                  <1> 	out dx, eax
  7889 000068E9 BAFC0C0000          <1> 	mov edx, 0xCFC
  7890 000068EE ED                  <1> 	in eax, dx
  7891 000068EF 89C1                <1> 	mov ecx, eax
  7892 000068F1 A0[0F680000]        <1> 	mov al, [pciregister]
  7893 000068F6 0404                <1> 	add al, 4
  7894 000068F8 3C1A                <1> 	cmp al, 0x1A
  7895 000068FA 7307                <1> 	jae dumppcidn
  7896 000068FC E86CCCFFFF          <1> 	call showhex
  7897 00006901 EBD6                <1> 	jmp dumppcidevicelp
  7898                              <1> dumppcidn:
  7899 00006903 E865CCFFFF          <1> 	call showhex
  7900 00006908 BE[41730000]        <1> 	mov esi, line
  7901 0000690D E8E9C0FFFF          <1> 	call print
  7902 00006912 E93FFFFFFF          <1> 	jmp searchpciret
  7903                              <1> nextpcibus:
  7904 00006917 30C0                <1> 	xor al, al
  7905 00006919 A2[0D680000]        <1> 	mov [pcidevice], al
  7906 0000691E A0[0C680000]        <1> 	mov al, [pcibus]
  7907 00006923 3C7F                <1> 	cmp al, 1111111b
  7908 00006925 730C                <1> 	jae donesearchpci
  7909 00006927 FEC0                <1> 	inc al
  7910 00006929 A2[0C680000]        <1> 	mov [pcibus], al
  7911 0000692E E900FFFFFF          <1> 	jmp searchpci
  7912                              <1> donesearchpci:
  7913 00006933 31D2                <1> 	xor edx, edx
  7914 00006935 C3                  <1> 	ret
  7915                              <1> foundpciaddr:
  7916 00006936 B010                <1> 	mov al, 0x10
  7917 00006938 A2[0F680000]        <1> 	mov [pciregister], al
  7918                              <1> findpciioaddr:
  7919 0000693D E83E000000          <1> 	call getpciaddr
  7920 00006942 BAF80C0000          <1> 	mov edx, 0xCF8
  7921 00006947 EF                  <1> 	out dx, eax
  7922 00006948 BAFC0C0000          <1> 	mov edx, 0xCFC
  7923 0000694D ED                  <1> 	in eax, dx
  7924 0000694E 89C3                <1> 	mov ebx, eax
  7925 00006950 81E301000000        <1> 	and ebx, 1
  7926 00006956 81FB00000000        <1> 	cmp ebx, 0
  7927 0000695C 0F8408000000        <1> 	je near notpciioaddr
  7928 00006962 2D01000000          <1> 	sub eax, 1
  7929 00006967 89C2                <1> 	mov edx, eax
  7930 00006969 C3                  <1> 	ret
  7931                              <1> notpciioaddr:
  7932 0000696A A0[0F680000]        <1> 	mov al, [pciregister]
  7933 0000696F 0404                <1> 	add al, 4
  7934 00006971 3C28                <1> 	cmp al, 0x28
  7935 00006973 0F87DDFEFFFF        <1> 	ja near searchpciret
  7936 00006979 A2[0F680000]        <1> 	mov [pciregister], al
  7937 0000697E EBBD                <1> 	jmp findpciioaddr
  7938                              <1> getpciaddr:		;;puts it in eax and ebx
  7939 00006980 31C0                <1> 			xor eax, eax
  7940 00006982 BB00000080          <1> 			mov ebx, 0x80000000
  7941 00006987 A0[0C680000]        <1> 			mov al, [pcibus]
  7942 0000698C C1E010              <1> 			shl eax, 16
  7943 0000698F 01C3                <1> 			add ebx, eax
  7944 00006991 31C0                <1> 			xor eax, eax
  7945 00006993 A0[0D680000]        <1> 			mov al, [pcidevice]
  7946 00006998 C1E00B              <1> 			shl eax, 11
  7947 0000699B 01C3                <1> 			add ebx, eax
  7948 0000699D 31C0                <1> 			xor eax, eax
  7949 0000699F A0[0E680000]        <1> 			mov al, [pcifunction]
  7950 000069A4 C1E008              <1> 			shl eax, 8
  7951 000069A7 01C3                <1> 			add ebx, eax
  7952 000069A9 31C0                <1> 			xor eax, eax
  7953 000069AB A0[0F680000]        <1> 			mov al, [pciregister]
  7954 000069B0 01C3                <1> 			add ebx, eax
  7955 000069B2 89D8                <1> 			mov eax, ebx
  7956 000069B4 C3                  <1> 			ret
  7957                                  	;%include 'source/process.asm'
  7958                                      %include 'source/disk.asm'
  7959                              <1> ;;disk.asm - new - using lba
  7960                              <1> loadfile:	;;loads a file with the name buffer's location in edi into location in esi
  7961 000069B5 803F00              <1> 	cmp byte [edi], 0
  7962 000069B8 0F8444000000        <1> 	je near nofileload
  7963 000069BE 89FA                <1> 	mov edx, edi
  7964 000069C0 BB[04720000]        <1> 	mov ebx, diskfileindex
  7965                              <1> nextnamechar:
  7966 000069C5 8A07                <1> 	mov al, [edi]
  7967 000069C7 8A23                <1> 	mov ah, [ebx]
  7968 000069C9 47                  <1> 	inc edi
  7969 000069CA 43                  <1> 	inc ebx
  7970 000069CB 88C1                <1> 	mov cl, al
  7971 000069CD 08E1                <1> 	or cl, ah
  7972 000069CF 80F900              <1> 	cmp cl, 0
  7973 000069D2 744E                <1> 	je equalfilenames
  7974 000069D4 80F920              <1> 	cmp cl, ' '
  7975 000069D7 7449                <1> 	je equalfilenames
  7976 000069D9 3C2A                <1> 	cmp al, '*'
  7977 000069DB 742B                <1> 	je equalfilenames2
  7978 000069DD 80FC00              <1> 	cmp ah, 0
  7979 000069E0 7410                <1> 	je nextfilename
  7980 000069E2 3C00                <1> 	cmp al, 0
  7981 000069E4 740C                <1> 	je nextfilename
  7982 000069E6 38E0                <1> 	cmp al, ah
  7983 000069E8 74DB                <1> 	je nextnamechar
  7984                              <1> getebxzero:
  7985 000069EA 8A23                <1> 	mov ah, [ebx]
  7986 000069EC 43                  <1> 	inc ebx
  7987 000069ED 80FC00              <1> 	cmp ah, 0
  7988 000069F0 75F8                <1> 	jne getebxzero
  7989                              <1> nextfilename:
  7990 000069F2 81C308000000        <1> 	add ebx, 8		;;next descriptor
  7991 000069F8 89D7                <1> 	mov edi, edx
  7992 000069FA 81FB[CB720000]      <1> 	cmp ebx, enddiskfileindex
  7993 00006A00 72C3                <1> 	jb nextnamechar
  7994                              <1> nofileload:
  7995 00006A02 BA94010000          <1> 	mov edx, 404	;;indicate not found error
  7996 00006A07 C3                  <1> 	ret
  7997                              <1> equalfilenames2:
  7998 00006A08 81EB02000000        <1> 	sub ebx, 2
  7999                              <1> eqfilefind:
  8000 00006A0E 43                  <1> 	inc ebx
  8001 00006A0F 81FB[CB720000]      <1> 	cmp ebx, enddiskfileindex
  8002 00006A15 0F83E7FFFFFF        <1> 	jae near nofileload
  8003 00006A1B 8A03                <1> 	mov al, [ebx]
  8004 00006A1D 3C00                <1> 	cmp al, 0
  8005 00006A1F 75ED                <1> 	jne eqfilefind
  8006 00006A21 43                  <1> 	inc ebx
  8007                              <1> equalfilenames:
  8008 00006A22 8B4304              <1> 	mov eax, [ebx + 4] 	;;put file size in eax
  8009 00006A25 8B1B                <1> 	mov ebx, [ebx]		;;put file beginning in ebx
  8010 00006A27 031D[82010000]      <1> 	add ebx, [lbaad]	;;add offset to solleros
  8011 00006A2D 31C9                <1> 	xor ecx, ecx
  8012 00006A2F 88C1                <1> 	mov cl, al			;;get excess number of sectors
  8013 00006A31 D0E1                <1> 	shl cl, 1
  8014 00006A33 D0E9                <1> 	shr cl, 1			;;cut off at 128
  8015 00006A35 29C8                <1> 	sub eax, ecx		;;get rid of excess sectors
  8016 00006A37 B500                <1> 	mov ch, 0			;;drive 0
  8017 00006A39 C1E807              <1> 	shr eax, 7			;;get number of 128 sector tracks
  8018                              <1> loaddiskfile:		;;tracks in eax, excess sectors in cl, drive in ch, buffer in esi, address in ebx
  8019 00006A3C A3[7A6A0000]        <1> 	mov [filetracks], eax
  8020 00006A41 89F7                <1> 	mov edi, esi		;;just in case cl is 0
  8021 00006A43 89DA                <1> 	mov edx, ebx
  8022 00006A45 80F900              <1> 	cmp cl, 0
  8023 00006A48 7405                <1> 	je copytracksforfile
  8024 00006A4A E837000000          <1> 	call diskr		;;take care of excess sectors
  8025                              <1> copytracksforfile:
  8026 00006A4F A1[7A6A0000]        <1> 	mov eax, [filetracks]
  8027 00006A54 3D00000000          <1> 	cmp eax, 0
  8028 00006A59 7419                <1> 	je donecopyfile
  8029 00006A5B 48                  <1> 	dec eax
  8030 00006A5C A3[7A6A0000]        <1> 	mov [filetracks], eax
  8031 00006A61 89D3                <1> 	mov ebx, edx	;;get end lba
  8032 00006A63 B180                <1> 	mov cl, 0x80
  8033 00006A65 8A2D[81010000]      <1> 	mov ch, [DriveNumber]
  8034 00006A6B 89FE                <1> 	mov esi, edi	;;reset buffer
  8035 00006A6D E814000000          <1> 	call diskr
  8036 00006A72 EBDB                <1> 	jmp copytracksforfile
  8037                              <1> donecopyfile:
  8038 00006A74 BA00000000          <1> 	mov edx, 0	;;no error
  8039 00006A79 C3                  <1> 	ret
  8040                              <1> 	
  8041 00006A7A 00000000            <1> filetracks dd 0
  8042 00006A7E 00                  <1> lbad1 db 0
  8043 00006A7F 00                  <1> lbad2 db 0
  8044 00006A80 00                  <1> lbad3 db 0
  8045 00006A81 00                  <1> lbad4 db 0
  8046 00006A82 00                  <1> lbad5 db 0
  8047 00006A83 00                  <1> lbad6 db 0
  8048 00006A84 6400                <1> segments dw 100
  8049                              <1> 
  8050                              <1> diskr:		;;sector count in cl, disk number in ch, 48 bit address with last 32 bits in ebx, buffer in esi, puts end buffer in edi and end lba in edx
  8051                              <1> 
  8052 00006A86 8935[9B6B0000]      <1> 	mov [bufferstartesi], esi
  8053 00006A8C 891D[976B0000]      <1> 	mov [lbaadstartebx], ebx
  8054 00006A92 31D2                <1> 	xor edx, edx
  8055 00006A94 88CA                <1> 	mov dl, cl
  8056 00006A96 01DA                <1> 	add edx, ebx
  8057 00006A98 8915[936B0000]      <1> 	mov [lbaadend], edx
  8058 00006A9E 881D[7E6A0000]      <1> 	mov [lbad1], bl
  8059 00006AA4 883D[7F6A0000]      <1> 	mov [lbad2], bh
  8060 00006AAA C1C310              <1> 	rol ebx, 16
  8061 00006AAD 881D[806A0000]      <1> 	mov [lbad3], bl
  8062 00006AB3 883D[816A0000]      <1> 	mov [lbad4], bh
  8063 00006AB9 C1CB10              <1> 	ror ebx, 16
  8064                              <1> 
  8065 00006ABC B840000000          <1> 	mov eax, 0x40
  8066 00006AC1 66BAF601            <1> 	mov dx, 0x1F6
  8067 00006AC5 EE                  <1> 	out dx, al	;;send magic bits-add drive indicator later
  8068                              <1> 	
  8069 00006AC6 30C0                <1> 	xor al, al
  8070 00006AC8 66BAF201            <1> 	mov dx, 0x1F2
  8071 00006ACC EE                  <1> 	out dx, al	;;16 bit sector count-last byte now 0
  8072                              <1> 	
  8073 00006ACD A0[816A0000]        <1> 	mov al, [lbad4]
  8074 00006AD2 6642                <1> 	inc dx
  8075 00006AD4 EE                  <1> 	out dx, al
  8076                              <1> 	
  8077 00006AD5 A0[826A0000]        <1> 	mov al, [lbad5]
  8078 00006ADA 6642                <1> 	inc dx
  8079 00006ADC EE                  <1> 	out dx, al
  8080                              <1> 	
  8081 00006ADD A0[836A0000]        <1> 	mov al, [lbad6]
  8082 00006AE2 6642                <1> 	inc dx
  8083 00006AE4 EE                  <1> 	out dx, al
  8084                              <1> 	
  8085 00006AE5 88C8                <1> 	mov al, cl
  8086 00006AE7 66BAF201            <1> 	mov dx, 0x1F2
  8087 00006AEB EE                  <1> 	out dx, al	;;low byte of 16 bit sector count
  8088                              <1> 	
  8089 00006AEC A0[7E6A0000]        <1> 	mov al, [lbad1]
  8090 00006AF1 6642                <1> 	inc dx
  8091 00006AF3 EE                  <1> 	out dx, al
  8092                              <1> 	
  8093 00006AF4 A0[7F6A0000]        <1> 	mov al, [lbad2]
  8094 00006AF9 6642                <1> 	inc dx
  8095 00006AFB EE                  <1> 	out dx, al
  8096                              <1> 	
  8097 00006AFC A0[806A0000]        <1> 	mov al, [lbad3]
  8098 00006B01 6642                <1> 	inc dx
  8099 00006B03 EE                  <1> 	out dx, al
  8100                              <1> 	
  8101 00006B04 B024                <1> 	mov al, 0x24
  8102 00006B06 66BAF701            <1> 	mov dx, 0x1F7
  8103 00006B0A EE                  <1> 	out dx, al	;;READ!!!
  8104 00006B0B 66BBFFFF            <1> 	mov bx, 0xFFFF		;;try 65536 times before forcing
  8105                              <1> diskrwait:
  8106 00006B0F 66BAF701            <1> 	mov dx, 0x1F7
  8107 00006B13 EC                  <1> 	in al, dx
  8108 00006B14 2408                <1> 	and al, 0x08
  8109 00006B16 664B                <1> 	dec bx
  8110 00006B18 6681FB0000          <1> 	cmp bx, 0
  8111 00006B1D 7404                <1> 	je nomorediskwait
  8112 00006B1F 3C08                <1> 	cmp al, 0x08
  8113 00006B21 75EC                <1> 	jne diskrwait
  8114                              <1> nomorediskwait:
  8115 00006B23 66BB0001            <1> 	mov bx, 256
  8116                              <1> diskdataread:
  8117 00006B27 66BAF001            <1> 	mov dx, 0x1F0
  8118 00006B2B 66ED                <1> 	in ax, dx
  8119 00006B2D 668906              <1> 	mov [esi], ax
  8120 00006B30 81C602000000        <1> 	add esi, 2
  8121 00006B36 664B                <1> 	dec bx
  8122 00006B38 6681FB0000          <1> 	cmp bx, 0
  8123 00006B3D 75E8                <1> 	jne diskdataread		;;read a sector
  8124 00006B3F FEC9                <1> 	dec cl
  8125 00006B41 80F900              <1> 	cmp cl, 0
  8126 00006B44 75C9                <1> 	jne diskrwait
  8127 00006B46 89F7                <1> 	mov edi, esi
  8128 00006B48 8B15[936B0000]      <1> 	mov edx, [lbaadend]
  8129 00006B4E 8B35[9B6B0000]      <1> 	mov esi, [bufferstartesi]
  8130 00006B54 8B1D[976B0000]      <1> 	mov ebx, [lbaadstartebx]
  8131 00006B5A C3                  <1> 	ret
  8132                              <1> 	
  8133                              <1> 	
  8134                              <1> diskold: ;;28 bits
  8135 00006B5B 6631C0              <1> 	xor ax, ax
  8136 00006B5E 66BAF101            <1> 	mov dx, 0x1F1
  8137 00006B62 EE                  <1> 	out dx, al	;;send null byte to port
  8138 00006B63 6642                <1> 	inc dx	;;0x1F2
  8139 00006B65 88C8                <1> 	mov al, cl	;;get sector count
  8140 00006B67 EE                  <1> 	out dx, al	;;send sector count
  8141 00006B68 6642                <1> 	inc dx	;;0x1F3
  8142 00006B6A 88D8                <1> 	mov al, bl	;;get first 8 bits of address
  8143 00006B6C EE                  <1> 	out dx, al	;;send them
  8144 00006B6D 6642                <1> 	inc dx	;;0x1F4
  8145 00006B6F C1CB08              <1> 	ror ebx, 8	;;get next 8 bits
  8146 00006B72 88D8                <1> 	mov al, bl
  8147 00006B74 EE                  <1> 	out dx, al
  8148 00006B75 6642                <1> 	inc dx	;;0x1F5
  8149 00006B77 C1CB08              <1> 	ror ebx, 8	;;again
  8150 00006B7A 88D8                <1> 	mov al, bl
  8151 00006B7C EE                  <1> 	out dx, al
  8152 00006B7D 6642                <1> 	inc dx	;;0x1F6
  8153 00006B7F C1CB08              <1> 	ror ebx, 8
  8154 00006B82 88D8                <1> 	mov al, bl
  8155 00006B84 240F                <1> 	and al, 00001111b	;;last 4 bits of address
  8156 00006B86 0CE0                <1> 	or al, 0xE0			;;majic number
  8157 00006B88 C0E504              <1> 	shl ch, 4
  8158 00006B8B 08E8                <1> 	or al, ch
  8159 00006B8D EE                  <1> 	out dx, al			;;send drive indicator, magic bits, and highest 4 bits of address
  8160 00006B8E 6642                <1> 	inc dx	;;0x1F7
  8161 00006B90 B020                <1> 	mov al, 0x20
  8162 00006B92 EE                  <1> 	out dx, al			;;execute read command
  8163                              <1> 	
  8164 00006B93 00000000            <1> lbaadend dd 0
  8165 00006B97 00000000            <1> lbaadstartebx dd 0
  8166 00006B9B 00000000            <1> bufferstartesi dd 0
  8167                                  	%include 'source/threads.asm'
  8168                              <1> ;;THIS IS MY FIRST ATTEMPT AT IMPLEMENTING THREADS
  8169                              <1> threadstarttest:
  8170 00006B9F E9DF040000          <1>     jmp startthreads
  8171                              <1> mainthread:
  8172 00006BA4 F4                  <1> 	hlt		;;this does not work properly
  8173 00006BA5 EBFD                <1> 	jmp mainthread
  8174                              <1> 	
  8175                              <1> nwcmdst:
  8176 00006BA7 B0FD                <1> 	mov al, 11111101b
  8177 00006BA9 E621                <1> 	out 0x21, al
  8178 00006BAB C605[E56B0000]00    <1> 	mov byte [threadson], 0
  8179 00006BB2 E99BC4FFFF          <1> 	jmp nwcmd
  8180                              <1> 	
  8181                              <1> modelthread:
  8182 00006BB7 668B1D[02720000]    <1> 	mov bx, [currentthread]
  8183 00006BBE B001                <1> 	mov al, 1
  8184 00006BC0 B409                <1> 	mov ah, 9
  8185 00006BC2 31C9                <1> 	xor ecx, ecx
  8186 00006BC4 6689D9              <1> 	mov cx, bx
  8187 00006BC7 CD30                <1> 	int 0x30
  8188                              <1> 	
  8189 00006BC9 B90000DEC0          <1> 	mov ecx, 0xC0DE0000
  8190 00006BCE 6689D9              <1> 	mov cx, bx
  8191 00006BD1 CD30                <1> 	int 0x30
  8192                              <1> 	
  8193 00006BD3 B90000ADDE          <1> 	mov ecx, 0xDEAD0000
  8194 00006BD8 6689D9              <1> 	mov cx, bx
  8195 00006BDB CD30                <1> 	int 0x30
  8196                              <1> 	
  8197 00006BDD CD40                <1> 	int 0x40	;;skip this thread three times to ensure that all threads run
  8198 00006BDF CD40                <1> 	int 0x40
  8199 00006BE1 CD40                <1> 	int 0x40
  8200                              <1> 	
  8201 00006BE3 EBC2                <1> 	jmp nwcmdst
  8202                              <1> 	
  8203                              <1> 	
  8204 00006BE5 00                  <1> threadson db 0
  8205 00006BE6 04000000            <1> lastthread dd 4
  8206                              <1> 
  8207                              <1> thrdtst:
  8208 00006BEA [B76B0000]<rept>    <1> times 256 dd modelthread	;;could go up to 2048, but that takes too long
  8209                              <1> thrdtstend:
  8210                              <1> 
  8211 00006FEA 00000000            <1> 	espold dd 0
  8212                              <1> 
  8213                              <1> threadfork:
  8214 00006FEE C605[E56B0000]01    <1> 	mov byte [threadson], 1
  8215 00006FF5 60                  <1> 	pushad
  8216 00006FF6 66B80040            <1> 	mov ax, 0x4000	;;this is the divider for the PIT
  8217 00006FFA E640                <1> 	out 0x40, al
  8218 00006FFC 66C1C008            <1> 	rol ax, 8
  8219 00007000 E640                <1> 	out 0x40, al
  8220                              <1> 	
  8221 00007002 8CC8                <1> 	mov eax, cs
  8222 00007004 89C2                <1> 	mov edx, eax
  8223 00007006 8B4C2428            <1> 	mov ecx, [esp + 40]
  8224 0000700A 81C900020000        <1> 	or ecx, 0x200
  8225 00007010 89E3                <1> 	mov ebx, esp
  8226 00007012 BC[67960000]        <1> 	mov esp, stackdummy
  8227 00007017 90                  <1> 	nop
  8228                              <1> 	
  8229 00007018 60                  <1> 	pushad
  8230 00007019 B8[A46B0000]        <1> 	mov eax, mainthread
  8231 0000701E 89442420            <1> 	mov [esp + 32], eax
  8232 00007022 89542424            <1> 	mov [esp + 36], edx
  8233 00007026 894C2428            <1> 	mov [esp + 40], ecx
  8234 0000702A 8925[5F720000]      <1> 	mov [threadlist], esp
  8235                              <1> 	
  8236 00007030 891D[EA6F0000]      <1> 	mov [espold], ebx
  8237 00007036 89F0                <1> 	mov eax, esi
  8238 00007038 BC[679A0000]        <1> 	mov esp, stack1
  8239 0000703D 8B1D[E66B0000]      <1> 	mov ebx, [lastthread]
  8240 00007043 C1E30A              <1> 	shl ebx, 10
  8241 00007046 01DC                <1> 	add esp, ebx
  8242 00007048 C1EB0A              <1> 	shr ebx, 10
  8243 0000704B 90                  <1> 	nop
  8244 0000704C 60                  <1> 	pushad
  8245 0000704D 89442420            <1> 	mov [esp + 32], eax
  8246 00007051 89542424            <1> 	mov [esp + 36], edx
  8247 00007055 894C2428            <1> 	mov [esp + 40], ecx
  8248 00007059 89A3[5F720000]      <1> 	mov [threadlist + ebx], esp
  8249 0000705F 8B25[EA6F0000]      <1> 	mov esp, [espold]
  8250 00007065 81C304000000        <1> 	add ebx, 4
  8251 0000706B 89A3[5F720000]      <1> 	mov [threadlist + ebx], esp
  8252 00007071 81C304000000        <1> 	add ebx, 4
  8253 00007077 891D[E66B0000]      <1> 	mov [lastthread], ebx
  8254 0000707D B020                <1> 	mov al, 0x20
  8255 0000707F E620                <1> 	out 0x20, al
  8256 00007081 61                  <1> 	popad
  8257 00007082 C3                  <1> 	ret
  8258                              <1> 
  8259                              <1> startthreads:
  8260 00007083 C605[E56B0000]01    <1> 	mov byte [threadson], 1
  8261 0000708A 60                  <1> 	pushad
  8262 0000708B 66B800A0            <1> 	mov ax, 0xA000	;;this is the divider for the PIT
  8263 0000708F E640                <1> 	out 0x40, al
  8264 00007091 66C1C008            <1> 	rol ax, 8
  8265 00007095 E640                <1> 	out 0x40, al
  8266                              <1> 	
  8267 00007097 8CC8                <1> 	mov eax, cs
  8268 00007099 89C2                <1> 	mov edx, eax
  8269 0000709B 8B4C2428            <1> 	mov ecx, [esp + 40]
  8270 0000709F 81C900020000        <1> 	or ecx, 0x200
  8271 000070A5 89E3                <1> 	mov ebx, esp
  8272 000070A7 BC[67960000]        <1> 	mov esp, stackdummy
  8273 000070AC 90                  <1> 	nop
  8274                              <1> 	
  8275 000070AD 60                  <1> 	pushad
  8276 000070AE B8[A46B0000]        <1> 	mov eax, mainthread
  8277 000070B3 89442420            <1> 	mov [esp + 32], eax
  8278 000070B7 89542424            <1> 	mov [esp + 36], edx
  8279 000070BB 894C2428            <1> 	mov [esp + 40], ecx
  8280 000070BF 8925[5F720000]      <1> 	mov [threadlist], esp
  8281                              <1> 
  8282                              <1> 			;;that above setup the dummy thread which for some reason does not run
  8283                              <1> 			;;this below will setup the threads found in thrdtst
  8284                              <1> 
  8285                              <1> testthreads:
  8286 000070C5 BE[EA6B0000]        <1> 	mov esi, thrdtst
  8287 000070CA BC[679A0000]        <1> 	mov esp, stack1
  8288 000070CF BF[5F720000]        <1> 	mov edi, threadlist
  8289 000070D4 81C704000000        <1> 	add edi, 4
  8290                              <1> nxtthreadld:
  8291 000070DA 60                  <1> 	pushad
  8292 000070DB 8B06                <1> 	mov eax, [esi]
  8293 000070DD 89442420            <1> 	mov [esp + 32], eax
  8294 000070E1 89542424            <1> 	mov [esp + 36], edx
  8295 000070E5 894C2428            <1> 	mov [esp + 40], ecx
  8296 000070E9 8927                <1> 	mov [edi], esp
  8297 000070EB 81C400040000        <1> 	add esp, 1024
  8298 000070F1 81C604000000        <1> 	add esi, 4
  8299 000070F7 81C704000000        <1> 	add edi, 4
  8300 000070FD 81FF[67920000]      <1> 	cmp edi, threadlistend
  8301 00007103 0F8322000000        <1> 	jae near nomorethreadspace
  8302 00007109 81FC[67A22000]      <1> 	cmp esp, bssend
  8303 0000710F 0F8350000000        <1> 	jae near nomorestackspace
  8304 00007115 81FE[EA6F0000]      <1> 	cmp esi, thrdtstend
  8305 0000711B 72BD                <1> 	jb nxtthreadld
  8306 0000711D 89DC                <1> 	mov esp, ebx	
  8307                              <1> 	;mov al, 0xFE
  8308                              <1> 	;out 0x21, al
  8309 0000711F 30C0                <1> 	xor al, al
  8310 00007121 E621                <1> 	out 0x21, al
  8311 00007123 B020                <1> 	mov al, 0x20
  8312 00007125 E620                <1> 	out 0x20, al
  8313 00007127 61                  <1> 	popad
  8314 00007128 FB                  <1> 	sti
  8315 00007129 EBFE                <1> 	jmp $	;;wait for the irq to hook
  8316                              <1> 	
  8317                              <1> nomorethreadspace:
  8318 0000712B BE[41710000]        <1> 	mov esi, nmts
  8319 00007130 E8C6B8FFFF          <1> 	call print
  8320 00007135 C605[E56B0000]00    <1> 	mov byte [threadson], 0
  8321 0000713C E911BFFFFF          <1> 	jmp nwcmd
  8322 00007141 74656820636F6C6F6E- <1> nmts	db "teh colonel no can haz moar treds",13,10,0
  8323 0000714A 656C206E6F2063616E- <1>
  8324 00007153 2068617A206D6F6172- <1>
  8325 0000715C 2074726564730D0A00  <1>
  8326                              <1> 
  8327                              <1> nomorestackspace:
  8328 00007165 BE[7B710000]        <1> 	mov esi, nmss
  8329 0000716A E88CB8FFFF          <1> 	call print
  8330 0000716F C605[E56B0000]00    <1> 	mov byte [threadson], 0
  8331 00007176 E9D7BEFFFF          <1> 	jmp nwcmd
  8332 0000717B 74656820636F6C6F6E- <1> nmss	db "teh colonel no can haz moar staqz",13,10,0
  8333 00007184 656C206E6F2063616E- <1>
  8334 0000718D 2068617A206D6F6172- <1>
  8335 00007196 20737461717A0D0A00  <1>
  8336                              <1> 	
  8337                              <1> threadswitch:
  8338 0000719F FA                  <1> 	cli
  8339 000071A0 60                  <1> 	pushad
  8340 000071A1 BF[5F720000]        <1> 	mov edi, threadlist
  8341 000071A6 31C0                <1> 	xor eax, eax
  8342 000071A8 66A1[02720000]      <1> 	mov ax, [currentthread]
  8343 000071AE 6640                <1> 	inc ax
  8344 000071B0 66A3[02720000]      <1> 	mov [currentthread], ax
  8345 000071B6 6648                <1> 	dec ax
  8346 000071B8 C1E002              <1> 	shl eax, 2
  8347 000071BB 01C7                <1> 	add edi, eax
  8348 000071BD 8927                <1> 	mov [edi], esp
  8349 000071BF 81C704000000        <1> 	add edi, 4
  8350 000071C5 81FF[67920000]      <1> 	cmp edi, threadlistend
  8351 000071CB 0F830D000000        <1> 	jae near nookespthread
  8352 000071D1 8B07                <1> 	mov eax, [edi]
  8353 000071D3 3D00000000          <1> 	cmp eax, 0
  8354 000071D8 0F851B000000        <1> 	jne near okespthread
  8355                              <1> nookespthread:
  8356 000071DE BF[5F720000]        <1> 	mov edi, threadlist
  8357 000071E3 6631C0              <1> 	xor ax, ax
  8358 000071E6 66A3[02720000]      <1> 	mov [currentthread], ax
  8359 000071EC 8B07                <1> 	mov eax, [edi]
  8360 000071EE 3D00000000          <1> 	cmp eax, 0
  8361 000071F3 0F84AEF9FFFF        <1> 	je near nwcmdst
  8362                              <1> okespthread:
  8363 000071F9 89C4                <1> 	mov esp, eax
  8364 000071FB B020                <1> 	mov al, 0x20
  8365 000071FD E620                <1> 	out 0x20, al
  8366 000071FF 61                  <1> 	popad
  8367 00007200 FB                  <1> 	sti
  8368 00007201 CF                  <1> 	iretd
  8369                              <1> 	
  8370 00007202 0000                <1> currentthread dw 0
  8371                                      %include 'fileindex.asm'
  8372                              <1> diskfileindex:
  8373 00007204 323038342E736800    <1> db "2084.sh",0
  8374 0000720C 44000000            <1> dd (f0-$$)/512
  8375 00007210 01000000            <1> dd (f1-f0)/512
  8376 00007214 646F7370726F6700    <1> db "dosprog",0
  8377 0000721C 45000000            <1> dd (f1-$$)/512
  8378 00007220 01000000            <1> dd (f2-f1)/512
  8379 00007224 65787000            <1> db "exp",0
  8380 00007228 46000000            <1> dd (f2-$$)/512
  8381 0000722C 01000000            <1> dd (f3-f2)/512
  8382 00007230 666F726B00          <1> db "fork",0
  8383 00007235 47000000            <1> dd (f3-$$)/512
  8384 00007239 01000000            <1> dd (f4-f3)/512
  8385 0000723D 66707500            <1> db "fpu",0
  8386 00007241 48000000            <1> dd (f4-$$)/512
  8387 00007245 01000000            <1> dd (f5-f4)/512
  8388 00007249 6C696E757800        <1> db "linux",0
  8389 0000724F 49000000            <1> dd (f5-$$)/512
  8390 00007253 01000000            <1> dd (f6-f5)/512
  8391 00007257 736F6C6C65726F732E- <1> db "solleros.bmp",0
  8392 00007260 626D7000            <1>
  8393 00007264 4A000000            <1> dd (f6-$$)/512
  8394 00007268 B0020000            <1> dd (f7-f6)/512
  8395 0000726C 736F6C6C65726F732E- <1> db "solleros.txt",0
  8396 00007275 74787400            <1>
  8397 00007279 FA020000            <1> dd (f7-$$)/512
  8398 0000727D 01000000            <1> dd (f8-f7)/512
  8399 00007281 736F756E6400        <1> db "sound",0
  8400 00007287 FB020000            <1> dd (f8-$$)/512
  8401 0000728B 01000000            <1> dd (f9-f8)/512
  8402 0000728F 74656C7900          <1> db "tely",0
  8403 00007294 FC020000            <1> dd (f9-$$)/512
  8404 00007298 01000000            <1> dd (f10-f9)/512
  8405 0000729C 74696D6500          <1> db "time",0
  8406 000072A1 FD020000            <1> dd (f10-$$)/512
  8407 000072A5 02000000            <1> dd (f11-f10)/512
  8408 000072A9 7475746F7269616C2E- <1> db "tutorial.bat",0
  8409 000072B2 62617400            <1>
  8410 000072B6 FF020000            <1> dd (f11-$$)/512
  8411 000072BA 03000000            <1> dd (f12-f11)/512
  8412 000072BE 756E667300          <1> db "unfs",0
  8413 000072C3 02030000            <1> dd (f12-$$)/512
  8414 000072C7 B9020000            <1> dd (f13-f12)/512
  8415                              <1> enddiskfileindex:
  8416                              <1> 
  8417                                  	%include 'source/msg.asm'
  8418 000072CB 57656C636F6D652074- <1> 	shushmsg db "Welcome to the SollerOS Hardly Unix-Compatible Shell!",10,13,0
  8419 000072D4 6F2074686520536F6C- <1>
  8420 000072DD 6C65724F5320486172- <1>
  8421 000072E6 646C7920556E69782D- <1>
  8422 000072EF 436F6D70617469626C- <1>
  8423 000072F8 65205368656C6C210A- <1>
  8424 00007301 0D00                <1>
  8425 00007303 6578697400          <1> 	exitmsg db	"exit",0
  8426 00007308 50726F6772616D2022- <1> 	notfound1 db "Program ",34,0
  8427 00007311 00                  <1>
  8428 00007312 22206E6F7420666F75- <1> 	notfound2 db  34," not found.",13,10,0
  8429 0000731B 6E642E0D0A00        <1>
  8430 00007321 757365726E616D653A- <1> 	userask db "username:",0
  8431 0000732A 00                  <1>
  8432 0000732B 70617373776F72643A- <1> 	pwdask	db	"password:",0
  8433 00007334 00                  <1>
  8434 00007335 40536F6C6C65724F53- <1> 	location	db	"@SollerOS]:",0
  8435 0000733E 5D3A00              <1>
  8436 00007341 0D0A00              <1> 	line	db	13,10,0
  8437 00007344 200900              <1> 	dirtab 	db " ",9,0
  8438                              <1> 	userlst:
  8439 00007347 7573657200          <1> 			db "user",0
  8440 0000734C 70617373776F726400  <1> 			db "password",0
  8441 00007355 726F6F7400          <1> 			db "root",0
  8442 0000735A 617765736F6D65706F- <1> 			db "awesomepower",0
  8443 00007363 77657200            <1>
  8444 00007367 6E00                <1> 			db "n",0	;;use for quick entry-a quick double n followed by a double enter will get you in
  8445 00007369 00                  <1> 			db 0
  8446                              <1> 	userlstend:
  8447                              <1> 	
  8448 00007369 <incbin>            <1> fonts:	incbin 'source/precompiled/fonts.pak'
  8449                              <1> fontend:
  8450                              <1> 
  8451                              <1> 
  8452                              <1> mcursor:
  8453 0000836A 01                  <1> 	db	00000001b
  8454 0000836B 81                  <1> 	db	10000001b
  8455 0000836C C1                  <1> 	db	11000001b
  8456 0000836D E1                  <1> 	db	11100001b
  8457 0000836E F1                  <1> 	db	11110001b
  8458 0000836F F9                  <1> 	db	11111001b
  8459 00008370 FD                  <1> 	db	11111101b
  8460 00008371 FF                  <1> 	db	11111111b
  8461 00008372 F9                  <1> 	db	11111001b
  8462 00008373 B9                  <1> 	db	10111001b
  8463 00008374 39                  <1> 	db	00111001b
  8464 00008375 1C                  <1> 	db	00011100b
  8465 00008376 1C                  <1> 	db	00011100b
  8466 00008377 0E                  <1> 	db	00001110b
  8467 00008378 0E                  <1> 	db	00001110b
  8468 00008379 0C                  <1> 	db	00001100b
  8469                              <1> 
  8470                              <1> VBEMODEBLOCK:
  8471 0000837A 00<rept>            <1> vbesignature 		times 4 db 0	;VBE Signature
  8472 0000837E 00<rept>            <1> vbeversion  		times 2 db 0	;VBE Version
  8473 00008380 00<rept>            <1> oemstringptr  		times 4 db 0	;Pointer to OEM String
  8474 00008384 00<rept>            <1> capabilities 		times 4 db 0	;Capabilities of graphics cont.
  8475 00008388 00<rept>            <1> videomodeptr 		times 4 db 0	;Pointer to Video Mode List
  8476 0000838C 00<rept>            <1> totalmemory   		times 2 db 0	;number of 64Kb memory blocks
  8477 0000838E 00<rept>            <1> oemsoftwarerev  	times 2 db 0	;VBE implementation Software revision
  8478 00008390 00<rept>            <1> oemvendornameptr 	times 4 db 0	;Pointer to Vendor Name String
  8479 00008394 00<rept>            <1> oemproductnameptr 	times 4 db 0	;Pointer to Product Name String
  8480 00008398 00<rept>            <1> oemproductrevptr 	times 4 db 0	;Pointer to Product Revision String
  8481 0000839C 00<rept>            <1> reserved			times 222 db 0	;Reserved for VBE implementation scratch area
  8482 0000847A 00<rept>            <1> oemdata 			times 256 db 0	;Data Area for OEM Strings
  8483                              <1> 
  8484                              <1> 
  8485                              <1> VBEMODEINFOBLOCK:
  8486                              <1> ;Mandatory information for all VBE revision
  8487 0000857A 00<rept>            <1> modeattributes   	times 2 db 0	;Mode attributes
  8488 0000857C 00                  <1> winaattributes   	times 1 db 0	;Window A attributes
  8489 0000857D 00                  <1> winbattributes   	times 1 db 0	;Window B attributes
  8490 0000857E 00<rept>            <1> wingranularity   	times 2 db 0	;Window granularity
  8491 00008580 00<rept>            <1> winsize          	times 2 db 0	;Window size
  8492 00008582 00<rept>            <1> winasegment      	times 2 db 0	;Window A start segment
  8493 00008584 00<rept>            <1> winbsegment      	times 2 db 0	;Window B start segment
  8494 00008586 00<rept>            <1> winfuncptr       	times 4 db 0	;pointer to window function
  8495 0000858A 00<rept>            <1> bytesperscanline 	times 2 db 0	;Bytes per scan line
  8496                              <1> 
  8497                              <1> ;Mandatory information for VBE 1.2 and above
  8498 0000858C 00<rept>            <1> xresolution     	times 2 db 0	;Horizontal resolution in pixel or chars
  8499 0000858E 00<rept>            <1> yresolution	    	times 2 db 0	;Vertical resolution in pixel or chars
  8500 00008590 00                  <1> xcharsize       	times 1 db 0	;Character cell width in pixel
  8501 00008591 00                  <1> ycharsize       	times 1 db 0	;Character cell height in pixel
  8502 00008592 00                  <1> numberofplanes  	times 1 db 0	;Number of memory planes
  8503 00008593 00                  <1> bitsperpixel    	times 1 db 0	;Bits per pixel
  8504 00008594 00                  <1> numberofbanks   	times 1 db 0	;Number of banks
  8505 00008595 00                  <1> memorymodel     	times 1 db 0	;Memory model type
  8506 00008596 00                  <1> banksize        	times 1 db 0	;Bank size in KB
  8507 00008597 00                  <1> numberofimagepages	times 1 db 0	;Number of images
  8508 00008598 00                  <1> reserved1       	times 1 db 0	;Reserved for page function
  8509                              <1> 
  8510                              <1> ;Direct Color fields (required for direct/6 and YUV/7 memory models)
  8511 00008599 00                  <1> redmasksize			times 1 db 0	;Size of direct color red mask in bits
  8512 0000859A 00                  <1> redfieldposition	times 1 db 0	;Bit position of lsb of red bask
  8513 0000859B 00                  <1> greenmasksize   	times 1 db 0	;Size of direct color green mask in bits
  8514 0000859C 00                  <1> greenfieldposition	times 1 db 0	;Bit position of lsb of green bask
  8515 0000859D 00                  <1> bluemasksize		times 1 db 0	;Size of direct color blue mask in bits
  8516 0000859E 00                  <1> bluefieldposition	times 1 db 0	;Bit position of lsb of blue bask
  8517 0000859F 00                  <1> rsvdmasksize        times 1	db 0	;Size of direct color reserved mask in bits
  8518 000085A0 00                  <1> rsvdfieldposition	times 1	db 0	;Bit position of lsb of reserved bask
  8519 000085A1 00                  <1> directcolormodeinfo	times 1 db 0	;Direct color mode attributes
  8520                              <1> 
  8521                              <1> ;Mandatory information for VBE 2.0 and above
  8522 000085A2 00<rept>            <1> physbaseptr 		times 4 db 0	;Physical address for flat frame buffer
  8523 000085A6 00<rept>            <1> offscreenmemoffset 	times 4 db 0	;Pointer to start of off screen memory
  8524 000085AA 00<rept>            <1> offscreenmemsize 	times 2 db 0    ;Amount of off screen memory in 1Kb units
  8525 000085AC 00<rept>            <1> reserved2 			times 206 db 0  ;Remainder of ModeInfoBlock
  8526                                  	;%include 'source/memory.asm'
  8527                                  	%include 'source/buf.asm'
  8528 0000867A 4255465354415254    <1> db "BUFSTART"
  8529                              <1> [section .bss]
  8530                              <1> bssstart:
  8531                              <1> stack:
  8532 00000000 <res 00001000>      <1> 	resb 4096
  8533                              <1> stackend:
  8534                              <1> graphicstable: ;w type, dw datalocation, w locationx, w locationy, w selected, dw code
  8535 00001000 <res 00000200>      <1> 	resb 200h 
  8536                              <1> 	graphicstableend:
  8537                              <1> mousecolorbuf: ;where the gui under the mouse is stored
  8538 00001200 <res 00000100>      <1> 	resb 256
  8539                              <1> mcolorend:
  8540 00001300 <res 00000200>      <1> fileindex: resb 200h
  8541                              <1> fileindexend:
  8542 00001500 <res 00000001>      <1> IFON resb 1 
  8543 00001501 <res 00000064>      <1> IFTRUE resb 100 
  8544 00001565 <res 00000004>      <1> BATCHPOS resb 4 
  8545 00001569 <res 00000001>      <1> BATCHISON resb 1 
  8546 0000156A <res 00000001>      <1> LOOPON resb 1 
  8547 0000156B <res 00000004>      <1> LOOPPOS	resb 4 
  8548 0000156F <res 00000500>      <1> variables: 	resb 500h 
  8549 00001A6F <res 00000001>      <1> varend: resb 1
  8550 00001A70 <res 00000100>      <1> buftxt2: resb 100h
  8551 00001B70 <res 0000000A>      <1> resb 10
  8552 00001B7A <res 00000200>      <1> buftxt: resb 200h 
  8553                              <1> buftxtend:
  8554 00001D7A <res 00000014>      <1> buf2:	resb 20 
  8555 00001D8E <res 00000001>      <1> numbuf: resb 1 
  8556 00001D8F <res 00005000>      <1> videobuf 		resb (160*64*2)	;1280x1024pixels in characters
  8557 00006D8F <res 000000C8>      <1> videobufend		resb 200
  8558 00006E57 <res 00000004>      <1> lastcommandpos: resb 4
  8559 00006E5B <res 00000004>      <1> currentcommandpos: resb 4
  8560                              <1> commandbuf:
  8561 00006E5F <res 00000400>      <1> resb 1024
  8562                              <1> commandbufend:
  8563                              <1> rbuffstart: ;for use with networking
  8564                              <1> ;resb 8212
  8565                              <1> threadlist:	;;this buffer will hold the stack locations of all of the threads, up to 2048
  8566 0000725F <res 00002008>      <1> 	resb 2050*4
  8567                              <1> threadlistend:
  8568                              <1> stacks:		;;the stacks will go on forever until end of memory
  8569 00009267 <res 00000400>      <1> 	resb 1024
  8570                              <1> stackdummy:
  8571 00009667 <res 00000400>      <1> 	resb 1024
  8572                              <1> stack1:
  8573 00009A67 <res 00200800>      <1> 	resb 1024*2050	;;woah, thats a lot of space for stacks
  8574                              <1> bssend:		;;from here on, it is not kernel space so apps can be loaded here.
  8575                              <1> [section .text]
  8576                                      %include 'files.asm'
  8577 00008682 00<rept>            <1> align 512,db 0
  8578                              <1> f0:
  8579 00008682 <incbin>            <1> incbin "included/2084.sh"
  8580 000089C5 00<rept>            <1> align 512,db 0
  8581                              <1> f1:
  8582 000089C5 <incbin>            <1> incbin "included/dosprog"
  8583 00008B4B 00<rept>            <1> align 512,db 0
  8584                              <1> f2:
  8585 00008B4B <incbin>            <1> incbin "included/exp"
  8586 00008D27 00<rept>            <1> align 512,db 0
  8587                              <1> f3:
  8588 00008D27 <incbin>            <1> incbin "included/fork"
  8589 00008E67 00<rept>            <1> align 512,db 0
  8590                              <1> f4:
  8591 00008E67 <incbin>            <1> incbin "included/fpu"
  8592 0000909F 00<rept>            <1> align 512,db 0
  8593                              <1> f5:
  8594 0000909F <incbin>            <1> incbin "included/linux"
  8595 00009204 00<rept>            <1> align 512,db 0
  8596                              <1> f6:
  8597 00009204 <incbin>            <1> incbin "included/solleros.bmp"
  8598 0005F3E6 00<rept>            <1> align 512,db 0
  8599                              <1> f7:
  8600 0005F3E6 <incbin>            <1> incbin "included/solleros.txt"
  8601 0005F576 00<rept>            <1> align 512,db 0
  8602                              <1> f8:
  8603 0005F576 <incbin>            <1> incbin "included/sound"
  8604 0005F6F4 00<rept>            <1> align 512,db 0
  8605                              <1> f9:
  8606 0005F6F4 <incbin>            <1> incbin "included/tely"
  8607 0005F979 00<rept>            <1> align 512,db 0
  8608                              <1> f10:
  8609 0005F979 <incbin>            <1> incbin "included/time"
  8610 0005FC7B 00<rept>            <1> align 512,db 0
  8611                              <1> f11:
  8612 0005FC7B <incbin>            <1> incbin "included/tutorial.bat"
  8613 000602AA 00<rept>            <1> align 512,db 0
  8614                              <1> f12:
  8615 000602AA <incbin>            <1> incbin "included/unfs"
  8616                              <1> align 512,db 0
  8617                              <1> f13:
