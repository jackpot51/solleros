     1                                      ; SECTOR.ASM
     2                                      ; Load a program off the disk and jump to it
     3                                  
     4                                      ; Tell the compiler that this is offset 0.
     5                                      ; It isn't offset 0, but it will be after the jump.
     6                                  [BITS 16]
     7                                  	; Boot record is loaded at 0000:7C00
     8                                  ORG 7c00h
     9                                  
    10                                  ;;0x000: EB 58 90 6D 6B 64 6F 73 66 73 00 00 02 08 20 00 EXAMPLE
    11                                  ;;0x010: 02 00 00 00 00 F8 00 00 3E 00 B9 00 00 00 00 00
    12                                  ;;0x020: 26 DE B2 00 A2 2C 00 00 00 00 00 00 02 00 00 00
    13                                  ;;0x030: 01 00 06 00 00 00 00 00 00 00 00 00 00 00 00 00
    14                                  ;;0x040: 00 00 29 52 D1 D2 48 20 20 20 20 20 20 20 20 20
    15                                  ;;0x050: 20 20 46 41 54 33 32 20 20 20 0E 1F BE 77 7C AC
    16                                  ;;0x060: 22 C0 74 0B 56 B4 0E BB 07 00 CD 10 5E EB F0 32
    17                                  ;;0x070: E4 CD 16 CD 19 EB FE 54 68 69 73 20 69 73 20 6E
    18                                  ;;0x080: 6F 74 20 61 20 62 6F 6F 74 61 62 6C 65 20 64 69
    19                                  ;;0x090: 73 6B 2E 20 20 50 6C 65 61 73 65 20 69 6E 73 65
    20                                  ;;0x0A0: 72 74 20 61 20 62 6F 6F 74 61 62 6C 65 20 66 6C
    21                                  ;;0x0B0: 6F 70 70 79 20 61 6E 64 0D 0A 70 72 65 73 73 20
    22                                  ;;0x0C0: 61 6E 79 20 6B 65 79 20 74 6F 20 74 72 79 20 61
    23                                  ;;0x0D0: 67 61 69 6E 20 2E 2E 2E 20 0D 0A 00 00 00 00 00
    24                                  ;;0x0E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
    25                                  
    26                                  ;;fuck trying to set up FAT for now
    27                                  ;FATDRIVETABLE:
    28                                  ;	;jmp short 0x3C		;;0x00-0x02, jump over table
    29                                  ;	db "SOLLEROS"		;;0x03-0x0A, os name
    30                                  ;	db 0x02,0x08		;;0x0B-0x0C, number of bytes per sector
    31                                  ;	db 0x20			;;0x0D, sectors per cluster
    32                                  ;	db 0,0x02		;;0x0F-0x20, reserved sectors
    33                                  ;	db 0x00			;;0x21, number of FAT tables
    34                                  ;	db 0,0xB9		;;0x22-0x23, number of directory entries
    35                                  ;	db 0,0			;;0x24-0x25, total sectors, if zero, > 0xFFFF
    36                                  ;	db 0			;;0x26, media descriptor
    37                                  ;	db 0x26,0xDE		;;0x27-0x28, sectors per FAT table
    38                                  ;	db 0xB2,0		;;0x29-0x2A, sectors per track
    39                                  ;	db 0xA2,0x2C		;;0x2B-0x2C, heads on storage media
    40                                  ;	db 0x0,0x0,0x0,0x0	;;0x2D-0x31, LBA
    41                                  ;FAT32EXTENDEDTABLE:
    42                                  ;	db 0xA2,0x2C,0,0	;;4 bytes, size of FAT table in bytes
    43                                  ;	db 0,0			;;2 bytes, flags
    44                                  
    45                                  
    46                                  
    47                                  
    48 00000000 E94300                  	jmp start
    49                                  
    50 00000003 00                      	DriveNumber db 0
    51 00000004 4C6F6164696E67204F-     	sectormsg2 db "Loading OS...",10,13,0
    52 0000000D 532E2E2E0A0D00     
    53 00000014 0D0A536F6C6C65724F-     	sectormsg3 db 13,10,"SollerOS loaded.",10,13,0
    54 0000001D 53206C6F616465642E-
    55 00000026 0A0D00             
    56 00000029 50726573732022414E-     	continuemsg db "Press ", 0x22, "ANY", 0x22, " key to continue.",0
    57 00000032 5922206B657920746F-
    58 0000003B 20636F6E74696E7565-
    59 00000044 2E00               
    60                                  	
    61                                      start:                ; Update the segment registers
    62 00000046 8816[0300]              	mov [DriveNumber], dl
    63 0000004A 31C0                    	xor ax,		ax		; XOR ax
    64 0000004C 8ED8                    	mov ds,		ax		; Mov AX into DS
    65 0000004E 8EC0                    	mov es, 	ax
    66 00000050 8ED0                    	mov ss,		ax
    67 00000052 8EE0                    	mov fs,		ax
    68 00000054 8EE8                    	mov gs,		ax
    69                                  
    70                                  ;Resetdrive:
    71                                  ;	mov ax,		0x00		; Select Floppy Reset BIOS Function
    72                                  ;        mov dl,		[DriveNumber]	; Select the floppy booted from
    73                                  ;        int 13h				; Reset the floppy drive
    74                                  ;        jc Resetdrive		; If there was a error, try again.
    75                                  
    76 00000056 BE[0400]                	mov si, sectormsg2
    77 00000059 E80300                  	call print2
    78 0000005C E91100                  	jmp ReadHardDisk
    79                                      print2:			; 'si' comes in with string address
    80 0000005F BB0700                  	    mov bx,7		; write to display
    81 00000062 B40E                    	    mov ah,0Eh		; screen function
    82 00000064 8A04                        prs2:    mov al,[si]         ; get next character
    83 00000066 3C00                    	    cmp al,0		; look for terminator 
    84 00000068 7405                                je finpr2		; zero byte at end of string
    85 0000006A CD10                    	    int 10h		; write character to screen.    
    86 0000006C 46                           	    inc si	     	; move to next character
    87 0000006D EBF5                    	    jmp prs2		; loop
    88 0000006F C3                          finpr2: ret
    89                                  ReadHardDisk:
    90 00000070 BE[A901]                	mov si, diskaddresspacket
    91 00000073 31C0                    	xor ax, ax
    92 00000075 B442                    	mov ah, 0x42
    93 00000077 8A16[0300]              	mov dl, [DriveNumber]
    94 0000007B CD13                    	int 0x13
    95 0000007D 72F1                    	jc ReadHardDisk
    96 0000007F 668B0E[B101]            	mov ecx, [lbaad]
    97 00000084 E86D00                  	call printnum
    98 00000087 A1[AF01]                	mov ax, [segm]
    99 0000008A 8EE8                    	mov gs, ax
   100 0000008C BB0400                  	mov bx, 4
   101 0000008F 65668B0F                	mov ecx, [gs:bx]
   102                                  dumpconts1:
   103 00000093 BE[B901]                	mov si, signature
   104 00000096 31DB                    	xor bx, bx
   105                                  dumpconts1lp:
   106 00000098 65668B0F                	mov ecx, [gs:bx]
   107 0000009C 663B0C                  	cmp ecx, [si]
   108 0000009F 7510                    	jne nodumpconts
   109 000000A1 81C30400                	add bx, 4
   110 000000A5 81C60400                	add si, 4
   111 000000A9 81FE[E501]              	cmp si, signatureend
   112 000000AD 7310                    	jae dumpconts
   113 000000AF EBE7                    	jmp dumpconts1lp
   114                                  nodumpconts:
   115 000000B1 31DB                    	xor bx, bx
   116 000000B3 66A1[B101]              	mov eax, [lbaad]
   117 000000B7 6640                    	inc eax
   118 000000B9 66A3[B101]              	mov [lbaad], eax
   119 000000BD EBB1                    	jmp ReadHardDisk
   120                                  dumpconts:
   121 000000BF 60                      	pusha
   122 000000C0 BE[1400]                	mov si, sectormsg3
   123 000000C3 E899FF                  	call print2
   124 000000C6 61                      	popa
   125 000000C7 31DB                    	xor bx, bx
   126                                  dumpconts2:
   127 000000C9 65668B0F                	mov ecx, [gs:bx]
   128 000000CD 53                      	push bx
   129 000000CE E82300                  	call printnum
   130 000000D1 5B                      	pop bx
   131 000000D2 81C30400                	add bx, 4
   132 000000D6 81FBBC02                	cmp bx, 700
   133 000000DA 76ED                    	jbe dumpconts2
   134 000000DC BE[2900]                	mov si, continuemsg
   135 000000DF E87DFF                  	call print2
   136 000000E2 31C0                    	xor ax, ax
   137 000000E4 CD16                    	int 0x16
   138 000000E6 8A0E[0300]              	mov cl, [DriveNumber]
   139 000000EA 668B16[B101]            	mov edx, [lbaad]
   140 000000EF EA2C000010                  jmp 0x1000:(signatureend - signature)
   141                                  
   142                                  printnum:
   143 000000F4 BE[9D01]                	mov si, number
   144 000000F7 BF[A601]                	mov di, numberend
   145 000000FA 31DB                    	xor bx, bx
   146 000000FC 31C0                    	xor ax, ax
   147 000000FE E81300                  	call converthex
   148                                  chkzero:
   149 00000101 8A04                    	mov al, [si]
   150 00000103 3C30                    	cmp al, '0'
   151 00000105 7505                    	jne donechkzero
   152 00000107 46                      	inc si
   153 00000108 39FE                    	cmp si, di
   154 0000010A 7200                    	jb donechkzero
   155                                  donechkzero:
   156 0000010C E850FF                  	call print2
   157 0000010F C3                      	ret
   158                                  	
   159 00000110 0000                    sibuf db 0,0
   160 00000112 0000                    dibuf db 0,0
   161                                  
   162                                  converthex: 
   163                                  clearbuffer:
   164 00000114 B030                    	mov al, '0'
   165 00000116 8936[1001]              	mov [sibuf], si
   166 0000011A 893E[1201]              	mov [dibuf], di
   167 0000011E 39FE                    clearbuf: cmp si, di
   168 00000120 7305                    	jae doneclearbuff
   169 00000122 8804                    	mov [si], al
   170 00000124 46                      	inc si
   171 00000125 EBF7                    	jmp clearbuf
   172                                  doneclearbuff:
   173 00000127 8B36[1201]              	mov si, [dibuf]
   174 0000012B 6689CA                  	mov edx, ecx
   175                                  nxtexphx:			;0x10^x
   176 0000012E 4E                      	dec si
   177 0000012F 89F7                    	mov di, si		;;location of 0x10^x
   178 00000131 6689D1                  	mov ecx, edx
   179 00000134 6681E10F000000          	and ecx, 0xF		;;just this digit
   180 0000013B E81A00                  	call cnvrtexphx		;;get this digit
   181 0000013E 89FE                    	mov si, di
   182 00000140 66C1EA04                	shr edx, 4		;;next digit
   183 00000144 6681FA00000000          	cmp edx, 0
   184 0000014B 7402                    	je donenxtephx
   185 0000014D EBDF                    	jmp nxtexphx 
   186                                  donenxtephx:
   187 0000014F 8B36[1001]              	mov si, [sibuf]
   188 00000153 8B3E[1201]              	mov di, [dibuf]
   189 00000157 C3                      	ret
   190                                  cnvrtexphx:			;;convert this number
   191 00000158 89F3                    	mov bx, si		;place to convert to must be in si, number to convert must be in cx
   192 0000015A 6681F900000000          	cmp ecx, 0
   193 00000161 742B                    	je zerohx
   194 00000163 8A04                    cnvrthx:  mov al, [si]
   195 00000165 3C39                    	cmp al, '9'
   196 00000167 741D                    	je lettershx
   197 00000169 3C46                    lttrhxdn: cmp al, 'F'
   198 0000016B 7421                    	je zerohx
   199 0000016D 8A04                    	mov al, [si]
   200 0000016F FEC0                    	inc al
   201 00000171 8804                    	mov [si], al
   202 00000173 89DE                    	mov si, bx
   203 00000175 6681E901000000          cnvrtlphx: sub ecx, 1
   204 0000017C 6681F900000000          	cmp ecx, 0
   205 00000183 75DE                    	jne cnvrthx
   206 00000185 C3                      	ret
   207                                  lettershx:
   208 00000186 B041                    	mov al, 'A'
   209 00000188 2C01                    	sub al, 1
   210 0000018A 8804                    	mov [si], al
   211 0000018C EBDB                    	jmp lttrhxdn
   212 0000018E B030                    zerohx:	mov al, '0'
   213 00000190 8804                    	mov [si], al
   214 00000192 4E                      	dec si
   215 00000193 8A04                    	mov al, [si]
   216 00000195 3C46                    	cmp al, 'F'
   217 00000197 74F5                    	je zerohx
   218 00000199 6641                    	inc ecx
   219 0000019B EBD8                    	jmp cnvrtlphx
   220                                  
   221 0000019D 00<rept>                number times 9 db 0
   222                                  numberend:
   223 000001A6 202000                  db '  ',0
   224                                  
   225                                  diskaddresspacket:
   226 000001A9 10                      len:	db 0x10 ;;size of packet
   227 000001AA 00                      	db 0
   228 000001AB 7F00                    readlen:	dw 0x7F	;;blocks to read
   229 000001AD 0000                    address:	dw 0x0	;;address 0
   230 000001AF 0010                    segm:	dw 0x1000	;;segment
   231                                  ;;start with known value for hd
   232                                  lbaad:	
   233                                  	;dd 0xF2252E5	;;use only for hd on laptop
   234 000001B1 00000000                	dd 0	;;lba address
   235 000001B5 00000000                	dd 0
   236                                  
   237                                  %include 'source/signature.asm'
   238                              <1> signature:	;used by bootloader to find SollerOS, is totally awesome
   239 000001B9 EDA55ED1            <1> dd 0xD15EA5ED	;diseased
   240 000001BD 15D000B1            <1> dd 0xB100D015	;blood is
   241 000001C1 EDFED2BA            <1> dd 0xBAD2FEED	;bad to feed
   242 000001C5 95D0112A            <1> dd 0x2A11D095	;to all dogs
   243 000001C9 52A71CA1            <1> dd 0xA11CA752	;all cats too.
   244 000001CD 0F751015            <1> dd 0x1510750F   ;is lots of
   245 000001D1 75CAADDE            <1> dd 0xDEADCA75   ;dead cats
   246 000001D5 95D0ADDE            <1> dd 0xDEADD095   ;dead dogs
   247 000001D9 18000000            <1> dd 24			;version
   248 000001DD 534F4C4C45524F53    <1> db "SOLLEROS"
   249                              <1> signatureend:
   250 000001E5 00<rept>                    	times 510-($-$$) db 0
   251 000001FE 55AA                        dw 0AA55h	;;magic byte
